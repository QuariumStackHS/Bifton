	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 10, 15, 4	sdk_version 10, 15, 4
	.globl	_sqlite3_shathree_init  ## -- Begin function sqlite3_shathree_init
	.p2align	4, 0x90
_sqlite3_shathree_init:                 ## @sqlite3_shathree_init
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -28(%rbp)
	movq	-8(%rbp), %rdi
	leaq	L_.str(%rip), %rsi
	movl	$1, %edx
	movl	$2099201, %ecx          ## imm = 0x200801
	leaq	_sha3Func(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	callq	_sqlite3_create_function
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jne	LBB0_2
## %bb.1:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-8(%rbp), %rdi
	leaq	L_.str(%rip), %rsi
	movl	$2, %edx
	movl	$2099201, %ecx          ## imm = 0x200801
	leaq	_sha3Func(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	callq	_sqlite3_create_function
	movl	%eax, -28(%rbp)
LBB0_2:
	cmpl	$0, -28(%rbp)
	jne	LBB0_4
## %bb.3:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-8(%rbp), %rdi
	leaq	L_.str.1(%rip), %rsi
	movl	$1, %edx
	movl	$524289, %ecx           ## imm = 0x80001
	leaq	_sha3QueryFunc(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	callq	_sqlite3_create_function
	movl	%eax, -28(%rbp)
LBB0_4:
	cmpl	$0, -28(%rbp)
	jne	LBB0_6
## %bb.5:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-8(%rbp), %rdi
	leaq	L_.str.1(%rip), %rsi
	movl	$2, %edx
	movl	$524289, %ecx           ## imm = 0x80001
	leaq	_sha3QueryFunc(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	callq	_sqlite3_create_function
	movl	%eax, -28(%rbp)
LBB0_6:
	movl	-28(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function sha3Func
_sha3Func:                              ## @sha3Func
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1680, %rsp             ## imm = 0x690
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -1632(%rbp)
	movl	%esi, -1636(%rbp)
	movq	%rdx, -1648(%rbp)
	movq	-1648(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_type
	movl	%eax, -1652(%rbp)
	movq	-1648(%rbp), %rcx
	movq	(%rcx), %rdi
	callq	_sqlite3_value_bytes
	movl	%eax, -1656(%rbp)
	cmpl	$1, -1636(%rbp)
	jne	LBB1_2
## %bb.1:
	movl	$256, -1660(%rbp)       ## imm = 0x100
	jmp	LBB1_8
LBB1_2:
	movq	-1648(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_int
	movl	%eax, -1660(%rbp)
	cmpl	$224, -1660(%rbp)
	je	LBB1_7
## %bb.3:
	cmpl	$256, -1660(%rbp)       ## imm = 0x100
	je	LBB1_7
## %bb.4:
	cmpl	$384, -1660(%rbp)       ## imm = 0x180
	je	LBB1_7
## %bb.5:
	cmpl	$512, -1660(%rbp)       ## imm = 0x200
	je	LBB1_7
## %bb.6:
	movq	-1632(%rbp), %rdi
	leaq	L_.str.103(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_error
	jmp	LBB1_14
LBB1_7:
	jmp	LBB1_8
LBB1_8:
	cmpl	$5, -1652(%rbp)
	jne	LBB1_10
## %bb.9:
	jmp	LBB1_14
LBB1_10:
	movl	-1660(%rbp), %esi
	leaq	-1624(%rbp), %rdi
	callq	_SHA3Init
	cmpl	$4, -1652(%rbp)
	jne	LBB1_12
## %bb.11:
	movq	-1648(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_blob
	movl	-1656(%rbp), %edx
	leaq	-1624(%rbp), %rdi
	movq	%rax, %rsi
	callq	_SHA3Update
	jmp	LBB1_13
LBB1_12:
	movq	-1648(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_text
	movl	-1656(%rbp), %edx
	leaq	-1624(%rbp), %rdi
	movq	%rax, %rsi
	callq	_SHA3Update
LBB1_13:
	movq	-1632(%rbp), %rdi
	leaq	-1624(%rbp), %rax
	movq	%rdi, -1672(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	callq	_SHA3Final
	movl	-1660(%rbp), %ecx
	movq	%rax, -1680(%rbp)       ## 8-byte Spill
	movl	%ecx, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movq	-1672(%rbp), %rdi       ## 8-byte Reload
	movq	-1680(%rbp), %rsi       ## 8-byte Reload
	movl	%eax, %edx
	movq	$-1, %rcx
	callq	_sqlite3_result_blob
LBB1_14:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	LBB1_16
## %bb.15:
	addq	$1680, %rsp             ## imm = 0x690
	popq	%rbp
	retq
LBB1_16:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function sha3QueryFunc
_sha3QueryFunc:                         ## @sha3QueryFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1872, %rsp             ## imm = 0x750
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -1656(%rbp)
	movl	%esi, -1660(%rbp)
	movq	%rdx, -1672(%rbp)
	movq	-1656(%rbp), %rdi
	callq	_sqlite3_context_db_handle
	movq	%rax, -1680(%rbp)
	movq	-1672(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -1688(%rbp)
	movq	$0, -1696(%rbp)
	cmpl	$1, -1660(%rbp)
	jne	LBB2_2
## %bb.1:
	movl	$256, -1724(%rbp)       ## imm = 0x100
	jmp	LBB2_8
LBB2_2:
	movq	-1672(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_int
	movl	%eax, -1724(%rbp)
	cmpl	$224, -1724(%rbp)
	je	LBB2_7
## %bb.3:
	cmpl	$256, -1724(%rbp)       ## imm = 0x100
	je	LBB2_7
## %bb.4:
	cmpl	$384, -1724(%rbp)       ## imm = 0x180
	je	LBB2_7
## %bb.5:
	cmpl	$512, -1724(%rbp)       ## imm = 0x200
	je	LBB2_7
## %bb.6:
	movq	-1656(%rbp), %rdi
	leaq	L_.str.103(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_error
	jmp	LBB2_41
LBB2_7:
	jmp	LBB2_8
LBB2_8:
	cmpq	$0, -1688(%rbp)
	jne	LBB2_10
## %bb.9:
	jmp	LBB2_41
LBB2_10:
	movl	-1724(%rbp), %esi
	leaq	-1624(%rbp), %rdi
	callq	_SHA3Init
LBB2_11:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB2_19 Depth 2
                                        ##       Child Loop BB2_21 Depth 3
                                        ##         Child Loop BB2_30 Depth 4
                                        ##         Child Loop BB2_25 Depth 4
	movq	-1688(%rbp), %rax
	cmpb	$0, (%rax)
	je	LBB2_40
## %bb.12:                              ##   in Loop: Header=BB2_11 Depth=1
	movq	-1680(%rbp), %rdi
	movq	-1688(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-1696(%rbp), %rcx
	leaq	-1688(%rbp), %r8
	callq	_sqlite3_prepare_v2
	movl	%eax, -1708(%rbp)
	cmpl	$0, -1708(%rbp)
	je	LBB2_14
## %bb.13:
	movq	-1688(%rbp), %rsi
	movq	-1680(%rbp), %rdi
	movq	%rsi, -1832(%rbp)       ## 8-byte Spill
	callq	_sqlite3_errmsg
	leaq	L_.str.104(%rip), %rdi
	movq	-1832(%rbp), %rsi       ## 8-byte Reload
	movq	%rax, %rdx
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -1736(%rbp)
	movq	-1696(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	-1656(%rbp), %rdi
	movq	-1736(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	movl	%eax, -1836(%rbp)       ## 4-byte Spill
	callq	_sqlite3_result_error
	movq	-1736(%rbp), %rdi
	callq	_sqlite3_free
	jmp	LBB2_41
LBB2_14:                                ##   in Loop: Header=BB2_11 Depth=1
	movq	-1696(%rbp), %rdi
	callq	_sqlite3_stmt_readonly
	cmpl	$0, %eax
	jne	LBB2_16
## %bb.15:
	movq	-1696(%rbp), %rdi
	callq	_sqlite3_sql
	leaq	L_.str.105(%rip), %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -1744(%rbp)
	movq	-1696(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	-1656(%rbp), %rdi
	movq	-1744(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	movl	%eax, -1840(%rbp)       ## 4-byte Spill
	callq	_sqlite3_result_error
	movq	-1744(%rbp), %rdi
	callq	_sqlite3_free
	jmp	LBB2_41
LBB2_16:                                ##   in Loop: Header=BB2_11 Depth=1
	movq	-1696(%rbp), %rdi
	callq	_sqlite3_column_count
	movl	%eax, -1700(%rbp)
	movq	-1696(%rbp), %rdi
	callq	_sqlite3_sql
	movq	%rax, -1720(%rbp)
	cmpq	$0, -1720(%rbp)
	je	LBB2_18
## %bb.17:                              ##   in Loop: Header=BB2_11 Depth=1
	movq	-1720(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -1712(%rbp)
	movl	-1712(%rbp), %edx
	leaq	-1624(%rbp), %rdi
	leaq	L_.str.106(%rip), %rsi
	movb	$0, %al
	callq	_hash_step_vformat
	movq	-1720(%rbp), %rsi
	movl	-1712(%rbp), %edx
	leaq	-1624(%rbp), %rdi
	callq	_SHA3Update
LBB2_18:                                ##   in Loop: Header=BB2_11 Depth=1
	jmp	LBB2_19
LBB2_19:                                ##   Parent Loop BB2_11 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB2_21 Depth 3
                                        ##         Child Loop BB2_30 Depth 4
                                        ##         Child Loop BB2_25 Depth 4
	movq	-1696(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	jne	LBB2_39
## %bb.20:                              ##   in Loop: Header=BB2_19 Depth=2
	leaq	-1624(%rbp), %rdi
	leaq	L_.str.107(%rip), %rsi
	movl	$1, %edx
	callq	_SHA3Update
	movl	$0, -1704(%rbp)
LBB2_21:                                ##   Parent Loop BB2_11 Depth=1
                                        ##     Parent Loop BB2_19 Depth=2
                                        ## =>    This Loop Header: Depth=3
                                        ##         Child Loop BB2_30 Depth 4
                                        ##         Child Loop BB2_25 Depth 4
	movl	-1704(%rbp), %eax
	cmpl	-1700(%rbp), %eax
	jge	LBB2_38
## %bb.22:                              ##   in Loop: Header=BB2_21 Depth=3
	movq	-1696(%rbp), %rdi
	movl	-1704(%rbp), %esi
	callq	_sqlite3_column_type
	decl	%eax
	movl	%eax, %ecx
	subl	$4, %eax
	movq	%rcx, -1848(%rbp)       ## 8-byte Spill
	ja	LBB2_36
## %bb.44:                              ##   in Loop: Header=BB2_21 Depth=3
	leaq	LJTI2_0(%rip), %rax
	movq	-1848(%rbp), %rcx       ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB2_23:                                ##   in Loop: Header=BB2_21 Depth=3
	leaq	-1624(%rbp), %rdi
	leaq	L_.str.108(%rip), %rsi
	movl	$1, %edx
	callq	_SHA3Update
	jmp	LBB2_36
LBB2_24:                                ##   in Loop: Header=BB2_21 Depth=3
	movq	-1696(%rbp), %rdi
	movl	-1704(%rbp), %esi
	callq	_sqlite3_column_int64
	movq	%rax, -1768(%rbp)
	movq	-1768(%rbp), %rax
	movq	%rax, -1752(%rbp)
	movl	$8, -1756(%rbp)
LBB2_25:                                ##   Parent Loop BB2_11 Depth=1
                                        ##     Parent Loop BB2_19 Depth=2
                                        ##       Parent Loop BB2_21 Depth=3
                                        ## =>      This Inner Loop Header: Depth=4
	cmpl	$1, -1756(%rbp)
	jl	LBB2_28
## %bb.26:                              ##   in Loop: Header=BB2_25 Depth=4
	movq	-1752(%rbp), %rax
	andq	$255, %rax
                                        ## kill: def $al killed $al killed $rax
	movslq	-1756(%rbp), %rcx
	movb	%al, -1633(%rbp,%rcx)
	movq	-1752(%rbp), %rcx
	shrq	$8, %rcx
	movq	%rcx, -1752(%rbp)
## %bb.27:                              ##   in Loop: Header=BB2_25 Depth=4
	movl	-1756(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -1756(%rbp)
	jmp	LBB2_25
LBB2_28:                                ##   in Loop: Header=BB2_21 Depth=3
	leaq	-1633(%rbp), %rsi
	movb	$73, -1633(%rbp)
	leaq	-1624(%rbp), %rdi
	movl	$9, %edx
	callq	_SHA3Update
	jmp	LBB2_36
LBB2_29:                                ##   in Loop: Header=BB2_21 Depth=3
	movq	-1696(%rbp), %rdi
	movl	-1704(%rbp), %esi
	callq	_sqlite3_column_double
	movsd	%xmm0, -1792(%rbp)
	movq	-1792(%rbp), %rax
	movq	%rax, -1776(%rbp)
	movl	$8, -1780(%rbp)
LBB2_30:                                ##   Parent Loop BB2_11 Depth=1
                                        ##     Parent Loop BB2_19 Depth=2
                                        ##       Parent Loop BB2_21 Depth=3
                                        ## =>      This Inner Loop Header: Depth=4
	cmpl	$1, -1780(%rbp)
	jl	LBB2_33
## %bb.31:                              ##   in Loop: Header=BB2_30 Depth=4
	movq	-1776(%rbp), %rax
	andq	$255, %rax
                                        ## kill: def $al killed $al killed $rax
	movslq	-1780(%rbp), %rcx
	movb	%al, -1642(%rbp,%rcx)
	movq	-1776(%rbp), %rcx
	shrq	$8, %rcx
	movq	%rcx, -1776(%rbp)
## %bb.32:                              ##   in Loop: Header=BB2_30 Depth=4
	movl	-1780(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -1780(%rbp)
	jmp	LBB2_30
LBB2_33:                                ##   in Loop: Header=BB2_21 Depth=3
	leaq	-1642(%rbp), %rsi
	movb	$70, -1642(%rbp)
	leaq	-1624(%rbp), %rdi
	movl	$9, %edx
	callq	_SHA3Update
	jmp	LBB2_36
LBB2_34:                                ##   in Loop: Header=BB2_21 Depth=3
	movq	-1696(%rbp), %rdi
	movl	-1704(%rbp), %esi
	callq	_sqlite3_column_bytes
	movl	%eax, -1796(%rbp)
	movq	-1696(%rbp), %rdi
	movl	-1704(%rbp), %esi
	callq	_sqlite3_column_text
	movq	%rax, -1808(%rbp)
	movl	-1796(%rbp), %edx
	leaq	-1624(%rbp), %rdi
	leaq	L_.str.109(%rip), %rsi
	movb	$0, %al
	callq	_hash_step_vformat
	movq	-1808(%rbp), %rsi
	movl	-1796(%rbp), %edx
	leaq	-1624(%rbp), %rdi
	callq	_SHA3Update
	jmp	LBB2_36
LBB2_35:                                ##   in Loop: Header=BB2_21 Depth=3
	movq	-1696(%rbp), %rdi
	movl	-1704(%rbp), %esi
	callq	_sqlite3_column_bytes
	movl	%eax, -1812(%rbp)
	movq	-1696(%rbp), %rdi
	movl	-1704(%rbp), %esi
	callq	_sqlite3_column_blob
	movq	%rax, -1824(%rbp)
	movl	-1812(%rbp), %edx
	leaq	-1624(%rbp), %rdi
	leaq	L_.str.110(%rip), %rsi
	movb	$0, %al
	callq	_hash_step_vformat
	movq	-1824(%rbp), %rsi
	movl	-1812(%rbp), %edx
	leaq	-1624(%rbp), %rdi
	callq	_SHA3Update
LBB2_36:                                ##   in Loop: Header=BB2_21 Depth=3
	jmp	LBB2_37
LBB2_37:                                ##   in Loop: Header=BB2_21 Depth=3
	movl	-1704(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1704(%rbp)
	jmp	LBB2_21
LBB2_38:                                ##   in Loop: Header=BB2_19 Depth=2
	jmp	LBB2_19
LBB2_39:                                ##   in Loop: Header=BB2_11 Depth=1
	movq	-1696(%rbp), %rdi
	callq	_sqlite3_finalize
	jmp	LBB2_11
LBB2_40:
	movq	-1656(%rbp), %rdi
	leaq	-1624(%rbp), %rax
	movq	%rdi, -1856(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	callq	_SHA3Final
	movl	-1724(%rbp), %ecx
	movq	%rax, -1864(%rbp)       ## 8-byte Spill
	movl	%ecx, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movq	-1856(%rbp), %rdi       ## 8-byte Reload
	movq	-1864(%rbp), %rsi       ## 8-byte Reload
	movl	%eax, %edx
	movq	$-1, %rcx
	callq	_sqlite3_result_blob
LBB2_41:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	LBB2_43
## %bb.42:
	addq	$1872, %rsp             ## imm = 0x750
	popq	%rbp
	retq
LBB2_43:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L2_0_set_24, LBB2_24-LJTI2_0
.set L2_0_set_29, LBB2_29-LJTI2_0
.set L2_0_set_34, LBB2_34-LJTI2_0
.set L2_0_set_35, LBB2_35-LJTI2_0
.set L2_0_set_23, LBB2_23-LJTI2_0
LJTI2_0:
	.long	L2_0_set_24
	.long	L2_0_set_29
	.long	L2_0_set_34
	.long	L2_0_set_35
	.long	L2_0_set_23
	.end_data_region
                                        ## -- End function
	.globl	_sqlite3_fileio_init    ## -- Begin function sqlite3_fileio_init
	.p2align	4, 0x90
_sqlite3_fileio_init:                   ## @sqlite3_fileio_init
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -28(%rbp)
	movq	-8(%rbp), %rdi
	leaq	L_.str.2(%rip), %rsi
	movl	$1, %edx
	movl	$524289, %ecx           ## imm = 0x80001
	leaq	_readfileFunc(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	callq	_sqlite3_create_function
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jne	LBB3_2
## %bb.1:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-8(%rbp), %rdi
	leaq	L_.str.3(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	movl	$524289, %ecx           ## imm = 0x80001
	leaq	_writefileFunc(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	callq	_sqlite3_create_function
	movl	%eax, -28(%rbp)
LBB3_2:
	cmpl	$0, -28(%rbp)
	jne	LBB3_4
## %bb.3:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-8(%rbp), %rdi
	leaq	L_.str.4(%rip), %rsi
	movl	$1, %eax
	movl	%eax, %edx
	movl	%eax, %ecx
	leaq	_lsModeFunc(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	callq	_sqlite3_create_function
	movl	%eax, -28(%rbp)
LBB3_4:
	cmpl	$0, -28(%rbp)
	jne	LBB3_6
## %bb.5:
	movq	-8(%rbp), %rdi
	callq	_fsdirRegister
	movl	%eax, -28(%rbp)
LBB3_6:
	movl	-28(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function readfileFunc
_readfileFunc:                          ## @readfileFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	LBB4_2
## %bb.1:
	jmp	LBB4_3
LBB4_2:
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	_readFileContents
LBB4_3:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function writefileFunc
_writefileFunc:                         ## @writefileFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movw	$0, -34(%rbp)
	movq	$-1, -48(%rbp)
	cmpl	$2, -12(%rbp)
	jl	LBB5_2
## %bb.1:
	cmpl	$4, -12(%rbp)
	jle	LBB5_3
LBB5_2:
	movq	-8(%rbp), %rdi
	leaq	L_.str.111(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_error
	jmp	LBB5_23
LBB5_3:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	LBB5_5
## %bb.4:
	jmp	LBB5_23
LBB5_5:
	cmpl	$3, -12(%rbp)
	jl	LBB5_7
## %bb.6:
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	callq	_sqlite3_value_int
                                        ## kill: def $ax killed $ax killed $eax
	movw	%ax, -34(%rbp)
LBB5_7:
	cmpl	$4, -12(%rbp)
	jne	LBB5_9
## %bb.8:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdi
	callq	_sqlite3_value_int64
	movq	%rax, -48(%rbp)
LBB5_9:
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movw	-34(%rbp), %cx
	movq	-48(%rbp), %r8
	movzwl	%cx, %ecx
	callq	_writeFile
	movl	%eax, -40(%rbp)
	cmpl	$1, -40(%rbp)
	jne	LBB5_14
## %bb.10:
	callq	___error
	cmpl	$2, (%rax)
	jne	LBB5_14
## %bb.11:
	movq	-32(%rbp), %rdi
	callq	_makeDirectory
	cmpl	$0, %eax
	jne	LBB5_13
## %bb.12:
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movw	-34(%rbp), %cx
	movq	-48(%rbp), %r8
	movzwl	%cx, %ecx
	callq	_writeFile
	movl	%eax, -40(%rbp)
LBB5_13:
	jmp	LBB5_14
LBB5_14:
	cmpl	$2, -12(%rbp)
	jle	LBB5_23
## %bb.15:
	cmpl	$0, -40(%rbp)
	je	LBB5_23
## %bb.16:
	movzwl	-34(%rbp), %eax
	andl	$61440, %eax            ## imm = 0xF000
	cmpl	$40960, %eax            ## imm = 0xA000
	jne	LBB5_18
## %bb.17:
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rdx
	leaq	L_.str.112(%rip), %rsi
	movb	$0, %al
	callq	_ctxErrorMsg
	jmp	LBB5_22
LBB5_18:
	movzwl	-34(%rbp), %eax
	andl	$61440, %eax            ## imm = 0xF000
	cmpl	$16384, %eax            ## imm = 0x4000
	jne	LBB5_20
## %bb.19:
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rdx
	leaq	L_.str.113(%rip), %rsi
	movb	$0, %al
	callq	_ctxErrorMsg
	jmp	LBB5_21
LBB5_20:
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rdx
	leaq	L_.str.114(%rip), %rsi
	movb	$0, %al
	callq	_ctxErrorMsg
LBB5_21:
	jmp	LBB5_22
LBB5_22:
	jmp	LBB5_23
LBB5_23:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function lsModeFunc
_lsModeFunc:                            ## @lsModeFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_int
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	andl	$61440, %eax            ## imm = 0xF000
	cmpl	$40960, %eax            ## imm = 0xA000
	jne	LBB6_2
## %bb.1:
	movb	$108, -32(%rbp)
	jmp	LBB6_9
LBB6_2:
	movl	-64(%rbp), %eax
	andl	$61440, %eax            ## imm = 0xF000
	cmpl	$32768, %eax            ## imm = 0x8000
	jne	LBB6_4
## %bb.3:
	movb	$45, -32(%rbp)
	jmp	LBB6_8
LBB6_4:
	movl	-64(%rbp), %eax
	andl	$61440, %eax            ## imm = 0xF000
	cmpl	$16384, %eax            ## imm = 0x4000
	jne	LBB6_6
## %bb.5:
	movb	$100, -32(%rbp)
	jmp	LBB6_7
LBB6_6:
	movb	$63, -32(%rbp)
LBB6_7:
	jmp	LBB6_8
LBB6_8:
	jmp	LBB6_9
LBB6_9:
	movl	$0, -60(%rbp)
LBB6_10:                                ## =>This Inner Loop Header: Depth=1
	cmpl	$3, -60(%rbp)
	jge	LBB6_13
## %bb.11:                              ##   in Loop: Header=BB6_10 Depth=1
	movl	-64(%rbp), %eax
	movl	$2, %ecx
	subl	-60(%rbp), %ecx
	imull	$3, %ecx, %ecx
                                        ## kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
	imull	$3, -60(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	leaq	-32(%rbp), %rsi
	addq	%rdx, %rsi
	movq	%rsi, -80(%rbp)
	movl	-68(%rbp), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	movl	$114, %eax
	movl	$45, %edi
	movl	%edi, %r8d
	cmovnel	%eax, %r8d
                                        ## kill: def $r8b killed $r8b killed $r8d
	movq	-80(%rbp), %rdx
	movb	%r8b, (%rdx)
	movl	-68(%rbp), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	movl	$119, %eax
	movl	%edi, %r9d
	cmovnel	%eax, %r9d
                                        ## kill: def $r9b killed $r9b killed $r9d
	movq	-80(%rbp), %rdx
	movb	%r9b, 1(%rdx)
	movl	-68(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$120, %eax
	cmovnel	%eax, %edi
                                        ## kill: def $dil killed $dil killed $edi
	movq	-80(%rbp), %rdx
	movb	%dil, 2(%rdx)
## %bb.12:                              ##   in Loop: Header=BB6_10 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	LBB6_10
LBB6_13:
	leaq	-32(%rbp), %rsi
	movb	$0, -22(%rbp)
	movq	-40(%rbp), %rdi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	movq	$-1, %rcx
	callq	_sqlite3_result_text
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	LBB6_15
## %bb.14:
	addq	$80, %rsp
	popq	%rbp
	retq
LBB6_15:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function fsdirRegister
_fsdirRegister:                         ## @fsdirRegister
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	leaq	L_.str.116(%rip), %rsi
	leaq	_fsdirRegister.fsdirModule(%rip), %rdx
	callq	_sqlite3_create_module
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3CompletionVtabInit ## -- Begin function sqlite3CompletionVtabInit
	.p2align	4, 0x90
_sqlite3CompletionVtabInit:             ## @sqlite3CompletionVtabInit
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rdi, -8(%rbp)
	movl	$0, -12(%rbp)
	movq	-8(%rbp), %rdi
	leaq	L_.str.5(%rip), %rsi
	leaq	_completionModule(%rip), %rdx
	callq	_sqlite3_create_module
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3_completion_init ## -- Begin function sqlite3_completion_init
	.p2align	4, 0x90
_sqlite3_completion_init:               ## @sqlite3_completion_init
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -28(%rbp)
	movq	-8(%rbp), %rdi
	callq	_sqlite3CompletionVtabInit
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3_appendvfs_init ## -- Begin function sqlite3_appendvfs_init
	.p2align	4, 0x90
_sqlite3_appendvfs_init:                ## @sqlite3_appendvfs_init
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	%rcx, %rdi
	callq	_sqlite3_vfs_find
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	jne	LBB10_2
## %bb.1:
	movl	$1, -4(%rbp)
	jmp	LBB10_5
LBB10_2:
	xorl	%esi, %esi
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, _apnd_vfs(%rip)
	movq	-48(%rbp), %rax
	movq	%rax, _apnd_vfs+32(%rip)
	movq	-48(%rbp), %rax
	movslq	4(%rax), %rax
	addq	$24, %rax
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, _apnd_vfs+4(%rip)
	leaq	_apnd_vfs(%rip), %rdi
	callq	_sqlite3_vfs_register
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jne	LBB10_4
## %bb.3:
	movl	$256, -36(%rbp)         ## imm = 0x100
LBB10_4:
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB10_5:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3MemTraceActivate ## -- Begin function sqlite3MemTraceActivate
	.p2align	4, 0x90
_sqlite3MemTraceActivate:               ## @sqlite3MemTraceActivate
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	$0, -12(%rbp)
	cmpq	$0, _memtraceBase(%rip)
	jne	LBB11_4
## %bb.1:
	movl	$5, %edi
	leaq	_memtraceBase(%rip), %rsi
	movb	$0, %al
	callq	_sqlite3_config
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jne	LBB11_3
## %bb.2:
	movl	$4, %edi
	leaq	_ersaztMethods(%rip), %rsi
	movb	$0, %al
	callq	_sqlite3_config
	movl	%eax, -12(%rbp)
LBB11_3:
	jmp	LBB11_4
LBB11_4:
	movq	-8(%rbp), %rax
	movq	%rax, _memtraceOut(%rip)
	movl	-12(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3MemTraceDeactivate ## -- Begin function sqlite3MemTraceDeactivate
	.p2align	4, 0x90
_sqlite3MemTraceDeactivate:             ## @sqlite3MemTraceDeactivate
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
	cmpq	$0, _memtraceBase(%rip)
	je	LBB12_4
## %bb.1:
	movl	$4, %edi
	leaq	_memtraceBase(%rip), %rsi
	movb	$0, %al
	callq	_sqlite3_config
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	LBB12_3
## %bb.2:
	leaq	_memtraceBase(%rip), %rax
	xorl	%esi, %esi
	movq	%rax, %rdi
	movl	$64, %edx
	callq	_memset
LBB12_3:
	jmp	LBB12_4
LBB12_4:
	movq	$0, _memtraceOut(%rip)
	movl	-4(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3_uint_init      ## -- Begin function sqlite3_uint_init
	.p2align	4, 0x90
_sqlite3_uint_init:                     ## @sqlite3_uint_init
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	leaq	L_.str.6(%rip), %rsi
	movl	$1, %edx
	leaq	_uintCollFunc(%rip), %r8
	callq	_sqlite3_create_collation
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function uintCollFunc
_uintCollFunc:                          ## @uintCollFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movq	%r8, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -72(%rbp)
LBB14_1:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB14_8 Depth 2
                                        ##     Child Loop BB14_13 Depth 2
                                        ##     Child Loop BB14_18 Depth 2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-68(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	movb	%al, -81(%rbp)          ## 1-byte Spill
	jge	LBB14_3
## %bb.2:                               ##   in Loop: Header=BB14_1 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-36(%rbp), %eax
	setl	%cl
	movb	%cl, -81(%rbp)          ## 1-byte Spill
LBB14_3:                                ##   in Loop: Header=BB14_1 Depth=1
	movb	-81(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB14_4
	jmp	LBB14_40
LBB14_4:                                ##   in Loop: Header=BB14_1 Depth=1
	movq	-56(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	movq	-64(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movzbl	(%rax,%rcx), %esi
	subl	%esi, %edx
	movl	%edx, -76(%rbp)
	movq	-56(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %edi
	callq	_isdigit
	cmpl	$0, %eax
	je	LBB14_35
## %bb.5:                               ##   in Loop: Header=BB14_1 Depth=1
	movq	-64(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movzbl	(%rax,%rcx), %edi
	callq	_isdigit
	cmpl	$0, %eax
	jne	LBB14_7
## %bb.6:
	movl	-76(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	LBB14_41
LBB14_7:                                ##   in Loop: Header=BB14_1 Depth=1
	jmp	LBB14_8
LBB14_8:                                ##   Parent Loop BB14_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-68(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	movb	%al, -82(%rbp)          ## 1-byte Spill
	jge	LBB14_10
## %bb.9:                               ##   in Loop: Header=BB14_8 Depth=2
	movq	-56(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$48, %edx
	sete	%sil
	movb	%sil, -82(%rbp)         ## 1-byte Spill
LBB14_10:                               ##   in Loop: Header=BB14_8 Depth=2
	movb	-82(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB14_11
	jmp	LBB14_12
LBB14_11:                               ##   in Loop: Header=BB14_8 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	LBB14_8
LBB14_12:                               ##   in Loop: Header=BB14_1 Depth=1
	jmp	LBB14_13
LBB14_13:                               ##   Parent Loop BB14_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-72(%rbp), %ecx
	cmpl	-36(%rbp), %ecx
	movb	%al, -83(%rbp)          ## 1-byte Spill
	jge	LBB14_15
## %bb.14:                              ##   in Loop: Header=BB14_13 Depth=2
	movq	-64(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$48, %edx
	sete	%sil
	movb	%sil, -83(%rbp)         ## 1-byte Spill
LBB14_15:                               ##   in Loop: Header=BB14_13 Depth=2
	movb	-83(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB14_16
	jmp	LBB14_17
LBB14_16:                               ##   in Loop: Header=BB14_13 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	LBB14_13
LBB14_17:                               ##   in Loop: Header=BB14_1 Depth=1
	movl	$0, -80(%rbp)
LBB14_18:                               ##   Parent Loop BB14_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-68(%rbp), %ecx
	addl	-80(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	movb	%al, -84(%rbp)          ## 1-byte Spill
	jge	LBB14_22
## %bb.19:                              ##   in Loop: Header=BB14_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-68(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rdx
	movzbl	(%rax,%rdx), %edi
	callq	_isdigit
	xorl	%ecx, %ecx
                                        ## kill: def $cl killed $cl killed $ecx
	cmpl	$0, %eax
	movb	%cl, -84(%rbp)          ## 1-byte Spill
	je	LBB14_22
## %bb.20:                              ##   in Loop: Header=BB14_18 Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-72(%rbp), %ecx
	addl	-80(%rbp), %ecx
	cmpl	-36(%rbp), %ecx
	movb	%al, -84(%rbp)          ## 1-byte Spill
	jge	LBB14_22
## %bb.21:                              ##   in Loop: Header=BB14_18 Depth=2
	movq	-64(%rbp), %rax
	movl	-72(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rdx
	movzbl	(%rax,%rdx), %edi
	callq	_isdigit
	cmpl	$0, %eax
	setne	%sil
	movb	%sil, -84(%rbp)         ## 1-byte Spill
LBB14_22:                               ##   in Loop: Header=BB14_18 Depth=2
	movb	-84(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB14_23
	jmp	LBB14_24
LBB14_23:                               ##   in Loop: Header=BB14_18 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	LBB14_18
LBB14_24:                               ##   in Loop: Header=BB14_1 Depth=1
	movl	-68(%rbp), %eax
	addl	-80(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	LBB14_27
## %bb.25:                              ##   in Loop: Header=BB14_1 Depth=1
	movq	-56(%rbp), %rax
	movl	-68(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rdx
	movzbl	(%rax,%rdx), %edi
	callq	_isdigit
	cmpl	$0, %eax
	je	LBB14_27
## %bb.26:
	movl	$1, -4(%rbp)
	jmp	LBB14_41
LBB14_27:                               ##   in Loop: Header=BB14_1 Depth=1
	movl	-72(%rbp), %eax
	addl	-80(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	LBB14_30
## %bb.28:                              ##   in Loop: Header=BB14_1 Depth=1
	movq	-64(%rbp), %rax
	movl	-72(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rdx
	movzbl	(%rax,%rdx), %edi
	callq	_isdigit
	cmpl	$0, %eax
	je	LBB14_30
## %bb.29:
	movl	$-1, -4(%rbp)
	jmp	LBB14_41
LBB14_30:                               ##   in Loop: Header=BB14_1 Depth=1
	movq	-56(%rbp), %rax
	movslq	-68(%rbp), %rcx
	addq	%rcx, %rax
	movq	-64(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	addq	%rdx, %rcx
	movslq	-80(%rbp), %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_memcmp
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	je	LBB14_32
## %bb.31:
	movl	-76(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	LBB14_41
LBB14_32:                               ##   in Loop: Header=BB14_1 Depth=1
	movl	-80(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
## %bb.33:                              ##   in Loop: Header=BB14_1 Depth=1
	jmp	LBB14_34
LBB14_34:                               ##   in Loop: Header=BB14_1 Depth=1
	jmp	LBB14_39
LBB14_35:                               ##   in Loop: Header=BB14_1 Depth=1
	cmpl	$0, -76(%rbp)
	je	LBB14_37
## %bb.36:
	movl	-76(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	LBB14_41
LBB14_37:                               ##   in Loop: Header=BB14_1 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
## %bb.38:                              ##   in Loop: Header=BB14_1 Depth=1
	jmp	LBB14_39
LBB14_39:                               ##   in Loop: Header=BB14_1 Depth=1
	jmp	LBB14_1
LBB14_40:
	movl	-20(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	-72(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -4(%rbp)
LBB14_41:
	movl	-4(%rbp), %eax
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3_decimal_init   ## -- Begin function sqlite3_decimal_init
	.p2align	4, 0x90
_sqlite3_decimal_init:                  ## @sqlite3_decimal_init
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
LBB15_1:                                ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-32(%rbp), %ecx
	movl	%ecx, %edx
	cmpq	$5, %rdx
	movb	%al, -33(%rbp)          ## 1-byte Spill
	jae	LBB15_3
## %bb.2:                               ##   in Loop: Header=BB15_1 Depth=1
	cmpl	$0, -28(%rbp)
	sete	%al
	movb	%al, -33(%rbp)          ## 1-byte Spill
LBB15_3:                                ##   in Loop: Header=BB15_1 Depth=1
	movb	-33(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB15_4
	jmp	LBB15_6
LBB15_4:                                ##   in Loop: Header=BB15_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-8(%rbp), %rdi
	movl	-32(%rbp), %eax
	movl	%eax, %ecx
	imulq	$24, %rcx, %rcx
	leaq	_sqlite3_decimal_init.aFunc(%rip), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movq	(%rsi), %rsi
	movl	-32(%rbp), %eax
	movl	%eax, %ecx
	imulq	$24, %rcx, %rcx
	movq	%rdx, %r9
	addq	%rcx, %r9
	movl	8(%r9), %eax
	movl	-32(%rbp), %r10d
	movl	%r10d, %ecx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movq	16(%rdx), %r9
	movl	%eax, %edx
	movl	$2099201, %ecx          ## imm = 0x200801
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	callq	_sqlite3_create_function
	movl	%eax, -28(%rbp)
## %bb.5:                               ##   in Loop: Header=BB15_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	LBB15_1
LBB15_6:
	cmpl	$0, -28(%rbp)
	jne	LBB15_8
## %bb.7:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-8(%rbp), %rdi
	leaq	L_.str.12(%rip), %rsi
	movl	$1, %edx
	movl	$2099201, %ecx          ## imm = 0x200801
	leaq	_decimalSumStep(%rip), %r9
	leaq	_decimalSumFinalize(%rip), %r10
	movq	%r10, (%rsp)
	leaq	_decimalSumValue(%rip), %r10
	movq	%r10, 8(%rsp)
	leaq	_decimalSumInverse(%rip), %r10
	movq	%r10, 16(%rsp)
	movq	$0, 24(%rsp)
	callq	_sqlite3_create_window_function
	movl	%eax, -28(%rbp)
LBB15_8:
	cmpl	$0, -28(%rbp)
	jne	LBB15_10
## %bb.9:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdi
	leaq	L_.str.7(%rip), %rsi
	movl	$1, %edx
	leaq	_decimalCollFunc(%rip), %r8
	callq	_sqlite3_create_collation
	movl	%eax, -28(%rbp)
LBB15_10:
	movl	-28(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimalFunc
_decimalFunc:                           ## @decimalFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	xorl	%ecx, %ecx
                                        ## kill: def $rcx killed $ecx
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rdx
	movq	(%rdx), %rsi
	movl	%eax, %edx
	callq	_decimal_new
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	_decimal_result
	movq	-32(%rbp), %rdi
	callq	_decimal_free
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimalCmpFunc
_decimalCmpFunc:                        ## @decimalCmpFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorl	%eax, %eax
	xorl	%ecx, %ecx
                                        ## kill: def $rcx killed $ecx
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rdx
	movq	(%rdx), %rsi
	movl	%eax, %edx
	callq	_decimal_new
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	LBB17_2
## %bb.1:
	movq	-32(%rbp), %rax
	movsbl	2(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB17_3
LBB17_2:
	jmp	LBB17_12
LBB17_3:
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	8(%rsi), %rsi
	callq	_decimal_new
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	LBB17_5
## %bb.4:
	movq	-40(%rbp), %rax
	movsbl	2(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB17_6
LBB17_5:
	jmp	LBB17_12
LBB17_6:
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_decimal_cmp
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	jge	LBB17_8
## %bb.7:
	movl	$-1, -44(%rbp)
	jmp	LBB17_11
LBB17_8:
	cmpl	$0, -44(%rbp)
	jle	LBB17_10
## %bb.9:
	movl	$1, -44(%rbp)
LBB17_10:
	jmp	LBB17_11
LBB17_11:
	movq	-8(%rbp), %rdi
	movl	-44(%rbp), %esi
	callq	_sqlite3_result_int
LBB17_12:
	movq	-32(%rbp), %rdi
	callq	_decimal_free
	movq	-40(%rbp), %rdi
	callq	_decimal_free
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimalAddFunc
_decimalAddFunc:                        ## @decimalAddFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorl	%eax, %eax
	xorl	%ecx, %ecx
                                        ## kill: def $rcx killed $ecx
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rdx
	movq	(%rdx), %rsi
	movl	%eax, %edx
	callq	_decimal_new
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movl	%r8d, %ecx
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rsi
	callq	_decimal_new
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_decimal_add
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	_decimal_result
	movq	-32(%rbp), %rdi
	callq	_decimal_free
	movq	-40(%rbp), %rdi
	callq	_decimal_free
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimalSubFunc
_decimalSubFunc:                        ## @decimalSubFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorl	%eax, %eax
	xorl	%ecx, %ecx
                                        ## kill: def $rcx killed $ecx
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rdx
	movq	(%rdx), %rsi
	movl	%eax, %edx
	callq	_decimal_new
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movl	%r8d, %ecx
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rsi
	callq	_decimal_new
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	LBB19_2
## %bb.1:
	movq	-40(%rbp), %rax
	cmpb	$0, (%rax)
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %edx
                                        ## kill: def $dl killed $dl killed $edx
	movq	-40(%rbp), %rax
	movb	%dl, (%rax)
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_decimal_add
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	_decimal_result
LBB19_2:
	movq	-32(%rbp), %rdi
	callq	_decimal_free
	movq	-40(%rbp), %rdi
	callq	_decimal_free
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimalMulFunc
_decimalMulFunc:                        ## @decimalMulFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%eax, %eax
	xorl	%ecx, %ecx
                                        ## kill: def $rcx killed $ecx
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rdx
	movq	(%rdx), %rsi
	movl	%eax, %edx
	callq	_decimal_new
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	movl	%r8d, %ecx
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rsi
	callq	_decimal_new
	movq	%rax, -40(%rbp)
	movq	$0, -48(%rbp)
	cmpq	$0, -32(%rbp)
	je	LBB20_6
## %bb.1:
	movq	-32(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB20_6
## %bb.2:
	movq	-32(%rbp), %rax
	movsbl	2(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB20_6
## %bb.3:
	cmpq	$0, -40(%rbp)
	je	LBB20_6
## %bb.4:
	movq	-40(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB20_6
## %bb.5:
	movq	-40(%rbp), %rax
	movsbl	2(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB20_7
LBB20_6:
	jmp	LBB20_25
LBB20_7:
	movq	-32(%rbp), %rax
	movl	4(%rax), %ecx
	movq	-40(%rbp), %rax
	addl	4(%rax), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	jne	LBB20_9
## %bb.8:
	movq	-8(%rbp), %rdi
	callq	_sqlite3_result_error_nomem
	jmp	LBB20_25
LBB20_9:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-48(%rbp), %rdi
	movq	-32(%rbp), %rax
	movl	4(%rax), %edx
	movq	-40(%rbp), %rax
	addl	4(%rax), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	callq	___memset_chk
	movq	-32(%rbp), %rcx
	movl	8(%rcx), %esi
	movl	%esi, -64(%rbp)
	movq	-40(%rbp), %rcx
	movl	8(%rcx), %esi
	cmpl	-64(%rbp), %esi
	jge	LBB20_11
## %bb.10:
	movq	-40(%rbp), %rax
	movl	8(%rax), %ecx
	movl	%ecx, -64(%rbp)
LBB20_11:
	movq	-32(%rbp), %rax
	movl	4(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -52(%rbp)
LBB20_12:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB20_14 Depth 2
	cmpl	$0, -52(%rbp)
	jl	LBB20_19
## %bb.13:                              ##   in Loop: Header=BB20_12 Depth=1
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-52(%rbp), %rcx
	movb	(%rax,%rcx), %dl
	movb	%dl, -65(%rbp)
	movl	$0, -72(%rbp)
	movq	-40(%rbp), %rax
	movl	4(%rax), %esi
	subl	$1, %esi
	movl	%esi, -56(%rbp)
	movl	-52(%rbp), %esi
	addl	-56(%rbp), %esi
	addl	$3, %esi
	movl	%esi, -60(%rbp)
LBB20_14:                               ##   Parent Loop BB20_12 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpl	$0, -56(%rbp)
	jl	LBB20_17
## %bb.15:                              ##   in Loop: Header=BB20_14 Depth=2
	movq	-48(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	movsbl	-65(%rbp), %esi
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-56(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	imull	%edi, %esi
	addl	%esi, %edx
	addl	-72(%rbp), %edx
	movl	%edx, -76(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$10, %esi
	idivl	%esi
                                        ## kill: def $dl killed $dl killed $edx
	movq	-48(%rbp), %rcx
	movslq	-60(%rbp), %r8
	movb	%dl, (%rcx,%r8)
	movl	-76(%rbp), %edi
	movl	%edi, %eax
	cltd
	idivl	%esi
	movl	%eax, -72(%rbp)
## %bb.16:                              ##   in Loop: Header=BB20_14 Depth=2
	movl	-56(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -56(%rbp)
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	LBB20_14
LBB20_17:                               ##   in Loop: Header=BB20_12 Depth=1
	movq	-48(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	addl	-72(%rbp), %edx
	movl	%edx, -76(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$10, %esi
	idivl	%esi
                                        ## kill: def $dl killed $dl killed $edx
	movq	-48(%rbp), %rcx
	movslq	-60(%rbp), %rdi
	movb	%dl, (%rcx,%rdi)
	movl	-76(%rbp), %r8d
	movl	%r8d, %eax
	cltd
	idivl	%esi
	movq	-48(%rbp), %rcx
	movl	-60(%rbp), %esi
	subl	$1, %esi
	movslq	%esi, %rdi
	movsbl	(%rcx,%rdi), %esi
	addl	%eax, %esi
                                        ## kill: def $sil killed $sil killed $esi
	movb	%sil, (%rcx,%rdi)
## %bb.18:                              ##   in Loop: Header=BB20_12 Depth=1
	movl	-52(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -52(%rbp)
	jmp	LBB20_12
LBB20_19:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rdi
	callq	_sqlite3_free
	movq	-48(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	$0, -48(%rbp)
	movq	-40(%rbp), %rax
	movl	4(%rax), %edx
	addl	$2, %edx
	movq	-32(%rbp), %rax
	addl	4(%rax), %edx
	movl	%edx, 4(%rax)
	movq	-40(%rbp), %rax
	movl	8(%rax), %edx
	movq	-32(%rbp), %rax
	addl	8(%rax), %edx
	movl	%edx, 8(%rax)
	movq	-40(%rbp), %rax
	movsbl	(%rax), %edx
	movq	-32(%rbp), %rax
	movsbl	(%rax), %esi
	xorl	%edx, %esi
                                        ## kill: def $sil killed $sil killed $esi
	movb	%sil, (%rax)
LBB20_20:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-32(%rbp), %rcx
	movl	8(%rcx), %edx
	cmpl	-64(%rbp), %edx
	movb	%al, -77(%rbp)          ## 1-byte Spill
	jle	LBB20_22
## %bb.21:                              ##   in Loop: Header=BB20_20 Depth=1
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movq	-32(%rbp), %rcx
	movl	4(%rcx), %edx
	subl	$1, %edx
	movslq	%edx, %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$0, %edx
	sete	%sil
	movb	%sil, -77(%rbp)         ## 1-byte Spill
LBB20_22:                               ##   in Loop: Header=BB20_20 Depth=1
	movb	-77(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB20_23
	jmp	LBB20_24
LBB20_23:                               ##   in Loop: Header=BB20_20 Depth=1
	movq	-32(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	-32(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	LBB20_20
LBB20_24:
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	_decimal_result
LBB20_25:
	movq	-48(%rbp), %rdi
	callq	_sqlite3_free
	movq	-32(%rbp), %rdi
	callq	_decimal_free
	movq	-40(%rbp), %rdi
	callq	_decimal_free
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimalSumStep
_decimalSumStep:                        ## @decimalSumStep
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movl	$24, %esi
	callq	_sqlite3_aggregate_context
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	LBB21_2
## %bb.1:
	jmp	LBB21_10
LBB21_2:
	movq	-32(%rbp), %rax
	cmpb	$0, 3(%rax)
	jne	LBB21_7
## %bb.3:
	movq	-32(%rbp), %rax
	movb	$1, 3(%rax)
	movl	$2, %edi
	callq	_sqlite3_malloc
	movq	-32(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-32(%rbp), %rax
	cmpq	$0, 16(%rax)
	jne	LBB21_5
## %bb.4:
	movq	-32(%rbp), %rax
	movb	$1, 1(%rax)
	jmp	LBB21_6
LBB21_5:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movb	$0, (%rax)
LBB21_6:
	movq	-32(%rbp), %rax
	movl	$1, 4(%rax)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
LBB21_7:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_type
	cmpl	$5, %eax
	jne	LBB21_9
## %bb.8:
	jmp	LBB21_10
LBB21_9:
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	(%rsi), %rsi
	callq	_decimal_new
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_decimal_add
	movq	-40(%rbp), %rdi
	callq	_decimal_free
LBB21_10:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimalSumFinalize
_decimalSumFinalize:                    ## @decimalSumFinalize
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%esi, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_sqlite3_aggregate_context
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	LBB22_2
## %bb.1:
	jmp	LBB22_3
LBB22_2:
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_decimal_result
	movq	-16(%rbp), %rdi
	callq	_decimal_clear
LBB22_3:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimalSumValue
_decimalSumValue:                       ## @decimalSumValue
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%esi, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_sqlite3_aggregate_context
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	LBB23_2
## %bb.1:
	jmp	LBB23_3
LBB23_2:
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_decimal_result
LBB23_3:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimalSumInverse
_decimalSumInverse:                     ## @decimalSumInverse
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movl	$24, %esi
	callq	_sqlite3_aggregate_context
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	LBB24_2
## %bb.1:
	jmp	LBB24_7
LBB24_2:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_type
	cmpl	$5, %eax
	jne	LBB24_4
## %bb.3:
	jmp	LBB24_7
LBB24_4:
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	(%rsi), %rsi
	callq	_decimal_new
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	LBB24_6
## %bb.5:
	movq	-40(%rbp), %rax
	cmpb	$0, (%rax)
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %edx
                                        ## kill: def $dl killed $dl killed $edx
	movq	-40(%rbp), %rax
	movb	%dl, (%rax)
LBB24_6:
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_decimal_add
	movq	-40(%rbp), %rdi
	callq	_decimal_free
LBB24_7:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimalCollFunc
_decimalCollFunc:                       ## @decimalCollFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%eax, %eax
	movl	%eax, %r9d
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	%r8, -40(%rbp)
	movq	-24(%rbp), %rdx
	movq	%rdx, -48(%rbp)
	movq	-40(%rbp), %rdx
	movq	%rdx, -56(%rbp)
	movl	-12(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	%r9, %rdi
	movq	%r9, %rsi
	callq	_decimal_new
	xorl	%edx, %edx
	movl	%edx, %ecx
	movq	%rax, -64(%rbp)
	movl	-28(%rbp), %edx
	movq	-56(%rbp), %rax
	movq	%rcx, %rdi
	movq	%rcx, %rsi
	movq	%rax, %rcx
	callq	_decimal_new
	movq	%rax, -72(%rbp)
	cmpq	$0, -64(%rbp)
	je	LBB25_2
## %bb.1:
	cmpq	$0, -72(%rbp)
	jne	LBB25_3
LBB25_2:
	movl	$0, -76(%rbp)
	jmp	LBB25_4
LBB25_3:
	movq	-64(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	_decimal_cmp
	movl	%eax, -76(%rbp)
LBB25_4:
	movq	-64(%rbp), %rdi
	callq	_decimal_free
	movq	-72(%rbp), %rdi
	callq	_decimal_free
	movl	-76(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3_ieee_init      ## -- Begin function sqlite3_ieee_init
	.p2align	4, 0x90
_sqlite3_ieee_init:                     ## @sqlite3_ieee_init
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -28(%rbp)
LBB26_1:                                ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-28(%rbp), %ecx
	movl	%ecx, %edx
	cmpq	$6, %rdx
	movb	%al, -33(%rbp)          ## 1-byte Spill
	jae	LBB26_3
## %bb.2:                               ##   in Loop: Header=BB26_1 Depth=1
	cmpl	$0, -32(%rbp)
	sete	%al
	movb	%al, -33(%rbp)          ## 1-byte Spill
LBB26_3:                                ##   in Loop: Header=BB26_1 Depth=1
	movb	-33(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB26_4
	jmp	LBB26_6
LBB26_4:                                ##   in Loop: Header=BB26_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %eax
	movl	%eax, %edx
	imulq	$24, %rdx, %rdx
	leaq	_sqlite3_ieee_init.aFunc(%rip), %rsi
	movq	%rsi, %r8
	addq	%rdx, %r8
	movq	(%r8), %rdx
	movl	-28(%rbp), %eax
	movl	%eax, %r8d
	imulq	$24, %r8, %r8
	movq	%rsi, %r9
	addq	%r8, %r9
	movl	8(%r9), %eax
	movl	-28(%rbp), %r10d
	movl	%r10d, %r8d
	imulq	$24, %r8, %r8
	movq	%rsi, %r9
	addq	%r8, %r9
	addq	$12, %r9
	movl	-28(%rbp), %r10d
	movl	%r10d, %r8d
	imulq	$24, %r8, %r8
	addq	%r8, %rsi
	movq	16(%rsi), %rsi
	movq	%rsi, -48(%rbp)         ## 8-byte Spill
	movq	%rdx, %rsi
	movl	%eax, %edx
	movl	$2097153, %eax          ## imm = 0x200001
	movq	%rcx, -56(%rbp)         ## 8-byte Spill
	movl	%eax, %ecx
	movq	%r9, %r8
	movq	-48(%rbp), %r9          ## 8-byte Reload
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	callq	_sqlite3_create_function
	movl	%eax, -32(%rbp)
## %bb.5:                               ##   in Loop: Header=BB26_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB26_1
LBB26_6:
	movl	-32(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function ieee754func
_ieee754func:                           ## @ieee754func
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              ## imm = 0x110
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -120(%rbp)
	movl	%esi, -124(%rbp)
	movq	%rdx, -136(%rbp)
	cmpl	$1, -124(%rbp)
	jne	LBB27_31
## %bb.1:
	movq	-136(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_type
	cmpl	$4, %eax
	jne	LBB27_8
## %bb.2:
	movq	-136(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_bytes
	movslq	%eax, %rcx
	cmpq	$8, %rcx
	jne	LBB27_8
## %bb.3:
	movq	-136(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_blob
	movq	%rax, -176(%rbp)
	movq	$0, -192(%rbp)
	movl	$0, -180(%rbp)
LBB27_4:                                ## =>This Inner Loop Header: Depth=1
	movl	-180(%rbp), %eax
	movl	%eax, %ecx
	cmpq	$8, %rcx
	jae	LBB27_7
## %bb.5:                               ##   in Loop: Header=BB27_4 Depth=1
	movq	-192(%rbp), %rax
	shlq	$8, %rax
	movq	-176(%rbp), %rcx
	movl	-180(%rbp), %edx
	movl	%edx, %esi
	movzbl	(%rcx,%rsi), %edx
	movl	%edx, %ecx
	orq	%rcx, %rax
	movq	%rax, -192(%rbp)
## %bb.6:                               ##   in Loop: Header=BB27_4 Depth=1
	movl	-180(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -180(%rbp)
	jmp	LBB27_4
LBB27_7:
	movq	-192(%rbp), %rax
	movq	%rax, -160(%rbp)
	jmp	LBB27_9
LBB27_8:
	movq	-136(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_double
	movsd	%xmm0, -160(%rbp)
LBB27_9:
	xorps	%xmm0, %xmm0
	ucomisd	-160(%rbp), %xmm0
	jbe	LBB27_11
## %bb.10:
	movl	$1, -168(%rbp)
	movsd	-160(%rbp), %xmm0       ## xmm0 = mem[0],zero
	movq	%xmm0, %rax
	movabsq	$-9223372036854775808, %rcx ## imm = 0x8000000000000000
	xorq	%rcx, %rax
	movq	%rax, %xmm0
	movsd	%xmm0, -160(%rbp)
	jmp	LBB27_12
LBB27_11:
	movl	$0, -168(%rbp)
LBB27_12:
	movq	-160(%rbp), %rax
	movq	%rax, -152(%rbp)
	cmpq	$0, -152(%rbp)
	jne	LBB27_14
## %bb.13:
	movl	$0, -164(%rbp)
	movq	$0, -144(%rbp)
	jmp	LBB27_26
LBB27_14:
	movq	-152(%rbp), %rax
	sarq	$52, %rax
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -164(%rbp)
	movabsq	$4503599627370495, %rcx ## imm = 0xFFFFFFFFFFFFF
	andq	-152(%rbp), %rcx
	movq	%rcx, -144(%rbp)
	cmpl	$0, -164(%rbp)
	jne	LBB27_16
## %bb.15:
	movq	-144(%rbp), %rax
	shlq	$1, %rax
	movq	%rax, -144(%rbp)
	jmp	LBB27_17
LBB27_16:
	movabsq	$4503599627370496, %rax ## imm = 0x10000000000000
	orq	-144(%rbp), %rax
	movq	%rax, -144(%rbp)
LBB27_17:
	jmp	LBB27_18
LBB27_18:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$1075, -164(%rbp)       ## imm = 0x433
	movb	%al, -229(%rbp)         ## 1-byte Spill
	jge	LBB27_21
## %bb.19:                              ##   in Loop: Header=BB27_18 Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpq	$0, -144(%rbp)
	movb	%al, -229(%rbp)         ## 1-byte Spill
	jle	LBB27_21
## %bb.20:                              ##   in Loop: Header=BB27_18 Depth=1
	movq	-144(%rbp), %rax
	andq	$1, %rax
	cmpq	$0, %rax
	sete	%cl
	movb	%cl, -229(%rbp)         ## 1-byte Spill
LBB27_21:                               ##   in Loop: Header=BB27_18 Depth=1
	movb	-229(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB27_22
	jmp	LBB27_23
LBB27_22:                               ##   in Loop: Header=BB27_18 Depth=1
	movq	-144(%rbp), %rax
	sarq	$1, %rax
	movq	%rax, -144(%rbp)
	movl	-164(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -164(%rbp)
	jmp	LBB27_18
LBB27_23:
	cmpl	$0, -168(%rbp)
	je	LBB27_25
## %bb.24:
	xorl	%eax, %eax
	movl	%eax, %ecx
	subq	-144(%rbp), %rcx
	movq	%rcx, -144(%rbp)
LBB27_25:
	jmp	LBB27_26
LBB27_26:
	movq	-120(%rbp), %rdi
	callq	_sqlite3_user_data
	movl	(%rax), %ecx
	testl	%ecx, %ecx
	movl	%ecx, -236(%rbp)        ## 4-byte Spill
	je	LBB27_27
	jmp	LBB27_67
LBB27_67:
	movl	-236(%rbp), %eax        ## 4-byte Reload
	subl	$1, %eax
	je	LBB27_28
	jmp	LBB27_68
LBB27_68:
	movl	-236(%rbp), %eax        ## 4-byte Reload
	subl	$2, %eax
	je	LBB27_29
	jmp	LBB27_30
LBB27_27:
	leaq	-112(%rbp), %rsi
	movq	-144(%rbp), %rcx
	movl	-164(%rbp), %eax
	subl	$1075, %eax             ## imm = 0x433
	movl	$100, %edi
	leaq	L_.str.136(%rip), %rdx
	movl	%eax, %r8d
	movb	$0, %al
	callq	_sqlite3_snprintf
	leaq	-112(%rbp), %rsi
	movq	-120(%rbp), %rdi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	movq	$-1, %rcx
	movq	%rax, -248(%rbp)        ## 8-byte Spill
	callq	_sqlite3_result_text
	jmp	LBB27_30
LBB27_28:
	movq	-120(%rbp), %rdi
	movq	-144(%rbp), %rsi
	callq	_sqlite3_result_int64
	jmp	LBB27_30
LBB27_29:
	movq	-120(%rbp), %rdi
	movl	-164(%rbp), %eax
	subl	$1075, %eax             ## imm = 0x433
	movl	%eax, %esi
	callq	_sqlite3_result_int
LBB27_30:
	jmp	LBB27_64
LBB27_31:
	movl	$0, -228(%rbp)
	movq	-136(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_int64
	movq	%rax, -200(%rbp)
	movq	-136(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_int64
	movq	%rax, -208(%rbp)
	cmpq	$10000, -208(%rbp)      ## imm = 0x2710
	jle	LBB27_33
## %bb.32:
	movq	$10000, -208(%rbp)      ## imm = 0x2710
	jmp	LBB27_36
LBB27_33:
	cmpq	$-10000, -208(%rbp)     ## imm = 0xD8F0
	jge	LBB27_35
## %bb.34:
	movq	$-10000, -208(%rbp)     ## imm = 0xD8F0
LBB27_35:
	jmp	LBB27_36
LBB27_36:
	cmpq	$0, -200(%rbp)
	jge	LBB27_40
## %bb.37:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$1, -228(%rbp)
	subq	-200(%rbp), %rcx
	movq	%rcx, -200(%rbp)
	cmpq	$0, -200(%rbp)
	jge	LBB27_39
## %bb.38:
	jmp	LBB27_64
LBB27_39:
	jmp	LBB27_45
LBB27_40:
	cmpq	$0, -200(%rbp)
	jne	LBB27_44
## %bb.41:
	cmpq	$-1000, -208(%rbp)      ## imm = 0xFC18
	jle	LBB27_44
## %bb.42:
	cmpq	$1000, -208(%rbp)       ## imm = 0x3E8
	jge	LBB27_44
## %bb.43:
	movq	-120(%rbp), %rdi
	xorps	%xmm0, %xmm0
	callq	_sqlite3_result_double
	jmp	LBB27_64
LBB27_44:
	jmp	LBB27_45
LBB27_45:
	jmp	LBB27_46
LBB27_46:                               ## =>This Inner Loop Header: Depth=1
	movq	-200(%rbp), %rax
	sarq	$32, %rax
	movl	$4292870144, %ecx       ## imm = 0xFFE00000
	andq	%rcx, %rax
	cmpq	$0, %rax
	je	LBB27_48
## %bb.47:                              ##   in Loop: Header=BB27_46 Depth=1
	movq	-200(%rbp), %rax
	sarq	$1, %rax
	movq	%rax, -200(%rbp)
	movq	-208(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -208(%rbp)
	jmp	LBB27_46
LBB27_48:
	jmp	LBB27_49
LBB27_49:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpq	$0, -200(%rbp)
	movb	%al, -249(%rbp)         ## 1-byte Spill
	je	LBB27_51
## %bb.50:                              ##   in Loop: Header=BB27_49 Depth=1
	movq	-200(%rbp), %rax
	sarq	$32, %rax
	movl	$4293918720, %ecx       ## imm = 0xFFF00000
	andq	%rcx, %rax
	cmpq	$0, %rax
	sete	%dl
	movb	%dl, -249(%rbp)         ## 1-byte Spill
LBB27_51:                               ##   in Loop: Header=BB27_49 Depth=1
	movb	-249(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB27_52
	jmp	LBB27_53
LBB27_52:                               ##   in Loop: Header=BB27_49 Depth=1
	movq	-200(%rbp), %rax
	shlq	$1, %rax
	movq	%rax, -200(%rbp)
	movq	-208(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -208(%rbp)
	jmp	LBB27_49
LBB27_53:
	movq	-208(%rbp), %rax
	addq	$1075, %rax             ## imm = 0x433
	movq	%rax, -208(%rbp)
	cmpq	$0, -208(%rbp)
	jg	LBB27_58
## %bb.54:
	movl	$1, %eax
	subq	-208(%rbp), %rax
	cmpq	$64, %rax
	jl	LBB27_56
## %bb.55:
	movq	$0, -200(%rbp)
	jmp	LBB27_57
LBB27_56:
	movl	$1, %eax
	subq	-208(%rbp), %rax
	movq	-200(%rbp), %rcx
	movq	%rcx, -264(%rbp)        ## 8-byte Spill
	movq	%rax, %rcx
                                        ## kill: def $cl killed $rcx
	movq	-264(%rbp), %rax        ## 8-byte Reload
	sarq	%cl, %rax
	movq	%rax, -200(%rbp)
LBB27_57:
	movq	$0, -208(%rbp)
	jmp	LBB27_61
LBB27_58:
	cmpq	$2047, -208(%rbp)       ## imm = 0x7FF
	jle	LBB27_60
## %bb.59:
	movq	$2047, -208(%rbp)       ## imm = 0x7FF
LBB27_60:
	jmp	LBB27_61
LBB27_61:
	movabsq	$4503599627370495, %rax ## imm = 0xFFFFFFFFFFFFF
	andq	-200(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-208(%rbp), %rax
	shlq	$52, %rax
	orq	-216(%rbp), %rax
	movq	%rax, -216(%rbp)
	cmpl	$0, -228(%rbp)
	je	LBB27_63
## %bb.62:
	movabsq	$-9223372036854775808, %rax ## imm = 0x8000000000000000
	orq	-216(%rbp), %rax
	movq	%rax, -216(%rbp)
LBB27_63:
	movq	-216(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-120(%rbp), %rdi
	movsd	-224(%rbp), %xmm0       ## xmm0 = mem[0],zero
	callq	_sqlite3_result_double
LBB27_64:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	LBB27_66
## %bb.65:
	addq	$272, %rsp              ## imm = 0x110
	popq	%rbp
	retq
LBB27_66:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function ieee754func_to_blob
_ieee754func_to_blob:                   ## @ieee754func_to_blob
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_type
	cmpl	$2, %eax
	je	LBB28_2
## %bb.1:
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_type
	cmpl	$1, %eax
	jne	LBB28_7
LBB28_2:
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_double
	movsd	%xmm0, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -56(%rbp)
	movl	$1, -60(%rbp)
LBB28_3:                                ## =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	cmpq	$8, %rcx
	ja	LBB28_6
## %bb.4:                               ##   in Loop: Header=BB28_3 Depth=1
	movq	-56(%rbp), %rax
	andq	$255, %rax
                                        ## kill: def $al killed $al killed $rax
	movl	-60(%rbp), %ecx
	movl	%ecx, %edx
	movl	$8, %esi
	subq	%rdx, %rsi
	movb	%al, -16(%rbp,%rsi)
	movq	-56(%rbp), %rdx
	shrq	$8, %rdx
	movq	%rdx, -56(%rbp)
## %bb.5:                               ##   in Loop: Header=BB28_3 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	LBB28_3
LBB28_6:
	leaq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	movl	$8, %edx
	movq	$-1, %rcx
	callq	_sqlite3_result_blob
LBB28_7:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	LBB28_9
## %bb.8:
	addq	$64, %rsp
	popq	%rbp
	retq
LBB28_9:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function ieee754func_from_blob
_ieee754func_from_blob:                 ## @ieee754func_from_blob
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_type
	cmpl	$4, %eax
	jne	LBB29_7
## %bb.1:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_bytes
	movslq	%eax, %rcx
	cmpq	$8, %rcx
	jne	LBB29_7
## %bb.2:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_blob
	movq	%rax, -40(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -44(%rbp)
LBB29_3:                                ## =>This Inner Loop Header: Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, %ecx
	cmpq	$8, %rcx
	jae	LBB29_6
## %bb.4:                               ##   in Loop: Header=BB29_3 Depth=1
	movq	-56(%rbp), %rax
	shlq	$8, %rax
	movq	-40(%rbp), %rcx
	movl	-44(%rbp), %edx
	movl	%edx, %esi
	movzbl	(%rcx,%rsi), %edx
	movl	%edx, %ecx
	orq	%rcx, %rax
	movq	%rax, -56(%rbp)
## %bb.5:                               ##   in Loop: Header=BB29_3 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	LBB29_3
LBB29_6:
	movq	-56(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-32(%rbp), %xmm0        ## xmm0 = mem[0],zero
	callq	_sqlite3_result_double
LBB29_7:
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3_series_init    ## -- Begin function sqlite3_series_init
	.p2align	4, 0x90
_sqlite3_series_init:                   ## @sqlite3_series_init
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	$0, -36(%rbp)
	callq	_sqlite3_libversion_number
	cmpl	$3008012, %eax          ## imm = 0x2DE60C
	jge	LBB30_3
## %bb.1:
	cmpq	$0, -24(%rbp)
	je	LBB30_3
## %bb.2:
	leaq	L_.str.18(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -4(%rbp)
	jmp	LBB30_4
LBB30_3:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rdi
	leaq	L_.str.19(%rip), %rsi
	leaq	_seriesModule(%rip), %rdx
	callq	_sqlite3_create_module
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB30_4:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3_regexp_init    ## -- Begin function sqlite3_regexp_init
	.p2align	4, 0x90
_sqlite3_regexp_init:                   ## @sqlite3_regexp_init
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -28(%rbp)
	movq	-8(%rbp), %rdi
	leaq	L_.str.20(%rip), %rsi
	movl	$2, %edx
	movl	$2099201, %ecx          ## imm = 0x200801
	leaq	_re_sql_func(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	callq	_sqlite3_create_function
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jne	LBB31_2
## %bb.1:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rdx
	leaq	L_.str.21(%rip), %rsi
	movl	$2, %eax
	movq	%rdx, -40(%rbp)         ## 8-byte Spill
	movl	%eax, %edx
	movl	$2099201, %eax          ## imm = 0x200801
	movq	%rcx, -48(%rbp)         ## 8-byte Spill
	movl	%eax, %ecx
	movq	-40(%rbp), %r8          ## 8-byte Reload
	leaq	_re_sql_func(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	callq	_sqlite3_create_function
	movl	%eax, -28(%rbp)
LBB31_2:
	movl	-28(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_sql_func
_re_sql_func:                           ## @re_sql_func
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -60(%rbp)
	movq	-8(%rbp), %rdi
	movl	%eax, %esi
	callq	_sqlite3_get_auxdata
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	LBB32_8
## %bb.1:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	LBB32_3
## %bb.2:
	jmp	LBB32_12
LBB32_3:
	movq	-40(%rbp), %rsi
	movq	-8(%rbp), %rdi
	movq	%rsi, -72(%rbp)         ## 8-byte Spill
	callq	_sqlite3_user_data
	cmpq	$0, %rax
	setne	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	leaq	-32(%rbp), %rdi
	movq	-72(%rbp), %rsi         ## 8-byte Reload
	callq	_sqlite3re_compile
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	je	LBB32_5
## %bb.4:
	movq	-32(%rbp), %rdi
	callq	_sqlite3re_free
	movq	-8(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_error
	jmp	LBB32_12
LBB32_5:
	cmpq	$0, -32(%rbp)
	jne	LBB32_7
## %bb.6:
	movq	-8(%rbp), %rdi
	callq	_sqlite3_result_error_nomem
	jmp	LBB32_12
LBB32_7:
	movl	$1, -60(%rbp)
LBB32_8:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	LBB32_10
## %bb.9:
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rsi
	movq	%rdi, -80(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3re_match
	movq	-80(%rbp), %rdi         ## 8-byte Reload
	movl	%eax, %esi
	callq	_sqlite3_result_int
LBB32_10:
	cmpl	$0, -60(%rbp)
	je	LBB32_12
## %bb.11:
	xorl	%esi, %esi
	leaq	_sqlite3re_free(%rip), %rax
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	movq	%rax, %rcx
	callq	_sqlite3_set_auxdata
LBB32_12:
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3_expert_new     ## -- Begin function sqlite3_expert_new
	.p2align	4, 0x90
_sqlite3_expert_new:                    ## @sqlite3_expert_new
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, -20(%rbp)
	leaq	-20(%rbp), %rdi
	movl	$8288, %esi             ## imm = 0x2060
	callq	_idxMalloc
	movq	%rax, -32(%rbp)
	cmpl	$0, -20(%rbp)
	jne	LBB33_2
## %bb.1:
	movq	-8(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	$100, (%rax)
	movq	-32(%rbp), %rax
	addq	$24, %rax
	leaq	L_.str.22(%rip), %rdi
	movq	%rax, %rsi
	callq	_sqlite3_open
	movl	%eax, -20(%rbp)
LBB33_2:
	cmpl	$0, -20(%rbp)
	jne	LBB33_6
## %bb.3:
	movq	-32(%rbp), %rax
	addq	$16, %rax
	leaq	L_.str.22(%rip), %rdi
	movq	%rax, %rsi
	callq	_sqlite3_open
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jne	LBB33_5
## %bb.4:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-32(%rbp), %rdx
	movq	16(%rdx), %rdi
	movl	$1008, %esi             ## imm = 0x3F0
	movl	$1, %edx
	movb	$0, %al
	callq	_sqlite3_db_config
LBB33_5:
	jmp	LBB33_6
LBB33_6:
	cmpl	$0, -20(%rbp)
	jne	LBB33_15
## %bb.7:
	movq	$0, -40(%rbp)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-16(%rbp), %rdx
	leaq	-40(%rbp), %rsi
	leaq	L_.str.23(%rip), %rcx
	movb	$0, %al
	callq	_idxPrintfPrepareStmt
	movl	%eax, -20(%rbp)
LBB33_8:                                ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -20(%rbp)
	movb	%al, -49(%rbp)          ## 1-byte Spill
	jne	LBB33_10
## %bb.9:                               ##   in Loop: Header=BB33_8 Depth=1
	movq	-40(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	sete	%dl
	movb	%dl, -49(%rbp)          ## 1-byte Spill
LBB33_10:                               ##   in Loop: Header=BB33_8 Depth=1
	movb	-49(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB33_11
	jmp	LBB33_14
LBB33_11:                               ##   in Loop: Header=BB33_8 Depth=1
	xorl	%esi, %esi
	movq	-40(%rbp), %rdi
	callq	_sqlite3_column_text
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	LBB33_13
## %bb.12:                              ##   in Loop: Header=BB33_8 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-32(%rbp), %rdx
	movq	16(%rdx), %rdi
	movq	-48(%rbp), %rsi
	movq	-16(%rbp), %r8
	movq	%rcx, %rdx
	callq	_sqlite3_exec
	movl	%eax, -20(%rbp)
LBB33_13:                               ##   in Loop: Header=BB33_8 Depth=1
	jmp	LBB33_8
LBB33_14:
	movq	-40(%rbp), %rsi
	leaq	-20(%rbp), %rdi
	callq	_idxFinalize
LBB33_15:
	cmpl	$0, -20(%rbp)
	jne	LBB33_17
## %bb.16:
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_idxCreateVtabSchema
	movl	%eax, -20(%rbp)
LBB33_17:
	cmpl	$0, -20(%rbp)
	jne	LBB33_19
## %bb.18:
	movq	-32(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-32(%rbp), %rax
	leaq	_idxAuthCallback(%rip), %rsi
	movq	%rax, %rdx
	callq	_sqlite3_set_authorizer
LBB33_19:
	cmpl	$0, -20(%rbp)
	je	LBB33_21
## %bb.20:
	movq	-32(%rbp), %rdi
	callq	_sqlite3_expert_destroy
	movq	$0, -32(%rbp)
LBB33_21:
	movq	-32(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxMalloc
_idxMalloc:                             ## @idxMalloc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	sete	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movslq	%edx, %rax
	cmpq	$0, %rax
	je	LBB34_2
## %bb.1:
	leaq	L___func__.idxMalloc(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.153(%rip), %rcx
	movl	$9384, %edx             ## imm = 0x24A8
	callq	___assert_rtn
LBB34_2:
	jmp	LBB34_3
LBB34_3:
	cmpl	$0, -12(%rbp)
	setg	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movslq	%ecx, %rdx
	cmpq	$0, %rdx
	je	LBB34_5
## %bb.4:
	leaq	L___func__.idxMalloc(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.154(%rip), %rcx
	movl	$9385, %edx             ## imm = 0x24A9
	callq	___assert_rtn
LBB34_5:
	jmp	LBB34_6
LBB34_6:
	movl	-12(%rbp), %edi
	callq	_sqlite3_malloc
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	LBB34_8
## %bb.7:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-24(%rbp), %rdi
	movslq	-12(%rbp), %rdx
	callq	___memset_chk
	jmp	LBB34_9
LBB34_8:
	movq	-8(%rbp), %rax
	movl	$7, (%rax)
LBB34_9:
	movq	-24(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxPrintfPrepareStmt
_idxPrintfPrepareStmt:                  ## @idxPrintfPrepareStmt
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$448, %rsp              ## imm = 0x1C0
	testb	%al, %al
	movaps	%xmm7, -272(%rbp)       ## 16-byte Spill
	movaps	%xmm6, -288(%rbp)       ## 16-byte Spill
	movaps	%xmm5, -304(%rbp)       ## 16-byte Spill
	movaps	%xmm4, -320(%rbp)       ## 16-byte Spill
	movaps	%xmm3, -336(%rbp)       ## 16-byte Spill
	movaps	%xmm2, -352(%rbp)       ## 16-byte Spill
	movaps	%xmm1, -368(%rbp)       ## 16-byte Spill
	movaps	%xmm0, -384(%rbp)       ## 16-byte Spill
	movq	%r9, -392(%rbp)         ## 8-byte Spill
	movq	%r8, -400(%rbp)         ## 8-byte Spill
	movq	%rcx, -408(%rbp)        ## 8-byte Spill
	movq	%rdx, -416(%rbp)        ## 8-byte Spill
	movq	%rsi, -424(%rbp)        ## 8-byte Spill
	movq	%rdi, -432(%rbp)        ## 8-byte Spill
	je	LBB35_7
## %bb.6:
	movaps	-384(%rbp), %xmm0       ## 16-byte Reload
	movaps	%xmm0, -208(%rbp)
	movaps	-368(%rbp), %xmm1       ## 16-byte Reload
	movaps	%xmm1, -192(%rbp)
	movaps	-352(%rbp), %xmm2       ## 16-byte Reload
	movaps	%xmm2, -176(%rbp)
	movaps	-336(%rbp), %xmm3       ## 16-byte Reload
	movaps	%xmm3, -160(%rbp)
	movaps	-320(%rbp), %xmm4       ## 16-byte Reload
	movaps	%xmm4, -144(%rbp)
	movaps	-304(%rbp), %xmm5       ## 16-byte Reload
	movaps	%xmm5, -128(%rbp)
	movaps	-288(%rbp), %xmm6       ## 16-byte Reload
	movaps	%xmm6, -112(%rbp)
	movaps	-272(%rbp), %xmm7       ## 16-byte Reload
	movaps	%xmm7, -96(%rbp)
LBB35_7:
	movq	-392(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -216(%rbp)
	movq	-400(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -224(%rbp)
	leaq	-32(%rbp), %rdx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rsi
	movq	(%rsi), %rsi
	movq	%rsi, -8(%rbp)
	movq	-432(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -40(%rbp)
	movq	-424(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -48(%rbp)
	movq	-416(%rbp), %r8         ## 8-byte Reload
	movq	%r8, -56(%rbp)
	movq	-408(%rbp), %r9         ## 8-byte Reload
	movq	%r9, -64(%rbp)
	movq	%rdx, %r10
	leaq	-256(%rbp), %r11
	movq	%r11, 16(%r10)
	leaq	16(%rbp), %r11
	movq	%r11, 8(%r10)
	movl	$48, 4(%r10)
	movl	$32, (%r10)
	movq	-64(%rbp), %rdi
	movq	%rdx, %rsi
	callq	_sqlite3_vmprintf
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	jne	LBB35_2
## %bb.1:
	movl	$7, -68(%rbp)
	jmp	LBB35_3
LBB35_2:
	movq	-40(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movq	-56(%rbp), %rdx
	movq	-80(%rbp), %rcx
	callq	_idxPrepareStmt
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rdi
	callq	_sqlite3_free
LBB35_3:
	leaq	-32(%rbp), %rax
	movl	-68(%rbp), %ecx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdx
	movq	(%rdx), %rdx
	movq	-8(%rbp), %rsi
	cmpq	%rsi, %rdx
	movl	%ecx, -436(%rbp)        ## 4-byte Spill
	jne	LBB35_5
## %bb.4:
	movl	-436(%rbp), %eax        ## 4-byte Reload
	addq	$448, %rsp              ## imm = 0x1C0
	popq	%rbp
	retq
LBB35_5:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxFinalize
_idxFinalize:                           ## @idxFinalize
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	_sqlite3_finalize
	movl	%eax, -20(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, (%rcx)
	jne	LBB36_2
## %bb.1:
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
LBB36_2:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxCreateVtabSchema
_idxCreateVtabSchema:                   ## @idxCreateVtabSchema
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	_idxRegisterVtab
	movl	%eax, -20(%rbp)
	movq	$0, -32(%rbp)
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rdi
	movq	-16(%rbp), %rdx
	leaq	-32(%rbp), %rsi
	leaq	L_.str.155(%rip), %rcx
	callq	_idxPrepareStmt
	movl	%eax, -20(%rbp)
LBB37_1:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB37_14 Depth 2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -20(%rbp)
	movb	%al, -89(%rbp)          ## 1-byte Spill
	jne	LBB37_3
## %bb.2:                               ##   in Loop: Header=BB37_1 Depth=1
	movq	-32(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	sete	%dl
	movb	%dl, -89(%rbp)          ## 1-byte Spill
LBB37_3:                                ##   in Loop: Header=BB37_1 Depth=1
	movb	-89(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB37_4
	jmp	LBB37_22
LBB37_4:                                ##   in Loop: Header=BB37_1 Depth=1
	xorl	%esi, %esi
	movq	-32(%rbp), %rdi
	callq	_sqlite3_column_text
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rdi
	movl	$2, %esi
	callq	_sqlite3_column_text
	movq	%rax, -56(%rbp)
	cmpq	$0, -40(%rbp)
	je	LBB37_6
## %bb.5:                               ##   in Loop: Header=BB37_1 Depth=1
	cmpq	$0, -48(%rbp)
	jne	LBB37_7
LBB37_6:                                ##   in Loop: Header=BB37_1 Depth=1
	jmp	LBB37_1
LBB37_7:                                ##   in Loop: Header=BB37_1 Depth=1
	movq	-40(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$118, %ecx
	je	LBB37_9
## %bb.8:                               ##   in Loop: Header=BB37_1 Depth=1
	movq	-40(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$114, %ecx
	jne	LBB37_12
LBB37_9:                                ##   in Loop: Header=BB37_1 Depth=1
	cmpq	$0, -56(%rbp)
	je	LBB37_11
## %bb.10:                              ##   in Loop: Header=BB37_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	24(%rdx), %rdi
	movq	-56(%rbp), %rsi
	movq	-16(%rbp), %r8
	movq	%rcx, %rdx
	callq	_sqlite3_exec
	movl	%eax, -20(%rbp)
LBB37_11:                               ##   in Loop: Header=BB37_1 Depth=1
	jmp	LBB37_21
LBB37_12:                               ##   in Loop: Header=BB37_1 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-48(%rbp), %rsi
	movq	-16(%rbp), %rcx
	leaq	-64(%rbp), %rdx
	callq	_idxGetTableInfo
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jne	LBB37_20
## %bb.13:                              ##   in Loop: Header=BB37_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	$0, -80(%rbp)
	movq	$0, -88(%rbp)
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	-64(%rbp), %rdx
	movq	%rcx, 24(%rdx)
	movq	-64(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 32(%rdx)
	leaq	-20(%rbp), %rdi
	leaq	L_.str.156(%rip), %rdx
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -80(%rbp)
	movl	$0, -68(%rbp)
LBB37_14:                               ##   Parent Loop BB37_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	LBB37_17
## %bb.15:                              ##   in Loop: Header=BB37_14 Depth=2
	movq	-80(%rbp), %rsi
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	leaq	L_.str.27(%rip), %rcx
	leaq	L_.str.158(%rip), %rdx
	cmoveq	%rcx, %rdx
	movq	-64(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-68(%rbp), %rdi
	imulq	$24, %rdi, %rdi
	addq	%rdi, %rcx
	movq	(%rcx), %r8
	movq	-64(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-68(%rbp), %rdi
	imulq	$24, %rdi, %rdi
	addq	%rdi, %rcx
	movq	8(%rcx), %r9
	leaq	-20(%rbp), %rdi
	leaq	L_.str.157(%rip), %rcx
	movq	%rdx, -104(%rbp)        ## 8-byte Spill
	movq	%rcx, %rdx
	movq	-104(%rbp), %rcx        ## 8-byte Reload
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -80(%rbp)
## %bb.16:                              ##   in Loop: Header=BB37_14 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	LBB37_14
LBB37_17:                               ##   in Loop: Header=BB37_1 Depth=1
	movq	-80(%rbp), %rsi
	leaq	-20(%rbp), %rdi
	leaq	L_.str.159(%rip), %rdx
	movb	$0, %al
	callq	_idxAppendText
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, -80(%rbp)
	movq	-48(%rbp), %rcx
	movq	-80(%rbp), %r8
	leaq	-20(%rbp), %rdi
	leaq	L_.str.160(%rip), %rdx
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -88(%rbp)
	cmpl	$0, -20(%rbp)
	jne	LBB37_19
## %bb.18:                              ##   in Loop: Header=BB37_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	24(%rdx), %rdi
	movq	-88(%rbp), %rsi
	movq	-16(%rbp), %r8
	movq	%rcx, %rdx
	callq	_sqlite3_exec
	movl	%eax, -20(%rbp)
LBB37_19:                               ##   in Loop: Header=BB37_1 Depth=1
	movq	-80(%rbp), %rdi
	callq	_sqlite3_free
	movq	-88(%rbp), %rdi
	callq	_sqlite3_free
LBB37_20:                               ##   in Loop: Header=BB37_1 Depth=1
	jmp	LBB37_21
LBB37_21:                               ##   in Loop: Header=BB37_1 Depth=1
	jmp	LBB37_1
LBB37_22:
	movq	-32(%rbp), %rsi
	leaq	-20(%rbp), %rdi
	callq	_idxFinalize
	movl	-20(%rbp), %eax
	addq	$112, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxAuthCallback
_idxAuthCallback:                       ## @idxAuthCallback
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movl	$0, -52(%rbp)
	cmpl	$18, -12(%rbp)
	je	LBB38_3
## %bb.1:
	cmpl	$23, -12(%rbp)
	je	LBB38_3
## %bb.2:
	cmpl	$9, -12(%rbp)
	jne	LBB38_25
LBB38_3:
	movq	-40(%rbp), %rdi
	leaq	L___func__.main(%rip), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	jne	LBB38_24
## %bb.4:
	movq	-8(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -72(%rbp)
LBB38_5:                                ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -72(%rbp)
	je	LBB38_10
## %bb.6:                               ##   in Loop: Header=BB38_5 Depth=1
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rax
	movq	8(%rax), %rsi
	callq	_sqlite3_stricmp
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jne	LBB38_8
## %bb.7:
	jmp	LBB38_10
LBB38_8:                                ##   in Loop: Header=BB38_5 Depth=1
	jmp	LBB38_9
LBB38_9:                                ##   in Loop: Header=BB38_5 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	jmp	LBB38_5
LBB38_10:
	cmpq	$0, -72(%rbp)
	je	LBB38_23
## %bb.11:
	movq	-64(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -80(%rbp)
LBB38_12:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -80(%rbp)
	je	LBB38_18
## %bb.13:                              ##   in Loop: Header=BB38_12 Depth=1
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-72(%rbp), %rax
	jne	LBB38_16
## %bb.14:                              ##   in Loop: Header=BB38_12 Depth=1
	movq	-80(%rbp), %rax
	movl	8(%rax), %ecx
	cmpl	-12(%rbp), %ecx
	jne	LBB38_16
## %bb.15:
	jmp	LBB38_18
LBB38_16:                               ##   in Loop: Header=BB38_12 Depth=1
	jmp	LBB38_17
LBB38_17:                               ##   in Loop: Header=BB38_12 Depth=1
	movq	-80(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -80(%rbp)
	jmp	LBB38_12
LBB38_18:
	cmpq	$0, -80(%rbp)
	jne	LBB38_22
## %bb.19:
	leaq	-52(%rbp), %rdi
	movl	$24, %esi
	callq	_idxMalloc
	movq	%rax, -80(%rbp)
	cmpl	$0, -52(%rbp)
	jne	LBB38_21
## %bb.20:
	movq	-72(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	-12(%rbp), %edx
	movq	-80(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-64(%rbp), %rax
	movq	48(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-80(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, 48(%rcx)
LBB38_21:
	jmp	LBB38_22
LBB38_22:
	jmp	LBB38_23
LBB38_23:
	jmp	LBB38_24
LBB38_24:
	jmp	LBB38_25
LBB38_25:
	movl	-52(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3_expert_destroy ## -- Begin function sqlite3_expert_destroy
	.p2align	4, 0x90
_sqlite3_expert_destroy:                ## @sqlite3_expert_destroy
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	LBB39_2
## %bb.1:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	_sqlite3_close
	movq	-8(%rbp), %rcx
	movq	24(%rcx), %rdi
	movl	%eax, -12(%rbp)         ## 4-byte Spill
	callq	_sqlite3_close
	xorl	%edx, %edx
	movl	%edx, %esi
	movq	-8(%rbp), %rcx
	movq	40(%rcx), %rdi
	movl	%eax, -16(%rbp)         ## 4-byte Spill
	callq	_idxScanFree
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rcx
	movq	56(%rcx), %rdi
	callq	_idxStatementFree
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rdi
	callq	_idxTableFree
	movq	-8(%rbp), %rcx
	movq	48(%rcx), %rdi
	callq	_idxWriteFree
	movq	-8(%rbp), %rcx
	addq	$88, %rcx
	movq	%rcx, %rdi
	callq	_idxHashClear
	movq	-8(%rbp), %rcx
	movq	8280(%rcx), %rdi
	callq	_sqlite3_free
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdi
	callq	_sqlite3_free
LBB39_2:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3_expert_config  ## -- Begin function sqlite3_expert_config
	.p2align	4, 0x90
_sqlite3_expert_config:                 ## @sqlite3_expert_config
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$448, %rsp              ## imm = 0x1C0
	testb	%al, %al
	movaps	%xmm7, -256(%rbp)       ## 16-byte Spill
	movaps	%xmm6, -272(%rbp)       ## 16-byte Spill
	movaps	%xmm5, -288(%rbp)       ## 16-byte Spill
	movaps	%xmm4, -304(%rbp)       ## 16-byte Spill
	movaps	%xmm3, -320(%rbp)       ## 16-byte Spill
	movaps	%xmm2, -336(%rbp)       ## 16-byte Spill
	movaps	%xmm1, -352(%rbp)       ## 16-byte Spill
	movaps	%xmm0, -368(%rbp)       ## 16-byte Spill
	movq	%r9, -376(%rbp)         ## 8-byte Spill
	movq	%r8, -384(%rbp)         ## 8-byte Spill
	movq	%rcx, -392(%rbp)        ## 8-byte Spill
	movq	%rdx, -400(%rbp)        ## 8-byte Spill
	movl	%esi, -404(%rbp)        ## 4-byte Spill
	movq	%rdi, -416(%rbp)        ## 8-byte Spill
	je	LBB40_14
## %bb.13:
	movaps	-368(%rbp), %xmm0       ## 16-byte Reload
	movaps	%xmm0, -192(%rbp)
	movaps	-352(%rbp), %xmm1       ## 16-byte Reload
	movaps	%xmm1, -176(%rbp)
	movaps	-336(%rbp), %xmm2       ## 16-byte Reload
	movaps	%xmm2, -160(%rbp)
	movaps	-320(%rbp), %xmm3       ## 16-byte Reload
	movaps	%xmm3, -144(%rbp)
	movaps	-304(%rbp), %xmm4       ## 16-byte Reload
	movaps	%xmm4, -128(%rbp)
	movaps	-288(%rbp), %xmm5       ## 16-byte Reload
	movaps	%xmm5, -112(%rbp)
	movaps	-272(%rbp), %xmm6       ## 16-byte Reload
	movaps	%xmm6, -96(%rbp)
	movaps	-256(%rbp), %xmm7       ## 16-byte Reload
	movaps	%xmm7, -80(%rbp)
LBB40_14:
	movq	-376(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -200(%rbp)
	movq	-384(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -208(%rbp)
	movq	-392(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -216(%rbp)
	movq	-400(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -224(%rbp)
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, -8(%rbp)
	movq	-416(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -40(%rbp)
	movl	-404(%rbp), %r8d        ## 4-byte Reload
	movl	%r8d, -44(%rbp)
	movl	$0, -48(%rbp)
	leaq	-240(%rbp), %r9
	movq	%r9, -16(%rbp)
	leaq	16(%rbp), %r9
	movq	%r9, -24(%rbp)
	movl	$48, -28(%rbp)
	movl	$16, -32(%rbp)
	movl	-44(%rbp), %r10d
	subl	$1, %r10d
	jne	LBB40_9
	jmp	LBB40_1
LBB40_1:
	leaq	-32(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	$40, %ecx
	movq	%rax, -424(%rbp)        ## 8-byte Spill
	movl	%ecx, -428(%rbp)        ## 4-byte Spill
	ja	LBB40_3
## %bb.2:
	movl	-428(%rbp), %eax        ## 4-byte Reload
	movslq	%eax, %rcx
	movq	-424(%rbp), %rdx        ## 8-byte Reload
	addq	16(%rdx), %rcx
	addl	$8, %eax
	movl	%eax, (%rdx)
	movq	%rcx, -440(%rbp)        ## 8-byte Spill
	jmp	LBB40_4
LBB40_3:
	movq	-424(%rbp), %rax        ## 8-byte Reload
	movq	8(%rax), %rcx
	movq	%rcx, %rdx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	%rdx, -440(%rbp)        ## 8-byte Spill
LBB40_4:
	movq	-440(%rbp), %rax        ## 8-byte Reload
	movl	(%rax), %ecx
	movl	%ecx, -52(%rbp)
	cmpl	$0, -52(%rbp)
	jge	LBB40_6
## %bb.5:
	movl	$0, -52(%rbp)
LBB40_6:
	cmpl	$100, -52(%rbp)
	jle	LBB40_8
## %bb.7:
	movl	$100, -52(%rbp)
LBB40_8:
	movl	-52(%rbp), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	LBB40_10
LBB40_9:
	movl	$12, -48(%rbp)
LBB40_10:
	leaq	-32(%rbp), %rax
	movl	-48(%rbp), %ecx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdx
	movq	(%rdx), %rdx
	movq	-8(%rbp), %rsi
	cmpq	%rsi, %rdx
	movl	%ecx, -444(%rbp)        ## 4-byte Spill
	jne	LBB40_12
## %bb.11:
	movl	-444(%rbp), %eax        ## 4-byte Reload
	addq	$448, %rsp              ## imm = 0x1C0
	popq	%rbp
	retq
LBB40_12:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3_expert_sql     ## -- Begin function sqlite3_expert_sql
	.p2align	4, 0x90
_sqlite3_expert_sql:                    ## @sqlite3_expert_sql
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 64(%rax)
	je	LBB41_2
## %bb.1:
	movl	$21, -4(%rbp)
	jmp	LBB41_20
LBB41_2:
	jmp	LBB41_3
LBB41_3:                                ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -52(%rbp)
	movb	%al, -93(%rbp)          ## 1-byte Spill
	jne	LBB41_6
## %bb.4:                               ##   in Loop: Header=BB41_3 Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpq	$0, -64(%rbp)
	movb	%al, -93(%rbp)          ## 1-byte Spill
	je	LBB41_6
## %bb.5:                               ##   in Loop: Header=BB41_3 Depth=1
	movq	-64(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$0, %ecx
	setne	%dl
	movb	%dl, -93(%rbp)          ## 1-byte Spill
LBB41_6:                                ##   in Loop: Header=BB41_3 Depth=1
	movb	-93(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB41_7
	jmp	LBB41_17
LBB41_7:                                ##   in Loop: Header=BB41_3 Depth=1
	movq	$0, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-64(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-72(%rbp), %rcx
	leaq	-64(%rbp), %r8
	callq	_sqlite3_prepare_v2
	movl	%eax, -52(%rbp)
	cmpl	$0, -52(%rbp)
	jne	LBB41_15
## %bb.8:                               ##   in Loop: Header=BB41_3 Depth=1
	cmpq	$0, -72(%rbp)
	je	LBB41_14
## %bb.9:                               ##   in Loop: Header=BB41_3 Depth=1
	movq	-72(%rbp), %rdi
	callq	_sqlite3_sql
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -92(%rbp)
	movslq	-92(%rbp), %rcx
	addq	$40, %rcx
	addq	$1, %rcx
                                        ## kill: def $ecx killed $ecx killed $rcx
	leaq	-52(%rbp), %rdi
	movl	%ecx, %esi
	callq	_idxMalloc
	movq	%rax, -80(%rbp)
	cmpl	$0, -52(%rbp)
	jne	LBB41_13
## %bb.10:                              ##   in Loop: Header=BB41_3 Depth=1
	movq	$-1, %rcx
	movq	-80(%rbp), %rax
	addq	$40, %rax
	movq	-80(%rbp), %rdx
	movq	%rax, 8(%rdx)
	movq	-80(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-88(%rbp), %rsi
	movl	-92(%rbp), %r8d
	addl	$1, %r8d
	movslq	%r8d, %rdx
	callq	___memcpy_chk
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	-80(%rbp), %rdx
	movq	%rcx, 32(%rdx)
	movq	-16(%rbp), %rcx
	cmpq	$0, 56(%rcx)
	je	LBB41_12
## %bb.11:                              ##   in Loop: Header=BB41_3 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movq	-80(%rbp), %rax
	movl	%ecx, (%rax)
LBB41_12:                               ##   in Loop: Header=BB41_3 Depth=1
	movq	-80(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
LBB41_13:                               ##   in Loop: Header=BB41_3 Depth=1
	movq	-72(%rbp), %rdi
	callq	_sqlite3_finalize
LBB41_14:                               ##   in Loop: Header=BB41_3 Depth=1
	jmp	LBB41_16
LBB41_15:                               ##   in Loop: Header=BB41_3 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	_idxDatabaseError
LBB41_16:                               ##   in Loop: Header=BB41_3 Depth=1
	jmp	LBB41_3
LBB41_17:
	cmpl	$0, -52(%rbp)
	je	LBB41_19
## %bb.18:
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	_idxScanFree
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	movq	-48(%rbp), %rsi
	callq	_idxStatementFree
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
LBB41_19:
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB41_20:
	movl	-4(%rbp), %eax
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxDatabaseError
_idxDatabaseError:                      ## @idxDatabaseError
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	_sqlite3_errmsg
	leaq	L_.str.79(%rip), %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxScanFree
_idxScanFree:                           ## @idxScanFree
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)
LBB43_1:                                ## =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	LBB43_4
## %bb.2:                               ##   in Loop: Header=BB43_1 Depth=1
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdi
	callq	_idxConstraintFree
	movq	-24(%rbp), %rax
	movq	32(%rax), %rdi
	callq	_idxConstraintFree
	movq	-24(%rbp), %rax
	movq	40(%rax), %rdi
	callq	_idxConstraintFree
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
## %bb.3:                               ##   in Loop: Header=BB43_1 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
	jmp	LBB43_1
LBB43_4:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxStatementFree
_idxStatementFree:                      ## @idxStatementFree
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)
LBB44_1:                                ## =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	LBB44_4
## %bb.2:                               ##   in Loop: Header=BB44_1 Depth=1
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdi
	callq	_sqlite3_free
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	callq	_sqlite3_free
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
## %bb.3:                               ##   in Loop: Header=BB44_1 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
	jmp	LBB44_1
LBB44_4:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3_expert_analyze ## -- Begin function sqlite3_expert_analyze
	.p2align	4, 0x90
_sqlite3_expert_analyze:                ## @sqlite3_expert_analyze
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	_idxProcessTriggers
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jne	LBB45_2
## %bb.1:
	movq	-16(%rbp), %rdi
	callq	_idxCreateCandidates
	movl	%eax, -28(%rbp)
	jmp	LBB45_7
LBB45_2:
	cmpl	$773, -28(%rbp)         ## imm = 0x305
	jne	LBB45_6
## %bb.3:
	cmpq	$0, -24(%rbp)
	je	LBB45_5
## %bb.4:
	leaq	L_.str.24(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
LBB45_5:
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	LBB45_18
LBB45_6:
	jmp	LBB45_7
LBB45_7:
	cmpl	$0, -28(%rbp)
	jne	LBB45_9
## %bb.8:
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	_idxPopulateStat1
	movl	%eax, -28(%rbp)
LBB45_9:
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, -40(%rbp)
LBB45_10:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -40(%rbp)
	je	LBB45_13
## %bb.11:                              ##   in Loop: Header=BB45_10 Depth=1
	movq	-16(%rbp), %rax
	movq	8280(%rax), %rsi
	movq	-40(%rbp), %rax
	movq	8(%rax), %rcx
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	cmpq	$0, %rax
	leaq	L_.str.26(%rip), %rax
	leaq	L_.str.27(%rip), %rdx
	cmovneq	%rax, %rdx
	movq	-40(%rbp), %rax
	movq	16(%rax), %r9
	leaq	-28(%rbp), %rdi
	leaq	L_.str.25(%rip), %rax
	movq	%rdx, -48(%rbp)         ## 8-byte Spill
	movq	%rax, %rdx
	movq	-48(%rbp), %r8          ## 8-byte Reload
	movb	$0, %al
	callq	_idxAppendText
	movq	-16(%rbp), %rcx
	movq	%rax, 8280(%rcx)
## %bb.12:                              ##   in Loop: Header=BB45_10 Depth=1
	movq	-40(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	LBB45_10
LBB45_13:
	cmpl	$0, -28(%rbp)
	jne	LBB45_15
## %bb.14:
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	_idxFindIndexes
	movl	%eax, -28(%rbp)
LBB45_15:
	cmpl	$0, -28(%rbp)
	jne	LBB45_17
## %bb.16:
	movq	-16(%rbp), %rax
	movl	$1, 64(%rax)
LBB45_17:
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB45_18:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxProcessTriggers
_idxProcessTriggers:                    ## @idxProcessTriggers
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, -20(%rbp)
	movq	$0, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -40(%rbp)
LBB46_1:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB46_5 Depth 2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -20(%rbp)
	movb	%al, -49(%rbp)          ## 1-byte Spill
	jne	LBB46_3
## %bb.2:                               ##   in Loop: Header=BB46_1 Depth=1
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	setne	%cl
	movb	%cl, -49(%rbp)          ## 1-byte Spill
LBB46_3:                                ##   in Loop: Header=BB46_1 Depth=1
	movb	-49(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB46_4
	jmp	LBB46_11
LBB46_4:                                ##   in Loop: Header=BB46_1 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, -48(%rbp)
LBB46_5:                                ##   Parent Loop BB46_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -20(%rbp)
	movb	%al, -50(%rbp)          ## 1-byte Spill
	jne	LBB46_7
## %bb.6:                               ##   in Loop: Header=BB46_5 Depth=2
	movq	-48(%rbp), %rax
	cmpq	-32(%rbp), %rax
	setne	%cl
	movb	%cl, -50(%rbp)          ## 1-byte Spill
LBB46_7:                                ##   in Loop: Header=BB46_5 Depth=2
	movb	-50(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB46_8
	jmp	LBB46_10
LBB46_8:                                ##   in Loop: Header=BB46_5 Depth=2
	movq	-8(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movq	-16(%rbp), %rdx
	callq	_idxProcessOneTrigger
	movl	%eax, -20(%rbp)
## %bb.9:                               ##   in Loop: Header=BB46_5 Depth=2
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	LBB46_5
LBB46_10:                               ##   in Loop: Header=BB46_1 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	LBB46_1
LBB46_11:
	movl	-20(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxCreateCandidates
_idxCreateCandidates:                   ## @idxCreateCandidates
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	$0, -12(%rbp)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
LBB47_1:                                ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpq	$0, -24(%rbp)
	movb	%al, -25(%rbp)          ## 1-byte Spill
	je	LBB47_3
## %bb.2:                               ##   in Loop: Header=BB47_1 Depth=1
	cmpl	$0, -12(%rbp)
	sete	%al
	movb	%al, -25(%rbp)          ## 1-byte Spill
LBB47_3:                                ##   in Loop: Header=BB47_1 Depth=1
	movb	-25(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB47_4
	jmp	LBB47_9
LBB47_4:                                ##   in Loop: Header=BB47_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	_idxCreateFromWhere
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jne	LBB47_7
## %bb.5:                               ##   in Loop: Header=BB47_1 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	LBB47_7
## %bb.6:                               ##   in Loop: Header=BB47_1 Depth=1
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdx
	callq	_idxCreateFromWhere
	movl	%eax, -12(%rbp)
LBB47_7:                                ##   in Loop: Header=BB47_1 Depth=1
	jmp	LBB47_8
LBB47_8:                                ##   in Loop: Header=BB47_1 Depth=1
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	LBB47_1
LBB47_9:
	movl	-12(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3               ## -- Begin function idxPopulateStat1
LCPI48_0:
	.quad	4636737291354636288     ## double 100
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
_idxPopulateStat1:                      ## @idxPopulateStat1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              ## imm = 0x110
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	$-100000, -88(%rbp)     ## imm = 0xFFFE7960
	movq	$0, -96(%rbp)
	movq	$0, -104(%rbp)
	movq	$0, -112(%rbp)
	leaq	L_.str.195(%rip), %rax
	movq	%rax, -120(%rbp)
	leaq	L_.str.196(%rip), %rax
	movq	%rax, -128(%rbp)
	leaq	L_.str.197(%rip), %rax
	movq	%rax, -136(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, (%rax)
	jne	LBB48_2
## %bb.1:
	movl	$0, -4(%rbp)
	jmp	LBB48_45
LBB48_2:
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-24(%rbp), %rdx
	leaq	-32(%rbp), %rsi
	callq	_idxLargestIndex
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jle	LBB48_4
## %bb.3:
	cmpl	$0, -28(%rbp)
	je	LBB48_5
LBB48_4:
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	LBB48_45
LBB48_5:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movq	16(%rdx), %rdi
	leaq	L_.str.198(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -184(%rbp)        ## 8-byte Spill
	movq	-184(%rbp), %r8         ## 8-byte Reload
	callq	_sqlite3_exec
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jne	LBB48_7
## %bb.6:
	movslq	-32(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	$48, %rax
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -140(%rbp)
	movl	-140(%rbp), %esi
	leaq	-28(%rbp), %rdi
	callq	_idxMalloc
	movq	%rax, -40(%rbp)
LBB48_7:
	cmpl	$0, -28(%rbp)
	jne	LBB48_12
## %bb.8:
	movq	-16(%rbp), %rax
	cmpl	$100, (%rax)
	jne	LBB48_10
## %bb.9:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)        ## 8-byte Spill
	jmp	LBB48_11
LBB48_10:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -192(%rbp)        ## 8-byte Spill
LBB48_11:
	movq	-192(%rbp), %rax        ## 8-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	movq	-40(%rbp), %rax
	leaq	L_.str.199(%rip), %rsi
	movl	$2, %ecx
	movq	%rdx, -200(%rbp)        ## 8-byte Spill
	movl	%ecx, %edx
	movl	$1, %ecx
	movq	%rax, %r8
	leaq	_idxRemFunc(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	callq	_sqlite3_create_function
	movl	%eax, -28(%rbp)
LBB48_12:
	cmpl	$0, -28(%rbp)
	jne	LBB48_14
## %bb.13:
	xorl	%edx, %edx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rsi
	movq	8(%rsi), %rdi
	leaq	-72(%rbp), %rsi
	leaq	L_.str.200(%rip), %r8
	movq	%rsi, -208(%rbp)        ## 8-byte Spill
	movq	%r8, %rsi
	movl	$1, %eax
	movq	%rcx, -216(%rbp)        ## 8-byte Spill
	movl	%eax, %ecx
	movq	-208(%rbp), %r8         ## 8-byte Reload
	leaq	_idxSampleFunc(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	callq	_sqlite3_create_function
	movl	%eax, -28(%rbp)
LBB48_14:
	cmpl	$0, -28(%rbp)
	jne	LBB48_16
## %bb.15:
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rdi
	movq	-24(%rbp), %rdx
	movq	-120(%rbp), %rcx
	leaq	-96(%rbp), %rsi
	callq	_idxPrepareStmt
	movl	%eax, -28(%rbp)
LBB48_16:
	cmpl	$0, -28(%rbp)
	jne	LBB48_18
## %bb.17:
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-24(%rbp), %rdx
	movq	-128(%rbp), %rcx
	leaq	-104(%rbp), %rsi
	callq	_idxPrepareStmt
	movl	%eax, -28(%rbp)
LBB48_18:
	cmpl	$0, -28(%rbp)
	jne	LBB48_20
## %bb.19:
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-24(%rbp), %rdx
	movq	-136(%rbp), %rcx
	leaq	-112(%rbp), %rsi
	callq	_idxPrepareStmt
	movl	%eax, -28(%rbp)
LBB48_20:
	jmp	LBB48_21
LBB48_21:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -28(%rbp)
	movb	%al, -217(%rbp)         ## 1-byte Spill
	jne	LBB48_23
## %bb.22:                              ##   in Loop: Header=BB48_21 Depth=1
	movq	-96(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	sete	%dl
	movb	%dl, -217(%rbp)         ## 1-byte Spill
LBB48_23:                               ##   in Loop: Header=BB48_21 Depth=1
	movb	-217(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB48_24
	jmp	LBB48_33
LBB48_24:                               ##   in Loop: Header=BB48_21 Depth=1
	xorl	%esi, %esi
	movq	-96(%rbp), %rdi
	callq	_sqlite3_column_int64
	movq	%rax, -160(%rbp)
	movq	-96(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -168(%rbp)
	movq	-96(%rbp), %rdi
	movl	$2, %esi
	callq	_sqlite3_column_text
	movq	%rax, -176(%rbp)
	cmpq	$0, -168(%rbp)
	je	LBB48_26
## %bb.25:                              ##   in Loop: Header=BB48_21 Depth=1
	cmpq	$0, -176(%rbp)
	jne	LBB48_27
LBB48_26:                               ##   in Loop: Header=BB48_21 Depth=1
	jmp	LBB48_21
LBB48_27:                               ##   in Loop: Header=BB48_21 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$100, (%rax)
	jge	LBB48_32
## %bb.28:                              ##   in Loop: Header=BB48_21 Depth=1
	movq	-88(%rbp), %rax
	cmpq	-160(%rbp), %rax
	je	LBB48_32
## %bb.29:                              ##   in Loop: Header=BB48_21 Depth=1
	movsd	LCPI48_0(%rip), %xmm0   ## xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	cvtsi2sdl	(%rax), %xmm1
	divsd	%xmm0, %xmm1
	movsd	%xmm1, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -72(%rbp)
	xorps	%xmm0, %xmm0
	movsd	%xmm0, -56(%rbp)
	movsd	%xmm0, -48(%rbp)
	movq	-16(%rbp), %rdi
	movq	-168(%rbp), %rsi
	callq	_idxBuildSampleTable
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	je	LBB48_31
## %bb.30:
	jmp	LBB48_33
LBB48_31:                               ##   in Loop: Header=BB48_21 Depth=1
	jmp	LBB48_32
LBB48_32:                               ##   in Loop: Header=BB48_21 Depth=1
	movq	-16(%rbp), %rdi
	movq	-104(%rbp), %rsi
	movq	-112(%rbp), %rdx
	movq	-168(%rbp), %rcx
	movq	-176(%rbp), %r8
	movq	-24(%rbp), %r9
	callq	_idxPopulateOneStat1
	movl	%eax, -28(%rbp)
	movq	-160(%rbp), %rcx
	movq	%rcx, -88(%rbp)
	jmp	LBB48_21
LBB48_33:
	cmpl	$0, -28(%rbp)
	jne	LBB48_36
## %bb.34:
	movq	-16(%rbp), %rax
	cmpl	$100, (%rax)
	jge	LBB48_36
## %bb.35:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movq	24(%rdx), %rdi
	leaq	L_.str.201(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -232(%rbp)        ## 8-byte Spill
	movq	-232(%rbp), %r8         ## 8-byte Reload
	callq	_sqlite3_exec
	movl	%eax, -28(%rbp)
LBB48_36:
	movq	-96(%rbp), %rsi
	leaq	-28(%rbp), %rdi
	callq	_idxFinalize
	movq	-104(%rbp), %rsi
	leaq	-28(%rbp), %rdi
	callq	_idxFinalize
	movq	-112(%rbp), %rsi
	leaq	-28(%rbp), %rdi
	callq	_idxFinalize
	cmpq	$0, -40(%rbp)
	je	LBB48_42
## %bb.37:
	movl	$0, -76(%rbp)
LBB48_38:                               ## =>This Inner Loop Header: Depth=1
	movl	-76(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	LBB48_41
## %bb.39:                              ##   in Loop: Header=BB48_38 Depth=1
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movslq	-76(%rbp), %rcx
	imulq	$40, %rcx, %rcx
	addq	%rcx, %rax
	movq	32(%rax), %rdi
	callq	_sqlite3_free
## %bb.40:                              ##   in Loop: Header=BB48_38 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	LBB48_38
LBB48_41:
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
LBB48_42:
	cmpl	$0, -28(%rbp)
	jne	LBB48_44
## %bb.43:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movq	16(%rdx), %rdi
	leaq	L_.str.202(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -240(%rbp)        ## 8-byte Spill
	movq	-240(%rbp), %r8         ## 8-byte Reload
	callq	_sqlite3_exec
	movl	%eax, -28(%rbp)
LBB48_44:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdi
	leaq	L_.str.201(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -248(%rbp)        ## 8-byte Spill
	movq	-248(%rbp), %r8         ## 8-byte Reload
	callq	_sqlite3_exec
	movl	-28(%rbp), %r9d
	movl	%r9d, -4(%rbp)
LBB48_45:
	movl	-4(%rbp), %eax
	addq	$272, %rsp              ## imm = 0x110
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxAppendText
_idxAppendText:                         ## @idxAppendText
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$448, %rsp              ## imm = 0x1C0
	testb	%al, %al
	movaps	%xmm7, -272(%rbp)       ## 16-byte Spill
	movaps	%xmm6, -288(%rbp)       ## 16-byte Spill
	movaps	%xmm5, -304(%rbp)       ## 16-byte Spill
	movaps	%xmm4, -320(%rbp)       ## 16-byte Spill
	movaps	%xmm3, -336(%rbp)       ## 16-byte Spill
	movaps	%xmm2, -352(%rbp)       ## 16-byte Spill
	movaps	%xmm1, -368(%rbp)       ## 16-byte Spill
	movaps	%xmm0, -384(%rbp)       ## 16-byte Spill
	movq	%r9, -392(%rbp)         ## 8-byte Spill
	movq	%r8, -400(%rbp)         ## 8-byte Spill
	movq	%rcx, -408(%rbp)        ## 8-byte Spill
	movq	%rdx, -416(%rbp)        ## 8-byte Spill
	movq	%rsi, -424(%rbp)        ## 8-byte Spill
	movq	%rdi, -432(%rbp)        ## 8-byte Spill
	je	LBB49_17
## %bb.16:
	movaps	-384(%rbp), %xmm0       ## 16-byte Reload
	movaps	%xmm0, -208(%rbp)
	movaps	-368(%rbp), %xmm1       ## 16-byte Reload
	movaps	%xmm1, -192(%rbp)
	movaps	-352(%rbp), %xmm2       ## 16-byte Reload
	movaps	%xmm2, -176(%rbp)
	movaps	-336(%rbp), %xmm3       ## 16-byte Reload
	movaps	%xmm3, -160(%rbp)
	movaps	-320(%rbp), %xmm4       ## 16-byte Reload
	movaps	%xmm4, -144(%rbp)
	movaps	-304(%rbp), %xmm5       ## 16-byte Reload
	movaps	%xmm5, -128(%rbp)
	movaps	-288(%rbp), %xmm6       ## 16-byte Reload
	movaps	%xmm6, -112(%rbp)
	movaps	-272(%rbp), %xmm7       ## 16-byte Reload
	movaps	%xmm7, -96(%rbp)
LBB49_17:
	movq	-392(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -216(%rbp)
	movq	-400(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -224(%rbp)
	movq	-408(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -232(%rbp)
	movq	___stack_chk_guard@GOTPCREL(%rip), %rsi
	movq	(%rsi), %rsi
	movq	%rsi, -8(%rbp)
	movq	-432(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -40(%rbp)
	movq	-424(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -48(%rbp)
	movq	-416(%rbp), %r8         ## 8-byte Reload
	movq	%r8, -56(%rbp)
	movq	$0, -64(%rbp)
	movq	$0, -72(%rbp)
	cmpq	$0, -48(%rbp)
	je	LBB49_2
## %bb.1:
	movq	-48(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -436(%rbp)        ## 4-byte Spill
	jmp	LBB49_3
LBB49_2:
	xorl	%eax, %eax
	movl	%eax, -436(%rbp)        ## 4-byte Spill
	jmp	LBB49_3
LBB49_3:
	movl	-436(%rbp), %eax        ## 4-byte Reload
	leaq	-32(%rbp), %rcx
	movl	%eax, -76(%rbp)
	movl	$0, -80(%rbp)
	leaq	-256(%rbp), %rdx
	movq	%rdx, 16(%rcx)
	leaq	16(%rbp), %rdx
	movq	%rdx, 8(%rcx)
	movl	$48, 4(%rcx)
	movl	$24, (%rcx)
	movq	-40(%rbp), %rcx
	cmpl	$0, (%rcx)
	jne	LBB49_13
## %bb.4:
	leaq	-32(%rbp), %rsi
	movq	-56(%rbp), %rdi
	callq	_sqlite3_vmprintf
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	LBB49_6
## %bb.5:
	movq	-64(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -80(%rbp)
	movl	-76(%rbp), %eax
	addl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %edi
	callq	_sqlite3_malloc
	movq	%rax, -72(%rbp)
LBB49_6:
	cmpq	$0, -64(%rbp)
	je	LBB49_11
## %bb.7:
	cmpq	$0, -72(%rbp)
	je	LBB49_11
## %bb.8:
	cmpl	$0, -76(%rbp)
	je	LBB49_10
## %bb.9:
	movq	$-1, %rcx
	movq	-72(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movslq	-76(%rbp), %rdx
	callq	___memcpy_chk
LBB49_10:
	movq	$-1, %rcx
	movq	-72(%rbp), %rax
	movslq	-76(%rbp), %rdx
	addq	%rdx, %rax
	movq	-64(%rbp), %rsi
	movl	-80(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdx
	movq	%rax, %rdi
	callq	___memcpy_chk
	jmp	LBB49_12
LBB49_11:
	movq	-72(%rbp), %rdi
	callq	_sqlite3_free
	movq	$0, -72(%rbp)
	movq	-40(%rbp), %rax
	movl	$7, (%rax)
LBB49_12:
	movq	-64(%rbp), %rdi
	callq	_sqlite3_free
	movq	-48(%rbp), %rdi
	callq	_sqlite3_free
LBB49_13:
	leaq	-32(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdx
	movq	(%rdx), %rdx
	movq	-8(%rbp), %rsi
	cmpq	%rsi, %rdx
	movq	%rcx, -448(%rbp)        ## 8-byte Spill
	jne	LBB49_15
## %bb.14:
	movq	-448(%rbp), %rax        ## 8-byte Reload
	addq	$448, %rsp              ## imm = 0x1C0
	popq	%rbp
	retq
LBB49_15:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxFindIndexes
_idxFindIndexes:                        ## @idxFindIndexes
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$8288, %eax             ## imm = 0x2060
	callq	____chkstk_darwin
	subq	%rax, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	leaq	-8232(%rbp), %rdi
	callq	_idxHashInit
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
LBB50_1:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB50_5 Depth 2
                                        ##       Child Loop BB50_11 Depth 3
                                        ##       Child Loop BB50_21 Depth 3
                                        ##     Child Loop BB50_38 Depth 2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -36(%rbp)
	movb	%al, -8285(%rbp)        ## 1-byte Spill
	jne	LBB50_3
## %bb.2:                               ##   in Loop: Header=BB50_1 Depth=1
	cmpq	$0, -24(%rbp)
	setne	%al
	movb	%al, -8285(%rbp)        ## 1-byte Spill
LBB50_3:                                ##   in Loop: Header=BB50_1 Depth=1
	movb	-8285(%rbp), %al        ## 1-byte Reload
	testb	$1, %al
	jne	LBB50_4
	jmp	LBB50_43
LBB50_4:                                ##   in Loop: Header=BB50_1 Depth=1
	movq	$0, -8248(%rbp)
	leaq	-8232(%rbp), %rdi
	callq	_idxHashClear
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %r8
	leaq	-8248(%rbp), %rsi
	leaq	L_.str.216(%rip), %rcx
	movb	$0, %al
	callq	_idxPrintfPrepareStmt
	movl	%eax, -36(%rbp)
LBB50_5:                                ##   Parent Loop BB50_1 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB50_11 Depth 3
                                        ##       Child Loop BB50_21 Depth 3
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -36(%rbp)
	movb	%al, -8286(%rbp)        ## 1-byte Spill
	jne	LBB50_7
## %bb.6:                               ##   in Loop: Header=BB50_5 Depth=2
	movq	-8248(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	sete	%cl
	movb	%cl, -8286(%rbp)        ## 1-byte Spill
LBB50_7:                                ##   in Loop: Header=BB50_5 Depth=2
	movb	-8286(%rbp), %al        ## 1-byte Reload
	testb	$1, %al
	jne	LBB50_8
	jmp	LBB50_37
LBB50_8:                                ##   in Loop: Header=BB50_5 Depth=2
	movq	-8248(%rbp), %rdi
	movl	$3, %esi
	callq	_sqlite3_column_text
	movq	%rax, -8256(%rbp)
	cmpq	$0, -8256(%rbp)
	jne	LBB50_10
## %bb.9:                               ##   in Loop: Header=BB50_5 Depth=2
	jmp	LBB50_5
LBB50_10:                               ##   in Loop: Header=BB50_5 Depth=2
	movq	-8256(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -8260(%rbp)
	movl	$0, -8264(%rbp)
LBB50_11:                               ##   Parent Loop BB50_1 Depth=1
                                        ##     Parent Loop BB50_5 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movl	-8264(%rbp), %eax
	cmpl	-8260(%rbp), %eax
	jge	LBB50_34
## %bb.12:                              ##   in Loop: Header=BB50_11 Depth=3
	movq	$0, -8272(%rbp)
	movl	-8264(%rbp), %eax
	addl	$13, %eax
	cmpl	-8260(%rbp), %eax
	jge	LBB50_15
## %bb.13:                              ##   in Loop: Header=BB50_11 Depth=3
	movq	-8256(%rbp), %rax
	movslq	-8264(%rbp), %rcx
	addq	%rcx, %rax
	leaq	L_.str.217(%rip), %rsi
	movl	$13, %edx
	movq	%rax, %rdi
	callq	_memcmp
	cmpl	$0, %eax
	jne	LBB50_15
## %bb.14:                              ##   in Loop: Header=BB50_11 Depth=3
	movq	-8256(%rbp), %rax
	movl	-8264(%rbp), %ecx
	addl	$13, %ecx
	movslq	%ecx, %rdx
	addq	%rdx, %rax
	movq	%rax, -8272(%rbp)
	jmp	LBB50_19
LBB50_15:                               ##   in Loop: Header=BB50_11 Depth=3
	movl	-8264(%rbp), %eax
	addl	$22, %eax
	cmpl	-8260(%rbp), %eax
	jge	LBB50_18
## %bb.16:                              ##   in Loop: Header=BB50_11 Depth=3
	movq	-8256(%rbp), %rax
	movslq	-8264(%rbp), %rcx
	addq	%rcx, %rax
	leaq	L_.str.218(%rip), %rsi
	movl	$22, %edx
	movq	%rax, %rdi
	callq	_memcmp
	cmpl	$0, %eax
	jne	LBB50_18
## %bb.17:                              ##   in Loop: Header=BB50_11 Depth=3
	movq	-8256(%rbp), %rax
	movl	-8264(%rbp), %ecx
	addl	$22, %ecx
	movslq	%ecx, %rdx
	addq	%rdx, %rax
	movq	%rax, -8272(%rbp)
LBB50_18:                               ##   in Loop: Header=BB50_11 Depth=3
	jmp	LBB50_19
LBB50_19:                               ##   in Loop: Header=BB50_11 Depth=3
	cmpq	$0, -8272(%rbp)
	je	LBB50_32
## %bb.20:                              ##   in Loop: Header=BB50_5 Depth=2
	movl	$0, -8284(%rbp)
LBB50_21:                               ##   Parent Loop BB50_1 Depth=1
                                        ##     Parent Loop BB50_5 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-8272(%rbp), %rcx
	movslq	-8284(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	cmpl	$0, %esi
	movb	%al, -8287(%rbp)        ## 1-byte Spill
	je	LBB50_25
## %bb.22:                              ##   in Loop: Header=BB50_21 Depth=3
	movq	-8272(%rbp), %rax
	movslq	-8284(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$32, %edx
	movb	$1, %sil
	movb	%sil, -8288(%rbp)       ## 1-byte Spill
	jne	LBB50_24
## %bb.23:                              ##   in Loop: Header=BB50_21 Depth=3
	movq	-8272(%rbp), %rax
	movl	-8284(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$40, %ecx
	setne	%sil
	movb	%sil, -8288(%rbp)       ## 1-byte Spill
LBB50_24:                               ##   in Loop: Header=BB50_21 Depth=3
	movb	-8288(%rbp), %al        ## 1-byte Reload
	movb	%al, -8287(%rbp)        ## 1-byte Spill
LBB50_25:                               ##   in Loop: Header=BB50_21 Depth=3
	movb	-8287(%rbp), %al        ## 1-byte Reload
	testb	$1, %al
	jne	LBB50_26
	jmp	LBB50_27
LBB50_26:                               ##   in Loop: Header=BB50_21 Depth=3
	movl	-8284(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8284(%rbp)
	jmp	LBB50_21
LBB50_27:                               ##   in Loop: Header=BB50_5 Depth=2
	movq	-8(%rbp), %rax
	addq	$88, %rax
	movq	-8272(%rbp), %rsi
	movl	-8284(%rbp), %edx
	movq	%rax, %rdi
	callq	_idxHashSearch
	movq	%rax, -8280(%rbp)
	cmpq	$0, -8280(%rbp)
	je	LBB50_31
## %bb.28:                              ##   in Loop: Header=BB50_5 Depth=2
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8280(%rbp), %rdx
	leaq	-36(%rbp), %rdi
	leaq	-8232(%rbp), %rsi
	callq	_idxHashAdd
	cmpl	$0, -36(%rbp)
	je	LBB50_30
## %bb.29:
	jmp	LBB50_44
LBB50_30:                               ##   in Loop: Header=BB50_5 Depth=2
	jmp	LBB50_31
LBB50_31:                               ##   in Loop: Header=BB50_5 Depth=2
	jmp	LBB50_34
LBB50_32:                               ##   in Loop: Header=BB50_11 Depth=3
	jmp	LBB50_33
LBB50_33:                               ##   in Loop: Header=BB50_11 Depth=3
	movl	-8264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8264(%rbp)
	jmp	LBB50_11
LBB50_34:                               ##   in Loop: Header=BB50_5 Depth=2
	movq	-8256(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	je	LBB50_36
## %bb.35:                              ##   in Loop: Header=BB50_5 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rsi
	movq	-8256(%rbp), %rcx
	leaq	-36(%rbp), %rdi
	leaq	L_.str.219(%rip), %rdx
	movb	$0, %al
	callq	_idxAppendText
	movq	-24(%rbp), %rcx
	movq	%rax, 24(%rcx)
LBB50_36:                               ##   in Loop: Header=BB50_5 Depth=2
	jmp	LBB50_5
LBB50_37:                               ##   in Loop: Header=BB50_1 Depth=1
	movq	-8232(%rbp), %rax
	movq	%rax, -8240(%rbp)
LBB50_38:                               ##   Parent Loop BB50_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpq	$0, -8240(%rbp)
	je	LBB50_41
## %bb.39:                              ##   in Loop: Header=BB50_38 Depth=2
	movq	-24(%rbp), %rax
	movq	16(%rax), %rsi
	movq	-8240(%rbp), %rax
	movq	(%rax), %rcx
	leaq	-36(%rbp), %rdi
	leaq	L_.str.220(%rip), %rdx
	movb	$0, %al
	callq	_idxAppendText
	movq	-24(%rbp), %rcx
	movq	%rax, 16(%rcx)
## %bb.40:                              ##   in Loop: Header=BB50_38 Depth=2
	movq	-8240(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -8240(%rbp)
	jmp	LBB50_38
LBB50_41:                               ##   in Loop: Header=BB50_1 Depth=1
	movq	-8248(%rbp), %rsi
	leaq	-36(%rbp), %rdi
	callq	_idxFinalize
## %bb.42:                              ##   in Loop: Header=BB50_1 Depth=1
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	LBB50_1
LBB50_43:
	jmp	LBB50_44
LBB50_44:
	leaq	-8232(%rbp), %rdi
	callq	_idxHashClear
	movl	-36(%rbp), %eax
	addq	$8288, %rsp             ## imm = 0x2060
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3_expert_count   ## -- Begin function sqlite3_expert_count
	.p2align	4, 0x90
_sqlite3_expert_count:                  ## @sqlite3_expert_count
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movl	$0, -12(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 56(%rax)
	je	LBB51_2
## %bb.1:
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
LBB51_2:
	movl	-12(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_sqlite3_expert_report  ## -- Begin function sqlite3_expert_report
	.p2align	4, 0x90
_sqlite3_expert_report:                 ## @sqlite3_expert_report
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 64(%rax)
	jne	LBB52_2
## %bb.1:
	movq	$0, -8(%rbp)
	jmp	LBB52_20
LBB52_2:
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -40(%rbp)
LBB52_3:                                ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpq	$0, -40(%rbp)
	movb	%al, -41(%rbp)          ## 1-byte Spill
	je	LBB52_5
## %bb.4:                               ##   in Loop: Header=BB52_3 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %ecx
	cmpl	-20(%rbp), %ecx
	setne	%dl
	movb	%dl, -41(%rbp)          ## 1-byte Spill
LBB52_5:                                ##   in Loop: Header=BB52_3 Depth=1
	movb	-41(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB52_6
	jmp	LBB52_8
LBB52_6:                                ##   in Loop: Header=BB52_3 Depth=1
	jmp	LBB52_7
LBB52_7:                                ##   in Loop: Header=BB52_3 Depth=1
	movq	-40(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	LBB52_3
LBB52_8:
	movl	-24(%rbp), %eax
	decl	%eax
	movl	%eax, %ecx
	subl	$3, %eax
	movq	%rcx, -56(%rbp)         ## 8-byte Spill
	ja	LBB52_19
## %bb.21:
	leaq	LJTI52_0(%rip), %rax
	movq	-56(%rbp), %rcx         ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB52_9:
	cmpq	$0, -40(%rbp)
	je	LBB52_11
## %bb.10:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
LBB52_11:
	jmp	LBB52_19
LBB52_12:
	cmpq	$0, -40(%rbp)
	je	LBB52_14
## %bb.13:
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -32(%rbp)
LBB52_14:
	jmp	LBB52_19
LBB52_15:
	cmpq	$0, -40(%rbp)
	je	LBB52_17
## %bb.16:
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
LBB52_17:
	jmp	LBB52_19
LBB52_18:
	movq	-16(%rbp), %rax
	movq	8280(%rax), %rax
	movq	%rax, -32(%rbp)
LBB52_19:
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
LBB52_20:
	movq	-8(%rbp), %rax
	popq	%rbp
	retq
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L52_0_set_9, LBB52_9-LJTI52_0
.set L52_0_set_12, LBB52_12-LJTI52_0
.set L52_0_set_15, LBB52_15-LJTI52_0
.set L52_0_set_18, LBB52_18-LJTI52_0
LJTI52_0:
	.long	L52_0_set_9
	.long	L52_0_set_12
	.long	L52_0_set_15
	.long	L52_0_set_18
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxTableFree
_idxTableFree:                          ## @idxTableFree
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
LBB53_1:                                ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -16(%rbp)
	je	LBB53_4
## %bb.2:                               ##   in Loop: Header=BB53_1 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
## %bb.3:                               ##   in Loop: Header=BB53_1 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
	jmp	LBB53_1
LBB53_4:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxWriteFree
_idxWriteFree:                          ## @idxWriteFree
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
LBB54_1:                                ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -16(%rbp)
	je	LBB54_4
## %bb.2:                               ##   in Loop: Header=BB54_1 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
## %bb.3:                               ##   in Loop: Header=BB54_1 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
	jmp	LBB54_1
LBB54_4:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxHashClear
_idxHashClear:                          ## @idxHashClear
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	$0, -12(%rbp)
LBB55_1:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB55_3 Depth 2
	cmpl	$1023, -12(%rbp)        ## imm = 0x3FF
	jge	LBB55_8
## %bb.2:                               ##   in Loop: Header=BB55_1 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
LBB55_3:                                ##   Parent Loop BB55_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpq	$0, -24(%rbp)
	je	LBB55_6
## %bb.4:                               ##   in Loop: Header=BB55_3 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	callq	_sqlite3_free
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
## %bb.5:                               ##   in Loop: Header=BB55_3 Depth=2
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
	jmp	LBB55_3
LBB55_6:                                ##   in Loop: Header=BB55_1 Depth=1
	jmp	LBB55_7
LBB55_7:                                ##   in Loop: Header=BB55_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	LBB55_1
LBB55_8:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	movl	$8192, %edx             ## imm = 0x2000
	callq	___memset_chk
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4               ## -- Begin function deduceDatabaseType
LCPI56_0:
	.byte	83                      ## 0x53
	.byte	81                      ## 0x51
	.byte	76                      ## 0x4c
	.byte	105                     ## 0x69
	.byte	116                     ## 0x74
	.byte	101                     ## 0x65
	.byte	32                      ## 0x20
	.byte	102                     ## 0x66
	.byte	111                     ## 0x6f
	.byte	114                     ## 0x72
	.byte	109                     ## 0x6d
	.byte	97                      ## 0x61
	.byte	116                     ## 0x74
	.byte	32                      ## 0x20
	.byte	51                      ## 0x33
	.byte	0                       ## 0x0
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_deduceDatabaseType
	.p2align	4, 0x90
_deduceDatabaseType:                    ## @deduceDatabaseType
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -128(%rbp)
	movl	%esi, -132(%rbp)
	movq	-128(%rbp), %rdi
	leaq	L_.str.28(%rip), %rsi
	callq	_fopen
	movq	%rax, -144(%rbp)
	movl	$0, -156(%rbp)
	cmpq	$0, -144(%rbp)
	jne	LBB56_5
## %bb.1:
	cmpl	$0, -132(%rbp)
	je	LBB56_4
## %bb.2:
	xorl	%edx, %edx
	movq	-128(%rbp), %rsi
	leaq	L_.str.29(%rip), %rdi
	callq	_sqlite3_strlike
	cmpl	$0, %eax
	jne	LBB56_4
## %bb.3:
	movl	$3, -116(%rbp)
	jmp	LBB56_24
LBB56_4:
	movl	$1, -116(%rbp)
	jmp	LBB56_24
LBB56_5:
	leaq	-112(%rbp), %rdi
	movq	-144(%rbp), %rcx
	movl	$16, %esi
	movl	$1, %edx
	callq	_fread
	movq	%rax, -152(%rbp)
	cmpq	$1, -152(%rbp)
	jne	LBB56_8
## %bb.6:
	leaq	-112(%rbp), %rax
	movups	(%rax), %xmm0
	movaps	LCPI56_0(%rip), %xmm1   ## xmm1 = [83,81,76,105,116,101,32,102,111,114,109,97,116,32,51,0]
	pcmpeqb	%xmm1, %xmm0
	pmovmskb	%xmm0, %ecx
	subl	$65535, %ecx            ## imm = 0xFFFF
	setne	%dl
	movzbl	%dl, %esi
	cmpl	$0, %esi
	jne	LBB56_8
## %bb.7:
	movq	-144(%rbp), %rdi
	callq	_fclose
	movl	$1, -116(%rbp)
	jmp	LBB56_24
LBB56_8:
	movq	-144(%rbp), %rdi
	movq	$-25, %rsi
	movl	$2, %edx
	callq	_fseek
	leaq	-112(%rbp), %rdi
	movq	-144(%rbp), %rcx
	movl	$25, %esi
	movl	$1, %edx
	movl	%eax, -160(%rbp)        ## 4-byte Spill
	callq	_fread
	movq	%rax, -152(%rbp)
	cmpq	$1, -152(%rbp)
	jne	LBB56_11
## %bb.9:
	leaq	-112(%rbp), %rdi
	leaq	L_.str.31(%rip), %rsi
	movl	$17, %edx
	callq	_memcmp
	cmpl	$0, %eax
	jne	LBB56_11
## %bb.10:
	movl	$2, -156(%rbp)
	jmp	LBB56_23
LBB56_11:
	movq	-144(%rbp), %rdi
	movq	$-22, %rsi
	movl	$2, %edx
	callq	_fseek
	leaq	-112(%rbp), %rdi
	movq	-144(%rbp), %rcx
	movl	$22, %esi
	movl	$1, %edx
	movl	%eax, -164(%rbp)        ## 4-byte Spill
	callq	_fread
	movq	%rax, -152(%rbp)
	cmpq	$1, -152(%rbp)
	jne	LBB56_17
## %bb.12:
	movsbl	-112(%rbp), %eax
	cmpl	$80, %eax
	jne	LBB56_17
## %bb.13:
	movsbl	-111(%rbp), %eax
	cmpl	$75, %eax
	jne	LBB56_17
## %bb.14:
	movsbl	-110(%rbp), %eax
	cmpl	$5, %eax
	jne	LBB56_17
## %bb.15:
	movsbl	-109(%rbp), %eax
	cmpl	$6, %eax
	jne	LBB56_17
## %bb.16:
	movl	$3, -156(%rbp)
	jmp	LBB56_22
LBB56_17:
	cmpq	$0, -152(%rbp)
	jne	LBB56_21
## %bb.18:
	cmpl	$0, -132(%rbp)
	je	LBB56_21
## %bb.19:
	xorl	%edx, %edx
	movq	-128(%rbp), %rsi
	leaq	L_.str.29(%rip), %rdi
	callq	_sqlite3_strlike
	cmpl	$0, %eax
	jne	LBB56_21
## %bb.20:
	movl	$3, -156(%rbp)
LBB56_21:
	jmp	LBB56_22
LBB56_22:
	jmp	LBB56_23
LBB56_23:
	movq	-144(%rbp), %rdi
	callq	_fclose
	movl	-156(%rbp), %ecx
	movl	%ecx, -116(%rbp)
LBB56_24:
	movl	-116(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movl	%eax, -168(%rbp)        ## 4-byte Spill
	jne	LBB56_26
## %bb.25:
	movl	-168(%rbp), %eax        ## 4-byte Reload
	addq	$176, %rsp
	popq	%rbp
	retq
LBB56_26:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.globl	_close_db               ## -- Begin function close_db
	.p2align	4, 0x90
_close_db:                              ## @close_db
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_sqlite3_close
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	LBB57_2
## %bb.1:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	movl	%edx, -28(%rbp)         ## 4-byte Spill
	callq	_sqlite3_errmsg
	movq	-24(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.32(%rip), %rsi
	movl	-28(%rbp), %edx         ## 4-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
LBB57_2:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_shellDeleteFile        ## -- Begin function shellDeleteFile
	.p2align	4, 0x90
_shellDeleteFile:                       ## @shellDeleteFile
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_unlink
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_shellPreparePrintf     ## -- Begin function shellPreparePrintf
	.p2align	4, 0x90
_shellPreparePrintf:                    ## @shellPreparePrintf
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$432, %rsp              ## imm = 0x1B0
	testb	%al, %al
	movaps	%xmm7, -272(%rbp)       ## 16-byte Spill
	movaps	%xmm6, -288(%rbp)       ## 16-byte Spill
	movaps	%xmm5, -304(%rbp)       ## 16-byte Spill
	movaps	%xmm4, -320(%rbp)       ## 16-byte Spill
	movaps	%xmm3, -336(%rbp)       ## 16-byte Spill
	movaps	%xmm2, -352(%rbp)       ## 16-byte Spill
	movaps	%xmm1, -368(%rbp)       ## 16-byte Spill
	movaps	%xmm0, -384(%rbp)       ## 16-byte Spill
	movq	%r9, -392(%rbp)         ## 8-byte Spill
	movq	%r8, -400(%rbp)         ## 8-byte Spill
	movq	%rcx, -408(%rbp)        ## 8-byte Spill
	movq	%rdx, -416(%rbp)        ## 8-byte Spill
	movq	%rsi, -424(%rbp)        ## 8-byte Spill
	movq	%rdi, -432(%rbp)        ## 8-byte Spill
	je	LBB59_9
## %bb.8:
	movaps	-384(%rbp), %xmm0       ## 16-byte Reload
	movaps	%xmm0, -208(%rbp)
	movaps	-368(%rbp), %xmm1       ## 16-byte Reload
	movaps	%xmm1, -192(%rbp)
	movaps	-352(%rbp), %xmm2       ## 16-byte Reload
	movaps	%xmm2, -176(%rbp)
	movaps	-336(%rbp), %xmm3       ## 16-byte Reload
	movaps	%xmm3, -160(%rbp)
	movaps	-320(%rbp), %xmm4       ## 16-byte Reload
	movaps	%xmm4, -144(%rbp)
	movaps	-304(%rbp), %xmm5       ## 16-byte Reload
	movaps	%xmm5, -128(%rbp)
	movaps	-288(%rbp), %xmm6       ## 16-byte Reload
	movaps	%xmm6, -112(%rbp)
	movaps	-272(%rbp), %xmm7       ## 16-byte Reload
	movaps	%xmm7, -96(%rbp)
LBB59_9:
	movq	-392(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -216(%rbp)
	movq	-400(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -224(%rbp)
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, -8(%rbp)
	movq	-432(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -40(%rbp)
	movq	-424(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -48(%rbp)
	movq	-416(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -56(%rbp)
	movq	-408(%rbp), %r8         ## 8-byte Reload
	movq	%r8, -64(%rbp)
	movq	-56(%rbp), %r9
	movq	$0, (%r9)
	movq	-48(%rbp), %r9
	cmpl	$0, (%r9)
	jne	LBB59_5
## %bb.1:
	leaq	-32(%rbp), %rax
	movq	%rax, %rcx
	leaq	-256(%rbp), %rdx
	movq	%rdx, 16(%rcx)
	leaq	16(%rbp), %rdx
	movq	%rdx, 8(%rcx)
	movl	$48, 4(%rcx)
	movl	$32, (%rcx)
	movq	-64(%rbp), %rdi
	movq	%rax, %rsi
	callq	_sqlite3_vmprintf
	leaq	-32(%rbp), %rcx
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	jne	LBB59_3
## %bb.2:
	movq	-48(%rbp), %rax
	movl	$7, (%rax)
	jmp	LBB59_4
LBB59_3:
	movq	-40(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movq	-72(%rbp), %rdx
	movq	-56(%rbp), %rcx
	callq	_shellPrepare
	movq	-72(%rbp), %rdi
	callq	_sqlite3_free
LBB59_4:
	jmp	LBB59_5
LBB59_5:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	LBB59_7
## %bb.6:
	addq	$432, %rsp              ## imm = 0x1B0
	popq	%rbp
	retq
LBB59_7:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shellPrepare
_shellPrepare:                          ## @shellPrepare
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	$0, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, (%rax)
	jne	LBB60_4
## %bb.1:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rcx
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_prepare_v2
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	LBB60_3
## %bb.2:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	%rdi, -48(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-8(%rbp), %rdi
	movq	%rax, -56(%rbp)         ## 8-byte Spill
	callq	_sqlite3_errcode
	movq	-48(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.221(%rip), %rsi
	movq	-56(%rbp), %rdx         ## 8-byte Reload
	movl	%eax, %ecx
	movb	$0, %al
	callq	_fprintf
	movl	-36(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, (%rdx)
LBB60_3:
	jmp	LBB60_4
LBB60_4:
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_shellFinalize          ## -- Begin function shellFinalize
	.p2align	4, 0x90
_shellFinalize:                         ## @shellFinalize
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	LBB61_6
## %bb.1:
	movq	-16(%rbp), %rdi
	callq	_sqlite3_db_handle
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rdi
	callq	_sqlite3_finalize
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, (%rcx)
	jne	LBB61_5
## %bb.2:
	cmpl	$0, -28(%rbp)
	je	LBB61_4
## %bb.3:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rax
	movq	%rdi, -40(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-40(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.33(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB61_4:
	movl	-28(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
LBB61_5:
	jmp	LBB61_6
LBB61_6:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_shellReset             ## -- Begin function shellReset
	.p2align	4, 0x90
_shellReset:                            ## @shellReset
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	_sqlite3_reset
	movl	%eax, -20(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, (%rcx)
	jne	LBB62_4
## %bb.1:
	cmpl	$0, -20(%rbp)
	je	LBB62_3
## %bb.2:
	movq	-16(%rbp), %rdi
	callq	_sqlite3_db_handle
	movq	___stderrp@GOTPCREL(%rip), %rcx
	movq	%rax, -32(%rbp)
	movq	(%rcx), %rdi
	movq	-32(%rbp), %rax
	movq	%rdi, -40(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-40(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.33(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB62_3:
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
LBB62_4:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_main                   ## -- Begin function main
	.p2align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$2000, %rsp             ## imm = 0x7D0
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	___stderrp@GOTPCREL(%rip), %rdx
	movq	___stack_chk_guard@GOTPCREL(%rip), %r8
	movq	(%r8), %r8
	movq	%r8, -8(%rbp)
	movl	$0, -1652(%rbp)
	movl	%edi, -1656(%rbp)
	movq	%rsi, -1664(%rbp)
	movq	$0, -1672(%rbp)
	movq	$0, -1680(%rbp)
	movl	$0, -1688(%rbp)
	movl	$0, -1692(%rbp)
	movl	$1, -1696(%rbp)
	movl	$0, -1700(%rbp)
	movq	$0, -1712(%rbp)
	movq	$0, -1720(%rbp)
	movq	(%rdx), %rdi
	movq	%rcx, %rsi
	movl	$2, %edx
	callq	_setvbuf
	xorl	%edi, %edi
	movl	%eax, -1808(%rbp)       ## 4-byte Spill
	callq	_isatty
	movl	%eax, _stdin_is_interactive(%rip)
	movl	$1, %edi
	callq	_isatty
	movl	%eax, _stdout_is_console(%rip)
	leaq	L_.str.34(%rip), %rdi
	callq	_getenv
	cmpq	$0, %rax
	je	LBB63_6
## %bb.1:
	xorl	%edi, %edi
	callq	_isatty
	cmpl	$0, %eax
	je	LBB63_4
## %bb.2:
	movl	$2, %edi
	callq	_isatty
	cmpl	$0, %eax
	je	LBB63_4
## %bb.3:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	%rdi, -1816(%rbp)       ## 8-byte Spill
	callq	_getpid
	movq	-1816(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.35(%rip), %rsi
	movl	%eax, %edx
	movb	$0, %al
	callq	_fprintf
	movq	___stdinp@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rdi
	movl	%eax, -1820(%rbp)       ## 4-byte Spill
	callq	_fgetc
	jmp	LBB63_5
LBB63_4:
	movl	$5, %edi
	callq	_raise
LBB63_5:
	jmp	LBB63_6
LBB63_6:
	callq	_sqlite3_sourceid
	movq	%rax, %rdi
	leaq	L_.str.36(%rip), %rsi
	movl	$60, %edx
	callq	_strncmp
	cmpl	$0, %eax
	je	LBB63_8
## %bb.7:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	%rdi, -1832(%rbp)       ## 8-byte Spill
	callq	_sqlite3_sourceid
	leaq	L_.str.37(%rip), %rsi
	leaq	L_.str.36(%rip), %rcx
	xorl	%edx, %edx
                                        ## kill: def $dl killed $dl killed $edx
	movq	-1832(%rbp), %rdi       ## 8-byte Reload
	movb	%dl, -1833(%rbp)        ## 1-byte Spill
	movq	%rax, %rdx
	movb	-1833(%rbp), %al        ## 1-byte Reload
	callq	_fprintf
	movl	$1, %edi
	movl	%eax, -1840(%rbp)       ## 4-byte Spill
	callq	_exit
LBB63_8:
	leaq	-1648(%rbp), %rdi
	callq	_main_init
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$1, -1656(%rbp)
	movb	%al, -1841(%rbp)        ## 1-byte Spill
	jl	LBB63_11
## %bb.9:
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpq	$0, -1664(%rbp)
	movb	%al, -1841(%rbp)        ## 1-byte Spill
	je	LBB63_11
## %bb.10:
	movq	-1664(%rbp), %rax
	cmpq	$0, (%rax)
	setne	%cl
	movb	%cl, -1841(%rbp)        ## 1-byte Spill
LBB63_11:
	movb	-1841(%rbp), %al        ## 1-byte Reload
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movslq	%ecx, %rdx
	cmpq	$0, %rdx
	je	LBB63_13
## %bb.12:
	leaq	L___func__.main(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.39(%rip), %rcx
	movl	$22996, %edx            ## imm = 0x59D4
	callq	___assert_rtn
LBB63_13:
	jmp	LBB63_14
LBB63_14:
	movq	-1664(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, _Argv0(%rip)
	movl	$2, %edi
	leaq	_interrupt_handler(%rip), %rsi
	callq	_signal
	movq	%rax, -1856(%rbp)       ## 8-byte Spill
	callq	_verify_uninitialized
	movl	$1, -1684(%rbp)
LBB63_15:                               ## =>This Inner Loop Header: Depth=1
	movl	-1684(%rbp), %eax
	cmpl	-1656(%rbp), %eax
	jge	LBB63_104
## %bb.16:                              ##   in Loop: Header=BB63_15 Depth=1
	movq	-1664(%rbp), %rax
	movslq	-1684(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -1728(%rbp)
	movq	-1728(%rbp), %rax
	movsbl	(%rax), %edx
	cmpl	$45, %edx
	je	LBB63_21
## %bb.17:                              ##   in Loop: Header=BB63_15 Depth=1
	cmpq	$0, -288(%rbp)
	jne	LBB63_19
## %bb.18:                              ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rax
	movq	%rax, -288(%rbp)
	jmp	LBB63_20
LBB63_19:                               ##   in Loop: Header=BB63_15 Depth=1
	movl	$0, -1696(%rbp)
	movl	-1700(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1700(%rbp)
	movq	-1712(%rbp), %rcx
	movslq	-1700(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	callq	_realloc
	movq	%rax, -1712(%rbp)
	movq	-1712(%rbp), %rax
	movq	%rax, %rdi
	callq	_shell_check_oom
	movq	-1728(%rbp), %rax
	movq	-1712(%rbp), %rcx
	movl	-1700(%rbp), %r8d
	subl	$1, %r8d
	movslq	%r8d, %rdx
	movq	%rax, (%rcx,%rdx,8)
LBB63_20:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_21
LBB63_21:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB63_23
## %bb.22:                              ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -1728(%rbp)
LBB63_23:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.40(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB63_27
## %bb.24:                              ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.41(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB63_27
## %bb.25:                              ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.42(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB63_27
## %bb.26:                              ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.43(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_28
LBB63_27:                               ##   in Loop: Header=BB63_15 Depth=1
	movl	-1656(%rbp), %edi
	movq	-1664(%rbp), %rsi
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	movl	%eax, %edx
	callq	_cmdline_option_value
	jmp	LBB63_102
LBB63_28:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.44(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_30
## %bb.29:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	-1656(%rbp), %edi
	movq	-1664(%rbp), %rsi
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	movl	%eax, %edx
	callq	_cmdline_option_value
	movq	%rax, -1680(%rbp)
	jmp	LBB63_101
LBB63_30:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.45(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_32
## %bb.31:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	$0, _stdin_is_interactive(%rip)
	jmp	LBB63_100
LBB63_32:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.46(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_34
## %bb.33:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	-1656(%rbp), %edi
	movq	-1664(%rbp), %rsi
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	movl	%eax, %edx
	callq	_cmdline_option_value
	jmp	LBB63_99
LBB63_34:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.47(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_48
## %bb.35:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	-1656(%rbp), %edi
	movq	-1664(%rbp), %rsi
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	movl	%eax, %edx
	callq	_cmdline_option_value
	movq	%rax, %rdi
	callq	_integerValue
	movq	%rax, -1744(%rbp)
	cmpq	$70000, -1744(%rbp)     ## imm = 0x11170
	jle	LBB63_37
## %bb.36:                              ##   in Loop: Header=BB63_15 Depth=1
	movq	$70000, -1744(%rbp)     ## imm = 0x11170
LBB63_37:                               ##   in Loop: Header=BB63_15 Depth=1
	cmpq	$0, -1744(%rbp)
	jge	LBB63_39
## %bb.38:                              ##   in Loop: Header=BB63_15 Depth=1
	movq	$0, -1744(%rbp)
LBB63_39:                               ##   in Loop: Header=BB63_15 Depth=1
	movl	-1656(%rbp), %edi
	movq	-1664(%rbp), %rsi
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	movl	%eax, %edx
	callq	_cmdline_option_value
	movq	%rax, %rdi
	callq	_integerValue
	movq	%rax, -1736(%rbp)
	cmpq	$0, -1744(%rbp)
	jle	LBB63_43
## %bb.40:                              ##   in Loop: Header=BB63_15 Depth=1
	cmpq	$0, -1736(%rbp)
	jle	LBB63_43
## %bb.41:                              ##   in Loop: Header=BB63_15 Depth=1
	movabsq	$281474976710655, %rax  ## imm = 0xFFFFFFFFFFFF
	cqto
	idivq	-1744(%rbp)
	cmpq	-1736(%rbp), %rax
	jge	LBB63_43
## %bb.42:                              ##   in Loop: Header=BB63_15 Depth=1
	movabsq	$281474976710655, %rax  ## imm = 0xFFFFFFFFFFFF
	cqto
	idivq	-1744(%rbp)
	movq	%rax, -1736(%rbp)
LBB63_43:                               ##   in Loop: Header=BB63_15 Depth=1
	cmpq	$0, -1736(%rbp)
	jle	LBB63_46
## %bb.44:                              ##   in Loop: Header=BB63_15 Depth=1
	cmpq	$0, -1744(%rbp)
	jle	LBB63_46
## %bb.45:                              ##   in Loop: Header=BB63_15 Depth=1
	movq	-1736(%rbp), %rax
	imulq	-1744(%rbp), %rax
	movq	%rax, %rdi
	callq	_malloc
	movq	%rax, -1864(%rbp)       ## 8-byte Spill
	jmp	LBB63_47
LBB63_46:                               ##   in Loop: Header=BB63_15 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -1864(%rbp)       ## 8-byte Spill
	jmp	LBB63_47
LBB63_47:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1864(%rbp), %rax       ## 8-byte Reload
	movq	-1744(%rbp), %rdx
	movq	-1736(%rbp), %rcx
	movl	$7, %edi
	movq	%rax, %rsi
	movb	$0, %al
	callq	_sqlite3_config
	movl	-1524(%rbp), %edi
	orl	$1, %edi
	movl	%edi, -1524(%rbp)
	jmp	LBB63_98
LBB63_48:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.48(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_56
## %bb.49:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	-1656(%rbp), %edi
	movq	-1664(%rbp), %rsi
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	movl	%eax, %edx
	callq	_cmdline_option_value
	movq	%rax, %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -1752(%rbp)
	cmpl	$0, -1752(%rbp)
	jge	LBB63_51
## %bb.50:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	$0, -1752(%rbp)
LBB63_51:                               ##   in Loop: Header=BB63_15 Depth=1
	movl	-1656(%rbp), %edi
	movq	-1664(%rbp), %rsi
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	movl	%eax, %edx
	callq	_cmdline_option_value
	movq	%rax, %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -1748(%rbp)
	cmpl	$0, -1748(%rbp)
	jge	LBB63_53
## %bb.52:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	$0, -1748(%rbp)
LBB63_53:                               ##   in Loop: Header=BB63_15 Depth=1
	movl	-1752(%rbp), %esi
	movl	-1748(%rbp), %edx
	movl	$13, %edi
	movb	$0, %al
	callq	_sqlite3_config
	movl	-1752(%rbp), %ecx
	imull	-1748(%rbp), %ecx
	cmpl	$0, %ecx
	jne	LBB63_55
## %bb.54:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	-1524(%rbp), %eax
	andl	$-3, %eax
	movl	%eax, -1524(%rbp)
LBB63_55:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_97
LBB63_56:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.49(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_62
## %bb.57:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	-1656(%rbp), %edi
	movq	-1664(%rbp), %rsi
	movl	-1684(%rbp), %eax
	incl	%eax
	movl	%eax, -1684(%rbp)
	movl	%eax, %edx
	callq	_cmdline_option_value
	movq	%rax, %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -1756(%rbp)
	movl	-1756(%rbp), %eax
	testl	%eax, %eax
	movl	%eax, -1868(%rbp)       ## 4-byte Spill
	je	LBB63_58
	jmp	LBB63_329
LBB63_329:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	-1868(%rbp), %eax       ## 4-byte Reload
	subl	$2, %eax
	je	LBB63_59
	jmp	LBB63_60
LBB63_58:                               ##   in Loop: Header=BB63_15 Depth=1
	movl	$1, %edi
	movb	$0, %al
	callq	_sqlite3_config
	jmp	LBB63_61
LBB63_59:                               ##   in Loop: Header=BB63_15 Depth=1
	movl	$2, %edi
	movb	$0, %al
	callq	_sqlite3_config
	jmp	LBB63_61
LBB63_60:                               ##   in Loop: Header=BB63_15 Depth=1
	movl	$3, %edi
	movb	$0, %al
	callq	_sqlite3_config
LBB63_61:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_96
LBB63_62:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.50(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_64
## %bb.63:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	-1656(%rbp), %edi
	movq	-1664(%rbp), %rsi
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	movl	%eax, %edx
	callq	_cmdline_option_value
	movq	%rax, %rdi
	callq	_integerValue
	movq	%rax, -1768(%rbp)
	movq	-1768(%rbp), %rsi
	movq	-1768(%rbp), %rdx
	movl	$22, %edi
	movb	$0, %al
	callq	_sqlite3_config
	jmp	LBB63_95
LBB63_64:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.51(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_66
## %bb.65:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	-1656(%rbp), %edi
	movq	-1664(%rbp), %rsi
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	movl	%eax, %edx
	callq	_cmdline_option_value
	movq	%rax, -1720(%rbp)
	jmp	LBB63_94
LBB63_66:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.52(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_68
## %bb.67:                              ##   in Loop: Header=BB63_15 Depth=1
	movb	$2, -1635(%rbp)
	jmp	LBB63_93
LBB63_68:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.53(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_70
## %bb.69:                              ##   in Loop: Header=BB63_15 Depth=1
	movb	$5, -1635(%rbp)
	jmp	LBB63_92
LBB63_70:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.54(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_73
## %bb.71:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	cmpl	-1656(%rbp), %eax
	jge	LBB63_73
## %bb.72:                              ##   in Loop: Header=BB63_15 Depth=1
	movq	-1664(%rbp), %rax
	movl	-1684(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -1684(%rbp)
	movslq	%ecx, %rdx
	movq	(%rax,%rdx,8), %rdi
	callq	_integerValue
	movq	%rax, -1512(%rbp)
	jmp	LBB63_91
LBB63_73:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.55(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_75
## %bb.74:                              ##   in Loop: Header=BB63_15 Depth=1
	movb	$4, -1635(%rbp)
	jmp	LBB63_90
LBB63_75:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.56(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_77
## %bb.76:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	$16777216, -1596(%rbp)  ## imm = 0x1000000
	jmp	LBB63_89
LBB63_77:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.57(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_79
## %bb.78:                              ##   in Loop: Header=BB63_15 Depth=1
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	callq	_sqlite3MemTraceActivate
	jmp	LBB63_88
LBB63_79:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.58(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_81
## %bb.80:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	$1, _bail_on_error(%rip)
	jmp	LBB63_87
LBB63_81:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.59(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_83
## %bb.82:                              ##   in Loop: Header=BB63_15 Depth=1
	movq	-152(%rbp), %rdi
	callq	_free
	movq	-1664(%rbp), %rax
	movl	-1684(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -1684(%rbp)
	movslq	%ecx, %rdx
	movq	(%rax,%rdx,8), %rdi
	callq	_strdup
	movq	%rax, -152(%rbp)
	jmp	LBB63_86
LBB63_83:                               ##   in Loop: Header=BB63_15 Depth=1
	movq	-1728(%rbp), %rdi
	leaq	L_.str.60(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_85
## %bb.84:                              ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_85
LBB63_85:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_86
LBB63_86:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_87
LBB63_87:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_88
LBB63_88:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_89
LBB63_89:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_90
LBB63_90:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_91
LBB63_91:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_92
LBB63_92:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_93
LBB63_93:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_94
LBB63_94:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_95
LBB63_95:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_96
LBB63_96:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_97
LBB63_97:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_98
LBB63_98:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_99
LBB63_99:                               ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_100
LBB63_100:                              ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_101
LBB63_101:                              ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_102
LBB63_102:                              ##   in Loop: Header=BB63_15 Depth=1
	jmp	LBB63_103
LBB63_103:                              ##   in Loop: Header=BB63_15 Depth=1
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	jmp	LBB63_15
LBB63_104:
	callq	_verify_uninitialized
	callq	_sqlite3_initialize
	cmpq	$0, -1720(%rbp)
	je	LBB63_109
## %bb.105:
	movq	-1720(%rbp), %rdi
	callq	_sqlite3_vfs_find
	movq	%rax, -1776(%rbp)
	cmpq	$0, -1776(%rbp)
	je	LBB63_107
## %bb.106:
	movq	-1776(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_vfs_register
	jmp	LBB63_108
LBB63_107:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-1664(%rbp), %rax
	movslq	-1684(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	leaq	L_.str.61(%rip), %rsi
	xorl	%r8d, %r8d
                                        ## kill: def $r8b killed $r8b killed $r8d
	movb	%r8b, %al
	callq	_fprintf
	movl	$1, %edi
	movl	%eax, -1872(%rbp)       ## 4-byte Spill
	callq	_exit
LBB63_108:
	jmp	LBB63_109
LBB63_109:
	movq	-176(%rbp), %rax
	cmpq	$0, 8(%rax)
	jne	LBB63_111
## %bb.110:
	movq	-176(%rbp), %rax
	leaq	L_.str.22(%rip), %rcx
	movq	%rcx, 8(%rax)
	cmpl	$1, -1656(%rbp)
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	%esi, -1692(%rbp)
LBB63_111:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	___stdoutp@GOTPCREL(%rip), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, -1584(%rbp)
	movq	%rcx, %rdi
	movq	%rcx, %rsi
	movq	%rcx, %rdx
	callq	_sqlite3_appendvfs_init
	xorl	%esi, %esi
	movq	-176(%rbp), %rcx
	movq	8(%rcx), %rdi
	movl	%eax, -1876(%rbp)       ## 4-byte Spill
	callq	_access
	cmpl	$0, %eax
	jne	LBB63_113
## %bb.112:
	xorl	%esi, %esi
	leaq	-1648(%rbp), %rdi
	callq	_open_db
LBB63_113:
	movq	-1680(%rbp), %rsi
	leaq	-1648(%rbp), %rdi
	callq	_process_sqliterc
	movl	$1, -1684(%rbp)
LBB63_114:                              ## =>This Inner Loop Header: Depth=1
	movl	-1684(%rbp), %eax
	cmpl	-1656(%rbp), %eax
	jge	LBB63_277
## %bb.115:                             ##   in Loop: Header=BB63_114 Depth=1
	movq	-1664(%rbp), %rax
	movslq	-1684(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -1784(%rbp)
	movq	-1784(%rbp), %rax
	movsbl	(%rax), %edx
	cmpl	$45, %edx
	je	LBB63_117
## %bb.116:                             ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_276
LBB63_117:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB63_119
## %bb.118:                             ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -1784(%rbp)
LBB63_119:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.44(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_121
## %bb.120:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	jmp	LBB63_275
LBB63_121:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.62(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_123
## %bb.122:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$4, -1564(%rbp)
	jmp	LBB63_274
LBB63_123:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.63(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_125
## %bb.124:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$2, -1564(%rbp)
	jmp	LBB63_273
LBB63_125:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.64(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_127
## %bb.126:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$6, -1564(%rbp)
	leaq	-1648(%rbp), %rax
	addq	$190, %rax
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.65(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	leaq	-1648(%rbp), %rcx
	addq	$210, %rcx
	movl	$20, %edi
	movq	%rcx, %rsi
	leaq	L_.str.66(%rip), %rdx
	movq	%rax, -1888(%rbp)       ## 8-byte Spill
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB63_272
LBB63_127:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.67(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_129
## %bb.128:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$0, -1564(%rbp)
	jmp	LBB63_271
LBB63_129:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.68(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_131
## %bb.130:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$1, -1564(%rbp)
	jmp	LBB63_270
LBB63_131:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.69(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_133
## %bb.132:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$13, -1564(%rbp)
	jmp	LBB63_269
LBB63_133:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.70(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_135
## %bb.134:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$14, -1564(%rbp)
	jmp	LBB63_268
LBB63_135:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.71(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_137
## %bb.136:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$15, -1564(%rbp)
	jmp	LBB63_267
LBB63_137:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.72(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_139
## %bb.138:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$16, -1564(%rbp)
	jmp	LBB63_266
LBB63_139:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.73(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_141
## %bb.140:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$8, -1564(%rbp)
	movw	L_.str.65(%rip), %ax
	movw	%ax, -1458(%rbp)
	jmp	LBB63_265
LBB63_141:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.52(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_143
## %bb.142:                             ##   in Loop: Header=BB63_114 Depth=1
	movb	$2, -1635(%rbp)
	jmp	LBB63_264
LBB63_143:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.53(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_145
## %bb.144:                             ##   in Loop: Header=BB63_114 Depth=1
	movb	$5, -1635(%rbp)
	jmp	LBB63_263
LBB63_145:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.54(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_148
## %bb.146:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	cmpl	-1656(%rbp), %eax
	jge	LBB63_148
## %bb.147:                             ##   in Loop: Header=BB63_114 Depth=1
	movq	-1664(%rbp), %rax
	movl	-1684(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -1684(%rbp)
	movslq	%ecx, %rdx
	movq	(%rax,%rdx,8), %rdi
	callq	_integerValue
	movq	%rax, -1512(%rbp)
	jmp	LBB63_262
LBB63_148:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.55(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_150
## %bb.149:                             ##   in Loop: Header=BB63_114 Depth=1
	movb	$4, -1635(%rbp)
	jmp	LBB63_261
LBB63_150:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.56(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_152
## %bb.151:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	-1596(%rbp), %eax
	orl	$16777216, %eax         ## imm = 0x1000000
	movl	%eax, -1596(%rbp)
	jmp	LBB63_260
LBB63_152:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.74(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_154
## %bb.153:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$10, -1564(%rbp)
	leaq	-1648(%rbp), %rax
	addq	$190, %rax
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.75(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	leaq	-1648(%rbp), %rcx
	addq	$210, %rcx
	movl	$20, %edi
	movq	%rcx, %rsi
	leaq	L_.str.76(%rip), %rdx
	movq	%rax, -1896(%rbp)       ## 8-byte Spill
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB63_259
LBB63_154:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.77(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_156
## %bb.155:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$2, -1564(%rbp)
	leaq	-1648(%rbp), %rax
	addq	$190, %rax
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.78(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	leaq	-1648(%rbp), %rcx
	addq	$210, %rcx
	movl	$20, %edi
	movq	%rcx, %rsi
	leaq	L_.str.66(%rip), %rdx
	movq	%rax, -1904(%rbp)       ## 8-byte Spill
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB63_258
LBB63_156:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.40(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_158
## %bb.157:                             ##   in Loop: Header=BB63_114 Depth=1
	leaq	-1648(%rbp), %rax
	addq	$190, %rax
	movl	-1656(%rbp), %edi
	movq	-1664(%rbp), %rsi
	movl	-1684(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -1684(%rbp)
	movl	%ecx, %edx
	movq	%rax, -1912(%rbp)       ## 8-byte Spill
	callq	_cmdline_option_value
	movl	$20, %edi
	movq	-1912(%rbp), %rsi       ## 8-byte Reload
	leaq	L_.str.79(%rip), %rdx
	movq	%rax, %rcx
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB63_257
LBB63_158:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.42(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_160
## %bb.159:                             ##   in Loop: Header=BB63_114 Depth=1
	leaq	-1648(%rbp), %rax
	addq	$210, %rax
	movl	-1656(%rbp), %edi
	movq	-1664(%rbp), %rsi
	movl	-1684(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -1684(%rbp)
	movl	%ecx, %edx
	movq	%rax, -1920(%rbp)       ## 8-byte Spill
	callq	_cmdline_option_value
	movl	$20, %edi
	movq	-1920(%rbp), %rsi       ## 8-byte Reload
	leaq	L_.str.79(%rip), %rdx
	movq	%rax, %rcx
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB63_256
LBB63_160:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.41(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_162
## %bb.161:                             ##   in Loop: Header=BB63_114 Depth=1
	leaq	-1648(%rbp), %rax
	addq	$292, %rax              ## imm = 0x124
	movl	-1656(%rbp), %edi
	movq	-1664(%rbp), %rsi
	movl	-1684(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -1684(%rbp)
	movl	%ecx, %edx
	movq	%rax, -1928(%rbp)       ## 8-byte Spill
	callq	_cmdline_option_value
	movl	$20, %edi
	movq	-1928(%rbp), %rsi       ## 8-byte Reload
	leaq	L_.str.79(%rip), %rdx
	movq	%rax, %rcx
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB63_255
LBB63_162:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.80(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_164
## %bb.163:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$1, -1544(%rbp)
	movl	-1524(%rbp), %eax
	orl	$128, %eax
	movl	%eax, -1524(%rbp)
	jmp	LBB63_254
LBB63_164:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.81(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_166
## %bb.165:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$0, -1544(%rbp)
	movl	-1524(%rbp), %eax
	orl	$128, %eax
	movl	%eax, -1524(%rbp)
	jmp	LBB63_253
LBB63_166:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.82(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_168
## %bb.167:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	-1524(%rbp), %eax
	orl	$64, %eax
	movl	%eax, -1524(%rbp)
	jmp	LBB63_252
LBB63_168:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.83(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_170
## %bb.169:                             ##   in Loop: Header=BB63_114 Depth=1
	movb	$1, -1639(%rbp)
	jmp	LBB63_251
LBB63_170:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.84(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_172
## %bb.171:                             ##   in Loop: Header=BB63_114 Depth=1
	movb	$3, -1639(%rbp)
	jmp	LBB63_250
LBB63_172:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.85(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_174
## %bb.173:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$1, -1620(%rbp)
	jmp	LBB63_249
LBB63_174:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.86(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_176
## %bb.175:                             ##   in Loop: Header=BB63_114 Depth=1
	movb	$1, -1636(%rbp)
	jmp	LBB63_248
LBB63_176:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.87(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_178
## %bb.177:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	-1524(%rbp), %eax
	orl	$4, %eax
	movl	%eax, -1524(%rbp)
	jmp	LBB63_247
LBB63_178:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.58(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_180
## %bb.179:                             ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_246
LBB63_180:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.88(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_182
## %bb.181:
	callq	_sqlite3_libversion
	movq	%rax, -1936(%rbp)       ## 8-byte Spill
	callq	_sqlite3_sourceid
	leaq	L_.str.89(%rip), %rdi
	movq	-1936(%rbp), %rsi       ## 8-byte Reload
	movq	%rax, %rdx
	movb	$0, %al
	callq	_printf
	movl	$0, -1652(%rbp)
	jmp	LBB63_326
LBB63_182:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.90(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_184
## %bb.183:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$1, _stdin_is_interactive(%rip)
	jmp	LBB63_244
LBB63_184:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.45(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_186
## %bb.185:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$0, _stdin_is_interactive(%rip)
	jmp	LBB63_243
LBB63_186:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.46(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_188
## %bb.187:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	jmp	LBB63_242
LBB63_188:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.47(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_190
## %bb.189:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	-1684(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -1684(%rbp)
	jmp	LBB63_241
LBB63_190:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.48(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_192
## %bb.191:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	-1684(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -1684(%rbp)
	jmp	LBB63_240
LBB63_192:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.49(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_194
## %bb.193:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	-1684(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -1684(%rbp)
	jmp	LBB63_239
LBB63_194:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.59(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_196
## %bb.195:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	-1684(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -1684(%rbp)
	jmp	LBB63_238
LBB63_196:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.50(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_198
## %bb.197:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	jmp	LBB63_237
LBB63_198:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.57(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_200
## %bb.199:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	jmp	LBB63_236
LBB63_200:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.51(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_202
## %bb.201:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	jmp	LBB63_235
LBB63_202:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.91(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_204
## %bb.203:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	$1, %edi
	callq	_usage
	jmp	LBB63_234
LBB63_204:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.43(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_229
## %bb.205:                             ##   in Loop: Header=BB63_114 Depth=1
	movl	-1684(%rbp), %eax
	movl	-1656(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jne	LBB63_207
## %bb.206:
	jmp	LBB63_277
LBB63_207:                              ##   in Loop: Header=BB63_114 Depth=1
	movl	-1656(%rbp), %edi
	movq	-1664(%rbp), %rsi
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	movl	%eax, %edx
	callq	_cmdline_option_value
	movq	%rax, -1784(%rbp)
	movq	-1784(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$46, %ecx
	jne	LBB63_215
## %bb.208:                             ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	-1648(%rbp), %rsi
	callq	_do_meta_command
	movl	%eax, -1688(%rbp)
	cmpl	$0, -1688(%rbp)
	je	LBB63_214
## %bb.209:                             ##   in Loop: Header=BB63_114 Depth=1
	cmpl	$0, _bail_on_error(%rip)
	je	LBB63_214
## %bb.210:
	cmpl	$2, -1688(%rbp)
	jne	LBB63_212
## %bb.211:
	xorl	%eax, %eax
	movl	%eax, -1940(%rbp)       ## 4-byte Spill
	jmp	LBB63_213
LBB63_212:
	movl	-1688(%rbp), %eax
	movl	%eax, -1940(%rbp)       ## 4-byte Spill
LBB63_213:
	movl	-1940(%rbp), %eax       ## 4-byte Reload
	movl	%eax, -1652(%rbp)
	jmp	LBB63_326
LBB63_214:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_228
LBB63_215:                              ##   in Loop: Header=BB63_114 Depth=1
	xorl	%esi, %esi
	leaq	-1648(%rbp), %rdi
	callq	_open_db
	movq	-1784(%rbp), %rsi
	leaq	-1648(%rbp), %rdi
	leaq	-1672(%rbp), %rdx
	callq	_shell_exec
	movl	%eax, -1688(%rbp)
	cmpq	$0, -1672(%rbp)
	je	LBB63_222
## %bb.216:                             ##   in Loop: Header=BB63_114 Depth=1
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-1672(%rbp), %rdx
	leaq	L_.str.92(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	cmpl	$0, _bail_on_error(%rip)
	je	LBB63_221
## %bb.217:
	cmpl	$0, -1688(%rbp)
	je	LBB63_219
## %bb.218:
	movl	-1688(%rbp), %eax
	movl	%eax, -1944(%rbp)       ## 4-byte Spill
	jmp	LBB63_220
LBB63_219:
	movl	$1, %eax
	movl	%eax, -1944(%rbp)       ## 4-byte Spill
	jmp	LBB63_220
LBB63_220:
	movl	-1944(%rbp), %eax       ## 4-byte Reload
	movl	%eax, -1652(%rbp)
	jmp	LBB63_326
LBB63_221:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_227
LBB63_222:                              ##   in Loop: Header=BB63_114 Depth=1
	cmpl	$0, -1688(%rbp)
	je	LBB63_226
## %bb.223:                             ##   in Loop: Header=BB63_114 Depth=1
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-1784(%rbp), %rdx
	leaq	L_.str.93(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	cmpl	$0, _bail_on_error(%rip)
	je	LBB63_225
## %bb.224:
	movl	-1688(%rbp), %eax
	movl	%eax, -1652(%rbp)
	jmp	LBB63_326
LBB63_225:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_226
LBB63_226:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_227
LBB63_227:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_228
LBB63_228:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_233
LBB63_229:                              ##   in Loop: Header=BB63_114 Depth=1
	movq	-1784(%rbp), %rdi
	leaq	L_.str.60(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB63_231
## %bb.230:                             ##   in Loop: Header=BB63_114 Depth=1
	movb	$1, -1630(%rbp)
	movb	$1, -1631(%rbp)
	jmp	LBB63_232
LBB63_231:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	_Argv0(%rip), %rdx
	movq	-1784(%rbp), %rcx
	leaq	L_.str.94(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	___stderrp@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.95(%rip), %rsi
	movl	%eax, -1948(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movl	$1, -1652(%rbp)
	jmp	LBB63_326
LBB63_232:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_233
LBB63_233:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_234
LBB63_234:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_235
LBB63_235:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_236
LBB63_236:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_237
LBB63_237:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_238
LBB63_238:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_239
LBB63_239:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_240
LBB63_240:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_241
LBB63_241:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_242
LBB63_242:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_243
LBB63_243:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_244
LBB63_244:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_245
LBB63_245:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_246
LBB63_246:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_247
LBB63_247:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_248
LBB63_248:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_249
LBB63_249:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_250
LBB63_250:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_251
LBB63_251:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_252
LBB63_252:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_253
LBB63_253:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_254
LBB63_254:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_255
LBB63_255:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_256
LBB63_256:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_257
LBB63_257:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_258
LBB63_258:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_259
LBB63_259:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_260
LBB63_260:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_261
LBB63_261:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_262
LBB63_262:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_263
LBB63_263:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_264
LBB63_264:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_265
LBB63_265:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_266
LBB63_266:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_267
LBB63_267:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_268
LBB63_268:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_269
LBB63_269:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_270
LBB63_270:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_271
LBB63_271:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_272
LBB63_272:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_273
LBB63_273:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_274
LBB63_274:                              ##   in Loop: Header=BB63_114 Depth=1
	jmp	LBB63_275
LBB63_275:                              ##   in Loop: Header=BB63_114 Depth=1
	movl	-1564(%rbp), %eax
	movl	%eax, -1556(%rbp)
LBB63_276:                              ##   in Loop: Header=BB63_114 Depth=1
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	jmp	LBB63_114
LBB63_277:
	cmpl	$0, -1696(%rbp)
	jne	LBB63_300
## %bb.278:
	movl	$0, -1684(%rbp)
LBB63_279:                              ## =>This Inner Loop Header: Depth=1
	movl	-1684(%rbp), %eax
	cmpl	-1700(%rbp), %eax
	jge	LBB63_299
## %bb.280:                             ##   in Loop: Header=BB63_279 Depth=1
	movq	-1712(%rbp), %rax
	movslq	-1684(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movsbl	(%rax), %edx
	cmpl	$46, %edx
	jne	LBB63_287
## %bb.281:                             ##   in Loop: Header=BB63_279 Depth=1
	movq	-1712(%rbp), %rax
	movslq	-1684(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	leaq	-1648(%rbp), %rsi
	callq	_do_meta_command
	movl	%eax, -1688(%rbp)
	cmpl	$0, -1688(%rbp)
	je	LBB63_286
## %bb.282:
	movq	-1712(%rbp), %rax
	movq	%rax, %rdi
	callq	_free
	cmpl	$2, -1688(%rbp)
	jne	LBB63_284
## %bb.283:
	xorl	%eax, %eax
	movl	%eax, -1952(%rbp)       ## 4-byte Spill
	jmp	LBB63_285
LBB63_284:
	movl	-1688(%rbp), %eax
	movl	%eax, -1952(%rbp)       ## 4-byte Spill
LBB63_285:
	movl	-1952(%rbp), %eax       ## 4-byte Reload
	movl	%eax, -1652(%rbp)
	jmp	LBB63_326
LBB63_286:                              ##   in Loop: Header=BB63_279 Depth=1
	jmp	LBB63_297
LBB63_287:                              ##   in Loop: Header=BB63_279 Depth=1
	xorl	%esi, %esi
	leaq	-1648(%rbp), %rdi
	callq	_open_db
	movq	-1712(%rbp), %rax
	movslq	-1684(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	leaq	-1648(%rbp), %rdi
	leaq	-1672(%rbp), %rdx
	callq	_shell_exec
	movl	%eax, -1688(%rbp)
	cmpq	$0, -1672(%rbp)
	jne	LBB63_289
## %bb.288:                             ##   in Loop: Header=BB63_279 Depth=1
	cmpl	$0, -1688(%rbp)
	je	LBB63_296
LBB63_289:
	cmpq	$0, -1672(%rbp)
	je	LBB63_291
## %bb.290:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-1672(%rbp), %rdx
	leaq	L_.str.92(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB63_292
LBB63_291:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-1712(%rbp), %rax
	movslq	-1684(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	leaq	L_.str.96(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB63_292:
	movq	-1672(%rbp), %rdi
	callq	_sqlite3_free
	movq	-1712(%rbp), %rax
	movq	%rax, %rdi
	callq	_free
	cmpl	$0, -1688(%rbp)
	je	LBB63_294
## %bb.293:
	movl	-1688(%rbp), %eax
	movl	%eax, -1956(%rbp)       ## 4-byte Spill
	jmp	LBB63_295
LBB63_294:
	movl	$1, %eax
	movl	%eax, -1956(%rbp)       ## 4-byte Spill
	jmp	LBB63_295
LBB63_295:
	movl	-1956(%rbp), %eax       ## 4-byte Reload
	movl	%eax, -1652(%rbp)
	jmp	LBB63_326
LBB63_296:                              ##   in Loop: Header=BB63_279 Depth=1
	jmp	LBB63_297
LBB63_297:                              ##   in Loop: Header=BB63_279 Depth=1
	jmp	LBB63_298
LBB63_298:                              ##   in Loop: Header=BB63_279 Depth=1
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	jmp	LBB63_279
LBB63_299:
	jmp	LBB63_317
LBB63_300:
	cmpl	$0, _stdin_is_interactive(%rip)
	je	LBB63_315
## %bb.301:
	callq	_sqlite3_libversion
	movq	%rax, -1968(%rbp)       ## 8-byte Spill
	callq	_sqlite3_sourceid
	leaq	L_.str.97(%rip), %rdi
	movq	-1968(%rbp), %rsi       ## 8-byte Reload
	movq	%rax, %rdx
	movb	$0, %al
	callq	_printf
	cmpl	$0, -1692(%rbp)
	je	LBB63_303
## %bb.302:
	leaq	L_.str.98(%rip), %rdi
	movb	$0, %al
	callq	_printf
	leaq	L_.str.99(%rip), %rdi
	movl	%eax, -1972(%rbp)       ## 4-byte Spill
	callq	_printBold
	leaq	L_.str.100(%rip), %rdi
	movb	$0, %al
	callq	_printf
LBB63_303:
	leaq	L_.str.101(%rip), %rdi
	callq	_getenv
	movq	%rax, -1800(%rbp)
	cmpq	$0, -1800(%rbp)
	je	LBB63_305
## %bb.304:
	movq	-1800(%rbp), %rdi
	callq	_strdup
	movq	%rax, -1800(%rbp)
	jmp	LBB63_310
LBB63_305:
	xorl	%edi, %edi
	callq	_find_home_dir
	movq	%rax, -1792(%rbp)
	cmpq	$0, %rax
	je	LBB63_309
## %bb.306:
	movq	-1792(%rbp), %rdi
	callq	_strlen30
	addl	$20, %eax
	movl	%eax, -1804(%rbp)
	movslq	-1804(%rbp), %rdi
	callq	_malloc
	movq	%rax, -1800(%rbp)
	cmpq	$0, %rax
	je	LBB63_308
## %bb.307:
	movl	-1804(%rbp), %edi
	movq	-1800(%rbp), %rsi
	movq	-1792(%rbp), %rcx
	leaq	L_.str.102(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
LBB63_308:
	jmp	LBB63_309
LBB63_309:
	jmp	LBB63_310
LBB63_310:
	cmpq	$0, -1800(%rbp)
	je	LBB63_312
## %bb.311:
	jmp	LBB63_312
LBB63_312:
	movq	$0, -1592(%rbp)
	leaq	-1648(%rbp), %rdi
	callq	_process_input
	movl	%eax, -1688(%rbp)
	cmpq	$0, -1800(%rbp)
	je	LBB63_314
## %bb.313:
	movq	-1800(%rbp), %rdi
	callq	_free
LBB63_314:
	jmp	LBB63_316
LBB63_315:
	movq	___stdinp@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -1592(%rbp)
	leaq	-1648(%rbp), %rdi
	callq	_process_input
	movl	%eax, -1688(%rbp)
LBB63_316:
	jmp	LBB63_317
LBB63_317:
	movq	-1712(%rbp), %rax
	movq	%rax, %rdi
	callq	_free
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	leaq	-1648(%rbp), %rdi
	callq	_set_table_name
	cmpq	$0, -1648(%rbp)
	je	LBB63_319
## %bb.318:
	movq	-1648(%rbp), %rdi
	callq	_close_db
LBB63_319:
	movl	$0, -1684(%rbp)
LBB63_320:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$5, -1684(%rbp)
	jge	LBB63_325
## %bb.321:                             ##   in Loop: Header=BB63_320 Depth=1
	leaq	-1648(%rbp), %rax
	addq	$1352, %rax             ## imm = 0x548
	movslq	-1684(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	16(%rax), %rdi
	callq	_sqlite3_free
	leaq	-1648(%rbp), %rax
	addq	$1352, %rax             ## imm = 0x548
	movslq	-1684(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpq	$0, (%rax)
	je	LBB63_323
## %bb.322:                             ##   in Loop: Header=BB63_320 Depth=1
	leaq	-1648(%rbp), %rax
	addq	$1352, %rax             ## imm = 0x548
	movslq	-1684(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	callq	_close_db
LBB63_323:                              ##   in Loop: Header=BB63_320 Depth=1
	jmp	LBB63_324
LBB63_324:                              ##   in Loop: Header=BB63_320 Depth=1
	movl	-1684(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1684(%rbp)
	jmp	LBB63_320
LBB63_325:
	movl	$1, %edi
	callq	_find_home_dir
	leaq	-1648(%rbp), %rdi
	movq	%rax, -1984(%rbp)       ## 8-byte Spill
	callq	_output_reset
	movb	$0, -1634(%rbp)
	leaq	-1648(%rbp), %rdi
	callq	_clearTempFile
	movq	-1376(%rbp), %rax
	movq	%rax, %rdi
	callq	_free
	movq	-152(%rbp), %rdi
	callq	_free
	xorl	%esi, %esi
	leaq	-1648(%rbp), %rax
	movq	%rax, %rdi
	movl	$1640, %edx             ## imm = 0x668
	callq	_memset
	movl	-1688(%rbp), %ecx
	movl	%ecx, -1652(%rbp)
LBB63_326:
	movl	-1652(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movl	%eax, -1988(%rbp)       ## 4-byte Spill
	jne	LBB63_328
## %bb.327:
	movl	-1988(%rbp), %eax       ## 4-byte Reload
	addq	$2000, %rsp             ## imm = 0x7D0
	popq	%rbp
	retq
LBB63_328:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function main_init
_main_init:                             ## @main_init
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	movl	$1640, %edx             ## imm = 0x668
	callq	___memset_chk
	movq	$-1, %rcx
	movq	-8(%rbp), %rdx
	movl	$2, 84(%rdx)
	movq	-8(%rbp), %rdx
	movl	$2, 92(%rdx)
	movq	-8(%rbp), %rdx
	movl	$2, 96(%rdx)
	movq	-8(%rbp), %rdx
	movb	$1, 8(%rdx)
	movq	-8(%rbp), %rdx
	addq	$1352, %rdx             ## imm = 0x548
	movq	-8(%rbp), %rdi
	movq	%rdx, 1472(%rdi)
	movq	-8(%rbp), %rdx
	addq	$190, %rdx
	movq	%rdx, %rdi
	leaq	L_.str.222(%rip), %rsi
	movl	$2, %edx
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	callq	___memcpy_chk
	movq	$-1, %rcx
	movq	-8(%rbp), %rdx
	addq	$210, %rdx
	movq	%rdx, %rdi
	leaq	L_.str.66(%rip), %rsi
	movl	$2, %edx
	movq	%rax, -24(%rbp)         ## 8-byte Spill
	callq	___memcpy_chk
	movq	-8(%rbp), %rcx
	movl	$0, 104(%rcx)
	movq	-8(%rbp), %rcx
	movl	$2, 124(%rcx)
	movq	%rax, -32(%rbp)         ## 8-byte Spill
	callq	_verify_uninitialized
	movl	$17, %edi
	movl	$1, %esi
	movb	$0, %al
	callq	_sqlite3_config
	movq	-8(%rbp), %rdx
	movl	$16, %edi
	leaq	_shellLog(%rip), %rsi
	movl	%eax, -36(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_config
	movl	$2, %edi
	movl	%eax, -40(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_config
	movl	$20, %edi
	leaq	_mainPrompt(%rip), %rsi
	leaq	L_.str.223(%rip), %rdx
	movl	%eax, -44(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_snprintf
	movl	$20, %edi
	leaq	_continuePrompt(%rip), %rsi
	leaq	L_.str.224(%rip), %rdx
	movq	%rax, -56(%rbp)         ## 8-byte Spill
	movb	$0, %al
	callq	_sqlite3_snprintf
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function interrupt_handler
_interrupt_handler:                     ## @interrupt_handler
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	_seenInterrupt(%rip), %eax
	addl	$1, %eax
	movl	%eax, _seenInterrupt(%rip)
	movl	_seenInterrupt(%rip), %eax
	cmpl	$2, %eax
	jle	LBB65_2
## %bb.1:
	movl	$1, %edi
	callq	_exit
LBB65_2:
	cmpq	$0, _globalDb(%rip)
	je	LBB65_4
## %bb.3:
	movq	_globalDb(%rip), %rdi
	callq	_sqlite3_interrupt
LBB65_4:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function verify_uninitialized
_verify_uninitialized:                  ## @verify_uninitialized
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$4294967295, %edi       ## imm = 0xFFFFFFFF
	movb	$0, %al
	callq	_sqlite3_config
	cmpl	$21, %eax
	jne	LBB66_2
## %bb.1:
	movq	___stdoutp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.226(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB66_2:
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shell_check_oom
_shell_check_oom:                       ## @shell_check_oom
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	LBB67_2
## %bb.1:
	callq	_shell_out_of_memory
LBB67_2:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function cmdline_option_value
_cmdline_option_value:                  ## @cmdline_option_value
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	%edi, -4(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jne	LBB68_2
## %bb.1:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rdx
	movl	-4(%rbp), %ecx
	decl	%ecx
	movslq	%ecx, %rsi
	movq	(%rax,%rsi,8), %rcx
	leaq	L_.str.228(%rip), %rsi
	xorl	%r8d, %r8d
                                        ## kill: def $r8b killed $r8b killed $r8d
	movb	%r8b, %al
	callq	_fprintf
	movl	$1, %edi
	movl	%eax, -24(%rbp)         ## 4-byte Spill
	callq	_exit
LBB68_2:
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function integerValue
_integerValue:                          ## @integerValue
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	movq	-8(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB69_2
## %bb.1:
	movl	$1, -24(%rbp)
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	LBB69_5
LBB69_2:
	movq	-8(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$43, %ecx
	jne	LBB69_4
## %bb.3:
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
LBB69_4:
	jmp	LBB69_5
LBB69_5:
	movq	-8(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$48, %ecx
	jne	LBB69_11
## %bb.6:
	movq	-8(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$120, %ecx
	jne	LBB69_11
## %bb.7:
	movq	-8(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -8(%rbp)
LBB69_8:                                ## =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %edi
	callq	_hexDigitValue
	movl	%eax, -28(%rbp)
	cmpl	$0, %eax
	jl	LBB69_10
## %bb.9:                               ##   in Loop: Header=BB69_8 Depth=1
	movq	-16(%rbp), %rax
	shlq	$4, %rax
	movslq	-28(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	LBB69_8
LBB69_10:
	jmp	LBB69_15
LBB69_11:
	jmp	LBB69_12
LBB69_12:                               ## =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isdigit
	cmpl	$0, %eax
	je	LBB69_14
## %bb.13:                              ##   in Loop: Header=BB69_12 Depth=1
	imulq	$10, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movsbq	(%rcx), %rcx
	addq	%rcx, %rax
	subq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	LBB69_12
LBB69_14:
	jmp	LBB69_15
LBB69_15:
	movl	$0, -20(%rbp)
LBB69_16:                               ## =>This Inner Loop Header: Depth=1
	cmpl	$9, -20(%rbp)
	jge	LBB69_21
## %bb.17:                              ##   in Loop: Header=BB69_16 Depth=1
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	leaq	_integerValue.aMult(%rip), %rcx
	addq	%rax, %rcx
	movq	(%rcx), %rdi
	movq	-8(%rbp), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	jne	LBB69_19
## %bb.18:
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	leaq	_integerValue.aMult(%rip), %rcx
	addq	%rax, %rcx
	movslq	8(%rcx), %rax
	imulq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
	jmp	LBB69_21
LBB69_19:                               ##   in Loop: Header=BB69_16 Depth=1
	jmp	LBB69_20
LBB69_20:                               ##   in Loop: Header=BB69_16 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB69_16
LBB69_21:
	cmpl	$0, -24(%rbp)
	je	LBB69_23
## %bb.22:
	xorl	%eax, %eax
	movl	%eax, %ecx
	subq	-16(%rbp), %rcx
	movq	%rcx, -40(%rbp)         ## 8-byte Spill
	jmp	LBB69_24
LBB69_23:
	movq	-16(%rbp), %rax
	movq	%rax, -40(%rbp)         ## 8-byte Spill
LBB69_24:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function open_db
_open_db:                               ## @open_db
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, (%rax)
	jne	LBB70_34
## %bb.1:
	movq	-8(%rbp), %rax
	movq	1472(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movzbl	13(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB70_7
## %bb.2:
	cmpq	$0, -24(%rbp)
	je	LBB70_4
## %bb.3:
	movq	-24(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB70_5
LBB70_4:
	movq	-8(%rbp), %rax
	movb	$1, 13(%rax)
	jmp	LBB70_6
LBB70_5:
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	setne	%cl
	andb	$1, %cl
	movzbl	%cl, %esi
	callq	_deduceDatabaseType
                                        ## kill: def $al killed $al killed $eax
	movq	-8(%rbp), %rdx
	movb	%al, 13(%rdx)
LBB70_6:
	jmp	LBB70_7
LBB70_7:
	movq	-8(%rbp), %rax
	movzbl	13(%rax), %ecx
	movl	%ecx, %eax
	movq	%rax, %rdx
	subq	$6, %rdx
	movq	%rax, -56(%rbp)         ## 8-byte Spill
	ja	LBB70_13
## %bb.38:
	leaq	LJTI70_0(%rip), %rax
	movq	-56(%rbp), %rcx         ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB70_8:
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	52(%rax), %ecx
	orl	$6, %ecx
	movl	%ecx, %edx
	leaq	L_.str.130(%rip), %rcx
	callq	_sqlite3_open_v2
	jmp	LBB70_13
LBB70_9:
	xorl	%eax, %eax
	movl	%eax, %edi
	movq	-8(%rbp), %rsi
	callq	_sqlite3_open
	jmp	LBB70_13
LBB70_10:
	movq	-8(%rbp), %rsi
	leaq	L_.str.22(%rip), %rdi
	callq	_sqlite3_open
	jmp	LBB70_13
LBB70_11:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movl	52(%rdx), %eax
	orl	$1, %eax
	movl	%eax, %edx
	callq	_sqlite3_open_v2
	jmp	LBB70_13
LBB70_12:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movl	52(%rdx), %eax
	orl	$6, %eax
	movl	%eax, %edx
	callq	_sqlite3_open_v2
LBB70_13:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, _globalDb(%rip)
	movq	-8(%rbp), %rax
	cmpq	$0, (%rax)
	je	LBB70_15
## %bb.14:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_errcode
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	je	LBB70_18
LBB70_15:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -64(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	movq	%rdx, -72(%rbp)         ## 8-byte Spill
	callq	_sqlite3_errmsg
	movq	-64(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.238(%rip), %rsi
	movq	-72(%rbp), %rdx         ## 8-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
	movl	-12(%rbp), %r8d
	andl	$1, %r8d
	cmpl	$0, %r8d
	je	LBB70_17
## %bb.16:
	movq	-8(%rbp), %rsi
	leaq	L_.str.22(%rip), %rdi
	callq	_sqlite3_open
	jmp	LBB70_37
LBB70_17:
	movl	$1, %edi
	callq	_exit
LBB70_18:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movl	$1, %esi
	callq	_sqlite3_enable_load_extension
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	%rdx, %rsi
	movl	%eax, -76(%rbp)         ## 4-byte Spill
	callq	_sqlite3_fileio_init
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	%rdx, %rsi
	movl	%eax, -80(%rbp)         ## 4-byte Spill
	callq	_sqlite3_shathree_init
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	%rdx, %rsi
	movl	%eax, -84(%rbp)         ## 4-byte Spill
	callq	_sqlite3_completion_init
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	%rdx, %rsi
	movl	%eax, -88(%rbp)         ## 4-byte Spill
	callq	_sqlite3_uint_init
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	%rdx, %rsi
	movl	%eax, -92(%rbp)         ## 4-byte Spill
	callq	_sqlite3_decimal_init
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	%rdx, %rsi
	movl	%eax, -96(%rbp)         ## 4-byte Spill
	callq	_sqlite3_regexp_init
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	%rdx, %rsi
	movl	%eax, -100(%rbp)        ## 4-byte Spill
	callq	_sqlite3_ieee_init
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	%rdx, %rsi
	movl	%eax, -104(%rbp)        ## 4-byte Spill
	callq	_sqlite3_series_init
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.239(%rip), %rsi
	movl	$3, %edx
	movl	$1, %ecx
	leaq	_shellAddSchemaName(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movl	%eax, -108(%rbp)        ## 4-byte Spill
	callq	_sqlite3_create_function
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	leaq	L_.str.240(%rip), %rsi
	movl	$1, %ecx
	movl	%ecx, %edx
	leaq	_shellModuleSchema(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movl	%eax, -112(%rbp)        ## 4-byte Spill
	callq	_sqlite3_create_function
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	-8(%rbp), %r8
	leaq	L_.str.241(%rip), %r9
	movq	%rsi, -120(%rbp)        ## 8-byte Spill
	movq	%r9, %rsi
	movl	$1, %ecx
	movl	%ecx, %edx
	leaq	_shellPutsFunc(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movl	%eax, -124(%rbp)        ## 4-byte Spill
	callq	_sqlite3_create_function
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	leaq	L_.str.242(%rip), %rsi
	movl	$1, %ecx
	movl	%ecx, %edx
	leaq	_shellEscapeCrnl(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movl	%eax, -128(%rbp)        ## 4-byte Spill
	callq	_sqlite3_create_function
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	leaq	L_.str.243(%rip), %rsi
	movl	$2, %edx
	movl	$1, %ecx
	leaq	_shellInt32(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movl	%eax, -132(%rbp)        ## 4-byte Spill
	callq	_sqlite3_create_function
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	leaq	L_.str.244(%rip), %rsi
	movl	$1, %ecx
	movl	%ecx, %edx
	leaq	_shellIdQuote(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movl	%eax, -136(%rbp)        ## 4-byte Spill
	callq	_sqlite3_create_function
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	leaq	L_.str.245(%rip), %rsi
	movl	$1, %ecx
	movl	%ecx, %edx
	leaq	_shellUSleepFunc(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movl	%eax, -140(%rbp)        ## 4-byte Spill
	callq	_sqlite3_create_function
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	leaq	L_.str.246(%rip), %rsi
	movl	$1, %ecx
	movl	%ecx, %edx
	leaq	_editFunc(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movl	%eax, -144(%rbp)        ## 4-byte Spill
	callq	_sqlite3_create_function
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	leaq	L_.str.246(%rip), %rsi
	movl	$2, %edx
	movl	$1, %ecx
	leaq	_editFunc(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movl	%eax, -148(%rbp)        ## 4-byte Spill
	callq	_sqlite3_create_function
	movq	-8(%rbp), %rsi
	movzbl	13(%rsi), %ecx
	cmpl	$3, %ecx
	jne	LBB70_20
## %bb.19:
	movq	-24(%rbp), %rsi
	leaq	L_.str.247(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	_shell_check_oom
	xorl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdi
	movq	-32(%rbp), %rsi
	movq	%rax, %rdx
	movq	%rax, %rcx
	movq	%rax, %r8
	callq	_sqlite3_exec
	movq	-32(%rbp), %rdi
	movl	%eax, -152(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
	jmp	LBB70_33
LBB70_20:
	movq	-8(%rbp), %rax
	movzbl	13(%rax), %ecx
	cmpl	$5, %ecx
	je	LBB70_22
## %bb.21:
	movq	-8(%rbp), %rax
	movzbl	13(%rax), %ecx
	cmpl	$6, %ecx
	jne	LBB70_32
LBB70_22:
	movl	$0, -40(%rbp)
	movq	-8(%rbp), %rax
	movzbl	13(%rax), %ecx
	cmpl	$5, %ecx
	jne	LBB70_24
## %bb.23:
	movq	-24(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	callq	_readFile
	movq	%rax, -48(%rbp)
	jmp	LBB70_27
LBB70_24:
	movq	-8(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	callq	_readHexDb
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	jne	LBB70_26
## %bb.25:
	jmp	LBB70_37
LBB70_26:
	jmp	LBB70_27
LBB70_27:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-48(%rbp), %rdx
	movslq	-40(%rbp), %rcx
	movslq	-40(%rbp), %r8
	leaq	L___func__.main(%rip), %rsi
	movl	$3, %r9d
	callq	_sqlite3_deserialize
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	LBB70_29
## %bb.28:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movl	-36(%rbp), %edx
	leaq	L_.str.248(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB70_29:
	movq	-8(%rbp), %rax
	cmpq	$0, 136(%rax)
	jle	LBB70_31
## %bb.30:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	addq	$136, %rax
	leaq	L___func__.main(%rip), %rsi
	movl	$36, %edx
	movq	%rax, %rcx
	callq	_sqlite3_file_control
LBB70_31:
	jmp	LBB70_32
LBB70_32:
	jmp	LBB70_33
LBB70_33:
	jmp	LBB70_34
LBB70_34:
	movq	-8(%rbp), %rax
	movzbl	18(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB70_37
## %bb.35:
	movq	-8(%rbp), %rax
	cmpq	$0, (%rax)
	je	LBB70_37
## %bb.36:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	leaq	_safeModeAuth(%rip), %rsi
	movq	%rax, %rdx
	callq	_sqlite3_set_authorizer
LBB70_37:
	addq	$176, %rsp
	popq	%rbp
	retq
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L70_0_set_12, LBB70_12-LJTI70_0
.set L70_0_set_8, LBB70_8-LJTI70_0
.set L70_0_set_10, LBB70_10-LJTI70_0
.set L70_0_set_11, LBB70_11-LJTI70_0
.set L70_0_set_9, LBB70_9-LJTI70_0
LJTI70_0:
	.long	L70_0_set_12
	.long	L70_0_set_12
	.long	L70_0_set_8
	.long	L70_0_set_10
	.long	L70_0_set_11
	.long	L70_0_set_9
	.long	L70_0_set_9
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function process_sqliterc
_process_sqliterc:                      ## @process_sqliterc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	$0, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movl	48(%rax), %ecx
	movl	%ecx, -52(%rbp)
	cmpq	$0, -32(%rbp)
	jne	LBB71_4
## %bb.1:
	xorl	%edi, %edi
	callq	_find_home_dir
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	LBB71_3
## %bb.2:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.303(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB71_17
LBB71_3:
	movq	-24(%rbp), %rsi
	leaq	L_.str.304(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	_shell_check_oom
	movq	-40(%rbp), %rax
	movq	%rax, -32(%rbp)
LBB71_4:
	movq	-32(%rbp), %rdi
	leaq	L_.str.28(%rip), %rsi
	callq	_fopen
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	cmpq	$0, 56(%rax)
	je	LBB71_11
## %bb.5:
	cmpl	$0, _stdin_is_interactive(%rip)
	je	LBB71_7
## %bb.6:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rdx
	leaq	L_.str.305(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB71_7:
	movq	-8(%rbp), %rdi
	callq	_process_input
	cmpl	$0, %eax
	je	LBB71_10
## %bb.8:
	cmpl	$0, _bail_on_error(%rip)
	je	LBB71_10
## %bb.9:
	movl	$1, %edi
	callq	_exit
LBB71_10:
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	_fclose
	jmp	LBB71_16
LBB71_11:
	cmpq	$0, -16(%rbp)
	je	LBB71_15
## %bb.12:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rdx
	leaq	L_.str.306(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	cmpl	$0, _bail_on_error(%rip)
	je	LBB71_14
## %bb.13:
	movl	$1, %edi
	callq	_exit
LBB71_14:
	jmp	LBB71_15
LBB71_15:
	jmp	LBB71_16
LBB71_16:
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	-52(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 48(%rax)
	movq	-40(%rbp), %rdi
	callq	_sqlite3_free
LBB71_17:
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function usage
_usage:                                 ## @usage
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	___stderrp@GOTPCREL(%rip), %rax
	movl	%edi, -4(%rbp)
	movq	(%rax), %rdi
	movq	_Argv0(%rip), %rdx
	leaq	L_.str.307(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	cmpl	$0, -4(%rbp)
	je	LBB72_2
## %bb.1:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.308(%rip), %rsi
	leaq	_zOptions(%rip), %rdx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB72_3
LBB72_2:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.309(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB72_3:
	movl	$1, %edi
	callq	_exit
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function do_meta_command
_do_meta_command:                       ## @do_meta_command
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$6624, %eax             ## imm = 0x19E0
	callq	____chkstk_darwin
	subq	%rax, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -3936(%rbp)
	movq	%rsi, -3944(%rbp)
	movl	$1, -3948(%rbp)
	movl	$0, -3952(%rbp)
	movl	$0, -3964(%rbp)
	movq	-3944(%rbp), %rax
	cmpq	$0, 1624(%rax)
	je	LBB73_2
## %bb.1:
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-3944(%rbp), %rdi
	movl	$1, %esi
	callq	_expertFinish
LBB73_2:
	jmp	LBB73_3
LBB73_3:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB73_7 Depth 2
                                        ##     Child Loop BB73_28 Depth 2
                                        ##     Child Loop BB73_14 Depth 2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-3936(%rbp), %rcx
	movslq	-3948(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	cmpl	$0, %esi
	movb	%al, -5457(%rbp)        ## 1-byte Spill
	je	LBB73_5
## %bb.4:                               ##   in Loop: Header=BB73_3 Depth=1
	cmpl	$51, -3952(%rbp)
	setl	%al
	movb	%al, -5457(%rbp)        ## 1-byte Spill
LBB73_5:                                ##   in Loop: Header=BB73_3 Depth=1
	movb	-5457(%rbp), %al        ## 1-byte Reload
	testb	$1, %al
	jne	LBB73_6
	jmp	LBB73_36
LBB73_6:                                ##   in Loop: Header=BB73_3 Depth=1
	jmp	LBB73_7
LBB73_7:                                ##   Parent Loop BB73_3 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-3936(%rbp), %rax
	movslq	-3948(%rbp), %rcx
	movzbl	(%rax,%rcx), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB73_9
## %bb.8:                               ##   in Loop: Header=BB73_7 Depth=2
	movl	-3948(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -3948(%rbp)
	jmp	LBB73_7
LBB73_9:                                ##   in Loop: Header=BB73_3 Depth=1
	movq	-3936(%rbp), %rax
	movslq	-3948(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$0, %edx
	jne	LBB73_11
## %bb.10:
	jmp	LBB73_36
LBB73_11:                               ##   in Loop: Header=BB73_3 Depth=1
	movq	-3936(%rbp), %rax
	movslq	-3948(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$39, %edx
	je	LBB73_13
## %bb.12:                              ##   in Loop: Header=BB73_3 Depth=1
	movq	-3936(%rbp), %rax
	movslq	-3948(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$34, %edx
	jne	LBB73_27
LBB73_13:                               ##   in Loop: Header=BB73_3 Depth=1
	movq	-3936(%rbp), %rax
	movl	-3948(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -3948(%rbp)
	movslq	%ecx, %rsi
	movsbl	(%rax,%rsi), %ecx
	movl	%ecx, -3968(%rbp)
	movq	-3936(%rbp), %rax
	movslq	-3948(%rbp), %rsi
	addq	%rsi, %rax
	movl	-3952(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -3952(%rbp)
	movslq	%ecx, %rsi
	movq	%rax, -432(%rbp,%rsi,8)
LBB73_14:                               ##   Parent Loop BB73_3 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-3936(%rbp), %rcx
	movslq	-3948(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	cmpl	$0, %esi
	movb	%al, -5458(%rbp)        ## 1-byte Spill
	je	LBB73_16
## %bb.15:                              ##   in Loop: Header=BB73_14 Depth=2
	movq	-3936(%rbp), %rax
	movslq	-3948(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	-3968(%rbp), %edx
	setne	%sil
	movb	%sil, -5458(%rbp)       ## 1-byte Spill
LBB73_16:                               ##   in Loop: Header=BB73_14 Depth=2
	movb	-5458(%rbp), %al        ## 1-byte Reload
	testb	$1, %al
	jne	LBB73_17
	jmp	LBB73_22
LBB73_17:                               ##   in Loop: Header=BB73_14 Depth=2
	movq	-3936(%rbp), %rax
	movslq	-3948(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$92, %edx
	jne	LBB73_21
## %bb.18:                              ##   in Loop: Header=BB73_14 Depth=2
	cmpl	$34, -3968(%rbp)
	jne	LBB73_21
## %bb.19:                              ##   in Loop: Header=BB73_14 Depth=2
	movq	-3936(%rbp), %rax
	movl	-3948(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$0, %ecx
	je	LBB73_21
## %bb.20:                              ##   in Loop: Header=BB73_14 Depth=2
	movl	-3948(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -3948(%rbp)
LBB73_21:                               ##   in Loop: Header=BB73_14 Depth=2
	movl	-3948(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -3948(%rbp)
	jmp	LBB73_14
LBB73_22:                               ##   in Loop: Header=BB73_3 Depth=1
	movq	-3936(%rbp), %rax
	movslq	-3948(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	-3968(%rbp), %edx
	jne	LBB73_24
## %bb.23:                              ##   in Loop: Header=BB73_3 Depth=1
	movq	-3936(%rbp), %rax
	movl	-3948(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -3948(%rbp)
	movslq	%ecx, %rsi
	movb	$0, (%rax,%rsi)
LBB73_24:                               ##   in Loop: Header=BB73_3 Depth=1
	cmpl	$34, -3968(%rbp)
	jne	LBB73_26
## %bb.25:                              ##   in Loop: Header=BB73_3 Depth=1
	movl	-3952(%rbp), %eax
	subl	$1, %eax
	movslq	%eax, %rcx
	movq	-432(%rbp,%rcx,8), %rdi
	callq	_resolve_backslashes
LBB73_26:                               ##   in Loop: Header=BB73_3 Depth=1
	jmp	LBB73_35
LBB73_27:                               ##   in Loop: Header=BB73_3 Depth=1
	movq	-3936(%rbp), %rax
	movslq	-3948(%rbp), %rcx
	addq	%rcx, %rax
	movl	-3952(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -3952(%rbp)
	movslq	%edx, %rcx
	movq	%rax, -432(%rbp,%rcx,8)
LBB73_28:                               ##   Parent Loop BB73_3 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-3936(%rbp), %rcx
	movslq	-3948(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	cmpl	$0, %esi
	movb	%al, -5459(%rbp)        ## 1-byte Spill
	je	LBB73_30
## %bb.29:                              ##   in Loop: Header=BB73_28 Depth=2
	movq	-3936(%rbp), %rax
	movslq	-3948(%rbp), %rcx
	movzbl	(%rax,%rcx), %edi
	callq	_isspace
	cmpl	$0, %eax
	setne	%dl
	xorb	$-1, %dl
	movb	%dl, -5459(%rbp)        ## 1-byte Spill
LBB73_30:                               ##   in Loop: Header=BB73_28 Depth=2
	movb	-5459(%rbp), %al        ## 1-byte Reload
	testb	$1, %al
	jne	LBB73_31
	jmp	LBB73_32
LBB73_31:                               ##   in Loop: Header=BB73_28 Depth=2
	movl	-3948(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -3948(%rbp)
	jmp	LBB73_28
LBB73_32:                               ##   in Loop: Header=BB73_3 Depth=1
	movq	-3936(%rbp), %rax
	movslq	-3948(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	LBB73_34
## %bb.33:                              ##   in Loop: Header=BB73_3 Depth=1
	movq	-3936(%rbp), %rax
	movl	-3948(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -3948(%rbp)
	movslq	%ecx, %rsi
	movb	$0, (%rax,%rsi)
LBB73_34:                               ##   in Loop: Header=BB73_3 Depth=1
	movl	-3952(%rbp), %eax
	subl	$1, %eax
	movslq	%eax, %rcx
	movq	-432(%rbp,%rcx,8), %rdi
	callq	_resolve_backslashes
LBB73_35:                               ##   in Loop: Header=BB73_3 Depth=1
	jmp	LBB73_3
LBB73_36:
	movslq	-3952(%rbp), %rax
	movq	$0, -432(%rbp,%rax,8)
	cmpl	$0, -3952(%rbp)
	jne	LBB73_38
## %bb.37:
	movl	$0, -3924(%rbp)
	jmp	LBB73_1633
LBB73_38:
	movq	-432(%rbp), %rdi
	callq	_strlen30
	movl	%eax, -3956(%rbp)
	movq	-432(%rbp), %rcx
	movsbl	(%rcx), %eax
	movl	%eax, -3960(%rbp)
	movq	-3944(%rbp), %rdi
	callq	_clearTempFile
	cmpl	$97, -3960(%rbp)
	jne	LBB73_49
## %bb.39:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.310(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_49
## %bb.40:
	cmpl	$2, -3952(%rbp)
	je	LBB73_42
## %bb.41:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.311(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_42:
	xorl	%esi, %esi
	movq	-3944(%rbp), %rdi
	callq	_open_db
	movq	-424(%rbp), %rdi
	callq	_booleanValue
	cmpl	$0, %eax
	je	LBB73_44
## %bb.43:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-3944(%rbp), %rax
	leaq	_shellAuth(%rip), %rsi
	movq	%rax, %rdx
	callq	_sqlite3_set_authorizer
	jmp	LBB73_48
LBB73_44:
	movq	-3944(%rbp), %rax
	cmpb	$0, 18(%rax)
	je	LBB73_46
## %bb.45:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-3944(%rbp), %rax
	leaq	_safeModeAuth(%rip), %rsi
	movq	%rax, %rdx
	callq	_sqlite3_set_authorizer
	jmp	LBB73_47
LBB73_46:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	movq	%rcx, %rsi
	movq	%rcx, %rdx
	callq	_sqlite3_set_authorizer
LBB73_47:
	jmp	LBB73_48
LBB73_48:
	jmp	LBB73_1627
LBB73_49:
	cmpl	$98, -3960(%rbp)
	jne	LBB73_52
## %bb.50:
	cmpl	$3, -3956(%rbp)
	jl	LBB73_52
## %bb.51:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.312(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	je	LBB73_55
LBB73_52:
	cmpl	$115, -3960(%rbp)
	jne	LBB73_93
## %bb.53:
	cmpl	$3, -3956(%rbp)
	jl	LBB73_93
## %bb.54:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.313(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_93
LBB73_55:
	movq	$0, -3976(%rbp)
	movq	$0, -3984(%rbp)
	movl	$0, -4008(%rbp)
	movq	$0, -4016(%rbp)
	movq	-3944(%rbp), %rdi
	movq	-432(%rbp), %rdx
	leaq	L_.str.314(%rip), %rsi
	movb	$0, %al
	callq	_failIfSafeMode
	movl	$1, -4004(%rbp)
LBB73_56:                               ## =>This Inner Loop Header: Depth=1
	movl	-4004(%rbp), %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_76
## %bb.57:                              ##   in Loop: Header=BB73_56 Depth=1
	movslq	-4004(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movq	%rax, -4024(%rbp)
	movq	-4024(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_67
## %bb.58:                              ##   in Loop: Header=BB73_56 Depth=1
	movq	-4024(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_60
## %bb.59:                              ##   in Loop: Header=BB73_56 Depth=1
	movq	-4024(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -4024(%rbp)
LBB73_60:                               ##   in Loop: Header=BB73_56 Depth=1
	movq	-4024(%rbp), %rdi
	leaq	L_.str.52(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_62
## %bb.61:                              ##   in Loop: Header=BB73_56 Depth=1
	leaq	L_.str.130(%rip), %rax
	movq	%rax, -4016(%rbp)
	jmp	LBB73_66
LBB73_62:                               ##   in Loop: Header=BB73_56 Depth=1
	movq	-4024(%rbp), %rdi
	leaq	L_.str.315(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_64
## %bb.63:                              ##   in Loop: Header=BB73_56 Depth=1
	movl	$1, -4008(%rbp)
	jmp	LBB73_65
LBB73_64:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movslq	-4004(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdx
	leaq	L_.str.316(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3924(%rbp)
	jmp	LBB73_1633
LBB73_65:                               ##   in Loop: Header=BB73_56 Depth=1
	jmp	LBB73_66
LBB73_66:                               ##   in Loop: Header=BB73_56 Depth=1
	jmp	LBB73_74
LBB73_67:                               ##   in Loop: Header=BB73_56 Depth=1
	cmpq	$0, -3976(%rbp)
	jne	LBB73_69
## %bb.68:                              ##   in Loop: Header=BB73_56 Depth=1
	movslq	-4004(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movq	%rax, -3976(%rbp)
	jmp	LBB73_73
LBB73_69:                               ##   in Loop: Header=BB73_56 Depth=1
	cmpq	$0, -3984(%rbp)
	jne	LBB73_71
## %bb.70:                              ##   in Loop: Header=BB73_56 Depth=1
	movq	-3976(%rbp), %rax
	movq	%rax, -3984(%rbp)
	movslq	-4004(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movq	%rax, -3976(%rbp)
	jmp	LBB73_72
LBB73_71:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.317(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3924(%rbp)
	jmp	LBB73_1633
LBB73_72:                               ##   in Loop: Header=BB73_56 Depth=1
	jmp	LBB73_73
LBB73_73:                               ##   in Loop: Header=BB73_56 Depth=1
	jmp	LBB73_74
LBB73_74:                               ##   in Loop: Header=BB73_56 Depth=1
	jmp	LBB73_75
LBB73_75:                               ##   in Loop: Header=BB73_56 Depth=1
	movl	-4004(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4004(%rbp)
	jmp	LBB73_56
LBB73_76:
	cmpq	$0, -3976(%rbp)
	jne	LBB73_78
## %bb.77:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.318(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3924(%rbp)
	jmp	LBB73_1633
LBB73_78:
	cmpq	$0, -3984(%rbp)
	jne	LBB73_80
## %bb.79:
	leaq	L___func__.main(%rip), %rax
	movq	%rax, -3984(%rbp)
LBB73_80:
	movq	-3976(%rbp), %rdi
	movq	-4016(%rbp), %rcx
	leaq	-3992(%rbp), %rsi
	movl	$6, %edx
	callq	_sqlite3_open_v2
	movl	%eax, -3964(%rbp)
	cmpl	$0, -3964(%rbp)
	je	LBB73_82
## %bb.81:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-3976(%rbp), %rdx
	leaq	L_.str.319(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-3992(%rbp), %rdi
	movl	%eax, -5464(%rbp)       ## 4-byte Spill
	callq	_close_db
	movl	$1, -3924(%rbp)
	jmp	LBB73_1633
LBB73_82:
	cmpl	$0, -4008(%rbp)
	je	LBB73_84
## %bb.83:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-3992(%rbp), %rdi
	leaq	L_.str.320(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -5472(%rbp)       ## 8-byte Spill
	movq	-5472(%rbp), %r8        ## 8-byte Reload
	callq	_sqlite3_exec
LBB73_84:
	xorl	%esi, %esi
	movq	-3944(%rbp), %rdi
	callq	_open_db
	movq	-3992(%rbp), %rdi
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdx
	movq	-3984(%rbp), %rcx
	leaq	L___func__.main(%rip), %rsi
	callq	_sqlite3_backup_init
	movq	%rax, -4000(%rbp)
	cmpq	$0, -4000(%rbp)
	jne	LBB73_86
## %bb.85:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-3992(%rbp), %rax
	movq	%rdi, -5480(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-5480(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.92(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	movq	-3992(%rbp), %rdi
	movl	%eax, -5484(%rbp)       ## 4-byte Spill
	callq	_close_db
	movl	$1, -3924(%rbp)
	jmp	LBB73_1633
LBB73_86:
	jmp	LBB73_87
LBB73_87:                               ## =>This Inner Loop Header: Depth=1
	movq	-4000(%rbp), %rdi
	movl	$100, %esi
	callq	_sqlite3_backup_step
	movl	%eax, -3964(%rbp)
	cmpl	$0, %eax
	jne	LBB73_89
## %bb.88:                              ##   in Loop: Header=BB73_87 Depth=1
	jmp	LBB73_87
LBB73_89:
	movq	-4000(%rbp), %rdi
	callq	_sqlite3_backup_finish
	cmpl	$101, -3964(%rbp)
	jne	LBB73_91
## %bb.90:
	movl	$0, -3964(%rbp)
	jmp	LBB73_92
LBB73_91:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-3992(%rbp), %rax
	movq	%rdi, -5496(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-5496(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.92(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_92:
	movq	-3992(%rbp), %rdi
	callq	_close_db
	jmp	LBB73_1626
LBB73_93:
	cmpl	$98, -3960(%rbp)
	jne	LBB73_100
## %bb.94:
	cmpl	$3, -3956(%rbp)
	jl	LBB73_100
## %bb.95:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.321(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_100
## %bb.96:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_98
## %bb.97:
	movq	-424(%rbp), %rdi
	callq	_booleanValue
	movl	%eax, _bail_on_error(%rip)
	jmp	LBB73_99
LBB73_98:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.322(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_99:
	jmp	LBB73_1625
LBB73_100:
	cmpl	$98, -3960(%rbp)
	jne	LBB73_110
## %bb.101:
	cmpl	$3, -3956(%rbp)
	jl	LBB73_110
## %bb.102:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.170(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_110
## %bb.103:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_108
## %bb.104:
	movq	-424(%rbp), %rdi
	callq	_booleanValue
	cmpl	$0, %eax
	je	LBB73_106
## %bb.105:
	jmp	LBB73_107
LBB73_106:
	jmp	LBB73_107
LBB73_107:
	jmp	LBB73_109
LBB73_108:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.323(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_109:
	jmp	LBB73_1624
LBB73_110:
	cmpl	$98, -3960(%rbp)
	jne	LBB73_114
## %bb.111:
	cmpl	$3, -3956(%rbp)
	jl	LBB73_114
## %bb.112:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.324(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_114
## %bb.113:
	callq	_test_breakpoint
	jmp	LBB73_1623
LBB73_114:
	cmpl	$99, -3960(%rbp)
	jne	LBB73_122
## %bb.115:
	movq	-432(%rbp), %rdi
	leaq	L_.str.325(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_122
## %bb.116:
	movq	-3944(%rbp), %rdi
	leaq	L_.str.326(%rip), %rsi
	movb	$0, %al
	callq	_failIfSafeMode
	cmpl	$2, -3952(%rbp)
	jne	LBB73_120
## %bb.117:
	movq	-424(%rbp), %rdi
	callq	_chdir
	movl	%eax, -3964(%rbp)
	cmpl	$0, -3964(%rbp)
	je	LBB73_119
## %bb.118:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-424(%rbp), %rdx
	leaq	L_.str.327(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_119:
	jmp	LBB73_121
LBB73_120:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.328(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_121:
	jmp	LBB73_1622
LBB73_122:
	cmpl	$99, -3960(%rbp)
	jne	LBB73_129
## %bb.123:
	cmpl	$3, -3956(%rbp)
	jl	LBB73_129
## %bb.124:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.329(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_129
## %bb.125:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_127
## %bb.126:
	movq	-3944(%rbp), %rdi
	movq	-424(%rbp), %rdx
	movl	$32, %esi
	callq	_setOrClearFlag
	jmp	LBB73_128
LBB73_127:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.330(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_128:
	jmp	LBB73_1621
LBB73_129:
	cmpl	$99, -3960(%rbp)
	jne	LBB73_142
## %bb.130:
	cmpl	$3, -3956(%rbp)
	jl	LBB73_142
## %bb.131:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.331(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_142
## %bb.132:
	movq	$0, -4032(%rbp)
	movq	-3944(%rbp), %rdi
	callq	_output_reset
	cmpl	$2, -3952(%rbp)
	je	LBB73_134
## %bb.133:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.332(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$2, -3964(%rbp)
	jmp	LBB73_141
LBB73_134:
	xorl	%eax, %eax
	movl	%eax, %esi
	leaq	L_.str.333(%rip), %rdi
	callq	_readFile
	movq	%rax, -4032(%rbp)
	cmpq	$0, %rax
	jne	LBB73_136
## %bb.135:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.334(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$2, -3964(%rbp)
	jmp	LBB73_140
LBB73_136:
	movq	-424(%rbp), %rdi
	movq	-4032(%rbp), %rsi
	callq	_testcase_glob
	cmpl	$0, %eax
	jne	LBB73_138
## %bb.137:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-3944(%rbp), %rax
	addq	$160, %rax
	movq	-424(%rbp), %rcx
	movq	-4032(%rbp), %r8
	leaq	L_.str.335(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_139
LBB73_138:
	movq	___stdoutp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-3944(%rbp), %rax
	addq	$160, %rax
	leaq	L_.str.336(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movl	108(%rcx), %r8d
	addl	$1, %r8d
	movl	%r8d, 108(%rcx)
LBB73_139:
	jmp	LBB73_140
LBB73_140:
	jmp	LBB73_141
LBB73_141:
	movq	-4032(%rbp), %rdi
	callq	_sqlite3_free
	jmp	LBB73_1620
LBB73_142:
	cmpl	$99, -3960(%rbp)
	jne	LBB73_148
## %bb.143:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.337(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_148
## %bb.144:
	movq	-3944(%rbp), %rdi
	leaq	L_.str.338(%rip), %rsi
	movb	$0, %al
	callq	_failIfSafeMode
	cmpl	$2, -3952(%rbp)
	jne	LBB73_146
## %bb.145:
	movq	-3944(%rbp), %rdi
	movq	-424(%rbp), %rsi
	callq	_tryToClone
	jmp	LBB73_147
LBB73_146:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.339(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_147:
	jmp	LBB73_1619
LBB73_148:
	cmpl	$99, -3960(%rbp)
	jne	LBB73_196
## %bb.149:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.340(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_196
## %bb.150:
	cmpl	$1, -3952(%rbp)
	jne	LBB73_170
## %bb.151:
	movl	$0, -4036(%rbp)
LBB73_152:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$5, -4036(%rbp)
	jge	LBB73_169
## %bb.153:                             ##   in Loop: Header=BB73_152 Depth=1
	movq	-3944(%rbp), %rax
	addq	$1352, %rax             ## imm = 0x548
	movslq	-4036(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	8(%rax), %rax
	movq	%rax, -4048(%rbp)
	movq	-3944(%rbp), %rax
	addq	$1352, %rax             ## imm = 0x548
	movslq	-4036(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpq	$0, (%rax)
	jne	LBB73_156
## %bb.154:                             ##   in Loop: Header=BB73_152 Depth=1
	movq	-3944(%rbp), %rax
	movq	1472(%rax), %rax
	movq	-3944(%rbp), %rcx
	addq	$1352, %rcx             ## imm = 0x548
	movslq	-4036(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	cmpq	%rcx, %rax
	je	LBB73_156
## %bb.155:                             ##   in Loop: Header=BB73_152 Depth=1
	leaq	L_.str.341(%rip), %rax
	movq	%rax, -4048(%rbp)
	jmp	LBB73_162
LBB73_156:                              ##   in Loop: Header=BB73_152 Depth=1
	cmpq	$0, -4048(%rbp)
	jne	LBB73_158
## %bb.157:                             ##   in Loop: Header=BB73_152 Depth=1
	leaq	L_.str.342(%rip), %rax
	movq	%rax, -4048(%rbp)
	jmp	LBB73_161
LBB73_158:                              ##   in Loop: Header=BB73_152 Depth=1
	movq	-4048(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB73_160
## %bb.159:                             ##   in Loop: Header=BB73_152 Depth=1
	leaq	L_.str.343(%rip), %rax
	movq	%rax, -4048(%rbp)
LBB73_160:                              ##   in Loop: Header=BB73_152 Depth=1
	jmp	LBB73_161
LBB73_161:                              ##   in Loop: Header=BB73_152 Depth=1
	jmp	LBB73_162
LBB73_162:                              ##   in Loop: Header=BB73_152 Depth=1
	movq	-3944(%rbp), %rax
	movq	1472(%rax), %rax
	movq	-3944(%rbp), %rcx
	addq	$1352, %rcx             ## imm = 0x548
	movslq	-4036(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	cmpq	%rcx, %rax
	jne	LBB73_164
## %bb.163:                             ##   in Loop: Header=BB73_152 Depth=1
	movq	___stdoutp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movl	-4036(%rbp), %edx
	movq	-4048(%rbp), %rcx
	leaq	L_.str.344(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_167
LBB73_164:                              ##   in Loop: Header=BB73_152 Depth=1
	movq	-3944(%rbp), %rax
	addq	$1352, %rax             ## imm = 0x548
	movslq	-4036(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpq	$0, (%rax)
	je	LBB73_166
## %bb.165:                             ##   in Loop: Header=BB73_152 Depth=1
	movq	___stdoutp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movl	-4036(%rbp), %edx
	movq	-4048(%rbp), %rcx
	leaq	L_.str.345(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_166:                              ##   in Loop: Header=BB73_152 Depth=1
	jmp	LBB73_167
LBB73_167:                              ##   in Loop: Header=BB73_152 Depth=1
	jmp	LBB73_168
LBB73_168:                              ##   in Loop: Header=BB73_152 Depth=1
	movl	-4036(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4036(%rbp)
	jmp	LBB73_152
LBB73_169:
	jmp	LBB73_195
LBB73_170:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_178
## %bb.171:
	movq	-424(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isdigit
	cmpl	$0, %eax
	je	LBB73_178
## %bb.172:
	movq	-424(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB73_178
## %bb.173:
	movq	-424(%rbp), %rax
	movsbl	(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, -4052(%rbp)
	movq	-3944(%rbp), %rax
	movq	1472(%rax), %rax
	movq	-3944(%rbp), %rdx
	addq	$1352, %rdx             ## imm = 0x548
	movslq	-4052(%rbp), %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rdx
	cmpq	%rdx, %rax
	je	LBB73_177
## %bb.174:
	cmpl	$0, -4052(%rbp)
	jl	LBB73_177
## %bb.175:
	cmpl	$5, -4052(%rbp)
	jge	LBB73_177
## %bb.176:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rax
	movq	-3944(%rbp), %rcx
	movq	1472(%rcx), %rcx
	movq	%rax, (%rcx)
	movq	-3944(%rbp), %rax
	addq	$1352, %rax             ## imm = 0x548
	movslq	-4052(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	-3944(%rbp), %rcx
	movq	%rax, 1472(%rcx)
	movq	-3944(%rbp), %rax
	movq	1472(%rax), %rax
	movq	(%rax), %rax
	movq	-3944(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	%rax, _globalDb(%rip)
	movq	-3944(%rbp), %rax
	movq	1472(%rax), %rax
	movq	$0, (%rax)
LBB73_177:
	jmp	LBB73_194
LBB73_178:
	cmpl	$3, -3952(%rbp)
	jne	LBB73_192
## %bb.179:
	movq	-424(%rbp), %rdi
	leaq	L_.str.346(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_192
## %bb.180:
	movq	-416(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isdigit
	cmpl	$0, %eax
	je	LBB73_192
## %bb.181:
	movq	-416(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB73_192
## %bb.182:
	movq	-416(%rbp), %rax
	movsbl	(%rax), %ecx
	subl	$48, %ecx
	movl	%ecx, -4056(%rbp)
	cmpl	$0, -4056(%rbp)
	jl	LBB73_184
## %bb.183:
	cmpl	$5, -4056(%rbp)
	jl	LBB73_185
LBB73_184:
	jmp	LBB73_191
LBB73_185:
	movq	-3944(%rbp), %rax
	movq	1472(%rax), %rax
	movq	-3944(%rbp), %rcx
	addq	$1352, %rcx             ## imm = 0x548
	movslq	-4056(%rbp), %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	cmpq	%rcx, %rax
	jne	LBB73_187
## %bb.186:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.347(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_190
LBB73_187:
	movq	-3944(%rbp), %rax
	addq	$1352, %rax             ## imm = 0x548
	movslq	-4056(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpq	$0, (%rax)
	je	LBB73_189
## %bb.188:
	movq	-3944(%rbp), %rax
	addq	$1352, %rax             ## imm = 0x548
	movslq	-4056(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	callq	_close_db
	movq	-3944(%rbp), %rax
	addq	$1352, %rax             ## imm = 0x548
	movslq	-4056(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	$0, (%rax)
LBB73_189:
	jmp	LBB73_190
LBB73_190:
	jmp	LBB73_191
LBB73_191:
	jmp	LBB73_193
LBB73_192:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.348(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_193:
	jmp	LBB73_194
LBB73_194:
	jmp	LBB73_195
LBB73_195:
	jmp	LBB73_1618
LBB73_196:
	cmpl	$100, -3960(%rbp)
	jne	LBB73_220
## %bb.197:
	cmpl	$1, -3956(%rbp)
	jle	LBB73_220
## %bb.198:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.349(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_220
## %bb.199:
	xorl	%esi, %esi
	movq	$0, -4064(%rbp)
	movl	$0, -4068(%rbp)
	movq	-3944(%rbp), %rdi
	callq	_open_db
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.126(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-4080(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -3964(%rbp)
	cmpl	$0, -3964(%rbp)
	je	LBB73_201
## %bb.200:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-3944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -5504(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-5504(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.92(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_208
LBB73_201:
	jmp	LBB73_202
LBB73_202:                              ## =>This Inner Loop Header: Depth=1
	movq	-4080(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB73_207
## %bb.203:                             ##   in Loop: Header=BB73_202 Depth=1
	movq	-4080(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -4096(%rbp)
	movq	-4080(%rbp), %rdi
	movl	$2, %esi
	callq	_sqlite3_column_text
	movq	%rax, -4104(%rbp)
	cmpq	$0, -4096(%rbp)
	je	LBB73_205
## %bb.204:                             ##   in Loop: Header=BB73_202 Depth=1
	cmpq	$0, -4104(%rbp)
	jne	LBB73_206
LBB73_205:                              ##   in Loop: Header=BB73_202 Depth=1
	jmp	LBB73_202
LBB73_206:                              ##   in Loop: Header=BB73_202 Depth=1
	movq	-4064(%rbp), %rax
	movl	-4068(%rbp), %ecx
	addl	$1, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$3, %rdx
                                        ## kill: def $edx killed $edx killed $rdx
	movq	%rax, %rdi
	movl	%edx, %esi
	callq	_sqlite3_realloc
	movq	%rax, -4064(%rbp)
	movq	-4064(%rbp), %rax
	movq	%rax, %rdi
	callq	_shell_check_oom
	movq	-4096(%rbp), %rdi
	callq	_strdup
	movq	-4064(%rbp), %rdi
	movl	-4068(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %r8
	movq	%rax, (%rdi,%r8,8)
	movq	-4104(%rbp), %rdi
	callq	_strdup
	movq	-4064(%rbp), %rdi
	movl	-4068(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %r8
	movq	%rax, (%rdi,%r8,8)
	movl	-4068(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -4068(%rbp)
	jmp	LBB73_202
LBB73_207:
	jmp	LBB73_208
LBB73_208:
	movq	-4080(%rbp), %rdi
	callq	_sqlite3_finalize
	movl	$0, -4084(%rbp)
LBB73_209:                              ## =>This Inner Loop Header: Depth=1
	movl	-4084(%rbp), %eax
	cmpl	-4068(%rbp), %eax
	jge	LBB73_219
## %bb.210:                             ##   in Loop: Header=BB73_209 Depth=1
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-4064(%rbp), %rax
	movl	-4084(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rdx
	movq	(%rax,%rdx,8), %rsi
	callq	_sqlite3_txn_state
	movl	%eax, -4108(%rbp)
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	movq	-4064(%rbp), %rdx
	movl	-4084(%rbp), %eax
	shll	$1, %eax
	movslq	%eax, %rsi
	movq	(%rdx,%rsi,8), %rsi
	callq	_sqlite3_db_readonly
	movl	%eax, -4112(%rbp)
	movq	-4064(%rbp), %rdx
	movl	-4084(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	%rdx, -4120(%rbp)
	movq	-3944(%rbp), %rdx
	movq	64(%rdx), %rdi
	movq	-4064(%rbp), %rdx
	movl	-4084(%rbp), %eax
	shll	$1, %eax
	movslq	%eax, %rsi
	movq	(%rdx,%rsi,8), %rdx
	cmpq	$0, -4120(%rbp)
	movq	%rdi, -5512(%rbp)       ## 8-byte Spill
	movq	%rdx, -5520(%rbp)       ## 8-byte Spill
	je	LBB73_213
## %bb.211:                             ##   in Loop: Header=BB73_209 Depth=1
	movq	-4120(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB73_213
## %bb.212:                             ##   in Loop: Header=BB73_209 Depth=1
	movq	-4120(%rbp), %rax
	movq	%rax, -5528(%rbp)       ## 8-byte Spill
	jmp	LBB73_214
LBB73_213:                              ##   in Loop: Header=BB73_209 Depth=1
	leaq	L_.str.351(%rip), %rax
	movq	%rax, -5528(%rbp)       ## 8-byte Spill
	jmp	LBB73_214
LBB73_214:                              ##   in Loop: Header=BB73_209 Depth=1
	movq	-5528(%rbp), %rax       ## 8-byte Reload
	movl	-4112(%rbp), %ecx
	cmpl	$0, %ecx
	leaq	L_.str.352(%rip), %rdx
	leaq	L_.str.353(%rip), %rsi
	cmovneq	%rdx, %rsi
	cmpl	$0, -4108(%rbp)
	movq	%rax, -5536(%rbp)       ## 8-byte Spill
	movq	%rsi, -5544(%rbp)       ## 8-byte Spill
	jne	LBB73_216
## %bb.215:                             ##   in Loop: Header=BB73_209 Depth=1
	leaq	L_.str.27(%rip), %rax
	movq	%rax, -5552(%rbp)       ## 8-byte Spill
	jmp	LBB73_217
LBB73_216:                              ##   in Loop: Header=BB73_209 Depth=1
	movl	-4108(%rbp), %eax
	cmpl	$1, %eax
	leaq	L_.str.354(%rip), %rcx
	leaq	L_.str.355(%rip), %rdx
	cmoveq	%rcx, %rdx
	movq	%rdx, -5552(%rbp)       ## 8-byte Spill
LBB73_217:                              ##   in Loop: Header=BB73_209 Depth=1
	movq	-5552(%rbp), %rax       ## 8-byte Reload
	movq	-5512(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.350(%rip), %rsi
	movq	-5520(%rbp), %rdx       ## 8-byte Reload
	movq	-5536(%rbp), %rcx       ## 8-byte Reload
	movq	-5544(%rbp), %r8        ## 8-byte Reload
	movq	%rax, %r9
	movb	$0, %al
	callq	_fprintf
	movq	-4064(%rbp), %rcx
	movl	-4084(%rbp), %r10d
	shll	$1, %r10d
	movslq	%r10d, %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	%eax, -5556(%rbp)       ## 4-byte Spill
	callq	_free
	movq	-4064(%rbp), %rcx
	movl	-4084(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	(%rcx,%rdx,8), %rdi
	callq	_free
## %bb.218:                             ##   in Loop: Header=BB73_209 Depth=1
	movl	-4084(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4084(%rbp)
	jmp	LBB73_209
LBB73_219:
	movq	-4064(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	jmp	LBB73_1617
LBB73_220:
	cmpl	$100, -3960(%rbp)
	jne	LBB73_238
## %bb.221:
	cmpl	$3, -3956(%rbp)
	jl	LBB73_238
## %bb.222:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.356(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_238
## %bb.223:
	xorl	%esi, %esi
	movq	-3944(%rbp), %rdi
	callq	_open_db
	movl	$0, -4124(%rbp)
LBB73_224:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$16, -4124(%rbp)
	jge	LBB73_234
## %bb.225:                             ##   in Loop: Header=BB73_224 Depth=1
	cmpl	$1, -3952(%rbp)
	jle	LBB73_228
## %bb.226:                             ##   in Loop: Header=BB73_224 Depth=1
	movq	-424(%rbp), %rdi
	movslq	-4124(%rbp), %rax
	shlq	$4, %rax
	leaq	_do_meta_command.aDbConfig(%rip), %rcx
	addq	%rax, %rcx
	movq	(%rcx), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB73_228
## %bb.227:                             ##   in Loop: Header=BB73_224 Depth=1
	jmp	LBB73_233
LBB73_228:                              ##   in Loop: Header=BB73_224 Depth=1
	cmpl	$3, -3952(%rbp)
	jl	LBB73_230
## %bb.229:                             ##   in Loop: Header=BB73_224 Depth=1
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movslq	-4124(%rbp), %rax
	shlq	$4, %rax
	leaq	_do_meta_command.aDbConfig(%rip), %rcx
	addq	%rax, %rcx
	movl	8(%rcx), %esi
	movq	-416(%rbp), %rax
	movq	%rdi, -5568(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -5572(%rbp)       ## 4-byte Spill
	callq	_booleanValue
	xorl	%ecx, %ecx
	movq	-5568(%rbp), %rdi       ## 8-byte Reload
	movl	-5572(%rbp), %esi       ## 4-byte Reload
	movl	%eax, %edx
	movb	$0, %al
	callq	_sqlite3_db_config
LBB73_230:                              ##   in Loop: Header=BB73_224 Depth=1
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movslq	-4124(%rbp), %rax
	shlq	$4, %rax
	leaq	_do_meta_command.aDbConfig(%rip), %rcx
	addq	%rax, %rcx
	movl	8(%rcx), %esi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-4128(%rbp), %rcx
	movb	$0, %al
	callq	_sqlite3_db_config
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movslq	-4124(%rbp), %rcx
	shlq	$4, %rcx
	leaq	_do_meta_command.aDbConfig(%rip), %r8
	addq	%rcx, %r8
	movq	(%r8), %rdx
	movl	-4128(%rbp), %esi
	cmpl	$0, %esi
	leaq	L_.str.372(%rip), %rcx
	leaq	L_.str.373(%rip), %r8
	cmovneq	%rcx, %r8
	leaq	L_.str.371(%rip), %rsi
	movq	%r8, %rcx
	movl	%eax, -5576(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	cmpl	$1, -3952(%rbp)
	jle	LBB73_232
## %bb.231:
	jmp	LBB73_234
LBB73_232:                              ##   in Loop: Header=BB73_224 Depth=1
	jmp	LBB73_233
LBB73_233:                              ##   in Loop: Header=BB73_224 Depth=1
	movl	-4124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4124(%rbp)
	jmp	LBB73_224
LBB73_234:
	cmpl	$1, -3952(%rbp)
	jle	LBB73_237
## %bb.235:
	cmpl	$16, -4124(%rbp)
	jne	LBB73_237
## %bb.236:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-424(%rbp), %rdx
	leaq	L_.str.374(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	___stderrp@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.375(%rip), %rsi
	movl	%eax, -5580(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
LBB73_237:
	jmp	LBB73_1616
LBB73_238:
	cmpl	$100, -3960(%rbp)
	jne	LBB73_242
## %bb.239:
	cmpl	$3, -3956(%rbp)
	jl	LBB73_242
## %bb.240:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.376(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_242
## %bb.241:
	leaq	-432(%rbp), %rdx
	movq	-3944(%rbp), %rdi
	movl	-3952(%rbp), %esi
	callq	_shell_dbinfo_command
	movl	%eax, -3964(%rbp)
	jmp	LBB73_1615
LBB73_242:
	cmpl	$100, -3960(%rbp)
	jne	LBB73_279
## %bb.243:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.377(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_279
## %bb.244:
	movq	$0, -4136(%rbp)
	movq	-3944(%rbp), %rax
	movl	104(%rax), %ecx
	movl	%ecx, -4152(%rbp)
	movq	-3944(%rbp), %rax
	movl	124(%rax), %ecx
	movl	%ecx, -4156(%rbp)
	movq	-3944(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$-857, %ecx             ## imm = 0xFCA7
	movl	%ecx, 124(%rax)
	movl	$1, -4148(%rbp)
LBB73_245:                              ## =>This Inner Loop Header: Depth=1
	movl	-4148(%rbp), %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_268
## %bb.246:                             ##   in Loop: Header=BB73_245 Depth=1
	movslq	-4148(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_262
## %bb.247:                             ##   in Loop: Header=BB73_245 Depth=1
	movslq	-4148(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	addq	$1, %rax
	movq	%rax, -4168(%rbp)
	movq	-4168(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_249
## %bb.248:                             ##   in Loop: Header=BB73_245 Depth=1
	movq	-4168(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -4168(%rbp)
LBB73_249:                              ##   in Loop: Header=BB73_245 Depth=1
	movq	-4168(%rbp), %rdi
	leaq	L_.str.378(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_251
## %bb.250:                             ##   in Loop: Header=BB73_245 Depth=1
	movq	-3944(%rbp), %rax
	movl	124(%rax), %ecx
	orl	$8, %ecx
	movl	%ecx, 124(%rax)
	jmp	LBB73_261
LBB73_251:                              ##   in Loop: Header=BB73_245 Depth=1
	movq	-4168(%rbp), %rdi
	leaq	L_.str.379(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_253
## %bb.252:                             ##   in Loop: Header=BB73_245 Depth=1
	movq	-3944(%rbp), %rax
	movl	124(%rax), %ecx
	orl	$16, %ecx
	movl	%ecx, 124(%rax)
	jmp	LBB73_260
LBB73_253:                              ##   in Loop: Header=BB73_245 Depth=1
	movq	-4168(%rbp), %rdi
	leaq	L_.str.380(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_255
## %bb.254:                             ##   in Loop: Header=BB73_245 Depth=1
	movq	-3944(%rbp), %rax
	movl	124(%rax), %ecx
	orl	$256, %ecx              ## imm = 0x100
	movl	%ecx, 124(%rax)
	jmp	LBB73_259
LBB73_255:                              ##   in Loop: Header=BB73_245 Depth=1
	movq	-4168(%rbp), %rdi
	leaq	L_.str.381(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_257
## %bb.256:                             ##   in Loop: Header=BB73_245 Depth=1
	movq	-3944(%rbp), %rax
	movl	124(%rax), %ecx
	orl	$512, %ecx              ## imm = 0x200
	movl	%ecx, 124(%rax)
	jmp	LBB73_258
LBB73_257:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movslq	-4148(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdx
	leaq	L_.str.382(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	movq	-4136(%rbp), %rdi
	movl	%eax, -5584(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
	jmp	LBB73_1628
LBB73_258:                              ##   in Loop: Header=BB73_245 Depth=1
	jmp	LBB73_259
LBB73_259:                              ##   in Loop: Header=BB73_245 Depth=1
	jmp	LBB73_260
LBB73_260:                              ##   in Loop: Header=BB73_245 Depth=1
	jmp	LBB73_261
LBB73_261:                              ##   in Loop: Header=BB73_245 Depth=1
	jmp	LBB73_266
LBB73_262:                              ##   in Loop: Header=BB73_245 Depth=1
	movslq	-4148(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rsi
	movslq	-4148(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdx
	leaq	L_.str.383(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4176(%rbp)
	cmpq	$0, -4136(%rbp)
	je	LBB73_264
## %bb.263:                             ##   in Loop: Header=BB73_245 Depth=1
	movq	-4136(%rbp), %rsi
	movq	-4176(%rbp), %rdx
	leaq	L_.str.384(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4136(%rbp)
	jmp	LBB73_265
LBB73_264:                              ##   in Loop: Header=BB73_245 Depth=1
	movq	-4176(%rbp), %rax
	movq	%rax, -4136(%rbp)
LBB73_265:                              ##   in Loop: Header=BB73_245 Depth=1
	jmp	LBB73_266
LBB73_266:                              ##   in Loop: Header=BB73_245 Depth=1
	jmp	LBB73_267
LBB73_267:                              ##   in Loop: Header=BB73_245 Depth=1
	movl	-4148(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4148(%rbp)
	jmp	LBB73_245
LBB73_268:
	xorl	%esi, %esi
	movq	-3944(%rbp), %rdi
	callq	_open_db
	movq	-3944(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$256, %ecx              ## imm = 0x100
	cmpl	$0, %ecx
	jne	LBB73_270
## %bb.269:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.385(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.386(%rip), %rsi
	movl	%eax, -5588(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
LBB73_270:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-3944(%rbp), %rdx
	movl	$0, 100(%rdx)
	movq	-3944(%rbp), %rdx
	movl	$0, 104(%rdx)
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.387(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -5600(%rbp)       ## 8-byte Spill
	movq	-5600(%rbp), %r8        ## 8-byte Reload
	callq	_sqlite3_exec
	movq	-3944(%rbp), %rcx
	movl	$0, 80(%rcx)
	cmpq	$0, -4136(%rbp)
	jne	LBB73_272
## %bb.271:
	leaq	L_.str.388(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4136(%rbp)
LBB73_272:
	movq	-4136(%rbp), %rsi
	leaq	L_.str.389(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4144(%rbp)
	movq	-3944(%rbp), %rdi
	movq	-4144(%rbp), %rsi
	callq	_run_schema_dump_query
	movq	-4144(%rbp), %rdi
	movl	%eax, -5604(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
	movq	-3944(%rbp), %rcx
	movl	124(%rcx), %eax
	andl	$256, %eax              ## imm = 0x100
	cmpl	$0, %eax
	jne	LBB73_274
## %bb.273:
	movq	-4136(%rbp), %rsi
	leaq	L_.str.390(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4144(%rbp)
	movq	-3944(%rbp), %rdi
	movq	-4144(%rbp), %rsi
	callq	_run_table_dump_query
	movq	-4144(%rbp), %rdi
	movl	%eax, -5608(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
LBB73_274:
	movq	-4136(%rbp), %rdi
	callq	_sqlite3_free
	movq	-3944(%rbp), %rax
	cmpl	$0, 100(%rax)
	je	LBB73_276
## %bb.275:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.391(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movl	$0, 100(%rcx)
LBB73_276:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.392(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -5616(%rbp)       ## 8-byte Spill
	movq	-5616(%rbp), %r8        ## 8-byte Reload
	callq	_sqlite3_exec
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.393(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -5624(%rbp)       ## 8-byte Spill
	movq	-5624(%rbp), %r8        ## 8-byte Reload
	movl	%eax, -5628(%rbp)       ## 4-byte Spill
	callq	_sqlite3_exec
	movq	-3944(%rbp), %rcx
	movl	124(%rcx), %r9d
	andl	$256, %r9d              ## imm = 0x100
	cmpl	$0, %r9d
	jne	LBB73_278
## %bb.277:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-3944(%rbp), %rax
	movl	80(%rax), %ecx
	cmpl	$0, %ecx
	leaq	L_.str.394(%rip), %rax
	leaq	L_.str.395(%rip), %rdx
	cmovneq	%rax, %rdx
	movq	%rdx, %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_278:
	movl	-4152(%rbp), %eax
	movq	-3944(%rbp), %rcx
	movl	%eax, 104(%rcx)
	movl	-4156(%rbp), %eax
	movq	-3944(%rbp), %rcx
	movl	%eax, 124(%rcx)
	jmp	LBB73_1614
LBB73_279:
	cmpl	$101, -3960(%rbp)
	jne	LBB73_285
## %bb.280:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.396(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_285
## %bb.281:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_283
## %bb.282:
	movq	-3944(%rbp), %rdi
	movq	-424(%rbp), %rdx
	movl	$64, %esi
	callq	_setOrClearFlag
	jmp	LBB73_284
LBB73_283:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.397(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_284:
	jmp	LBB73_1613
LBB73_285:
	cmpl	$101, -3960(%rbp)
	jne	LBB73_301
## %bb.286:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.398(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_301
## %bb.287:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_299
## %bb.288:
	movq	-3944(%rbp), %rax
	movb	$0, 10(%rax)
	movq	-3944(%rbp), %rax
	cmpb	$0, 11(%rax)
	je	LBB73_292
## %bb.289:
	movq	-3944(%rbp), %rax
	cmpq	$0, (%rax)
	je	LBB73_291
## %bb.290:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.399(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -5640(%rbp)       ## 8-byte Spill
	movq	-5640(%rbp), %r8        ## 8-byte Reload
	callq	_sqlite3_exec
LBB73_291:
	movq	-3944(%rbp), %rax
	movb	$0, 11(%rax)
LBB73_292:
	movq	-424(%rbp), %rdi
	leaq	L_.str.400(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_294
## %bb.293:
	movq	-3944(%rbp), %rax
	movb	$3, 9(%rax)
	jmp	LBB73_298
LBB73_294:
	movq	-424(%rbp), %rdi
	leaq	L_.str.401(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_296
## %bb.295:
	movq	-3944(%rbp), %rax
	movb	$2, 9(%rax)
	jmp	LBB73_297
LBB73_296:
	movq	-424(%rbp), %rdi
	callq	_booleanValue
                                        ## kill: def $al killed $al killed $eax
	movq	-3944(%rbp), %rcx
	movb	%al, 9(%rcx)
LBB73_297:
	jmp	LBB73_298
LBB73_298:
	jmp	LBB73_300
LBB73_299:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.402(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_300:
	jmp	LBB73_1612
LBB73_301:
	cmpl	$101, -3960(%rbp)
	jne	LBB73_307
## %bb.302:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.403(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_307
## %bb.303:
	cmpl	$1, -3952(%rbp)
	jle	LBB73_306
## %bb.304:
	movq	-424(%rbp), %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -3964(%rbp)
	cmpl	$0, %eax
	je	LBB73_306
## %bb.305:
	movl	-3964(%rbp), %edi
	callq	_exit
LBB73_306:
	movl	$2, -3964(%rbp)
	jmp	LBB73_1611
LBB73_307:
	cmpl	$101, -3960(%rbp)
	jne	LBB73_328
## %bb.308:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.404(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_328
## %bb.309:
	movl	$1, -4180(%rbp)
	cmpl	$2, -3952(%rbp)
	jl	LBB73_314
## %bb.310:
	movq	-424(%rbp), %rdi
	leaq	L_.str.405(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_312
## %bb.311:
	movl	$99, -4180(%rbp)
	jmp	LBB73_313
LBB73_312:
	movq	-424(%rbp), %rdi
	callq	_booleanValue
	movl	%eax, -4180(%rbp)
LBB73_313:
	jmp	LBB73_314
LBB73_314:
	cmpl	$1, -4180(%rbp)
	jne	LBB73_317
## %bb.315:
	movq	-3944(%rbp), %rax
	cmpl	$9, 84(%rax)
	je	LBB73_317
## %bb.316:
	movq	-3944(%rbp), %rax
	movl	84(%rax), %ecx
	movq	-3944(%rbp), %rax
	movl	%ecx, 96(%rax)
	movq	-3944(%rbp), %rax
	movl	$9, 84(%rax)
	movq	-3944(%rbp), %rax
	movb	$0, 8(%rax)
	jmp	LBB73_327
LBB73_317:
	cmpl	$0, -4180(%rbp)
	jne	LBB73_321
## %bb.318:
	movq	-3944(%rbp), %rax
	cmpl	$9, 84(%rax)
	jne	LBB73_320
## %bb.319:
	movq	-3944(%rbp), %rax
	movl	96(%rax), %ecx
	movq	-3944(%rbp), %rax
	movl	%ecx, 84(%rax)
LBB73_320:
	movq	-3944(%rbp), %rax
	movb	$0, 8(%rax)
	jmp	LBB73_326
LBB73_321:
	cmpl	$99, -4180(%rbp)
	jne	LBB73_325
## %bb.322:
	movq	-3944(%rbp), %rax
	cmpl	$9, 84(%rax)
	jne	LBB73_324
## %bb.323:
	movq	-3944(%rbp), %rax
	movl	96(%rax), %ecx
	movq	-3944(%rbp), %rax
	movl	%ecx, 84(%rax)
LBB73_324:
	movq	-3944(%rbp), %rax
	movb	$1, 8(%rax)
LBB73_325:
	jmp	LBB73_326
LBB73_326:
	jmp	LBB73_327
LBB73_327:
	jmp	LBB73_1610
LBB73_328:
	cmpl	$101, -3960(%rbp)
	jne	LBB73_334
## %bb.329:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.161(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_334
## %bb.330:
	movq	-3944(%rbp), %rax
	cmpb	$0, 17(%rax)
	je	LBB73_332
## %bb.331:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-432(%rbp), %rdx
	leaq	L_.str.406(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_333
LBB73_332:
	xorl	%esi, %esi
	movq	-3944(%rbp), %rdi
	callq	_open_db
	leaq	-432(%rbp), %rsi
	movq	-3944(%rbp), %rdi
	movl	-3952(%rbp), %edx
	callq	_expertDotCommand
LBB73_333:
	jmp	LBB73_1609
LBB73_334:
	cmpl	$102, -3960(%rbp)
	jne	LBB73_408
## %bb.335:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.407(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_408
## %bb.336:
	xorl	%esi, %esi
	movl	$-1, -4184(%rbp)
	movl	$-1, -4188(%rbp)
	movq	$0, -4200(%rbp)
	movl	$0, -4204(%rbp)
	movq	$0, -4224(%rbp)
	movq	$0, -4232(%rbp)
	movq	-3944(%rbp), %rdi
	callq	_open_db
	cmpl	$2, -3952(%rbp)
	jl	LBB73_338
## %bb.337:
	movq	-424(%rbp), %rax
	movq	%rax, -5648(%rbp)       ## 8-byte Spill
	jmp	LBB73_339
LBB73_338:
	leaq	L_.str.422(%rip), %rax
	movq	%rax, -5648(%rbp)       ## 8-byte Spill
	jmp	LBB73_339
LBB73_339:
	movq	-5648(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -4224(%rbp)
	movq	-4224(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_348
## %bb.340:
	movq	-4224(%rbp), %rdi
	leaq	L_.str.423(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB73_342
## %bb.341:
	movq	-4224(%rbp), %rdi
	leaq	L_.str.424(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_348
LBB73_342:
	cmpl	$4, -3952(%rbp)
	jl	LBB73_348
## %bb.343:
	movq	-416(%rbp), %rax
	movq	%rax, -4232(%rbp)
	movl	$3, -4212(%rbp)
LBB73_344:                              ## =>This Inner Loop Header: Depth=1
	movl	-4212(%rbp), %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_347
## %bb.345:                             ##   in Loop: Header=BB73_344 Depth=1
	movslq	-4212(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-4212(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rdx
	movq	%rax, -432(%rbp,%rdx,8)
## %bb.346:                             ##   in Loop: Header=BB73_344 Depth=1
	movl	-4212(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4212(%rbp)
	jmp	LBB73_344
LBB73_347:
	movl	-3952(%rbp), %eax
	subl	$2, %eax
	movl	%eax, -3952(%rbp)
	movq	-424(%rbp), %rcx
	movq	%rcx, -4224(%rbp)
LBB73_348:
	movq	-4224(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_354
## %bb.349:
	movq	-4224(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB73_354
## %bb.350:
	movq	-4224(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -4224(%rbp)
	movq	-4224(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_353
## %bb.351:
	movq	-4224(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB73_353
## %bb.352:
	movq	-4224(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -4224(%rbp)
LBB73_353:
	jmp	LBB73_354
LBB73_354:
	movq	-4224(%rbp), %rdi
	leaq	L_.str.422(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_360
## %bb.355:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.425(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$0, -4212(%rbp)
LBB73_356:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$9, -4212(%rbp)
	jge	LBB73_359
## %bb.357:                             ##   in Loop: Header=BB73_356 Depth=1
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movslq	-4212(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	_do_meta_command.aCtrl(%rip), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movq	(%rdx), %rdx
	movslq	-4212(%rbp), %rax
	imulq	$24, %rax, %rax
	addq	%rax, %rcx
	movq	16(%rcx), %rcx
	leaq	L_.str.426(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
## %bb.358:                             ##   in Loop: Header=BB73_356 Depth=1
	movl	-4212(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4212(%rbp)
	jmp	LBB73_356
LBB73_359:
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_360:
	movq	-4224(%rbp), %rdi
	callq	_strlen30
	movl	%eax, -4208(%rbp)
	movl	$0, -4212(%rbp)
LBB73_361:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$9, -4212(%rbp)
	jge	LBB73_369
## %bb.362:                             ##   in Loop: Header=BB73_361 Depth=1
	movq	-4224(%rbp), %rdi
	movslq	-4212(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	_do_meta_command.aCtrl(%rip), %rcx
	addq	%rax, %rcx
	movq	(%rcx), %rsi
	movslq	-4208(%rbp), %rdx
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_367
## %bb.363:                             ##   in Loop: Header=BB73_361 Depth=1
	cmpl	$0, -4184(%rbp)
	jge	LBB73_365
## %bb.364:                             ##   in Loop: Header=BB73_361 Depth=1
	movslq	-4212(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	_do_meta_command.aCtrl(%rip), %rcx
	addq	%rax, %rcx
	movl	8(%rcx), %edx
	movl	%edx, -4184(%rbp)
	movl	-4212(%rbp), %edx
	movl	%edx, -4188(%rbp)
	jmp	LBB73_366
LBB73_365:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4224(%rbp), %rdx
	leaq	L_.str.427(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_366:                              ##   in Loop: Header=BB73_361 Depth=1
	jmp	LBB73_367
LBB73_367:                              ##   in Loop: Header=BB73_361 Depth=1
	jmp	LBB73_368
LBB73_368:                              ##   in Loop: Header=BB73_361 Depth=1
	movl	-4212(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4212(%rbp)
	jmp	LBB73_361
LBB73_369:
	cmpl	$0, -4184(%rbp)
	jge	LBB73_371
## %bb.370:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4224(%rbp), %rdx
	leaq	L_.str.428(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_401
LBB73_371:
	movl	-4184(%rbp), %eax
	addl	$-6, %eax
	movl	%eax, %ecx
	subl	$32, %eax
	movq	%rcx, -5656(%rbp)       ## 8-byte Spill
	ja	LBB73_400
## %bb.1639:
	leaq	LJTI73_1(%rip), %rax
	movq	-5656(%rbp), %rcx       ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB73_372:
	cmpl	$2, -3952(%rbp)
	je	LBB73_375
## %bb.373:
	cmpl	$3, -3952(%rbp)
	je	LBB73_375
## %bb.374:
	jmp	LBB73_400
LBB73_375:
	cmpl	$3, -3952(%rbp)
	jne	LBB73_377
## %bb.376:
	movq	-416(%rbp), %rdi
	callq	_integerValue
	movq	%rax, -5664(%rbp)       ## 8-byte Spill
	jmp	LBB73_378
LBB73_377:
	movq	$-1, %rax
	movq	%rax, -5664(%rbp)       ## 8-byte Spill
	jmp	LBB73_378
LBB73_378:
	movq	-5664(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -4200(%rbp)
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-4232(%rbp), %rsi
	leaq	-4200(%rbp), %rax
	movl	$36, %edx
	movq	%rax, %rcx
	callq	_sqlite3_file_control
	movl	$1, -4204(%rbp)
	jmp	LBB73_400
LBB73_379:
	cmpl	$3, -3952(%rbp)
	je	LBB73_381
## %bb.380:
	jmp	LBB73_400
LBB73_381:
	movq	-416(%rbp), %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -4236(%rbp)
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	-4232(%rbp), %rsi
	movl	-4184(%rbp), %edx
	leaq	-4236(%rbp), %rcx
	callq	_sqlite3_file_control
	movl	$2, -4204(%rbp)
	jmp	LBB73_400
LBB73_382:
	cmpl	$2, -3952(%rbp)
	je	LBB73_385
## %bb.383:
	cmpl	$3, -3952(%rbp)
	je	LBB73_385
## %bb.384:
	jmp	LBB73_400
LBB73_385:
	cmpl	$3, -3952(%rbp)
	jne	LBB73_387
## %bb.386:
	movq	-416(%rbp), %rdi
	callq	_booleanValue
	movl	%eax, -5668(%rbp)       ## 4-byte Spill
	jmp	LBB73_388
LBB73_387:
	movl	$4294967295, %eax       ## imm = 0xFFFFFFFF
	movl	%eax, -5668(%rbp)       ## 4-byte Spill
	jmp	LBB73_388
LBB73_388:
	movl	-5668(%rbp), %eax       ## 4-byte Reload
	movl	%eax, -4240(%rbp)
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	-4232(%rbp), %rsi
	movl	-4184(%rbp), %edx
	leaq	-4240(%rbp), %rcx
	callq	_sqlite3_file_control
	movslq	-4240(%rbp), %rcx
	movq	%rcx, -4200(%rbp)
	movl	$1, -4204(%rbp)
	jmp	LBB73_400
LBB73_389:
	cmpl	$2, -3952(%rbp)
	je	LBB73_391
## %bb.390:
	jmp	LBB73_400
LBB73_391:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-4232(%rbp), %rsi
	movl	-4184(%rbp), %edx
	leaq	-4244(%rbp), %rax
	movq	%rax, %rcx
	callq	_sqlite3_file_control
	movslq	-4244(%rbp), %rcx
	movq	%rcx, -4200(%rbp)
	movl	$1, -4204(%rbp)
	jmp	LBB73_400
LBB73_392:
	movq	$0, -4256(%rbp)
	cmpl	$2, -3952(%rbp)
	je	LBB73_394
## %bb.393:
	jmp	LBB73_400
LBB73_394:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-4232(%rbp), %rsi
	movl	-4184(%rbp), %edx
	leaq	-4256(%rbp), %rax
	movq	%rax, %rcx
	callq	_sqlite3_file_control
	cmpq	$0, -4256(%rbp)
	je	LBB73_396
## %bb.395:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-4256(%rbp), %rdx
	leaq	L_.str.219(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-4256(%rbp), %rdi
	movl	%eax, -5672(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
LBB73_396:
	movl	$2, -4204(%rbp)
	jmp	LBB73_400
LBB73_397:
	cmpl	$3, -3952(%rbp)
	jl	LBB73_399
## %bb.398:
	movq	-416(%rbp), %rdi
	callq	_atoi
	movl	%eax, -4260(%rbp)
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	-4232(%rbp), %rsi
	movl	-4184(%rbp), %edx
	leaq	-4260(%rbp), %rcx
	callq	_sqlite3_file_control
LBB73_399:
	movl	$-1, -4260(%rbp)
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-4232(%rbp), %rsi
	movl	-4184(%rbp), %edx
	leaq	-4260(%rbp), %rax
	movq	%rax, %rcx
	callq	_sqlite3_file_control
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-4260(%rbp), %edx
	leaq	L_.str.429(%rip), %rsi
	movl	%eax, -5676(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movl	$2, -4204(%rbp)
LBB73_400:
	jmp	LBB73_401
LBB73_401:
	cmpl	$0, -4204(%rbp)
	jne	LBB73_404
## %bb.402:
	cmpl	$0, -4188(%rbp)
	jl	LBB73_404
## %bb.403:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-4224(%rbp), %rdx
	movslq	-4188(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	_do_meta_command.aCtrl(%rip), %rcx
	addq	%rax, %rcx
	movq	16(%rcx), %rcx
	leaq	L_.str.430(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_407
LBB73_404:
	cmpl	$1, -4204(%rbp)
	jne	LBB73_406
## %bb.405:
	leaq	-544(%rbp), %rsi
	movq	-4200(%rbp), %rcx
	movl	$100, %edi
	leaq	L_.str.431(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	leaq	-544(%rbp), %rdx
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.219(%rip), %rsi
	movq	%rax, -5688(%rbp)       ## 8-byte Spill
	movb	$0, %al
	callq	_fprintf
LBB73_406:
	jmp	LBB73_407
LBB73_407:
	jmp	LBB73_1608
LBB73_408:
	cmpl	$102, -3960(%rbp)
	jne	LBB73_421
## %bb.409:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.432(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_421
## %bb.410:
	movl	$0, -4264(%rbp)
	leaq	-2184(%rbp), %rax
	movq	-3944(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movl	$1640, %edx             ## imm = 0x668
	callq	_memcpy
	movl	$0, -2080(%rbp)
	movl	$3, -2100(%rbp)
	movl	$3, -2092(%rbp)
	cmpl	$2, -3952(%rbp)
	jne	LBB73_413
## %bb.411:
	movq	-424(%rbp), %rdi
	leaq	L_.str.433(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_413
## %bb.412:
	movl	$11, -2100(%rbp)
	movl	$11, -2092(%rbp)
	movl	$1, -3952(%rbp)
LBB73_413:
	cmpl	$1, -3952(%rbp)
	je	LBB73_415
## %bb.414:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.434(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_415:
	xorl	%esi, %esi
	movq	-3944(%rbp), %rdi
	callq	_open_db
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	leaq	-2184(%rbp), %rcx
	leaq	L_.str.435(%rip), %rsi
	leaq	_callback(%rip), %rdx
	callq	_sqlite3_exec
	movl	%eax, -3964(%rbp)
	cmpl	$0, -3964(%rbp)
	jne	LBB73_417
## %bb.416:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.436(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-4272(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -3964(%rbp)
	movq	-4272(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	sete	%r9b
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -4264(%rbp)
	movq	-4272(%rbp), %rdi
	callq	_sqlite3_finalize
LBB73_417:
	cmpl	$0, -4264(%rbp)
	jne	LBB73_419
## %bb.418:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.437(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_420
LBB73_419:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.438(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movl	$5, -2100(%rbp)
	movl	$5, -2092(%rbp)
	leaq	L_.str.439(%rip), %rsi
	movq	%rsi, -2040(%rbp)
	leaq	-2184(%rbp), %rdi
	leaq	L_.str.440(%rip), %rsi
	movl	%eax, -5692(%rbp)       ## 4-byte Spill
	callq	_shell_exec
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	leaq	L_.str.441(%rip), %rsi
	movq	%rsi, -2040(%rbp)
	leaq	-2184(%rbp), %rdi
	leaq	L_.str.442(%rip), %rsi
	movl	%eax, -5696(%rbp)       ## 4-byte Spill
	callq	_shell_exec
	movq	-3944(%rbp), %rdx
	movq	64(%rdx), %rdi
	leaq	L_.str.438(%rip), %rsi
	movl	%eax, -5700(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
LBB73_420:
	jmp	LBB73_1607
LBB73_421:
	cmpl	$104, -3960(%rbp)
	jne	LBB73_427
## %bb.422:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.443(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_427
## %bb.423:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_425
## %bb.424:
	movq	-424(%rbp), %rdi
	callq	_booleanValue
	movq	-3944(%rbp), %rcx
	movl	%eax, 104(%rcx)
	movq	-3944(%rbp), %rcx
	movl	124(%rcx), %eax
	orl	$128, %eax
	movl	%eax, 124(%rcx)
	jmp	LBB73_426
LBB73_425:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.444(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_426:
	jmp	LBB73_1606
LBB73_427:
	cmpl	$104, -3960(%rbp)
	jne	LBB73_435
## %bb.428:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.422(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_435
## %bb.429:
	cmpl	$2, -3952(%rbp)
	jl	LBB73_433
## %bb.430:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-424(%rbp), %rsi
	callq	_showHelp
	movl	%eax, -3956(%rbp)
	cmpl	$0, -3956(%rbp)
	jne	LBB73_432
## %bb.431:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-424(%rbp), %rdx
	leaq	L_.str.445(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_432:
	jmp	LBB73_434
LBB73_433:
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	callq	_showHelp
LBB73_434:
	jmp	LBB73_1605
LBB73_435:
	cmpl	$105, -3960(%rbp)
	jne	LBB73_589
## %bb.436:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.446(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_589
## %bb.437:
	movq	$0, -4280(%rbp)
	leaq	L___func__.main(%rip), %rax
	movq	%rax, -4288(%rbp)
	movq	$0, -4296(%rbp)
	movq	$0, -4304(%rbp)
	movl	$0, -4420(%rbp)
	movl	$0, -4424(%rbp)
	movl	$1, -4428(%rbp)
	movq	-3944(%rbp), %rdi
	leaq	L_.str.447(%rip), %rsi
	movb	$0, %al
	callq	_failIfSafeMode
	xorl	%esi, %esi
	leaq	-4408(%rbp), %rcx
	movq	%rcx, %rdi
	movl	$72, %edx
	callq	_memset
	movl	$120, %edi
	callq	_sqlite3_malloc64
	movq	%rax, -4384(%rbp)
	cmpq	$0, -4384(%rbp)
	jne	LBB73_439
## %bb.438:
	leaq	-4408(%rbp), %rdi
	callq	_import_cleanup
	callq	_shell_out_of_memory
LBB73_439:
	movq	-3944(%rbp), %rax
	cmpl	$10, 84(%rax)
	jne	LBB73_441
## %bb.440:
	leaq	_ascii_read_one_field(%rip), %rax
	movq	%rax, -4416(%rbp)
	jmp	LBB73_442
LBB73_441:
	leaq	_csv_read_one_field(%rip), %rax
	movq	%rax, -4416(%rbp)
LBB73_442:
	movl	$1, -4316(%rbp)
LBB73_443:                              ## =>This Inner Loop Header: Depth=1
	movl	-4316(%rbp), %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_475
## %bb.444:                             ##   in Loop: Header=BB73_443 Depth=1
	movslq	-4316(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movq	%rax, -4440(%rbp)
	movq	-4440(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_447
## %bb.445:                             ##   in Loop: Header=BB73_443 Depth=1
	movq	-4440(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_447
## %bb.446:                             ##   in Loop: Header=BB73_443 Depth=1
	movq	-4440(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -4440(%rbp)
LBB73_447:                              ##   in Loop: Header=BB73_443 Depth=1
	movq	-4440(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	je	LBB73_455
## %bb.448:                             ##   in Loop: Header=BB73_443 Depth=1
	cmpq	$0, -4296(%rbp)
	jne	LBB73_450
## %bb.449:                             ##   in Loop: Header=BB73_443 Depth=1
	movq	-4440(%rbp), %rax
	movq	%rax, -4296(%rbp)
	jmp	LBB73_454
LBB73_450:                              ##   in Loop: Header=BB73_443 Depth=1
	cmpq	$0, -4280(%rbp)
	jne	LBB73_452
## %bb.451:                             ##   in Loop: Header=BB73_443 Depth=1
	movq	-4440(%rbp), %rax
	movq	%rax, -4280(%rbp)
	jmp	LBB73_453
LBB73_452:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-4440(%rbp), %rdx
	leaq	L_.str.448(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.446(%rip), %rsi
	movl	%eax, -5704(%rbp)       ## 4-byte Spill
	callq	_showHelp
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_453:                              ##   in Loop: Header=BB73_443 Depth=1
	jmp	LBB73_454
LBB73_454:                              ##   in Loop: Header=BB73_443 Depth=1
	jmp	LBB73_473
LBB73_455:                              ##   in Loop: Header=BB73_443 Depth=1
	movq	-4440(%rbp), %rdi
	leaq	L_.str.449(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_457
## %bb.456:                             ##   in Loop: Header=BB73_443 Depth=1
	movl	-4420(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4420(%rbp)
	jmp	LBB73_472
LBB73_457:                              ##   in Loop: Header=BB73_443 Depth=1
	movq	-4440(%rbp), %rdi
	leaq	L_.str.424(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_460
## %bb.458:                             ##   in Loop: Header=BB73_443 Depth=1
	movl	-4316(%rbp), %eax
	movl	-3952(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	LBB73_460
## %bb.459:                             ##   in Loop: Header=BB73_443 Depth=1
	movl	-4316(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4316(%rbp)
	movslq	%eax, %rcx
	movq	-432(%rbp,%rcx,8), %rcx
	movq	%rcx, -4288(%rbp)
	jmp	LBB73_471
LBB73_460:                              ##   in Loop: Header=BB73_443 Depth=1
	movq	-4440(%rbp), %rdi
	leaq	L_.str.450(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_463
## %bb.461:                             ##   in Loop: Header=BB73_443 Depth=1
	movl	-4316(%rbp), %eax
	movl	-3952(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	LBB73_463
## %bb.462:                             ##   in Loop: Header=BB73_443 Depth=1
	movl	-4316(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4316(%rbp)
	movslq	%eax, %rcx
	movq	-432(%rbp,%rcx,8), %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -4424(%rbp)
	jmp	LBB73_470
LBB73_463:                              ##   in Loop: Header=BB73_443 Depth=1
	movq	-4440(%rbp), %rdi
	leaq	L_.str.74(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_465
## %bb.464:                             ##   in Loop: Header=BB73_443 Depth=1
	movsbl	L_.str.75(%rip), %eax
	movl	%eax, -4348(%rbp)
	movsbl	L_.str.76(%rip), %eax
	movl	%eax, -4344(%rbp)
	leaq	_ascii_read_one_field(%rip), %rcx
	movq	%rcx, -4416(%rbp)
	movl	$0, -4428(%rbp)
	jmp	LBB73_469
LBB73_465:                              ##   in Loop: Header=BB73_443 Depth=1
	movq	-4440(%rbp), %rdi
	leaq	L_.str.73(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_467
## %bb.466:                             ##   in Loop: Header=BB73_443 Depth=1
	movl	$44, -4348(%rbp)
	movl	$10, -4344(%rbp)
	leaq	_csv_read_one_field(%rip), %rax
	movq	%rax, -4416(%rbp)
	movl	$0, -4428(%rbp)
	jmp	LBB73_468
LBB73_467:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-4440(%rbp), %rdx
	leaq	L_.str.451(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.446(%rip), %rsi
	movl	%eax, -5708(%rbp)       ## 4-byte Spill
	callq	_showHelp
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_468:                              ##   in Loop: Header=BB73_443 Depth=1
	jmp	LBB73_469
LBB73_469:                              ##   in Loop: Header=BB73_443 Depth=1
	jmp	LBB73_470
LBB73_470:                              ##   in Loop: Header=BB73_443 Depth=1
	jmp	LBB73_471
LBB73_471:                              ##   in Loop: Header=BB73_443 Depth=1
	jmp	LBB73_472
LBB73_472:                              ##   in Loop: Header=BB73_443 Depth=1
	jmp	LBB73_473
LBB73_473:                              ##   in Loop: Header=BB73_443 Depth=1
	jmp	LBB73_474
LBB73_474:                              ##   in Loop: Header=BB73_443 Depth=1
	movl	-4316(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4316(%rbp)
	jmp	LBB73_443
LBB73_475:
	cmpq	$0, -4280(%rbp)
	jne	LBB73_477
## %bb.476:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-4296(%rbp), %rax
	cmpq	$0, %rax
	leaq	L_.str.453(%rip), %rax
	leaq	L_.str.249(%rip), %rcx
	cmoveq	%rax, %rcx
	leaq	L_.str.452(%rip), %rsi
	movq	%rcx, %rdx
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.446(%rip), %rsi
	movl	%eax, -5712(%rbp)       ## 4-byte Spill
	callq	_showHelp
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_477:
	xorl	%esi, %esi
	movl	$0, _seenInterrupt(%rip)
	movq	-3944(%rbp), %rdi
	callq	_open_db
	cmpl	$0, -4428(%rbp)
	je	LBB73_491
## %bb.478:
	movq	-3944(%rbp), %rax
	addq	$190, %rax
	movq	%rax, %rdi
	callq	_strlen30
	movl	%eax, -4328(%rbp)
	cmpl	$0, -4328(%rbp)
	jne	LBB73_480
## %bb.479:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.454(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_480:
	cmpl	$1, -4328(%rbp)
	jle	LBB73_482
## %bb.481:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.455(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_482:
	movq	-3944(%rbp), %rax
	addq	$210, %rax
	movq	%rax, %rdi
	callq	_strlen30
	movl	%eax, -4328(%rbp)
	cmpl	$0, -4328(%rbp)
	jne	LBB73_484
## %bb.483:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.456(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_484:
	cmpl	$2, -4328(%rbp)
	jne	LBB73_488
## %bb.485:
	movq	-3944(%rbp), %rax
	cmpl	$8, 84(%rax)
	jne	LBB73_488
## %bb.486:
	movq	-3944(%rbp), %rax
	addq	$210, %rax
	leaq	L_.str.282(%rip), %rsi
	movq	%rax, %rdi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_488
## %bb.487:
	movq	-3944(%rbp), %rax
	addq	$210, %rax
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.66(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	movq	-3944(%rbp), %rcx
	addq	$210, %rcx
	movq	%rcx, %rdi
	movq	%rax, -5720(%rbp)       ## 8-byte Spill
	callq	_strlen30
	movl	%eax, -4328(%rbp)
LBB73_488:
	cmpl	$1, -4328(%rbp)
	jle	LBB73_490
## %bb.489:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.457(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_490:
	movq	-3944(%rbp), %rax
	movsbl	190(%rax), %ecx
	movl	%ecx, -4348(%rbp)
	movq	-3944(%rbp), %rax
	movsbl	210(%rax), %ecx
	movl	%ecx, -4344(%rbp)
LBB73_491:
	movq	-4296(%rbp), %rax
	movq	%rax, -4408(%rbp)
	movl	$1, -4368(%rbp)
	movq	-4408(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$124, %ecx
	jne	LBB73_493
## %bb.492:
	movq	-4408(%rbp), %rax
	addq	$1, %rax
	movq	%rax, %rdi
	leaq	L_.str.288(%rip), %rsi
	callq	_popen
	movq	_pclose@GOTPCREL(%rip), %rcx
	movq	%rax, -4400(%rbp)
	leaq	L_.str.458(%rip), %rax
	movq	%rax, -4408(%rbp)
	movq	%rcx, -4392(%rbp)
	jmp	LBB73_494
LBB73_493:
	movq	-4408(%rbp), %rdi
	leaq	L_.str.28(%rip), %rsi
	callq	_fopen
	movq	_fclose@GOTPCREL(%rip), %rcx
	movq	%rax, -4400(%rbp)
	movq	%rcx, -4392(%rbp)
LBB73_494:
	cmpq	$0, -4400(%rbp)
	jne	LBB73_496
## %bb.495:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4296(%rbp), %rdx
	leaq	L_.str.319(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	leaq	-4408(%rbp), %rdi
	movl	%eax, -5724(%rbp)       ## 4-byte Spill
	callq	_import_cleanup
	jmp	LBB73_1628
LBB73_496:
	cmpl	$2, -4420(%rbp)
	jge	LBB73_499
## %bb.497:
	cmpl	$1, -4420(%rbp)
	jl	LBB73_500
## %bb.498:
	cmpl	$0, -4428(%rbp)
	je	LBB73_500
LBB73_499:
	movb	$0, -4441(%rbp)
	movl	-4348(%rbp), %eax
                                        ## kill: def $al killed $al killed $eax
	movb	%al, -4442(%rbp)
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.459(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	leaq	-4442(%rbp), %rsi
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	%eax, -5728(%rbp)       ## 4-byte Spill
	callq	_output_c_string
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.460(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	leaq	-4442(%rbp), %rsi
	movl	-4344(%rbp), %edx
                                        ## kill: def $dl killed $dl killed $edx
	movb	%dl, -4442(%rbp)
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	%eax, -5732(%rbp)       ## 4-byte Spill
	callq	_output_c_string
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.66(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_500:
	jmp	LBB73_501
LBB73_501:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB73_503 Depth 2
	movl	-4424(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -4424(%rbp)
	cmpl	$0, %eax
	jle	LBB73_508
## %bb.502:                             ##   in Loop: Header=BB73_501 Depth=1
	jmp	LBB73_503
LBB73_503:                              ##   Parent Loop BB73_501 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	leaq	-4408(%rbp), %rdi
	callq	*-4416(%rbp)
	xorl	%ecx, %ecx
                                        ## kill: def $cl killed $cl killed $ecx
	cmpq	$0, %rax
	movb	%cl, -5733(%rbp)        ## 1-byte Spill
	je	LBB73_505
## %bb.504:                             ##   in Loop: Header=BB73_503 Depth=2
	movl	-4352(%rbp), %eax
	cmpl	-4348(%rbp), %eax
	sete	%cl
	movb	%cl, -5733(%rbp)        ## 1-byte Spill
LBB73_505:                              ##   in Loop: Header=BB73_503 Depth=2
	movb	-5733(%rbp), %al        ## 1-byte Reload
	testb	$1, %al
	jne	LBB73_506
	jmp	LBB73_507
LBB73_506:                              ##   in Loop: Header=BB73_503 Depth=2
	jmp	LBB73_503
LBB73_507:                              ##   in Loop: Header=BB73_501 Depth=1
	jmp	LBB73_501
LBB73_508:
	movq	-4288(%rbp), %rsi
	movq	-4280(%rbp), %rdx
	leaq	L_.str.461(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4336(%rbp)
	cmpq	$0, -4336(%rbp)
	jne	LBB73_510
## %bb.509:
	leaq	-4408(%rbp), %rdi
	callq	_import_cleanup
	callq	_shell_out_of_memory
LBB73_510:
	movq	-4336(%rbp), %rdi
	callq	_strlen30
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movl	%eax, -4312(%rbp)
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	movq	-4336(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-4304(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	xorl	%esi, %esi
	movl	%eax, -3964(%rbp)
	leaq	-4408(%rbp), %rdi
	callq	_import_append_char
	cmpl	$0, -3964(%rbp)
	je	LBB73_533
## %bb.511:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_errmsg
	leaq	L_.str.462(%rip), %rdi
	movq	%rax, %rsi
	callq	_sqlite3_strglob
	cmpl	$0, %eax
	jne	LBB73_533
## %bb.512:
	movq	-4288(%rbp), %rsi
	movq	-4280(%rbp), %rdx
	leaq	L_.str.463(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4456(%rbp)
	movq	$0, -4464(%rbp)
	movq	$0, -4472(%rbp)
LBB73_513:                              ## =>This Inner Loop Header: Depth=1
	leaq	-4408(%rbp), %rdi
	callq	*-4416(%rbp)
	cmpq	$0, %rax
	je	LBB73_517
## %bb.514:                             ##   in Loop: Header=BB73_513 Depth=1
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-4384(%rbp), %rdi
	leaq	-4464(%rbp), %rsi
	callq	_zAutoColumn
	movl	-4352(%rbp), %ecx
	cmpl	-4348(%rbp), %ecx
	je	LBB73_516
## %bb.515:
	jmp	LBB73_517
LBB73_516:                              ##   in Loop: Header=BB73_513 Depth=1
	jmp	LBB73_513
LBB73_517:
	xorl	%eax, %eax
	movl	%eax, %edi
	leaq	-4464(%rbp), %rsi
	leaq	-4472(%rbp), %rdx
	callq	_zAutoColumn
	movq	%rax, -4480(%rbp)
	cmpq	$0, -4472(%rbp)
	je	LBB73_523
## %bb.518:
	cmpl	$0, _stdin_is_interactive(%rip)
	je	LBB73_521
## %bb.519:
	movq	___stdinp@GOTPCREL(%rip), %rax
	movq	-3944(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpq	(%rax), %rcx
	jne	LBB73_521
## %bb.520:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, -5744(%rbp)       ## 8-byte Spill
	jmp	LBB73_522
LBB73_521:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -5744(%rbp)       ## 8-byte Spill
LBB73_522:
	movq	-5744(%rbp), %rax       ## 8-byte Reload
	movq	-4408(%rbp), %rdx
	movq	-4472(%rbp), %rcx
	movq	%rax, %rdi
	leaq	L_.str.464(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-4472(%rbp), %rdi
	movl	%eax, -5748(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
LBB73_523:
	cmpq	$0, -4464(%rbp)
	sete	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movslq	%ecx, %rdx
	cmpq	$0, %rdx
	je	LBB73_525
## %bb.524:
	leaq	L___func__.do_meta_command(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.465(%rip), %rcx
	movl	$20085, %edx            ## imm = 0x4E75
	callq	___assert_rtn
LBB73_525:
	jmp	LBB73_526
LBB73_526:
	cmpq	$0, -4480(%rbp)
	jne	LBB73_528
## %bb.527:
	movq	-4456(%rbp), %rdi
	callq	_sqlite3_free
	leaq	-4408(%rbp), %rdi
	callq	_import_cleanup
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4408(%rbp), %rdx
	leaq	L_.str.466(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_528:
	movq	-4456(%rbp), %rsi
	movq	-4480(%rbp), %rdx
	leaq	L_.str.467(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4456(%rbp)
	cmpl	$1, -4420(%rbp)
	jl	LBB73_530
## %bb.529:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-4456(%rbp), %rdx
	leaq	L_.str.219(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_530:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	movq	-4456(%rbp), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -5760(%rbp)       ## 8-byte Spill
	movq	-5760(%rbp), %r8        ## 8-byte Reload
	callq	_sqlite3_exec
	movl	%eax, -3964(%rbp)
	cmpl	$0, -3964(%rbp)
	je	LBB73_532
## %bb.531:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4456(%rbp), %rdx
	movq	-3944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -5768(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	movq	%rdx, -5776(%rbp)       ## 8-byte Spill
	callq	_sqlite3_errmsg
	movq	-5768(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.468(%rip), %rsi
	movq	-5776(%rbp), %rdx       ## 8-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
	movq	-4456(%rbp), %rdi
	movl	%eax, -5780(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
	leaq	-4408(%rbp), %rdi
	callq	_import_cleanup
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_532:
	movq	-4456(%rbp), %rdi
	callq	_sqlite3_free
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	-4336(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-4304(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -3964(%rbp)
LBB73_533:
	movq	-4336(%rbp), %rdi
	callq	_sqlite3_free
	cmpl	$0, -3964(%rbp)
	je	LBB73_537
## %bb.534:
	cmpq	$0, -4304(%rbp)
	je	LBB73_536
## %bb.535:
	movq	-4304(%rbp), %rdi
	callq	_sqlite3_finalize
LBB73_536:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-3944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -5792(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-5792(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.92(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	leaq	-4408(%rbp), %rdi
	movl	%eax, -5796(%rbp)       ## 4-byte Spill
	callq	_import_cleanup
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_537:
	movq	-4304(%rbp), %rdi
	callq	_sqlite3_column_count
	movl	%eax, -4308(%rbp)
	movq	-4304(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	$0, -4304(%rbp)
	cmpl	$0, -4308(%rbp)
	jne	LBB73_539
## %bb.538:
	movl	$0, -3924(%rbp)
	jmp	LBB73_1633
LBB73_539:
	movl	-4312(%rbp), %eax
	shll	$1, %eax
	addl	$20, %eax
	movl	-4308(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movslq	%eax, %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -4336(%rbp)
	cmpq	$0, -4336(%rbp)
	jne	LBB73_541
## %bb.540:
	leaq	-4408(%rbp), %rdi
	callq	_import_cleanup
	callq	_shell_out_of_memory
LBB73_541:
	movl	-4312(%rbp), %eax
	addl	$20, %eax
	movq	-4336(%rbp), %rsi
	movq	-4288(%rbp), %rcx
	movq	-4280(%rbp), %r8
	movl	%eax, %edi
	leaq	L_.str.469(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	movq	-4336(%rbp), %rdi
	movq	%rax, -5808(%rbp)       ## 8-byte Spill
	callq	_strlen30
	movl	%eax, -4320(%rbp)
	movl	$1, -4316(%rbp)
LBB73_542:                              ## =>This Inner Loop Header: Depth=1
	movl	-4316(%rbp), %eax
	cmpl	-4308(%rbp), %eax
	jge	LBB73_545
## %bb.543:                             ##   in Loop: Header=BB73_542 Depth=1
	movq	-4336(%rbp), %rax
	movl	-4320(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4320(%rbp)
	movslq	%ecx, %rsi
	movb	$44, (%rax,%rsi)
	movq	-4336(%rbp), %rax
	movl	-4320(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4320(%rbp)
	movslq	%ecx, %rsi
	movb	$63, (%rax,%rsi)
## %bb.544:                             ##   in Loop: Header=BB73_542 Depth=1
	movl	-4316(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4316(%rbp)
	jmp	LBB73_542
LBB73_545:
	movq	-4336(%rbp), %rax
	movl	-4320(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4320(%rbp)
	movslq	%ecx, %rsi
	movb	$41, (%rax,%rsi)
	movq	-4336(%rbp), %rax
	movslq	-4320(%rbp), %rsi
	movb	$0, (%rax,%rsi)
	cmpl	$2, -4420(%rbp)
	jl	LBB73_547
## %bb.546:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-4336(%rbp), %rdx
	leaq	L_.str.470(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_547:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	-4336(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-4304(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -3964(%rbp)
	movq	-4336(%rbp), %rdi
	callq	_sqlite3_free
	cmpl	$0, -3964(%rbp)
	je	LBB73_551
## %bb.548:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-3944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -5816(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-5816(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.92(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	cmpq	$0, -4304(%rbp)
	je	LBB73_550
## %bb.549:
	movq	-4304(%rbp), %rdi
	callq	_sqlite3_finalize
LBB73_550:
	leaq	-4408(%rbp), %rdi
	callq	_import_cleanup
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_551:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_get_autocommit
	movl	%eax, -4324(%rbp)
	cmpl	$0, -4324(%rbp)
	je	LBB73_553
## %bb.552:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.471(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -5824(%rbp)       ## 8-byte Spill
	movq	-5824(%rbp), %r8        ## 8-byte Reload
	callq	_sqlite3_exec
LBB73_553:
	jmp	LBB73_554
LBB73_554:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB73_555 Depth 2
                                        ##       Child Loop BB73_567 Depth 3
                                        ##     Child Loop BB73_574 Depth 2
	movl	-4368(%rbp), %eax
	movl	%eax, -4484(%rbp)
	movl	$0, -4316(%rbp)
LBB73_555:                              ##   Parent Loop BB73_554 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB73_567 Depth 3
	movl	-4316(%rbp), %eax
	cmpl	-4308(%rbp), %eax
	jge	LBB73_572
## %bb.556:                             ##   in Loop: Header=BB73_555 Depth=2
	leaq	-4408(%rbp), %rdi
	callq	*-4416(%rbp)
	movq	%rax, -4496(%rbp)
	cmpq	$0, -4496(%rbp)
	jne	LBB73_559
## %bb.557:                             ##   in Loop: Header=BB73_555 Depth=2
	cmpl	$0, -4316(%rbp)
	jne	LBB73_559
## %bb.558:                             ##   in Loop: Header=BB73_554 Depth=1
	jmp	LBB73_572
LBB73_559:                              ##   in Loop: Header=BB73_555 Depth=2
	movq	-3944(%rbp), %rax
	cmpl	$10, 84(%rax)
	jne	LBB73_564
## %bb.560:                             ##   in Loop: Header=BB73_555 Depth=2
	cmpq	$0, -4496(%rbp)
	je	LBB73_562
## %bb.561:                             ##   in Loop: Header=BB73_555 Depth=2
	movq	-4496(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB73_564
LBB73_562:                              ##   in Loop: Header=BB73_555 Depth=2
	cmpl	$0, -4316(%rbp)
	jne	LBB73_564
## %bb.563:                             ##   in Loop: Header=BB73_554 Depth=1
	jmp	LBB73_572
LBB73_564:                              ##   in Loop: Header=BB73_555 Depth=2
	movq	-4304(%rbp), %rdi
	movl	-4316(%rbp), %eax
	addl	$1, %eax
	movq	-4496(%rbp), %rdx
	movl	%eax, %esi
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	movq	$-1, %r8
	callq	_sqlite3_bind_text
	movl	-4316(%rbp), %ecx
	movl	-4308(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %ecx
	jge	LBB73_570
## %bb.565:                             ##   in Loop: Header=BB73_555 Depth=2
	movl	-4352(%rbp), %eax
	cmpl	-4348(%rbp), %eax
	je	LBB73_570
## %bb.566:                             ##   in Loop: Header=BB73_555 Depth=2
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4408(%rbp), %rdx
	movl	-4484(%rbp), %ecx
	movl	-4308(%rbp), %r8d
	movl	-4316(%rbp), %esi
	addl	$1, %esi
	leaq	L_.str.472(%rip), %rax
	movl	%esi, -5828(%rbp)       ## 4-byte Spill
	movq	%rax, %rsi
	movl	-5828(%rbp), %r9d       ## 4-byte Reload
	movb	$0, %al
	callq	_fprintf
	movl	-4316(%rbp), %ecx
	addl	$2, %ecx
	movl	%ecx, -4316(%rbp)
LBB73_567:                              ##   Parent Loop BB73_554 Depth=1
                                        ##     Parent Loop BB73_555 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movl	-4316(%rbp), %eax
	cmpl	-4308(%rbp), %eax
	jg	LBB73_569
## %bb.568:                             ##   in Loop: Header=BB73_567 Depth=3
	movq	-4304(%rbp), %rdi
	movl	-4316(%rbp), %esi
	callq	_sqlite3_bind_null
	movl	-4316(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -4316(%rbp)
	jmp	LBB73_567
LBB73_569:                              ##   in Loop: Header=BB73_555 Depth=2
	jmp	LBB73_570
LBB73_570:                              ##   in Loop: Header=BB73_555 Depth=2
	jmp	LBB73_571
LBB73_571:                              ##   in Loop: Header=BB73_555 Depth=2
	movl	-4316(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4316(%rbp)
	jmp	LBB73_555
LBB73_572:                              ##   in Loop: Header=BB73_554 Depth=1
	movl	-4352(%rbp), %eax
	cmpl	-4348(%rbp), %eax
	jne	LBB73_577
## %bb.573:                             ##   in Loop: Header=BB73_554 Depth=1
	jmp	LBB73_574
LBB73_574:                              ##   Parent Loop BB73_554 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	leaq	-4408(%rbp), %rdi
	callq	*-4416(%rbp)
	movl	-4316(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -4316(%rbp)
## %bb.575:                             ##   in Loop: Header=BB73_574 Depth=2
	movl	-4352(%rbp), %eax
	cmpl	-4348(%rbp), %eax
	je	LBB73_574
## %bb.576:                             ##   in Loop: Header=BB73_554 Depth=1
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4408(%rbp), %rdx
	movl	-4484(%rbp), %ecx
	movl	-4308(%rbp), %r8d
	movl	-4316(%rbp), %r9d
	leaq	L_.str.473(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_577:                              ##   in Loop: Header=BB73_554 Depth=1
	movl	-4316(%rbp), %eax
	cmpl	-4308(%rbp), %eax
	jl	LBB73_582
## %bb.578:                             ##   in Loop: Header=BB73_554 Depth=1
	movq	-4304(%rbp), %rdi
	callq	_sqlite3_step
	movq	-4304(%rbp), %rdi
	movl	%eax, -5832(%rbp)       ## 4-byte Spill
	callq	_sqlite3_reset
	movl	%eax, -3964(%rbp)
	cmpl	$0, -3964(%rbp)
	je	LBB73_580
## %bb.579:                             ##   in Loop: Header=BB73_554 Depth=1
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4408(%rbp), %rdx
	movl	-4484(%rbp), %ecx
	movq	-3944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -5840(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	movq	%rdx, -5848(%rbp)       ## 8-byte Spill
	movl	%ecx, -5852(%rbp)       ## 4-byte Spill
	callq	_sqlite3_errmsg
	movq	-5840(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.474(%rip), %rsi
	movq	-5848(%rbp), %rdx       ## 8-byte Reload
	movl	-5852(%rbp), %ecx       ## 4-byte Reload
	movq	%rax, %r8
	movb	$0, %al
	callq	_fprintf
	movl	-4360(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -4360(%rbp)
	jmp	LBB73_581
LBB73_580:                              ##   in Loop: Header=BB73_554 Depth=1
	movl	-4364(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4364(%rbp)
LBB73_581:                              ##   in Loop: Header=BB73_554 Depth=1
	jmp	LBB73_582
LBB73_582:                              ##   in Loop: Header=BB73_554 Depth=1
	jmp	LBB73_583
LBB73_583:                              ##   in Loop: Header=BB73_554 Depth=1
	cmpl	$-1, -4352(%rbp)
	jne	LBB73_554
## %bb.584:
	leaq	-4408(%rbp), %rdi
	callq	_import_cleanup
	movq	-4304(%rbp), %rdi
	callq	_sqlite3_finalize
	cmpl	$0, -4324(%rbp)
	je	LBB73_586
## %bb.585:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.475(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -5864(%rbp)       ## 8-byte Spill
	movq	-5864(%rbp), %r8        ## 8-byte Reload
	callq	_sqlite3_exec
LBB73_586:
	cmpl	$0, -4420(%rbp)
	jle	LBB73_588
## %bb.587:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-4364(%rbp), %edx
	movl	-4360(%rbp), %ecx
	movl	-4368(%rbp), %esi
	subl	$1, %esi
	leaq	L_.str.476(%rip), %rax
	movl	%esi, -5868(%rbp)       ## 4-byte Spill
	movq	%rax, %rsi
	movl	-5868(%rbp), %r8d       ## 4-byte Reload
	movb	$0, %al
	callq	_fprintf
LBB73_588:
	jmp	LBB73_1604
LBB73_589:
	cmpl	$105, -3960(%rbp)
	jne	LBB73_629
## %bb.590:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.477(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_629
## %bb.591:
	movq	$0, -4512(%rbp)
	movl	$0, -4524(%rbp)
	movl	$0, -4528(%rbp)
	movl	$0, -4532(%rbp)
	cmpl	$3, -3952(%rbp)
	je	LBB73_595
## %bb.592:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_594
## %bb.593:
	movq	-424(%rbp), %rdi
	leaq	L_.str.373(%rip), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	je	LBB73_595
LBB73_594:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.478(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_595:
	xorl	%esi, %esi
	movq	-3944(%rbp), %rdi
	callq	_open_db
	cmpl	$2, -3952(%rbp)
	jne	LBB73_597
## %bb.596:
	xorl	%ecx, %ecx
	movq	-3944(%rbp), %rax
	movq	(%rax), %rsi
	movl	$25, %edi
	leaq	L___func__.main(%rip), %rdx
	movl	$1, %r8d
	movb	$0, %al
	callq	_sqlite3_test_control
	jmp	LBB73_1628
LBB73_597:
	movq	-424(%rbp), %rsi
	movq	-424(%rbp), %rdx
	leaq	L_.str.479(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	%rax, -4504(%rbp)
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-4504(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-4520(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movq	-4504(%rbp), %rdi
	movl	%eax, -5872(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
	movq	-4520(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB73_599
## %bb.598:
	xorl	%esi, %esi
	movq	-4520(%rbp), %rdi
	callq	_sqlite3_column_int
	movl	%eax, -4524(%rbp)
	movq	-4520(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_int
	movl	%eax, -4528(%rbp)
LBB73_599:
	movq	-4520(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	-424(%rbp), %rsi
	leaq	L_.str.480(%rip), %rdi
	movl	%eax, -5876(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_mprintf
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	%rax, -4504(%rbp)
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-4504(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-4520(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -3964(%rbp)
	movq	-4504(%rbp), %rdi
	callq	_sqlite3_free
	movl	$0, -4536(%rbp)
LBB73_600:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -3964(%rbp)
	movb	%al, -5877(%rbp)        ## 1-byte Spill
	jne	LBB73_602
## %bb.601:                             ##   in Loop: Header=BB73_600 Depth=1
	movq	-4520(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	sete	%cl
	movb	%cl, -5877(%rbp)        ## 1-byte Spill
LBB73_602:                              ##   in Loop: Header=BB73_600 Depth=1
	movb	-5877(%rbp), %al        ## 1-byte Reload
	testb	$1, %al
	jne	LBB73_603
	jmp	LBB73_617
LBB73_603:                              ##   in Loop: Header=BB73_600 Depth=1
	movq	-4520(%rbp), %rdi
	movl	$2, %esi
	callq	_sqlite3_column_text
	movq	%rax, -4544(%rbp)
	movl	-4536(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -4536(%rbp)
	cmpq	$0, -4544(%rbp)
	jne	LBB73_608
## %bb.604:                             ##   in Loop: Header=BB73_600 Depth=1
	movq	-4520(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_int
	cmpl	$-1, %eax
	jne	LBB73_606
## %bb.605:                             ##   in Loop: Header=BB73_600 Depth=1
	leaq	L_.str.481(%rip), %rax
	movq	%rax, -4544(%rbp)
	jmp	LBB73_607
LBB73_606:                              ##   in Loop: Header=BB73_600 Depth=1
	leaq	-2208(%rbp), %rsi
	movl	-4536(%rbp), %ecx
	movl	$20, %edi
	leaq	L_.str.482(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	leaq	-2208(%rbp), %rdx
	movq	%rdx, -4544(%rbp)
LBB73_607:                              ##   in Loop: Header=BB73_600 Depth=1
	jmp	LBB73_608
LBB73_608:                              ##   in Loop: Header=BB73_600 Depth=1
	cmpl	$0, -4528(%rbp)
	je	LBB73_613
## %bb.609:                             ##   in Loop: Header=BB73_600 Depth=1
	cmpl	$0, -4532(%rbp)
	jne	LBB73_613
## %bb.610:                             ##   in Loop: Header=BB73_600 Depth=1
	movq	-4520(%rbp), %rdi
	movl	$5, %esi
	callq	_sqlite3_column_int
	cmpl	$0, %eax
	jne	LBB73_613
## %bb.611:                             ##   in Loop: Header=BB73_600 Depth=1
	cmpq	$0, -4512(%rbp)
	je	LBB73_613
## %bb.612:                             ##   in Loop: Header=BB73_600 Depth=1
	movq	-4512(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -4532(%rbp)
LBB73_613:                              ##   in Loop: Header=BB73_600 Depth=1
	cmpq	$0, -4512(%rbp)
	jne	LBB73_615
## %bb.614:                             ##   in Loop: Header=BB73_600 Depth=1
	movq	-4544(%rbp), %rsi
	leaq	L_.str.275(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4512(%rbp)
	jmp	LBB73_616
LBB73_615:                              ##   in Loop: Header=BB73_600 Depth=1
	movq	-4512(%rbp), %rsi
	movq	-4544(%rbp), %rdx
	leaq	L_.str.483(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4512(%rbp)
LBB73_616:                              ##   in Loop: Header=BB73_600 Depth=1
	jmp	LBB73_600
LBB73_617:
	movq	-4520(%rbp), %rdi
	callq	_sqlite3_finalize
	cmpl	$0, -4536(%rbp)
	je	LBB73_619
## %bb.618:
	cmpl	$0, -4524(%rbp)
	jne	LBB73_620
LBB73_619:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-424(%rbp), %rdx
	leaq	L_.str.484(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	movq	-4512(%rbp), %rdi
	movl	%eax, -5884(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
	jmp	LBB73_1628
LBB73_620:
	cmpl	$0, -4532(%rbp)
	jne	LBB73_622
## %bb.621:
	movl	$100000, -4532(%rbp)    ## imm = 0x186A0
LBB73_622:
	movq	-416(%rbp), %rsi
	movq	-4512(%rbp), %rdx
	movl	-4532(%rbp), %ecx
	movq	-4512(%rbp), %r8
	leaq	L_.str.485(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4504(%rbp)
	movq	-4512(%rbp), %rdi
	callq	_sqlite3_free
	movq	-3944(%rbp), %rax
	movq	(%rax), %rsi
	movl	-4524(%rbp), %r8d
	movl	$25, %edi
	leaq	L___func__.main(%rip), %rdx
	movl	$1, %ecx
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	%eax, -3964(%rbp)
	cmpl	$0, -3964(%rbp)
	jne	LBB73_627
## %bb.623:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	movq	-4504(%rbp), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -5896(%rbp)       ## 8-byte Spill
	movq	-5896(%rbp), %r8        ## 8-byte Reload
	callq	_sqlite3_exec
	xorl	%r9d, %r9d
	movl	%eax, -3964(%rbp)
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rsi
	movl	$25, %edi
	leaq	L___func__.main(%rip), %rdx
	movl	%r9d, %ecx
	movl	%r9d, %r8d
	movb	$0, %al
	callq	_sqlite3_test_control
	cmpl	$0, -3964(%rbp)
	je	LBB73_625
## %bb.624:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4504(%rbp), %rdx
	movq	-3944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -5904(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	movq	%rdx, -5912(%rbp)       ## 8-byte Spill
	callq	_sqlite3_errmsg
	movq	-5904(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.486(%rip), %rsi
	movq	-5912(%rbp), %rdx       ## 8-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_626
LBB73_625:
	movq	___stdoutp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4504(%rbp), %rdx
	leaq	L_.str.220(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	___stdoutp@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rdi
	movq	-424(%rbp), %rdx
	movl	-4528(%rbp), %r8d
	cmpl	$0, %r8d
	leaq	L_.str.488(%rip), %rcx
	leaq	L_.str.489(%rip), %rsi
	cmovneq	%rcx, %rsi
	leaq	L_.str.487(%rip), %rcx
	movq	%rsi, -5920(%rbp)       ## 8-byte Spill
	movq	%rcx, %rsi
	movq	-5920(%rbp), %rcx       ## 8-byte Reload
	movl	%eax, -5924(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
LBB73_626:
	jmp	LBB73_628
LBB73_627:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movl	-3964(%rbp), %edx
	leaq	L_.str.490(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_628:
	movq	-4504(%rbp), %rdi
	callq	_sqlite3_free
	jmp	LBB73_1603
LBB73_629:
	cmpl	$108, -3960(%rbp)
	jne	LBB73_656
## %bb.630:
	cmpl	$5, -3956(%rbp)
	jl	LBB73_656
## %bb.631:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.491(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_656
## %bb.632:
	xorl	%esi, %esi
	movq	-3944(%rbp), %rdi
	callq	_open_db
	cmpl	$1, -3952(%rbp)
	jne	LBB73_638
## %bb.633:
	movl	$0, -4548(%rbp)
LBB73_634:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$12, -4548(%rbp)
	jge	LBB73_637
## %bb.635:                             ##   in Loop: Header=BB73_634 Depth=1
	movslq	-4548(%rbp), %rax
	shlq	$4, %rax
	leaq	_do_meta_command.aLimit(%rip), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movq	(%rdx), %rsi
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movslq	-4548(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	8(%rcx), %r8d
	movq	%rsi, -5936(%rbp)       ## 8-byte Spill
	movl	%r8d, %esi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_limit
	leaq	L_.str.504(%rip), %rdi
	movq	-5936(%rbp), %rsi       ## 8-byte Reload
	movl	%eax, %edx
	movb	$0, %al
	callq	_printf
## %bb.636:                             ##   in Loop: Header=BB73_634 Depth=1
	movl	-4548(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4548(%rbp)
	jmp	LBB73_634
LBB73_637:
	jmp	LBB73_655
LBB73_638:
	cmpl	$3, -3952(%rbp)
	jle	LBB73_640
## %bb.639:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.505(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_640:
	movl	$-1, -4556(%rbp)
	movq	-424(%rbp), %rdi
	callq	_strlen30
	movl	%eax, -4552(%rbp)
	movl	$0, -4548(%rbp)
LBB73_641:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$12, -4548(%rbp)
	jge	LBB73_649
## %bb.642:                             ##   in Loop: Header=BB73_641 Depth=1
	movslq	-4548(%rbp), %rax
	shlq	$4, %rax
	leaq	_do_meta_command.aLimit(%rip), %rcx
	addq	%rax, %rcx
	movq	(%rcx), %rdi
	movq	-424(%rbp), %rsi
	movl	-4552(%rbp), %edx
	callq	_sqlite3_strnicmp
	cmpl	$0, %eax
	jne	LBB73_647
## %bb.643:                             ##   in Loop: Header=BB73_641 Depth=1
	cmpl	$0, -4556(%rbp)
	jge	LBB73_645
## %bb.644:                             ##   in Loop: Header=BB73_641 Depth=1
	movl	-4548(%rbp), %eax
	movl	%eax, -4556(%rbp)
	jmp	LBB73_646
LBB73_645:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-424(%rbp), %rdx
	leaq	L_.str.506(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_646:                              ##   in Loop: Header=BB73_641 Depth=1
	jmp	LBB73_647
LBB73_647:                              ##   in Loop: Header=BB73_641 Depth=1
	jmp	LBB73_648
LBB73_648:                              ##   in Loop: Header=BB73_641 Depth=1
	movl	-4548(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4548(%rbp)
	jmp	LBB73_641
LBB73_649:
	cmpl	$0, -4556(%rbp)
	jge	LBB73_651
## %bb.650:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-424(%rbp), %rdx
	leaq	L_.str.507(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_651:
	cmpl	$3, -3952(%rbp)
	jne	LBB73_653
## %bb.652:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movslq	-4556(%rbp), %rax
	shlq	$4, %rax
	leaq	_do_meta_command.aLimit(%rip), %rcx
	addq	%rax, %rcx
	movl	8(%rcx), %esi
	movq	-416(%rbp), %rax
	movq	%rdi, -5944(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -5948(%rbp)       ## 4-byte Spill
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movq	-5944(%rbp), %rdi       ## 8-byte Reload
	movl	-5948(%rbp), %esi       ## 4-byte Reload
	movl	%eax, %edx
	callq	_sqlite3_limit
LBB73_653:
	movslq	-4556(%rbp), %rax
	shlq	$4, %rax
	leaq	_do_meta_command.aLimit(%rip), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movq	(%rdx), %rsi
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movslq	-4556(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	8(%rcx), %r8d
	movq	%rsi, -5960(%rbp)       ## 8-byte Spill
	movl	%r8d, %esi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_limit
	leaq	L_.str.504(%rip), %rdi
	movq	-5960(%rbp), %rsi       ## 8-byte Reload
	movl	%eax, %edx
	movb	$0, %al
	callq	_printf
## %bb.654:
	jmp	LBB73_655
LBB73_655:
	jmp	LBB73_1602
LBB73_656:
	cmpl	$108, -3960(%rbp)
	jne	LBB73_660
## %bb.657:
	cmpl	$2, -3956(%rbp)
	jle	LBB73_660
## %bb.658:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.508(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_660
## %bb.659:
	xorl	%esi, %esi
	movq	-3944(%rbp), %rdi
	callq	_open_db
	leaq	-432(%rbp), %rsi
	movq	-3944(%rbp), %rdi
	movl	-3952(%rbp), %edx
	callq	_lintDotCommand
	jmp	LBB73_1601
LBB73_660:
	cmpl	$108, -3960(%rbp)
	jne	LBB73_670
## %bb.661:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.509(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_670
## %bb.662:
	movq	$0, -4584(%rbp)
	movq	-3944(%rbp), %rdi
	leaq	L_.str.510(%rip), %rsi
	movb	$0, %al
	callq	_failIfSafeMode
	cmpl	$2, -3952(%rbp)
	jge	LBB73_664
## %bb.663:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.511(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_664:
	movq	-424(%rbp), %rax
	movq	%rax, -4568(%rbp)
	cmpl	$3, -3952(%rbp)
	jl	LBB73_666
## %bb.665:
	movq	-416(%rbp), %rax
	movq	%rax, -5968(%rbp)       ## 8-byte Spill
	jmp	LBB73_667
LBB73_666:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5968(%rbp)       ## 8-byte Spill
	jmp	LBB73_667
LBB73_667:
	movq	-5968(%rbp), %rax       ## 8-byte Reload
	xorl	%esi, %esi
	movq	%rax, -4576(%rbp)
	movq	-3944(%rbp), %rdi
	callq	_open_db
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-4568(%rbp), %rsi
	movq	-4576(%rbp), %rdx
	leaq	-4584(%rbp), %rcx
	callq	_sqlite3_load_extension
	movl	%eax, -3964(%rbp)
	cmpl	$0, -3964(%rbp)
	je	LBB73_669
## %bb.668:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4584(%rbp), %rdx
	leaq	L_.str.92(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-4584(%rbp), %rdi
	movl	%eax, -5972(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
	movl	$1, -3964(%rbp)
LBB73_669:
	jmp	LBB73_1600
LBB73_670:
	cmpl	$108, -3960(%rbp)
	jne	LBB73_676
## %bb.671:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.512(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_676
## %bb.672:
	movq	-3944(%rbp), %rdi
	leaq	L_.str.513(%rip), %rsi
	movb	$0, %al
	callq	_failIfSafeMode
	cmpl	$2, -3952(%rbp)
	je	LBB73_674
## %bb.673:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.514(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_675
LBB73_674:
	movq	-424(%rbp), %rax
	movq	%rax, -4592(%rbp)
	movq	-3944(%rbp), %rax
	movq	1344(%rax), %rdi
	callq	_output_file_close
	xorl	%esi, %esi
	movq	-4592(%rbp), %rdi
	callq	_output_file_open
	movq	-3944(%rbp), %rcx
	movq	%rax, 1344(%rcx)
LBB73_675:
	jmp	LBB73_1599
LBB73_676:
	cmpl	$109, -3960(%rbp)
	jne	LBB73_770
## %bb.677:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.515(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_770
## %bb.678:
	movq	$0, -4600(%rbp)
	movq	$0, -4608(%rbp)
	movq	L___const.do_meta_command.cmOpts(%rip), %rax
	movq	%rax, -4624(%rbp)
	movl	$1, -4612(%rbp)
LBB73_679:                              ## =>This Inner Loop Header: Depth=1
	movl	-4612(%rbp), %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_709
## %bb.680:                             ##   in Loop: Header=BB73_679 Depth=1
	movslq	-4612(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movq	%rax, -4632(%rbp)
	movq	-4632(%rbp), %rdi
	leaq	L_.str.516(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_683
## %bb.681:                             ##   in Loop: Header=BB73_679 Depth=1
	movl	-4612(%rbp), %eax
	addl	$1, %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_683
## %bb.682:                             ##   in Loop: Header=BB73_679 Depth=1
	movl	-4612(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4612(%rbp)
	movslq	%eax, %rcx
	movq	-432(%rbp,%rcx,8), %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -4624(%rbp)
	jmp	LBB73_707
LBB73_683:                              ##   in Loop: Header=BB73_679 Depth=1
	movq	-4632(%rbp), %rdi
	leaq	L_.str.517(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_685
## %bb.684:                             ##   in Loop: Header=BB73_679 Depth=1
	movb	$1, -4619(%rbp)
	jmp	LBB73_706
LBB73_685:                              ##   in Loop: Header=BB73_679 Depth=1
	movq	-4632(%rbp), %rdi
	leaq	L_.str.518(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_688
## %bb.686:                             ##   in Loop: Header=BB73_679 Depth=1
	movl	-4612(%rbp), %eax
	addl	$1, %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_688
## %bb.687:                             ##   in Loop: Header=BB73_679 Depth=1
	movl	-4612(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4612(%rbp)
	movslq	%eax, %rcx
	movq	-432(%rbp,%rcx,8), %rdi
	callq	_booleanValue
                                        ## kill: def $al killed $al killed $eax
	movb	%al, -4619(%rbp)
	jmp	LBB73_705
LBB73_688:                              ##   in Loop: Header=BB73_679 Depth=1
	movq	-4632(%rbp), %rdi
	leaq	L_.str.519(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_690
## %bb.689:                             ##   in Loop: Header=BB73_679 Depth=1
	movb	$1, -4620(%rbp)
	jmp	LBB73_704
LBB73_690:                              ##   in Loop: Header=BB73_679 Depth=1
	movq	-4632(%rbp), %rdi
	leaq	L_.str.520(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_692
## %bb.691:                             ##   in Loop: Header=BB73_679 Depth=1
	movb	$0, -4620(%rbp)
	jmp	LBB73_703
LBB73_692:                              ##   in Loop: Header=BB73_679 Depth=1
	cmpq	$0, -4600(%rbp)
	jne	LBB73_696
## %bb.693:                             ##   in Loop: Header=BB73_679 Depth=1
	movq	-4632(%rbp), %rax
	movq	%rax, -4600(%rbp)
	movq	-4632(%rbp), %rdi
	leaq	L_.str.521(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_695
## %bb.694:                             ##   in Loop: Header=BB73_679 Depth=1
	movq	L___const.do_meta_command.cmo(%rip), %rax
	movq	%rax, -4640(%rbp)
	leaq	L_.str.522(%rip), %rax
	movq	%rax, -4600(%rbp)
	movq	-4640(%rbp), %rax
	movq	%rax, -4624(%rbp)
LBB73_695:                              ##   in Loop: Header=BB73_679 Depth=1
	jmp	LBB73_702
LBB73_696:                              ##   in Loop: Header=BB73_679 Depth=1
	cmpq	$0, -4608(%rbp)
	jne	LBB73_698
## %bb.697:                             ##   in Loop: Header=BB73_679 Depth=1
	movq	-4632(%rbp), %rax
	movq	%rax, -4608(%rbp)
	jmp	LBB73_701
LBB73_698:
	movq	-4632(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_700
## %bb.699:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4632(%rbp), %rdx
	leaq	L_.str.316(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	___stderrp@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.523(%rip), %rsi
	movl	%eax, -5976(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_700:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4632(%rbp), %rdx
	leaq	L_.str.524(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_701:                              ##   in Loop: Header=BB73_679 Depth=1
	jmp	LBB73_702
LBB73_702:                              ##   in Loop: Header=BB73_679 Depth=1
	jmp	LBB73_703
LBB73_703:                              ##   in Loop: Header=BB73_679 Depth=1
	jmp	LBB73_704
LBB73_704:                              ##   in Loop: Header=BB73_679 Depth=1
	jmp	LBB73_705
LBB73_705:                              ##   in Loop: Header=BB73_679 Depth=1
	jmp	LBB73_706
LBB73_706:                              ##   in Loop: Header=BB73_679 Depth=1
	jmp	LBB73_707
LBB73_707:                              ##   in Loop: Header=BB73_679 Depth=1
	jmp	LBB73_708
LBB73_708:                              ##   in Loop: Header=BB73_679 Depth=1
	movl	-4612(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4612(%rbp)
	jmp	LBB73_679
LBB73_709:
	cmpq	$0, -4600(%rbp)
	jne	LBB73_716
## %bb.710:
	movq	-3944(%rbp), %rax
	cmpl	$1, 84(%rax)
	je	LBB73_713
## %bb.711:
	movq	-3944(%rbp), %rax
	cmpl	$14, 84(%rax)
	jl	LBB73_714
## %bb.712:
	movq	-3944(%rbp), %rax
	cmpl	$16, 84(%rax)
	jg	LBB73_714
LBB73_713:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-3944(%rbp), %rax
	movslq	84(%rax), %rax
	leaq	_modeDescr(%rip), %rcx
	movq	(%rcx,%rax,8), %rdx
	movq	-3944(%rbp), %rax
	movl	20(%rax), %ecx
	movq	-3944(%rbp), %rax
	movzbl	25(%rax), %esi
	cmpl	$0, %esi
	leaq	L_.str.372(%rip), %rax
	leaq	L_.str.373(%rip), %r8
	cmovneq	%rax, %r8
	movq	-3944(%rbp), %rax
	movzbl	24(%rax), %esi
	cmpl	$0, %esi
	leaq	L_.str.27(%rip), %rax
	leaq	L_.str.526(%rip), %r9
	cmovneq	%rax, %r9
	leaq	L_.str.525(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_715
LBB73_714:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-3944(%rbp), %rax
	movslq	84(%rax), %rax
	leaq	_modeDescr(%rip), %rcx
	movq	(%rcx,%rax,8), %rdx
	leaq	L_.str.527(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_715:
	movq	-3944(%rbp), %rax
	movslq	84(%rax), %rax
	leaq	_modeDescr(%rip), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -4600(%rbp)
LBB73_716:
	movq	-4600(%rbp), %rdi
	callq	_strlen30
	movl	%eax, -4616(%rbp)
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.528(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_718
## %bb.717:
	movq	-3944(%rbp), %rax
	movl	$0, 84(%rax)
	movq	-3944(%rbp), %rax
	addq	$210, %rax
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.66(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB73_769
LBB73_718:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.529(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_722
## %bb.719:
	movq	-3944(%rbp), %rax
	movl	$1, 84(%rax)
	movq	-3944(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	LBB73_721
## %bb.720:
	movq	-3944(%rbp), %rax
	movl	$1, 104(%rax)
LBB73_721:
	movq	-3944(%rbp), %rax
	addq	$210, %rax
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.66(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	movq	-3944(%rbp), %rcx
	movq	-4624(%rbp), %rdx
	movq	%rdx, 20(%rcx)
	jmp	LBB73_768
LBB73_722:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.530(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_724
## %bb.723:
	movq	-3944(%rbp), %rax
	movl	$2, 84(%rax)
	movq	-3944(%rbp), %rax
	addq	$190, %rax
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.222(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	movq	-3944(%rbp), %rcx
	addq	$210, %rcx
	movl	$20, %edi
	movq	%rcx, %rsi
	leaq	L_.str.66(%rip), %rdx
	movq	%rax, -5984(%rbp)       ## 8-byte Spill
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB73_767
LBB73_724:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.531(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_726
## %bb.725:
	movq	-3944(%rbp), %rax
	movl	$4, 84(%rax)
	jmp	LBB73_766
LBB73_726:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.532(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_728
## %bb.727:
	movq	-3944(%rbp), %rax
	movl	$7, 84(%rax)
	movq	-3944(%rbp), %rax
	addq	$190, %rax
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.533(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	movq	-3944(%rbp), %rcx
	addq	$210, %rcx
	movl	$20, %edi
	movq	%rcx, %rsi
	leaq	L_.str.66(%rip), %rdx
	movq	%rax, -5992(%rbp)       ## 8-byte Spill
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB73_765
LBB73_728:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.534(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_730
## %bb.729:
	movq	-3944(%rbp), %rax
	movl	$8, 84(%rax)
	movq	-3944(%rbp), %rax
	addq	$190, %rax
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.65(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	movq	-3944(%rbp), %rcx
	addq	$210, %rcx
	movl	$20, %edi
	movq	%rcx, %rsi
	leaq	L_.str.282(%rip), %rdx
	movq	%rax, -6000(%rbp)       ## 8-byte Spill
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB73_764
LBB73_730:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.535(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_732
## %bb.731:
	movq	-3944(%rbp), %rax
	movl	$2, 84(%rax)
	movq	-3944(%rbp), %rax
	addq	$190, %rax
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.78(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB73_763
LBB73_732:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.536(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_737
## %bb.733:
	movq	-3944(%rbp), %rax
	movl	$5, 84(%rax)
	movq	-3944(%rbp), %rdi
	cmpq	$0, -4608(%rbp)
	movq	%rdi, -6008(%rbp)       ## 8-byte Spill
	je	LBB73_735
## %bb.734:
	movq	-4608(%rbp), %rax
	movq	%rax, -6016(%rbp)       ## 8-byte Spill
	jmp	LBB73_736
LBB73_735:
	leaq	L_.str.488(%rip), %rax
	movq	%rax, -6016(%rbp)       ## 8-byte Spill
	jmp	LBB73_736
LBB73_736:
	movq	-6016(%rbp), %rax       ## 8-byte Reload
	movq	-6008(%rbp), %rdi       ## 8-byte Reload
	movq	%rax, %rsi
	callq	_set_table_name
	jmp	LBB73_762
LBB73_737:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.519(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_739
## %bb.738:
	movq	-3944(%rbp), %rax
	movl	$6, 84(%rax)
	movq	-3944(%rbp), %rax
	addq	$190, %rax
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.65(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	movq	-3944(%rbp), %rcx
	addq	$210, %rcx
	movl	$20, %edi
	movq	%rcx, %rsi
	leaq	L_.str.66(%rip), %rdx
	movq	%rax, -6024(%rbp)       ## 8-byte Spill
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB73_761
LBB73_739:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.537(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_741
## %bb.740:
	movq	-3944(%rbp), %rax
	movl	$10, 84(%rax)
	movq	-3944(%rbp), %rax
	addq	$190, %rax
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.75(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	movq	-3944(%rbp), %rcx
	addq	$210, %rcx
	movl	$20, %edi
	movq	%rcx, %rsi
	leaq	L_.str.76(%rip), %rdx
	movq	%rax, -6032(%rbp)       ## 8-byte Spill
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB73_760
LBB73_741:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.538(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_743
## %bb.742:
	movq	-3944(%rbp), %rax
	movl	$14, 84(%rax)
	movq	-3944(%rbp), %rax
	movq	-4624(%rbp), %rcx
	movq	%rcx, 20(%rax)
	jmp	LBB73_759
LBB73_743:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.488(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_745
## %bb.744:
	movq	-3944(%rbp), %rax
	movl	$15, 84(%rax)
	movq	-3944(%rbp), %rax
	movq	-4624(%rbp), %rcx
	movq	%rcx, 20(%rax)
	jmp	LBB73_758
LBB73_745:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.522(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_747
## %bb.746:
	movq	-3944(%rbp), %rax
	movl	$16, 84(%rax)
	movq	-3944(%rbp), %rax
	movq	-4624(%rbp), %rcx
	movq	%rcx, 20(%rax)
	jmp	LBB73_757
LBB73_747:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.539(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_749
## %bb.748:
	movq	-3944(%rbp), %rax
	movl	$17, 84(%rax)
	jmp	LBB73_756
LBB73_749:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.373(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_751
## %bb.750:
	movq	-3944(%rbp), %rax
	movl	$18, 84(%rax)
	jmp	LBB73_755
LBB73_751:
	movq	-4600(%rbp), %rdi
	movslq	-4616(%rbp), %rdx
	leaq	L_.str.540(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_753
## %bb.752:
	movq	-3944(%rbp), %rax
	movl	$13, 84(%rax)
	jmp	LBB73_754
LBB73_753:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.541(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_754:
	jmp	LBB73_755
LBB73_755:
	jmp	LBB73_756
LBB73_756:
	jmp	LBB73_757
LBB73_757:
	jmp	LBB73_758
LBB73_758:
	jmp	LBB73_759
LBB73_759:
	jmp	LBB73_760
LBB73_760:
	jmp	LBB73_761
LBB73_761:
	jmp	LBB73_762
LBB73_762:
	jmp	LBB73_763
LBB73_763:
	jmp	LBB73_764
LBB73_764:
	jmp	LBB73_765
LBB73_765:
	jmp	LBB73_766
LBB73_766:
	jmp	LBB73_767
LBB73_767:
	jmp	LBB73_768
LBB73_768:
	jmp	LBB73_769
LBB73_769:
	movq	-3944(%rbp), %rax
	movl	84(%rax), %ecx
	movq	-3944(%rbp), %rax
	movl	%ecx, 92(%rax)
	jmp	LBB73_1598
LBB73_770:
	cmpl	$110, -3960(%rbp)
	jne	LBB73_779
## %bb.771:
	movq	-432(%rbp), %rdi
	leaq	L_.str.542(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_779
## %bb.772:
	cmpl	$2, -3952(%rbp)
	je	LBB73_774
## %bb.773:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.543(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_778
LBB73_774:
	movq	-3944(%rbp), %rax
	cmpq	$0, 1496(%rax)
	je	LBB73_776
## %bb.775:
	movq	-424(%rbp), %rdi
	movq	-3944(%rbp), %rax
	movq	1496(%rax), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB73_777
LBB73_776:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-3944(%rbp), %rax
	movl	48(%rax), %edx
	movq	-424(%rbp), %rcx
	leaq	L_.str.544(%rip), %rsi
	xorl	%r8d, %r8d
                                        ## kill: def $r8b killed $r8b killed $r8d
	movb	%r8b, %al
	callq	_fprintf
	movl	$1, %edi
	movl	%eax, -6036(%rbp)       ## 4-byte Spill
	callq	_exit
LBB73_777:
	movq	-3944(%rbp), %rax
	movb	$0, 17(%rax)
	movl	$0, -3924(%rbp)
	jmp	LBB73_1633
LBB73_778:
	jmp	LBB73_1597
LBB73_779:
	cmpl	$110, -3960(%rbp)
	jne	LBB73_785
## %bb.780:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.545(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_785
## %bb.781:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_783
## %bb.782:
	movq	-3944(%rbp), %rax
	addq	$292, %rax              ## imm = 0x124
	movq	-424(%rbp), %r8
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.125(%rip), %rdx
	movl	$19, %ecx
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB73_784
LBB73_783:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.546(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_784:
	jmp	LBB73_1596
LBB73_785:
	cmpl	$111, -3960(%rbp)
	jne	LBB73_841
## %bb.786:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.547(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_841
## %bb.787:
	cmpl	$2, -3956(%rbp)
	jl	LBB73_841
## %bb.788:
	movq	$0, -4648(%rbp)
	movq	$0, -4656(%rbp)
	movl	$1, -4660(%rbp)
	movl	$0, -4664(%rbp)
	movl	$0, -4668(%rbp)
	movl	$1, -4660(%rbp)
LBB73_789:                              ## =>This Inner Loop Header: Depth=1
	movl	-4660(%rbp), %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_820
## %bb.790:                             ##   in Loop: Header=BB73_789 Depth=1
	movslq	-4660(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movq	%rax, -4680(%rbp)
	movq	-4680(%rbp), %rdi
	leaq	L_.str.548(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_792
## %bb.791:                             ##   in Loop: Header=BB73_789 Depth=1
	movl	$1, -4664(%rbp)
	jmp	LBB73_818
LBB73_792:                              ##   in Loop: Header=BB73_789 Depth=1
	movq	-4680(%rbp), %rdi
	leaq	L_.str.549(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_794
## %bb.793:                             ##   in Loop: Header=BB73_789 Depth=1
	movl	$2, -4668(%rbp)
	jmp	LBB73_817
LBB73_794:                              ##   in Loop: Header=BB73_789 Depth=1
	movq	-4680(%rbp), %rdi
	leaq	L_.str.550(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_796
## %bb.795:                             ##   in Loop: Header=BB73_789 Depth=1
	movl	$4, -4668(%rbp)
	jmp	LBB73_816
LBB73_796:                              ##   in Loop: Header=BB73_789 Depth=1
	movq	-4680(%rbp), %rdi
	leaq	L_.str.551(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_798
## %bb.797:                             ##   in Loop: Header=BB73_789 Depth=1
	movq	-3944(%rbp), %rax
	movl	52(%rax), %ecx
	orl	$16777216, %ecx         ## imm = 0x1000000
	movl	%ecx, 52(%rax)
	jmp	LBB73_815
LBB73_798:                              ##   in Loop: Header=BB73_789 Depth=1
	movq	-4680(%rbp), %rdi
	leaq	L_.str.552(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_800
## %bb.799:                             ##   in Loop: Header=BB73_789 Depth=1
	movl	$5, -4668(%rbp)
	jmp	LBB73_814
LBB73_800:                              ##   in Loop: Header=BB73_789 Depth=1
	movq	-4680(%rbp), %rdi
	leaq	L_.str.553(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_802
## %bb.801:                             ##   in Loop: Header=BB73_789 Depth=1
	movl	$6, -4668(%rbp)
	jmp	LBB73_813
LBB73_802:                              ##   in Loop: Header=BB73_789 Depth=1
	movq	-4680(%rbp), %rdi
	leaq	L_.str.554(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_805
## %bb.803:                             ##   in Loop: Header=BB73_789 Depth=1
	movl	-4660(%rbp), %eax
	addl	$1, %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_805
## %bb.804:                             ##   in Loop: Header=BB73_789 Depth=1
	movl	-4660(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4660(%rbp)
	movslq	%eax, %rcx
	movq	-432(%rbp,%rcx,8), %rdi
	callq	_integerValue
	movq	-3944(%rbp), %rcx
	movq	%rax, 136(%rcx)
	jmp	LBB73_812
LBB73_805:                              ##   in Loop: Header=BB73_789 Depth=1
	movq	-4680(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_807
## %bb.806:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4680(%rbp), %rdx
	leaq	L_.str.316(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_807:                              ##   in Loop: Header=BB73_789 Depth=1
	cmpq	$0, -4648(%rbp)
	je	LBB73_809
## %bb.808:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4680(%rbp), %rdx
	leaq	L_.str.524(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_809:                              ##   in Loop: Header=BB73_789 Depth=1
	movq	-4680(%rbp), %rax
	movq	%rax, -4648(%rbp)
## %bb.810:                             ##   in Loop: Header=BB73_789 Depth=1
	jmp	LBB73_811
LBB73_811:                              ##   in Loop: Header=BB73_789 Depth=1
	jmp	LBB73_812
LBB73_812:                              ##   in Loop: Header=BB73_789 Depth=1
	jmp	LBB73_813
LBB73_813:                              ##   in Loop: Header=BB73_789 Depth=1
	jmp	LBB73_814
LBB73_814:                              ##   in Loop: Header=BB73_789 Depth=1
	jmp	LBB73_815
LBB73_815:                              ##   in Loop: Header=BB73_789 Depth=1
	jmp	LBB73_816
LBB73_816:                              ##   in Loop: Header=BB73_789 Depth=1
	jmp	LBB73_817
LBB73_817:                              ##   in Loop: Header=BB73_789 Depth=1
	jmp	LBB73_818
LBB73_818:                              ##   in Loop: Header=BB73_789 Depth=1
	jmp	LBB73_819
LBB73_819:                              ##   in Loop: Header=BB73_789 Depth=1
	movl	-4660(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4660(%rbp)
	jmp	LBB73_789
LBB73_820:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	callq	_close_db
	movq	-3944(%rbp), %rax
	movq	$0, (%rax)
	movq	-3944(%rbp), %rax
	movq	1472(%rax), %rax
	movq	$0, 8(%rax)
	movq	-3944(%rbp), %rax
	movq	1472(%rax), %rax
	movq	16(%rax), %rdi
	callq	_sqlite3_free
	movq	-3944(%rbp), %rax
	movq	1472(%rax), %rax
	movq	$0, 16(%rax)
	movl	-4668(%rbp), %ecx
                                        ## kill: def $cl killed $cl killed $ecx
	movq	-3944(%rbp), %rax
	movb	%cl, 13(%rax)
	movq	-3944(%rbp), %rax
	movl	$0, 52(%rax)
	movq	-3944(%rbp), %rax
	movq	$0, 136(%rax)
	cmpq	$0, -4648(%rbp)
	jne	LBB73_822
## %bb.821:
	movq	-3944(%rbp), %rax
	movzbl	13(%rax), %ecx
	cmpl	$6, %ecx
	jne	LBB73_838
LBB73_822:
	cmpl	$0, -4664(%rbp)
	je	LBB73_826
## %bb.823:
	cmpq	$0, -4648(%rbp)
	je	LBB73_826
## %bb.824:
	movq	-3944(%rbp), %rax
	cmpb	$0, 17(%rax)
	jne	LBB73_826
## %bb.825:
	movq	-4648(%rbp), %rdi
	callq	_shellDeleteFile
LBB73_826:
	movq	-3944(%rbp), %rax
	movzbl	17(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB73_831
## %bb.827:
	movq	-3944(%rbp), %rax
	movzbl	13(%rax), %ecx
	cmpl	$6, %ecx
	je	LBB73_831
## %bb.828:
	cmpq	$0, -4648(%rbp)
	je	LBB73_831
## %bb.829:
	movq	-4648(%rbp), %rdi
	leaq	L_.str.22(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB73_831
## %bb.830:
	movq	-3944(%rbp), %rdi
	leaq	L_.str.555(%rip), %rsi
	movb	$0, %al
	callq	_failIfSafeMode
LBB73_831:
	cmpq	$0, -4648(%rbp)
	je	LBB73_833
## %bb.832:
	movq	-4648(%rbp), %rsi
	leaq	L_.str.79(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4656(%rbp)
	movq	-4656(%rbp), %rdi
	callq	_shell_check_oom
	jmp	LBB73_834
LBB73_833:
	movq	$0, -4656(%rbp)
LBB73_834:
	movq	-4656(%rbp), %rax
	movq	-3944(%rbp), %rcx
	movq	1472(%rcx), %rcx
	movq	%rax, 8(%rcx)
	movq	-3944(%rbp), %rdi
	movl	$1, %esi
	callq	_open_db
	movq	-3944(%rbp), %rax
	cmpq	$0, (%rax)
	jne	LBB73_836
## %bb.835:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4656(%rbp), %rdx
	leaq	L_.str.556(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-4656(%rbp), %rdi
	movl	%eax, -6040(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
	jmp	LBB73_837
LBB73_836:
	movq	-4656(%rbp), %rax
	movq	-3944(%rbp), %rcx
	movq	1472(%rcx), %rcx
	movq	%rax, 16(%rcx)
LBB73_837:
	jmp	LBB73_838
LBB73_838:
	movq	-3944(%rbp), %rax
	cmpq	$0, (%rax)
	jne	LBB73_840
## %bb.839:
	xorl	%esi, %esi
	movq	-3944(%rbp), %rax
	movq	1472(%rax), %rax
	movq	$0, 8(%rax)
	movq	-3944(%rbp), %rdi
	callq	_open_db
LBB73_840:
	jmp	LBB73_1595
LBB73_841:
	cmpl	$111, -3960(%rbp)
	jne	LBB73_844
## %bb.842:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.557(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	je	LBB73_847
## %bb.843:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.558(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	je	LBB73_847
LBB73_844:
	cmpl	$101, -3960(%rbp)
	jne	LBB73_910
## %bb.845:
	cmpl	$5, -3956(%rbp)
	jne	LBB73_910
## %bb.846:
	movq	-432(%rbp), %rdi
	leaq	L_.str.559(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_910
LBB73_847:
	movq	$0, -4688(%rbp)
	movl	$0, -4692(%rbp)
	movl	$0, -4700(%rbp)
	movl	$0, -4704(%rbp)
	movl	$0, -4708(%rbp)
	movq	-3944(%rbp), %rdi
	movq	-432(%rbp), %rdx
	leaq	L_.str.314(%rip), %rsi
	movb	$0, %al
	callq	_failIfSafeMode
	cmpl	$101, -3960(%rbp)
	jne	LBB73_849
## %bb.848:
	movl	$120, -4700(%rbp)
	movl	$2, -4708(%rbp)
	jmp	LBB73_852
LBB73_849:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.558(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_851
## %bb.850:
	movl	$1, -4708(%rbp)
LBB73_851:
	jmp	LBB73_852
LBB73_852:
	movl	$1, -4696(%rbp)
LBB73_853:                              ## =>This Inner Loop Header: Depth=1
	movl	-4696(%rbp), %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_883
## %bb.854:                             ##   in Loop: Header=BB73_853 Depth=1
	movslq	-4696(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movq	%rax, -4720(%rbp)
	movq	-4720(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_869
## %bb.855:                             ##   in Loop: Header=BB73_853 Depth=1
	movq	-4720(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_857
## %bb.856:                             ##   in Loop: Header=BB73_853 Depth=1
	movq	-4720(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -4720(%rbp)
LBB73_857:                              ##   in Loop: Header=BB73_853 Depth=1
	movq	-4720(%rbp), %rdi
	leaq	L_.str.560(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_859
## %bb.858:                             ##   in Loop: Header=BB73_853 Depth=1
	movl	$1, -4704(%rbp)
	jmp	LBB73_868
LBB73_859:                              ##   in Loop: Header=BB73_853 Depth=1
	cmpl	$101, -3960(%rbp)
	je	LBB73_862
## %bb.860:                             ##   in Loop: Header=BB73_853 Depth=1
	movq	-4720(%rbp), %rdi
	leaq	L_.str.561(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_862
## %bb.861:                             ##   in Loop: Header=BB73_853 Depth=1
	movl	$120, -4700(%rbp)
	jmp	LBB73_867
LBB73_862:                              ##   in Loop: Header=BB73_853 Depth=1
	cmpl	$101, -3960(%rbp)
	je	LBB73_865
## %bb.863:                             ##   in Loop: Header=BB73_853 Depth=1
	movq	-4720(%rbp), %rdi
	leaq	L_.str.562(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_865
## %bb.864:                             ##   in Loop: Header=BB73_853 Depth=1
	movl	$101, -4700(%rbp)
	jmp	LBB73_866
LBB73_865:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movslq	-4696(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdx
	leaq	L_.str.451(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-432(%rbp), %rsi
	movl	%eax, -6044(%rbp)       ## 4-byte Spill
	callq	_showHelp
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_866:                              ##   in Loop: Header=BB73_853 Depth=1
	jmp	LBB73_867
LBB73_867:                              ##   in Loop: Header=BB73_853 Depth=1
	jmp	LBB73_868
LBB73_868:                              ##   in Loop: Header=BB73_853 Depth=1
	jmp	LBB73_881
LBB73_869:                              ##   in Loop: Header=BB73_853 Depth=1
	cmpq	$0, -4688(%rbp)
	jne	LBB73_879
## %bb.870:                             ##   in Loop: Header=BB73_853 Depth=1
	cmpl	$101, -4700(%rbp)
	je	LBB73_879
## %bb.871:                             ##   in Loop: Header=BB73_853 Depth=1
	cmpl	$120, -4700(%rbp)
	je	LBB73_879
## %bb.872:                             ##   in Loop: Header=BB73_853 Depth=1
	movq	-4720(%rbp), %rsi
	leaq	L_.str.79(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4688(%rbp)
	cmpq	$0, -4688(%rbp)
	je	LBB73_878
## %bb.873:                             ##   in Loop: Header=BB73_853 Depth=1
	movq	-4688(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$124, %ecx
	jne	LBB73_878
## %bb.874:
	jmp	LBB73_875
LBB73_875:                              ## =>This Inner Loop Header: Depth=1
	movl	-4696(%rbp), %eax
	addl	$1, %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_877
## %bb.876:                             ##   in Loop: Header=BB73_875 Depth=1
	movq	-4688(%rbp), %rsi
	movl	-4696(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4696(%rbp)
	movslq	%eax, %rcx
	movq	-432(%rbp,%rcx,8), %rdx
	leaq	L_.str.563(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4688(%rbp)
	jmp	LBB73_875
LBB73_877:
	jmp	LBB73_883
LBB73_878:                              ##   in Loop: Header=BB73_853 Depth=1
	jmp	LBB73_880
LBB73_879:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movslq	-4696(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdx
	leaq	L_.str.564(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-432(%rbp), %rsi
	movl	%eax, -6048(%rbp)       ## 4-byte Spill
	callq	_showHelp
	movl	$1, -3964(%rbp)
	movq	-4688(%rbp), %rdi
	movl	%eax, -6052(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
	jmp	LBB73_1628
LBB73_880:                              ##   in Loop: Header=BB73_853 Depth=1
	jmp	LBB73_881
LBB73_881:                              ##   in Loop: Header=BB73_853 Depth=1
	jmp	LBB73_882
LBB73_882:                              ##   in Loop: Header=BB73_853 Depth=1
	movl	-4696(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4696(%rbp)
	jmp	LBB73_853
LBB73_883:
	cmpq	$0, -4688(%rbp)
	jne	LBB73_885
## %bb.884:
	leaq	L_.str.565(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4688(%rbp)
LBB73_885:
	cmpl	$0, -4708(%rbp)
	je	LBB73_887
## %bb.886:
	movq	-3944(%rbp), %rax
	movl	$2, 40(%rax)
	jmp	LBB73_888
LBB73_887:
	movq	-3944(%rbp), %rax
	movl	$0, 40(%rax)
LBB73_888:
	movq	-3944(%rbp), %rdi
	callq	_output_reset
	cmpl	$101, -4700(%rbp)
	je	LBB73_890
## %bb.889:
	cmpl	$120, -4700(%rbp)
	jne	LBB73_894
LBB73_890:
	movq	-3944(%rbp), %rax
	movb	$1, 14(%rax)
	movq	-3944(%rbp), %rdi
	callq	_outputModePush
	cmpl	$120, -4700(%rbp)
	jne	LBB73_892
## %bb.891:
	movq	-3944(%rbp), %rdi
	leaq	L_.str.534(%rip), %rsi
	callq	_newTempFile
	movq	-3944(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$-65, %ecx
	movl	%ecx, 124(%rax)
	movq	-3944(%rbp), %rax
	movl	$8, 84(%rax)
	movq	-3944(%rbp), %rax
	addq	$190, %rax
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.65(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	movq	-3944(%rbp), %rdx
	addq	$210, %rdx
	movl	$20, %edi
	movq	%rdx, %rsi
	leaq	L_.str.282(%rip), %rdx
	movq	%rax, -6064(%rbp)       ## 8-byte Spill
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB73_893
LBB73_892:
	movq	-3944(%rbp), %rdi
	leaq	L_.str.566(%rip), %rsi
	callq	_newTempFile
	movl	$1, -4692(%rbp)
LBB73_893:
	movq	-4688(%rbp), %rdi
	callq	_sqlite3_free
	movq	-3944(%rbp), %rax
	movq	152(%rax), %rsi
	leaq	L_.str.79(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4688(%rbp)
LBB73_894:
	movq	-4688(%rbp), %rdi
	callq	_shell_check_oom
	movq	-4688(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$124, %ecx
	jne	LBB73_901
## %bb.895:
	movq	-4688(%rbp), %rax
	addq	$1, %rax
	movq	%rax, %rdi
	leaq	L_.str.280(%rip), %rsi
	callq	_popen
	movq	-3944(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-3944(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	LBB73_897
## %bb.896:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4688(%rbp), %rax
	addq	$1, %rax
	leaq	L_.str.567(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	movq	___stdoutp@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-3944(%rbp), %rdx
	movq	%rcx, 64(%rdx)
	movl	$1, -3964(%rbp)
	jmp	LBB73_900
LBB73_897:
	cmpl	$0, -4704(%rbp)
	je	LBB73_899
## %bb.898:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.568(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_899:
	movq	-3944(%rbp), %rax
	addq	$312, %rax              ## imm = 0x138
	movq	-4688(%rbp), %rcx
	movl	$1024, %edi             ## imm = 0x400
	movq	%rax, %rsi
	leaq	L_.str.79(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
LBB73_900:
	jmp	LBB73_909
LBB73_901:
	movq	-4688(%rbp), %rdi
	movl	-4692(%rbp), %esi
	callq	_output_file_open
	movq	-3944(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-3944(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	LBB73_905
## %bb.902:
	movq	-4688(%rbp), %rdi
	leaq	L_.str.373(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB73_904
## %bb.903:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4688(%rbp), %rdx
	leaq	L_.str.569(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_904:
	movq	___stdoutp@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-3944(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movl	$1, -3964(%rbp)
	jmp	LBB73_908
LBB73_905:
	cmpl	$0, -4704(%rbp)
	je	LBB73_907
## %bb.906:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.568(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_907:
	movq	-3944(%rbp), %rax
	addq	$312, %rax              ## imm = 0x138
	movq	-4688(%rbp), %rcx
	movl	$1024, %edi             ## imm = 0x400
	movq	%rax, %rsi
	leaq	L_.str.79(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
LBB73_908:
	jmp	LBB73_909
LBB73_909:
	movq	-4688(%rbp), %rdi
	callq	_sqlite3_free
	jmp	LBB73_1594
LBB73_910:
	cmpl	$112, -3960(%rbp)
	jne	LBB73_953
## %bb.911:
	cmpl	$3, -3956(%rbp)
	jl	LBB73_953
## %bb.912:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.570(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_953
## %bb.913:
	xorl	%esi, %esi
	movq	-3944(%rbp), %rdi
	callq	_open_db
	cmpl	$1, -3952(%rbp)
	jg	LBB73_915
## %bb.914:
	jmp	LBB73_947
LBB73_915:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_918
## %bb.916:
	movq	-424(%rbp), %rdi
	leaq	L_.str.571(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_918
## %bb.917:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.572(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -6072(%rbp)       ## 8-byte Spill
	movq	-6072(%rbp), %r8        ## 8-byte Reload
	callq	_sqlite3_exec
	jmp	LBB73_952
LBB73_918:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_933
## %bb.919:
	movq	-424(%rbp), %rdi
	leaq	L_.str.530(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_933
## %bb.920:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	$0, -4728(%rbp)
	movl	$0, -4736(%rbp)
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.573(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-4728(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -4732(%rbp)
	cmpl	$0, -4732(%rbp)
	jne	LBB73_925
## %bb.921:
	movq	-4728(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB73_925
## %bb.922:
	xorl	%esi, %esi
	movq	-4728(%rbp), %rdi
	callq	_sqlite3_column_int
	movl	%eax, -4736(%rbp)
	cmpl	$40, -4736(%rbp)
	jle	LBB73_924
## %bb.923:
	movl	$40, -4736(%rbp)
LBB73_924:
	jmp	LBB73_925
LBB73_925:
	movq	-4728(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	$0, -4728(%rbp)
	cmpl	$0, -4736(%rbp)
	je	LBB73_932
## %bb.926:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.574(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-4728(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -4732(%rbp)
LBB73_927:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -4732(%rbp)
	movb	%al, -6073(%rbp)        ## 1-byte Spill
	jne	LBB73_929
## %bb.928:                             ##   in Loop: Header=BB73_927 Depth=1
	movq	-4728(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	sete	%cl
	movb	%cl, -6073(%rbp)        ## 1-byte Spill
LBB73_929:                              ##   in Loop: Header=BB73_927 Depth=1
	movb	-6073(%rbp), %al        ## 1-byte Reload
	testb	$1, %al
	jne	LBB73_930
	jmp	LBB73_931
LBB73_930:                              ##   in Loop: Header=BB73_927 Depth=1
	xorl	%esi, %esi
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-4736(%rbp), %edx
	movq	-4728(%rbp), %rax
	movq	%rdi, -6088(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	movl	%edx, -6092(%rbp)       ## 4-byte Spill
	callq	_sqlite3_column_text
	movq	-4728(%rbp), %rdi
	movl	$1, %esi
	movq	%rax, -6104(%rbp)       ## 8-byte Spill
	callq	_sqlite3_column_text
	movq	-6088(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.575(%rip), %rsi
	movl	-6092(%rbp), %edx       ## 4-byte Reload
	movq	-6104(%rbp), %rcx       ## 8-byte Reload
	movq	%rax, %r8
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_927
LBB73_931:
	movq	-4728(%rbp), %rdi
	callq	_sqlite3_finalize
LBB73_932:
	jmp	LBB73_951
LBB73_933:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_936
## %bb.934:
	movq	-424(%rbp), %rdi
	leaq	L_.str.576(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_936
## %bb.935:
	movq	-3944(%rbp), %rdi
	callq	_bind_table_init
	jmp	LBB73_950
LBB73_936:
	cmpl	$4, -3952(%rbp)
	jne	LBB73_943
## %bb.937:
	movq	-424(%rbp), %rdi
	leaq	L_.str.577(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_943
## %bb.938:
	movq	-416(%rbp), %rax
	movq	%rax, -4768(%rbp)
	movq	-408(%rbp), %rax
	movq	%rax, -4776(%rbp)
	movq	-3944(%rbp), %rdi
	callq	_bind_table_init
	movq	-4768(%rbp), %rsi
	movq	-4776(%rbp), %rdx
	leaq	L_.str.578(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4752(%rbp)
	movq	-4752(%rbp), %rdi
	callq	_shell_check_oom
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	$0, -4760(%rbp)
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-4752(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-4760(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -4740(%rbp)
	movq	-4752(%rbp), %rdi
	callq	_sqlite3_free
	cmpl	$0, -4740(%rbp)
	je	LBB73_942
## %bb.939:
	movq	-4760(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	$0, -4760(%rbp)
	movq	-4768(%rbp), %rsi
	movq	-4776(%rbp), %rdx
	leaq	L_.str.579(%rip), %rdi
	movl	%eax, -6108(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4752(%rbp)
	movq	-4752(%rbp), %rdi
	callq	_shell_check_oom
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-4752(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-4760(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -4740(%rbp)
	movq	-4752(%rbp), %rdi
	callq	_sqlite3_free
	cmpl	$0, -4740(%rbp)
	je	LBB73_941
## %bb.940:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-3944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -6120(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-6120(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.92(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	movq	-4760(%rbp), %rdi
	movl	%eax, -6124(%rbp)       ## 4-byte Spill
	callq	_sqlite3_finalize
	movq	$0, -4760(%rbp)
	movl	$1, -3964(%rbp)
LBB73_941:
	jmp	LBB73_942
LBB73_942:
	movq	-4760(%rbp), %rdi
	callq	_sqlite3_step
	movq	-4760(%rbp), %rdi
	movl	%eax, -6128(%rbp)       ## 4-byte Spill
	callq	_sqlite3_finalize
	jmp	LBB73_949
LBB73_943:
	cmpl	$3, -3952(%rbp)
	jne	LBB73_946
## %bb.944:
	movq	-424(%rbp), %rdi
	leaq	L_.str.580(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_946
## %bb.945:
	movq	-416(%rbp), %rsi
	leaq	L_.str.581(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4784(%rbp)
	movq	-4784(%rbp), %rdi
	callq	_shell_check_oom
	xorl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	movq	-4784(%rbp), %rsi
	movq	%rax, %rdx
	movq	%rax, %rcx
	movq	%rax, %r8
	callq	_sqlite3_exec
	movq	-4784(%rbp), %rdi
	movl	%eax, -6132(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
	jmp	LBB73_948
LBB73_946:
	jmp	LBB73_947
LBB73_947:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.570(%rip), %rsi
	callq	_showHelp
LBB73_948:
	jmp	LBB73_949
LBB73_949:
	jmp	LBB73_950
LBB73_950:
	jmp	LBB73_951
LBB73_951:
	jmp	LBB73_952
LBB73_952:
	jmp	LBB73_1593
LBB73_953:
	cmpl	$112, -3960(%rbp)
	jne	LBB73_963
## %bb.954:
	cmpl	$3, -3956(%rbp)
	jl	LBB73_963
## %bb.955:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.582(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_963
## %bb.956:
	movl	$1, -4788(%rbp)
LBB73_957:                              ## =>This Inner Loop Header: Depth=1
	movl	-4788(%rbp), %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_962
## %bb.958:                             ##   in Loop: Header=BB73_957 Depth=1
	cmpl	$1, -4788(%rbp)
	jle	LBB73_960
## %bb.959:                             ##   in Loop: Header=BB73_957 Depth=1
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.533(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_960:                              ##   in Loop: Header=BB73_957 Depth=1
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movslq	-4788(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
## %bb.961:                             ##   in Loop: Header=BB73_957 Depth=1
	movl	-4788(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4788(%rbp)
	jmp	LBB73_957
LBB73_962:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.66(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_1592
LBB73_963:
	cmpl	$112, -3960(%rbp)
	jne	LBB73_988
## %bb.964:
	cmpl	$3, -3956(%rbp)
	jl	LBB73_988
## %bb.965:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.583(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_988
## %bb.966:
	movl	$0, -4796(%rbp)
	movq	-3944(%rbp), %rax
	movl	$0, 120(%rax)
	movq	-3944(%rbp), %rax
	movl	$0, 116(%rax)
	movq	-3944(%rbp), %rax
	movl	$0, 112(%rax)
	movl	$1, -4792(%rbp)
LBB73_967:                              ## =>This Inner Loop Header: Depth=1
	movl	-4792(%rbp), %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_987
## %bb.968:                             ##   in Loop: Header=BB73_967 Depth=1
	movslq	-4792(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movq	%rax, -4808(%rbp)
	movq	-4808(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_984
## %bb.969:                             ##   in Loop: Header=BB73_967 Depth=1
	movq	-4808(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -4808(%rbp)
	movq	-4808(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_971
## %bb.970:                             ##   in Loop: Header=BB73_967 Depth=1
	movq	-4808(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -4808(%rbp)
LBB73_971:                              ##   in Loop: Header=BB73_967 Depth=1
	movq	-4808(%rbp), %rdi
	leaq	L_.str.584(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB73_973
## %bb.972:                             ##   in Loop: Header=BB73_967 Depth=1
	movq	-4808(%rbp), %rdi
	leaq	L_.str.585(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_974
LBB73_973:                              ##   in Loop: Header=BB73_967 Depth=1
	movq	-3944(%rbp), %rax
	movl	120(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 120(%rax)
	jmp	LBB73_986
LBB73_974:                              ##   in Loop: Header=BB73_967 Depth=1
	movq	-4808(%rbp), %rdi
	leaq	L_.str.586(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_976
## %bb.975:                             ##   in Loop: Header=BB73_967 Depth=1
	movq	-3944(%rbp), %rax
	movl	120(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 120(%rax)
	jmp	LBB73_986
LBB73_976:                              ##   in Loop: Header=BB73_967 Depth=1
	movq	-4808(%rbp), %rdi
	leaq	L_.str.558(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_978
## %bb.977:                             ##   in Loop: Header=BB73_967 Depth=1
	movq	-3944(%rbp), %rax
	movl	120(%rax), %ecx
	orl	$4, %ecx
	movl	%ecx, 120(%rax)
	jmp	LBB73_986
LBB73_978:                              ##   in Loop: Header=BB73_967 Depth=1
	movq	-4808(%rbp), %rdi
	leaq	L_.str.587(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_983
## %bb.979:                             ##   in Loop: Header=BB73_967 Depth=1
	movl	-4792(%rbp), %eax
	addl	$1, %eax
	cmpl	-3952(%rbp), %eax
	jl	LBB73_981
## %bb.980:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.588(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_981:                              ##   in Loop: Header=BB73_967 Depth=1
	movl	-4792(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4792(%rbp)
	movslq	%eax, %rcx
	movq	-432(%rbp,%rcx,8), %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movq	-3944(%rbp), %rcx
	movl	%eax, 116(%rcx)
## %bb.982:                             ##   in Loop: Header=BB73_967 Depth=1
	jmp	LBB73_986
LBB73_983:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movslq	-4792(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdx
	leaq	L_.str.589(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_984:                              ##   in Loop: Header=BB73_967 Depth=1
	movq	-4808(%rbp), %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -4796(%rbp)
## %bb.985:                             ##   in Loop: Header=BB73_967 Depth=1
	jmp	LBB73_986
LBB73_986:                              ##   in Loop: Header=BB73_967 Depth=1
	movl	-4792(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4792(%rbp)
	jmp	LBB73_967
LBB73_987:
	xorl	%esi, %esi
	movq	-3944(%rbp), %rdi
	callq	_open_db
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movl	-4796(%rbp), %esi
	movq	-3944(%rbp), %rax
	leaq	_progress_handler(%rip), %rdx
	movq	%rax, %rcx
	callq	_sqlite3_progress_handler
	jmp	LBB73_1591
LBB73_988:
	cmpl	$112, -3960(%rbp)
	jne	LBB73_995
## %bb.989:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.590(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_995
## %bb.990:
	cmpl	$2, -3952(%rbp)
	jl	LBB73_992
## %bb.991:
	movq	-424(%rbp), %rsi
	leaq	_mainPrompt(%rip), %rdi
	movl	$19, %edx
	movl	$20, %ecx
	callq	___strncpy_chk
LBB73_992:
	cmpl	$3, -3952(%rbp)
	jl	LBB73_994
## %bb.993:
	movq	-416(%rbp), %rsi
	leaq	_continuePrompt(%rip), %rdi
	movl	$19, %edx
	movl	$20, %ecx
	callq	___strncpy_chk
LBB73_994:
	jmp	LBB73_1590
LBB73_995:
	cmpl	$113, -3960(%rbp)
	jne	LBB73_998
## %bb.996:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.591(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_998
## %bb.997:
	movl	$2, -3964(%rbp)
	jmp	LBB73_1589
LBB73_998:
	cmpl	$114, -3960(%rbp)
	jne	LBB73_1013
## %bb.999:
	cmpl	$3, -3956(%rbp)
	jl	LBB73_1013
## %bb.1000:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.592(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1013
## %bb.1001:
	movq	-3944(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -4816(%rbp)
	movq	-3944(%rbp), %rax
	movl	48(%rax), %ecx
	movl	%ecx, -4820(%rbp)
	movq	-3944(%rbp), %rdi
	leaq	L_.str.593(%rip), %rsi
	movb	$0, %al
	callq	_failIfSafeMode
	cmpl	$2, -3952(%rbp)
	je	LBB73_1003
## %bb.1002:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.594(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_1003:
	movq	-424(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$124, %ecx
	jne	LBB73_1008
## %bb.1004:
	movq	-424(%rbp), %rax
	addq	$1, %rax
	movq	%rax, %rdi
	leaq	L_.str.288(%rip), %rsi
	callq	_popen
	movq	-3944(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-3944(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	LBB73_1006
## %bb.1005:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-424(%rbp), %rdx
	leaq	L_.str.319(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1007
LBB73_1006:
	movq	-3944(%rbp), %rdi
	callq	_process_input
	movl	%eax, -3964(%rbp)
	movq	-3944(%rbp), %rcx
	movq	56(%rcx), %rdi
	callq	_pclose
LBB73_1007:
	jmp	LBB73_1012
LBB73_1008:
	movq	-424(%rbp), %rdi
	callq	_openChrSource
	movq	-3944(%rbp), %rcx
	movq	%rax, 56(%rcx)
	cmpq	$0, %rax
	jne	LBB73_1010
## %bb.1009:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-424(%rbp), %rdx
	leaq	L_.str.319(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1011
LBB73_1010:
	movq	-3944(%rbp), %rdi
	callq	_process_input
	movl	%eax, -3964(%rbp)
	movq	-3944(%rbp), %rcx
	movq	56(%rcx), %rdi
	callq	_fclose
LBB73_1011:
	jmp	LBB73_1012
LBB73_1012:
	movq	-4816(%rbp), %rax
	movq	-3944(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	-4820(%rbp), %edx
	movq	-3944(%rbp), %rax
	movl	%edx, 48(%rax)
	jmp	LBB73_1588
LBB73_1013:
	cmpl	$114, -3960(%rbp)
	jne	LBB73_1043
## %bb.1014:
	cmpl	$3, -3956(%rbp)
	jl	LBB73_1043
## %bb.1015:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.595(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1043
## %bb.1016:
	movl	$0, -4860(%rbp)
	movq	-3944(%rbp), %rdi
	leaq	L_.str.596(%rip), %rsi
	movb	$0, %al
	callq	_failIfSafeMode
	cmpl	$2, -3952(%rbp)
	jne	LBB73_1018
## %bb.1017:
	movq	-424(%rbp), %rax
	movq	%rax, -4832(%rbp)
	leaq	L___func__.main(%rip), %rax
	movq	%rax, -4840(%rbp)
	jmp	LBB73_1022
LBB73_1018:
	cmpl	$3, -3952(%rbp)
	jne	LBB73_1020
## %bb.1019:
	movq	-416(%rbp), %rax
	movq	%rax, -4832(%rbp)
	movq	-424(%rbp), %rax
	movq	%rax, -4840(%rbp)
	jmp	LBB73_1021
LBB73_1020:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.597(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_1021:
	jmp	LBB73_1022
LBB73_1022:
	movq	-4832(%rbp), %rdi
	leaq	-4848(%rbp), %rsi
	callq	_sqlite3_open
	movl	%eax, -3964(%rbp)
	cmpl	$0, -3964(%rbp)
	je	LBB73_1024
## %bb.1023:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4832(%rbp), %rdx
	leaq	L_.str.319(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-4848(%rbp), %rdi
	movl	%eax, -6136(%rbp)       ## 4-byte Spill
	callq	_close_db
	movl	$1, -3924(%rbp)
	jmp	LBB73_1633
LBB73_1024:
	xorl	%esi, %esi
	movq	-3944(%rbp), %rdi
	callq	_open_db
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-4840(%rbp), %rsi
	movq	-4848(%rbp), %rdx
	leaq	L___func__.main(%rip), %rcx
	callq	_sqlite3_backup_init
	movq	%rax, -4856(%rbp)
	cmpq	$0, -4856(%rbp)
	jne	LBB73_1026
## %bb.1025:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-3944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -6144(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-6144(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.92(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	movq	-4848(%rbp), %rdi
	movl	%eax, -6148(%rbp)       ## 4-byte Spill
	callq	_close_db
	movl	$1, -3924(%rbp)
	jmp	LBB73_1633
LBB73_1026:
	jmp	LBB73_1027
LBB73_1027:                             ## =>This Inner Loop Header: Depth=1
	movq	-4856(%rbp), %rdi
	movl	$100, %esi
	callq	_sqlite3_backup_step
	movl	%eax, -3964(%rbp)
	cmpl	$0, %eax
	movb	$1, %cl
	movb	%cl, -6149(%rbp)        ## 1-byte Spill
	je	LBB73_1029
## %bb.1028:                            ##   in Loop: Header=BB73_1027 Depth=1
	cmpl	$5, -3964(%rbp)
	sete	%al
	movb	%al, -6149(%rbp)        ## 1-byte Spill
LBB73_1029:                             ##   in Loop: Header=BB73_1027 Depth=1
	movb	-6149(%rbp), %al        ## 1-byte Reload
	testb	$1, %al
	jne	LBB73_1030
	jmp	LBB73_1035
LBB73_1030:                             ##   in Loop: Header=BB73_1027 Depth=1
	cmpl	$5, -3964(%rbp)
	jne	LBB73_1034
## %bb.1031:                            ##   in Loop: Header=BB73_1027 Depth=1
	movl	-4860(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -4860(%rbp)
	cmpl	$3, %eax
	jl	LBB73_1033
## %bb.1032:
	jmp	LBB73_1035
LBB73_1033:                             ##   in Loop: Header=BB73_1027 Depth=1
	movl	$100, %edi
	callq	_sqlite3_sleep
LBB73_1034:                             ##   in Loop: Header=BB73_1027 Depth=1
	jmp	LBB73_1027
LBB73_1035:
	movq	-4856(%rbp), %rdi
	callq	_sqlite3_backup_finish
	cmpl	$101, -3964(%rbp)
	jne	LBB73_1037
## %bb.1036:
	movl	$0, -3964(%rbp)
	jmp	LBB73_1042
LBB73_1037:
	cmpl	$5, -3964(%rbp)
	je	LBB73_1039
## %bb.1038:
	cmpl	$6, -3964(%rbp)
	jne	LBB73_1040
LBB73_1039:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.598(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1041
LBB73_1040:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-3944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -6160(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-6160(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.92(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_1041:
	jmp	LBB73_1042
LBB73_1042:
	movq	-4848(%rbp), %rdi
	callq	_close_db
	jmp	LBB73_1587
LBB73_1043:
	cmpl	$115, -3960(%rbp)
	jne	LBB73_1049
## %bb.1044:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.599(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1049
## %bb.1045:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_1047
## %bb.1046:
	movq	-424(%rbp), %rdi
	callq	_booleanValue
	movq	___stderrp@GOTPCREL(%rip), %rcx
                                        ## kill: def $al killed $al killed $eax
	movq	-3944(%rbp), %rdx
	movb	%al, 12(%rdx)
	movq	(%rcx), %rdi
	leaq	L_.str.600(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_1048
LBB73_1047:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.601(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_1048:
	jmp	LBB73_1586
LBB73_1049:
	cmpl	$115, -3960(%rbp)
	jne	LBB73_1112
## %bb.1050:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.602(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1112
## %bb.1051:
	xorl	%esi, %esi
	movq	$0, -4888(%rbp)
	leaq	L_.str.261(%rip), %rax
	movq	%rax, -4896(%rbp)
	movq	$0, -4904(%rbp)
	movl	$0, -4908(%rbp)
	movl	$0, -4912(%rbp)
	movl	$0, -4916(%rbp)
	movq	-3944(%rbp), %rdi
	callq	_open_db
	leaq	-3848(%rbp), %rax
	movq	-3944(%rbp), %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movl	$1640, %edx             ## imm = 0x668
	callq	_memcpy
	movl	$0, -3744(%rbp)
	movl	$3, -3764(%rbp)
	movl	$3, -3756(%rbp)
	leaq	-4880(%rbp), %rdi
	callq	_initText
	movl	$1, -4920(%rbp)
LBB73_1052:                             ## =>This Inner Loop Header: Depth=1
	movl	-4920(%rbp), %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_1070
## %bb.1053:                            ##   in Loop: Header=BB73_1052 Depth=1
	movslq	-4920(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdi
	leaq	L_.str.433(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_1055
## %bb.1054:                            ##   in Loop: Header=BB73_1052 Depth=1
	movl	$11, -3764(%rbp)
	movl	$11, -3756(%rbp)
	jmp	LBB73_1068
LBB73_1055:                             ##   in Loop: Header=BB73_1052 Depth=1
	movslq	-4920(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdi
	leaq	L_.str.603(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_1057
## %bb.1056:                            ##   in Loop: Header=BB73_1052 Depth=1
	movl	$1, -4912(%rbp)
	jmp	LBB73_1067
LBB73_1057:                             ##   in Loop: Header=BB73_1052 Depth=1
	movslq	-4920(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdi
	leaq	L_.str.381(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_1059
## %bb.1058:                            ##   in Loop: Header=BB73_1052 Depth=1
	movl	$1, -4916(%rbp)
	jmp	LBB73_1066
LBB73_1059:                             ##   in Loop: Header=BB73_1052 Depth=1
	movslq	-4920(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_1061
## %bb.1060:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movslq	-4920(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdx
	leaq	L_.str.604(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_1061:                             ##   in Loop: Header=BB73_1052 Depth=1
	cmpq	$0, -4904(%rbp)
	jne	LBB73_1063
## %bb.1062:                            ##   in Loop: Header=BB73_1052 Depth=1
	movslq	-4920(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movq	%rax, -4904(%rbp)
	jmp	LBB73_1064
LBB73_1063:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.605(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_1064:                             ##   in Loop: Header=BB73_1052 Depth=1
	jmp	LBB73_1065
LBB73_1065:                             ##   in Loop: Header=BB73_1052 Depth=1
	jmp	LBB73_1066
LBB73_1066:                             ##   in Loop: Header=BB73_1052 Depth=1
	jmp	LBB73_1067
LBB73_1067:                             ##   in Loop: Header=BB73_1052 Depth=1
	jmp	LBB73_1068
LBB73_1068:                             ##   in Loop: Header=BB73_1052 Depth=1
	jmp	LBB73_1069
LBB73_1069:                             ##   in Loop: Header=BB73_1052 Depth=1
	movl	-4920(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4920(%rbp)
	jmp	LBB73_1052
LBB73_1070:
	cmpq	$0, -4904(%rbp)
	je	LBB73_1078
## %bb.1071:
	movq	-4904(%rbp), %rdi
	leaq	L_.str.606(%rip), %rsi
	movl	$92, %edx
	callq	_sqlite3_strlike
	cmpl	$0, %eax
	movb	$1, %cl
	movb	%cl, -6161(%rbp)        ## 1-byte Spill
	je	LBB73_1075
## %bb.1072:
	movq	-4904(%rbp), %rdi
	leaq	L_.str.607(%rip), %rsi
	movl	$92, %edx
	callq	_sqlite3_strlike
	cmpl	$0, %eax
	movb	$1, %cl
	movb	%cl, -6161(%rbp)        ## 1-byte Spill
	je	LBB73_1075
## %bb.1073:
	movq	-4904(%rbp), %rdi
	leaq	L_.str.608(%rip), %rsi
	movl	$92, %edx
	callq	_sqlite3_strlike
	cmpl	$0, %eax
	movb	$1, %cl
	movb	%cl, -6161(%rbp)        ## 1-byte Spill
	je	LBB73_1075
## %bb.1074:
	movq	-4904(%rbp), %rdi
	leaq	L_.str.609(%rip), %rsi
	movl	$92, %edx
	callq	_sqlite3_strlike
	cmpl	$0, %eax
	sete	%cl
	movb	%cl, -6161(%rbp)        ## 1-byte Spill
LBB73_1075:
	movb	-6161(%rbp), %al        ## 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -4924(%rbp)
	cmpl	$0, -4924(%rbp)
	je	LBB73_1077
## %bb.1076:
	movq	-4904(%rbp), %rsi
	leaq	L_.str.610(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -3872(%rbp)
	movq	-3872(%rbp), %rdi
	callq	_shell_check_oom
	leaq	-3888(%rbp), %rcx
	leaq	-3872(%rbp), %rdx
	movq	$0, -3864(%rbp)
	leaq	L_.str.611(%rip), %rax
	movq	%rax, -3888(%rbp)
	movq	$0, -3880(%rbp)
	leaq	-3848(%rbp), %rax
	movq	%rax, %rdi
	movl	$1, %esi
	callq	_callback
	movq	-3872(%rbp), %rdi
	movl	%eax, -6168(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
LBB73_1077:
	jmp	LBB73_1078
LBB73_1078:
	cmpq	$0, -4896(%rbp)
	je	LBB73_1105
## %bb.1079:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	$0, -4936(%rbp)
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.612(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-4936(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -3964(%rbp)
	cmpl	$0, -3964(%rbp)
	je	LBB73_1081
## %bb.1080:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-3944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -6176(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-6176(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.92(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	movq	-4936(%rbp), %rdi
	movl	%eax, -6180(%rbp)       ## 4-byte Spill
	callq	_sqlite3_finalize
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_1081:
	xorl	%edx, %edx
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.613(%rip), %rsi
	callq	_appendText
	movl	$0, -4908(%rbp)
LBB73_1082:                             ## =>This Inner Loop Header: Depth=1
	movq	-4936(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB73_1087
## %bb.1083:                            ##   in Loop: Header=BB73_1082 Depth=1
	xorl	%esi, %esi
	movq	-4936(%rbp), %rdi
	callq	_sqlite3_column_text
	leaq	-3920(%rbp), %rsi
	movq	%rax, -4944(%rbp)
	movl	-4908(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -4908(%rbp)
	movl	$30, %edi
	leaq	L_.str.213(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	xorl	%edx, %edx
	movq	-4896(%rbp), %rsi
	leaq	-4880(%rbp), %rdi
	movq	%rax, -6192(%rbp)       ## 8-byte Spill
	callq	_appendText
	xorl	%edx, %edx
	leaq	L_.str.614(%rip), %rax
	movq	%rax, -4896(%rbp)
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.615(%rip), %rsi
	callq	_appendText
	movq	-4944(%rbp), %rdi
	leaq	L___func__.main(%rip), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	je	LBB73_1085
## %bb.1084:                            ##   in Loop: Header=BB73_1082 Depth=1
	movq	-4944(%rbp), %rsi
	leaq	-4880(%rbp), %rdi
	movl	$39, %edx
	callq	_appendText
	jmp	LBB73_1086
LBB73_1085:                             ##   in Loop: Header=BB73_1082 Depth=1
	xorl	%edx, %edx
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.616(%rip), %rsi
	callq	_appendText
LBB73_1086:                             ##   in Loop: Header=BB73_1082 Depth=1
	xorl	%edx, %edx
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.617(%rip), %rsi
	callq	_appendText
	xorl	%edx, %edx
	leaq	-3920(%rbp), %rsi
	leaq	-4880(%rbp), %rdi
	callq	_appendText
	xorl	%edx, %edx
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.618(%rip), %rsi
	callq	_appendText
	movq	-4944(%rbp), %rsi
	leaq	-4880(%rbp), %rdi
	movl	$39, %edx
	callq	_appendText
	xorl	%edx, %edx
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.619(%rip), %rsi
	callq	_appendText
	movq	-4944(%rbp), %rsi
	movq	-4944(%rbp), %rdi
	movq	%rsi, -6200(%rbp)       ## 8-byte Spill
	callq	_quoteChar
	leaq	-4880(%rbp), %rdi
	movq	-6200(%rbp), %rsi       ## 8-byte Reload
	movsbl	%al, %edx
	callq	_appendText
	xorl	%edx, %edx
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.620(%rip), %rsi
	callq	_appendText
	jmp	LBB73_1082
LBB73_1087:
	movq	-4936(%rbp), %rdi
	callq	_sqlite3_finalize
	cmpq	$0, -4904(%rbp)
	je	LBB73_1089
## %bb.1088:
	xorl	%edx, %edx
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.621(%rip), %rsi
	callq	_appendText
LBB73_1089:
	xorl	%edx, %edx
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.622(%rip), %rsi
	callq	_appendText
	cmpq	$0, -4904(%rbp)
	je	LBB73_1099
## %bb.1090:
	movq	-4904(%rbp), %rsi
	leaq	L_.str.190(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -4952(%rbp)
	movq	-4952(%rbp), %rdi
	callq	_shell_check_oom
	movq	-4904(%rbp), %rdi
	movl	$42, %esi
	callq	_strchr
	cmpq	$0, %rax
	movb	$1, %cl
	movb	%cl, -6201(%rbp)        ## 1-byte Spill
	jne	LBB73_1093
## %bb.1091:
	movq	-4904(%rbp), %rdi
	movl	$63, %esi
	callq	_strchr
	cmpq	$0, %rax
	movb	$1, %cl
	movb	%cl, -6201(%rbp)        ## 1-byte Spill
	jne	LBB73_1093
## %bb.1092:
	movq	-4904(%rbp), %rdi
	movl	$91, %esi
	callq	_strchr
	cmpq	$0, %rax
	setne	%cl
	movb	%cl, -6201(%rbp)        ## 1-byte Spill
LBB73_1093:
	movb	-6201(%rbp), %al        ## 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -4956(%rbp)
	movq	-4904(%rbp), %rdi
	movl	$46, %esi
	callq	_strchr
	cmpq	$0, %rax
	je	LBB73_1095
## %bb.1094:
	xorl	%edx, %edx
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.623(%rip), %rsi
	callq	_appendText
	jmp	LBB73_1096
LBB73_1095:
	xorl	%edx, %edx
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.624(%rip), %rsi
	callq	_appendText
LBB73_1096:
	xorl	%edx, %edx
	movl	-4956(%rbp), %eax
	cmpl	$0, %eax
	leaq	L_.str.625(%rip), %rcx
	leaq	L_.str.626(%rip), %rsi
	cmovneq	%rcx, %rsi
	leaq	-4880(%rbp), %rdi
	callq	_appendText
	xorl	%edx, %edx
	movq	-4952(%rbp), %rsi
	leaq	-4880(%rbp), %rdi
	callq	_appendText
	cmpl	$0, -4956(%rbp)
	jne	LBB73_1098
## %bb.1097:
	xorl	%edx, %edx
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.627(%rip), %rsi
	callq	_appendText
LBB73_1098:
	xorl	%edx, %edx
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.628(%rip), %rsi
	callq	_appendText
	movq	-4952(%rbp), %rdi
	callq	_sqlite3_free
LBB73_1099:
	cmpl	$0, -4916(%rbp)
	je	LBB73_1101
## %bb.1100:
	xorl	%edx, %edx
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.629(%rip), %rsi
	callq	_appendText
LBB73_1101:
	xorl	%edx, %edx
	leaq	-4880(%rbp), %rdi
	leaq	L_.str.630(%rip), %rsi
	callq	_appendText
	cmpl	$0, -4912(%rbp)
	je	LBB73_1103
## %bb.1102:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-4880(%rbp), %rdx
	leaq	L_.str.631(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_1104
LBB73_1103:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-4880(%rbp), %rsi
	leaq	-3848(%rbp), %rax
	leaq	_callback(%rip), %rdx
	movq	%rax, %rcx
	leaq	-4888(%rbp), %r8
	callq	_sqlite3_exec
	movl	%eax, -3964(%rbp)
LBB73_1104:
	leaq	-4880(%rbp), %rdi
	callq	_freeText
LBB73_1105:
	cmpq	$0, -4888(%rbp)
	je	LBB73_1107
## %bb.1106:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-4888(%rbp), %rdx
	leaq	L_.str.92(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-4888(%rbp), %rdi
	movl	%eax, -6208(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
	movl	$1, -3964(%rbp)
	jmp	LBB73_1111
LBB73_1107:
	cmpl	$0, -3964(%rbp)
	je	LBB73_1109
## %bb.1108:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.632(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1110
LBB73_1109:
	movl	$0, -3964(%rbp)
LBB73_1110:
	jmp	LBB73_1111
LBB73_1111:
	jmp	LBB73_1585
LBB73_1112:
	cmpl	$115, -3960(%rbp)
	jne	LBB73_1119
## %bb.1113:
	cmpl	$11, -3956(%rbp)
	jne	LBB73_1119
## %bb.1114:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.633(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1119
## %bb.1115:
	cmpl	$2, -3952(%rbp)
	jl	LBB73_1117
## %bb.1116:
	movq	-424(%rbp), %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -6212(%rbp)       ## 4-byte Spill
	jmp	LBB73_1118
LBB73_1117:
	movl	$4294967295, %eax       ## imm = 0xFFFFFFFF
	movl	%eax, -6212(%rbp)       ## 4-byte Spill
	jmp	LBB73_1118
LBB73_1118:
	movl	-6212(%rbp), %eax       ## 4-byte Reload
	movl	%eax, -4960(%rbp)
	movl	$31, %edi
	movl	$1, %esi
	leaq	-4960(%rbp), %rdx
	movb	$0, %al
	callq	_sqlite3_test_control
	jmp	LBB73_1584
LBB73_1119:
	cmpl	$115, -3960(%rbp)
	jne	LBB73_1176
## %bb.1120:
	cmpl	$4, -3956(%rbp)
	jl	LBB73_1176
## %bb.1121:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.634(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1176
## %bb.1122:
	xorl	%esi, %esi
	movl	$0, -4964(%rbp)
	movl	$0, -4968(%rbp)
	movl	$0, -4984(%rbp)
	movl	$0, -4988(%rbp)
	movq	$0, -5016(%rbp)
	movq	-3944(%rbp), %rdi
	callq	_open_db
	movl	$1, -4976(%rbp)
LBB73_1123:                             ## =>This Inner Loop Header: Depth=1
	movl	-4976(%rbp), %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_1135
## %bb.1124:                            ##   in Loop: Header=BB73_1123 Depth=1
	movslq	-4976(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movq	%rax, -5024(%rbp)
	movq	-5024(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_1127
## %bb.1125:                            ##   in Loop: Header=BB73_1123 Depth=1
	movq	-5024(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_1127
## %bb.1126:                            ##   in Loop: Header=BB73_1123 Depth=1
	movq	-5024(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -5024(%rbp)
LBB73_1127:                             ##   in Loop: Header=BB73_1123 Depth=1
	movq	-5024(%rbp), %rdi
	leaq	L_.str.44(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1129
## %bb.1128:                            ##   in Loop: Header=BB73_1123 Depth=1
	movl	$1, -4964(%rbp)
	jmp	LBB73_1133
LBB73_1129:                             ##   in Loop: Header=BB73_1123 Depth=1
	movq	-5024(%rbp), %rdi
	leaq	L_.str.449(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1131
## %bb.1130:                            ##   in Loop: Header=BB73_1123 Depth=1
	movl	-4968(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4968(%rbp)
	jmp	LBB73_1132
LBB73_1131:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movslq	-4976(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdx
	movq	-432(%rbp), %rcx
	leaq	L_.str.635(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	___stderrp@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.636(%rip), %rsi
	movl	%eax, -6216(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_1132:                             ##   in Loop: Header=BB73_1123 Depth=1
	jmp	LBB73_1133
LBB73_1133:                             ##   in Loop: Header=BB73_1123 Depth=1
	jmp	LBB73_1134
LBB73_1134:                             ##   in Loop: Header=BB73_1123 Depth=1
	movl	-4976(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4976(%rbp)
	jmp	LBB73_1123
LBB73_1135:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L___func__.main(%rip), %rsi
	leaq	L_.str.634(%rip), %rdx
	movq	%rcx, -6224(%rbp)       ## 8-byte Spill
	movq	-6224(%rbp), %r8        ## 8-byte Reload
	movq	-6224(%rbp), %r9        ## 8-byte Reload
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movq	$0, 16(%rsp)
	callq	_sqlite3_table_column_metadata
	cmpl	$0, %eax
	je	LBB73_1137
## %bb.1136:
	movl	$0, -4972(%rbp)
	jmp	LBB73_1138
LBB73_1137:
	movl	$1, -4972(%rbp)
LBB73_1138:
	cmpl	$0, -4964(%rbp)
	je	LBB73_1140
## %bb.1139:
	movq	-3944(%rbp), %rdi
	callq	_createSelftestTable
	movl	$1, -4972(%rbp)
LBB73_1140:
	leaq	-5008(%rbp), %rdi
	callq	_initText
	xorl	%edx, %edx
	leaq	-5008(%rbp), %rdi
	leaq	L_.str.637(%rip), %rsi
	callq	_appendText
	movl	-4972(%rbp), %eax
	movl	%eax, -4980(%rbp)
LBB73_1141:                             ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB73_1148 Depth 2
	cmpl	$0, -4980(%rbp)
	jl	LBB73_1175
## %bb.1142:                            ##   in Loop: Header=BB73_1141 Depth=1
	cmpl	$1, -4980(%rbp)
	jne	LBB73_1144
## %bb.1143:                            ##   in Loop: Header=BB73_1141 Depth=1
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.638(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-5016(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -3964(%rbp)
	jmp	LBB73_1145
LBB73_1144:                             ##   in Loop: Header=BB73_1141 Depth=1
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.639(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-5016(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -3964(%rbp)
LBB73_1145:                             ##   in Loop: Header=BB73_1141 Depth=1
	cmpl	$0, -3964(%rbp)
	je	LBB73_1147
## %bb.1146:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.640(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	movq	-5016(%rbp), %rdi
	movl	%eax, -6228(%rbp)       ## 4-byte Spill
	callq	_sqlite3_finalize
	jmp	LBB73_1628
LBB73_1147:                             ##   in Loop: Header=BB73_1141 Depth=1
	movl	$1, -4976(%rbp)
LBB73_1148:                             ##   Parent Loop BB73_1141 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-5016(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB73_1173
## %bb.1149:                            ##   in Loop: Header=BB73_1148 Depth=2
	xorl	%esi, %esi
	movq	-5016(%rbp), %rdi
	callq	_sqlite3_column_int
	movl	%eax, -5028(%rbp)
	movq	-5016(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -5040(%rbp)
	movq	-5016(%rbp), %rdi
	movl	$2, %esi
	callq	_sqlite3_column_text
	movq	%rax, -5048(%rbp)
	movq	-5016(%rbp), %rdi
	movl	$3, %esi
	callq	_sqlite3_column_text
	movq	%rax, -5056(%rbp)
	cmpq	$0, -5040(%rbp)
	jne	LBB73_1151
## %bb.1150:                            ##   in Loop: Header=BB73_1148 Depth=2
	jmp	LBB73_1172
LBB73_1151:                             ##   in Loop: Header=BB73_1148 Depth=2
	cmpq	$0, -5048(%rbp)
	jne	LBB73_1153
## %bb.1152:                            ##   in Loop: Header=BB73_1148 Depth=2
	jmp	LBB73_1172
LBB73_1153:                             ##   in Loop: Header=BB73_1148 Depth=2
	cmpq	$0, -5056(%rbp)
	jne	LBB73_1155
## %bb.1154:                            ##   in Loop: Header=BB73_1148 Depth=2
	jmp	LBB73_1172
LBB73_1155:                             ##   in Loop: Header=BB73_1148 Depth=2
	movl	$0, -4980(%rbp)
	cmpl	$0, -4968(%rbp)
	jle	LBB73_1157
## %bb.1156:                            ##   in Loop: Header=BB73_1148 Depth=2
	movl	-5028(%rbp), %esi
	movq	-5040(%rbp), %rdx
	movq	-5048(%rbp), %rcx
	leaq	L_.str.641(%rip), %rdi
	movb	$0, %al
	callq	_printf
LBB73_1157:                             ##   in Loop: Header=BB73_1148 Depth=2
	movq	-5040(%rbp), %rdi
	leaq	L_.str.642(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1159
## %bb.1158:                            ##   in Loop: Header=BB73_1148 Depth=2
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-5048(%rbp), %rdx
	leaq	L_.str.219(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_1171
LBB73_1159:                             ##   in Loop: Header=BB73_1148 Depth=2
	movq	-5040(%rbp), %rdi
	leaq	L_.str.643(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1169
## %bb.1160:                            ##   in Loop: Header=BB73_1148 Depth=2
	movq	$0, -5064(%rbp)
	movl	$0, -5000(%rbp)
	movq	-5008(%rbp), %rax
	movb	$0, (%rax)
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-5048(%rbp), %rsi
	leaq	-5008(%rbp), %rax
	leaq	_captureOutputCallback(%rip), %rdx
	movq	%rax, %rcx
	leaq	-5064(%rbp), %r8
	callq	_sqlite3_exec
	movl	%eax, -3964(%rbp)
	movl	-4984(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4984(%rbp)
	cmpl	$0, -4968(%rbp)
	je	LBB73_1162
## %bb.1161:                            ##   in Loop: Header=BB73_1148 Depth=2
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-5008(%rbp), %rdx
	leaq	L_.str.644(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_1162:                             ##   in Loop: Header=BB73_1148 Depth=2
	cmpl	$0, -3964(%rbp)
	jne	LBB73_1164
## %bb.1163:                            ##   in Loop: Header=BB73_1148 Depth=2
	cmpq	$0, -5064(%rbp)
	je	LBB73_1165
LBB73_1164:                             ##   in Loop: Header=BB73_1148 Depth=2
	movl	-4988(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4988(%rbp)
	movl	$1, -3964(%rbp)
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-5028(%rbp), %edx
	movl	-3964(%rbp), %ecx
	movq	-5064(%rbp), %r8
	leaq	L_.str.645(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-5064(%rbp), %rdi
	movl	%eax, -6232(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
	jmp	LBB73_1168
LBB73_1165:                             ##   in Loop: Header=BB73_1148 Depth=2
	movq	-5056(%rbp), %rdi
	movq	-5008(%rbp), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB73_1167
## %bb.1166:                            ##   in Loop: Header=BB73_1148 Depth=2
	movl	-4988(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4988(%rbp)
	movl	$1, -3964(%rbp)
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-5028(%rbp), %edx
	movq	-5056(%rbp), %rcx
	leaq	L_.str.646(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-5028(%rbp), %edx
	movq	-5008(%rbp), %rcx
	leaq	L_.str.647(%rip), %rsi
	movl	%eax, -6236(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
LBB73_1167:                             ##   in Loop: Header=BB73_1148 Depth=2
	jmp	LBB73_1168
LBB73_1168:                             ##   in Loop: Header=BB73_1148 Depth=2
	jmp	LBB73_1170
LBB73_1169:                             ##   in Loop: Header=BB73_1141 Depth=1
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-5040(%rbp), %rdx
	movl	-5028(%rbp), %ecx
	leaq	L_.str.648(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1173
LBB73_1170:                             ##   in Loop: Header=BB73_1148 Depth=2
	jmp	LBB73_1171
LBB73_1171:                             ##   in Loop: Header=BB73_1148 Depth=2
	jmp	LBB73_1172
LBB73_1172:                             ##   in Loop: Header=BB73_1148 Depth=2
	movl	-4976(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4976(%rbp)
	jmp	LBB73_1148
LBB73_1173:                             ##   in Loop: Header=BB73_1141 Depth=1
	movq	-5016(%rbp), %rdi
	callq	_sqlite3_finalize
## %bb.1174:                            ##   in Loop: Header=BB73_1141 Depth=1
	movl	-4980(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4980(%rbp)
	jmp	LBB73_1141
LBB73_1175:
	leaq	-5008(%rbp), %rdi
	callq	_freeText
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-4988(%rbp), %edx
	movl	-4984(%rbp), %ecx
	leaq	L_.str.649(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_1583
LBB73_1176:
	cmpl	$115, -3960(%rbp)
	jne	LBB73_1186
## %bb.1177:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.650(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1186
## %bb.1178:
	cmpl	$2, -3952(%rbp)
	jl	LBB73_1180
## %bb.1179:
	cmpl	$3, -3952(%rbp)
	jle	LBB73_1181
LBB73_1180:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.651(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_1181:
	cmpl	$2, -3952(%rbp)
	jl	LBB73_1183
## %bb.1182:
	movq	-3944(%rbp), %rax
	addq	$190, %rax
	movq	-424(%rbp), %r8
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.125(%rip), %rdx
	movl	$19, %ecx
	movb	$0, %al
	callq	_sqlite3_snprintf
LBB73_1183:
	cmpl	$3, -3952(%rbp)
	jl	LBB73_1185
## %bb.1184:
	movq	-3944(%rbp), %rax
	addq	$210, %rax
	movq	-416(%rbp), %r8
	movl	$20, %edi
	movq	%rax, %rsi
	leaq	L_.str.125(%rip), %rdx
	movl	$19, %ecx
	movb	$0, %al
	callq	_sqlite3_snprintf
LBB73_1185:
	jmp	LBB73_1582
LBB73_1186:
	cmpl	$115, -3960(%rbp)
	jne	LBB73_1247
## %bb.1187:
	cmpl	$4, -3956(%rbp)
	jl	LBB73_1247
## %bb.1188:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.652(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1247
## %bb.1189:
	xorl	%esi, %esi
	movq	$0, -5072(%rbp)
	movl	$0, -5080(%rbp)
	movl	$0, -5084(%rbp)
	movl	$224, -5088(%rbp)
	movl	$0, -5092(%rbp)
	movq	-3944(%rbp), %rdi
	callq	_open_db
	movl	$1, -5076(%rbp)
LBB73_1190:                             ## =>This Inner Loop Header: Depth=1
	movl	-5076(%rbp), %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_1215
## %bb.1191:                            ##   in Loop: Header=BB73_1190 Depth=1
	movslq	-5076(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movq	%rax, -5160(%rbp)
	movq	-5160(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_1207
## %bb.1192:                            ##   in Loop: Header=BB73_1190 Depth=1
	movq	-5160(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -5160(%rbp)
	movq	-5160(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_1194
## %bb.1193:                            ##   in Loop: Header=BB73_1190 Depth=1
	movq	-5160(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -5160(%rbp)
LBB73_1194:                             ##   in Loop: Header=BB73_1190 Depth=1
	movq	-5160(%rbp), %rdi
	leaq	L_.str.602(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1196
## %bb.1195:                            ##   in Loop: Header=BB73_1190 Depth=1
	movl	$1, -5080(%rbp)
	jmp	LBB73_1206
LBB73_1196:                             ##   in Loop: Header=BB73_1190 Depth=1
	movq	-5160(%rbp), %rdi
	leaq	L_.str.653(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB73_1200
## %bb.1197:                            ##   in Loop: Header=BB73_1190 Depth=1
	movq	-5160(%rbp), %rdi
	leaq	L_.str.654(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB73_1200
## %bb.1198:                            ##   in Loop: Header=BB73_1190 Depth=1
	movq	-5160(%rbp), %rdi
	leaq	L_.str.655(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB73_1200
## %bb.1199:                            ##   in Loop: Header=BB73_1190 Depth=1
	movq	-5160(%rbp), %rdi
	leaq	L_.str.656(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1201
LBB73_1200:                             ##   in Loop: Header=BB73_1190 Depth=1
	movq	-5160(%rbp), %rax
	addq	$5, %rax
	movq	%rax, %rdi
	callq	_atoi
	movl	%eax, -5088(%rbp)
	jmp	LBB73_1205
LBB73_1201:                             ##   in Loop: Header=BB73_1190 Depth=1
	movq	-5160(%rbp), %rdi
	leaq	L_.str.603(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1203
## %bb.1202:                            ##   in Loop: Header=BB73_1190 Depth=1
	movl	$1, -5092(%rbp)
	jmp	LBB73_1204
LBB73_1203:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movslq	-5076(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdx
	movq	-432(%rbp), %rcx
	leaq	L_.str.635(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-432(%rbp), %rsi
	movl	%eax, -6240(%rbp)       ## 4-byte Spill
	callq	_showHelp
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_1204:                             ##   in Loop: Header=BB73_1190 Depth=1
	jmp	LBB73_1205
LBB73_1205:                             ##   in Loop: Header=BB73_1190 Depth=1
	jmp	LBB73_1206
LBB73_1206:                             ##   in Loop: Header=BB73_1190 Depth=1
	jmp	LBB73_1213
LBB73_1207:                             ##   in Loop: Header=BB73_1190 Depth=1
	cmpq	$0, -5072(%rbp)
	je	LBB73_1209
## %bb.1208:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.657(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_1209:                             ##   in Loop: Header=BB73_1190 Depth=1
	movq	-5160(%rbp), %rax
	movq	%rax, -5072(%rbp)
	movl	$1, -5084(%rbp)
	movq	-5072(%rbp), %rsi
	leaq	L_.str.658(%rip), %rdi
	movl	$92, %edx
	callq	_sqlite3_strlike
	cmpl	$0, %eax
	jne	LBB73_1211
## %bb.1210:                            ##   in Loop: Header=BB73_1190 Depth=1
	movl	$1, -5080(%rbp)
LBB73_1211:                             ##   in Loop: Header=BB73_1190 Depth=1
	jmp	LBB73_1212
LBB73_1212:                             ##   in Loop: Header=BB73_1190 Depth=1
	jmp	LBB73_1213
LBB73_1213:                             ##   in Loop: Header=BB73_1190 Depth=1
	jmp	LBB73_1214
LBB73_1214:                             ##   in Loop: Header=BB73_1190 Depth=1
	movl	-5076(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -5076(%rbp)
	jmp	LBB73_1190
LBB73_1215:
	cmpl	$0, -5080(%rbp)
	je	LBB73_1217
## %bb.1216:
	leaq	L_.str.659(%rip), %rax
	movq	%rax, -5112(%rbp)
	jmp	LBB73_1218
LBB73_1217:
	leaq	L_.str.660(%rip), %rax
	movq	%rax, -5112(%rbp)
LBB73_1218:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	-5112(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-5104(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	leaq	-5152(%rbp), %rdi
	movl	%eax, -6244(%rbp)       ## 4-byte Spill
	callq	_initText
	leaq	-5136(%rbp), %rdi
	callq	_initText
	xorl	%edx, %edx
	leaq	-5136(%rbp), %rdi
	leaq	L_.str.661(%rip), %rsi
	callq	_appendText
	leaq	L_.str.662(%rip), %rcx
	movq	%rcx, -5120(%rbp)
LBB73_1219:                             ## =>This Inner Loop Header: Depth=1
	movq	-5104(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	jne	LBB73_1240
## %bb.1220:                            ##   in Loop: Header=BB73_1219 Depth=1
	xorl	%esi, %esi
	movq	-5104(%rbp), %rdi
	callq	_sqlite3_column_text
	movq	%rax, -5168(%rbp)
	cmpq	$0, -5168(%rbp)
	jne	LBB73_1222
## %bb.1221:                            ##   in Loop: Header=BB73_1219 Depth=1
	jmp	LBB73_1219
LBB73_1222:                             ##   in Loop: Header=BB73_1219 Depth=1
	cmpq	$0, -5072(%rbp)
	je	LBB73_1225
## %bb.1223:                            ##   in Loop: Header=BB73_1219 Depth=1
	xorl	%edx, %edx
	movq	-5072(%rbp), %rdi
	movq	-5168(%rbp), %rsi
	callq	_sqlite3_strlike
	cmpl	$0, %eax
	je	LBB73_1225
## %bb.1224:                            ##   in Loop: Header=BB73_1219 Depth=1
	jmp	LBB73_1219
LBB73_1225:                             ##   in Loop: Header=BB73_1219 Depth=1
	movq	-5168(%rbp), %rdi
	leaq	L_.str.663(%rip), %rsi
	movl	$7, %edx
	callq	_strncmp
	cmpl	$0, %eax
	je	LBB73_1227
## %bb.1226:                            ##   in Loop: Header=BB73_1219 Depth=1
	xorl	%edx, %edx
	leaq	-5152(%rbp), %rdi
	leaq	L_.str.664(%rip), %rsi
	callq	_appendText
	movq	-5168(%rbp), %rsi
	leaq	-5152(%rbp), %rdi
	movl	$34, %edx
	callq	_appendText
	xorl	%edx, %edx
	leaq	-5152(%rbp), %rdi
	leaq	L_.str.665(%rip), %rsi
	callq	_appendText
	jmp	LBB73_1239
LBB73_1227:                             ##   in Loop: Header=BB73_1219 Depth=1
	movq	-5168(%rbp), %rdi
	leaq	L_.str.607(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1229
## %bb.1228:                            ##   in Loop: Header=BB73_1219 Depth=1
	xorl	%edx, %edx
	leaq	-5152(%rbp), %rdi
	leaq	L_.str.666(%rip), %rsi
	callq	_appendText
	jmp	LBB73_1238
LBB73_1229:                             ##   in Loop: Header=BB73_1219 Depth=1
	movq	-5168(%rbp), %rdi
	leaq	L_.str.667(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1231
## %bb.1230:                            ##   in Loop: Header=BB73_1219 Depth=1
	xorl	%edx, %edx
	leaq	-5152(%rbp), %rdi
	leaq	L_.str.668(%rip), %rsi
	callq	_appendText
	jmp	LBB73_1237
LBB73_1231:                             ##   in Loop: Header=BB73_1219 Depth=1
	movq	-5168(%rbp), %rdi
	leaq	L_.str.439(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1233
## %bb.1232:                            ##   in Loop: Header=BB73_1219 Depth=1
	xorl	%edx, %edx
	leaq	-5152(%rbp), %rdi
	leaq	L_.str.669(%rip), %rsi
	callq	_appendText
	jmp	LBB73_1236
LBB73_1233:                             ##   in Loop: Header=BB73_1219 Depth=1
	movq	-5168(%rbp), %rdi
	leaq	L_.str.441(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1235
## %bb.1234:                            ##   in Loop: Header=BB73_1219 Depth=1
	xorl	%edx, %edx
	leaq	-5152(%rbp), %rdi
	leaq	L_.str.664(%rip), %rsi
	callq	_appendText
	xorl	%edx, %edx
	movq	-5168(%rbp), %rsi
	leaq	-5152(%rbp), %rdi
	callq	_appendText
	xorl	%edx, %edx
	leaq	-5152(%rbp), %rdi
	leaq	L_.str.670(%rip), %rsi
	callq	_appendText
LBB73_1235:                             ##   in Loop: Header=BB73_1219 Depth=1
	jmp	LBB73_1236
LBB73_1236:                             ##   in Loop: Header=BB73_1219 Depth=1
	jmp	LBB73_1237
LBB73_1237:                             ##   in Loop: Header=BB73_1219 Depth=1
	jmp	LBB73_1238
LBB73_1238:                             ##   in Loop: Header=BB73_1219 Depth=1
	jmp	LBB73_1239
LBB73_1239:                             ##   in Loop: Header=BB73_1219 Depth=1
	xorl	%edx, %edx
	movq	-5120(%rbp), %rsi
	leaq	-5136(%rbp), %rdi
	callq	_appendText
	movq	-5152(%rbp), %rsi
	leaq	-5136(%rbp), %rdi
	movl	$39, %edx
	callq	_appendText
	xorl	%edx, %edx
	movl	$0, -5144(%rbp)
	leaq	-5136(%rbp), %rdi
	leaq	L_.str.65(%rip), %rsi
	callq	_appendText
	movq	-5168(%rbp), %rsi
	leaq	-5136(%rbp), %rdi
	movl	$39, %edx
	callq	_appendText
	leaq	L_.str.671(%rip), %rax
	movq	%rax, -5120(%rbp)
	jmp	LBB73_1219
LBB73_1240:
	movq	-5104(%rbp), %rdi
	callq	_sqlite3_finalize
	cmpl	$0, -5084(%rbp)
	je	LBB73_1242
## %bb.1241:
	movq	-5136(%rbp), %rsi
	movl	-5088(%rbp), %edx
	leaq	L_.str.672(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -5112(%rbp)
	jmp	LBB73_1243
LBB73_1242:
	movq	-5136(%rbp), %rsi
	movl	-5088(%rbp), %edx
	leaq	L_.str.673(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -5112(%rbp)
LBB73_1243:
	movq	-5112(%rbp), %rdi
	callq	_shell_check_oom
	leaq	-5152(%rbp), %rdi
	callq	_freeText
	leaq	-5136(%rbp), %rdi
	callq	_freeText
	cmpl	$0, -5092(%rbp)
	je	LBB73_1245
## %bb.1244:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-5112(%rbp), %rdx
	leaq	L_.str.219(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_1246
LBB73_1245:
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-3944(%rbp), %rdi
	movq	-5112(%rbp), %rsi
	callq	_shell_exec
LBB73_1246:
	movq	-5112(%rbp), %rdi
	callq	_sqlite3_free
	jmp	LBB73_1581
LBB73_1247:
	cmpl	$115, -3960(%rbp)
	jne	LBB73_1264
## %bb.1248:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.674(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	je	LBB73_1250
## %bb.1249:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.675(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1264
LBB73_1250:
	movq	-3944(%rbp), %rdi
	movq	-432(%rbp), %rdx
	leaq	L_.str.314(%rip), %rsi
	movb	$0, %al
	callq	_failIfSafeMode
	cmpl	$2, -3952(%rbp)
	jge	LBB73_1252
## %bb.1251:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.676(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_1252:
	movq	-424(%rbp), %rdi
	movl	$32, %esi
	callq	_strchr
	cmpq	$0, %rax
	leaq	L_.str.79(%rip), %rax
	leaq	L_.str.677(%rip), %rcx
	cmoveq	%rax, %rcx
	movq	-424(%rbp), %rsi
	movq	%rcx, %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -5176(%rbp)
	movl	$2, -5180(%rbp)
LBB73_1253:                             ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-5180(%rbp), %ecx
	cmpl	-3952(%rbp), %ecx
	movb	%al, -6245(%rbp)        ## 1-byte Spill
	jge	LBB73_1255
## %bb.1254:                            ##   in Loop: Header=BB73_1253 Depth=1
	cmpq	$0, -5176(%rbp)
	setne	%al
	movb	%al, -6245(%rbp)        ## 1-byte Spill
LBB73_1255:                             ##   in Loop: Header=BB73_1253 Depth=1
	movb	-6245(%rbp), %al        ## 1-byte Reload
	testb	$1, %al
	jne	LBB73_1256
	jmp	LBB73_1258
LBB73_1256:                             ##   in Loop: Header=BB73_1253 Depth=1
	movslq	-5180(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdi
	movl	$32, %esi
	callq	_strchr
	cmpq	$0, %rax
	leaq	L_.str.563(%rip), %rax
	leaq	L_.str.678(%rip), %rcx
	cmoveq	%rax, %rcx
	movq	-5176(%rbp), %rsi
	movslq	-5180(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdx
	movq	%rcx, %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -5176(%rbp)
## %bb.1257:                            ##   in Loop: Header=BB73_1253 Depth=1
	movl	-5180(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -5180(%rbp)
	jmp	LBB73_1253
LBB73_1258:
	cmpq	$0, -5176(%rbp)
	je	LBB73_1260
## %bb.1259:
	movq	-5176(%rbp), %rdi
	callq	_system
	movl	%eax, -6252(%rbp)       ## 4-byte Spill
	jmp	LBB73_1261
LBB73_1260:
	movl	$1, %eax
	movl	%eax, -6252(%rbp)       ## 4-byte Spill
	jmp	LBB73_1261
LBB73_1261:
	movl	-6252(%rbp), %eax       ## 4-byte Reload
	movl	%eax, -5184(%rbp)
	movq	-5176(%rbp), %rdi
	callq	_sqlite3_free
	cmpl	$0, -5184(%rbp)
	je	LBB73_1263
## %bb.1262:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movl	-5184(%rbp), %edx
	leaq	L_.str.679(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_1263:
	jmp	LBB73_1580
LBB73_1264:
	cmpl	$115, -3960(%rbp)
	jne	LBB73_1292
## %bb.1265:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.680(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1292
## %bb.1266:
	cmpl	$1, -3952(%rbp)
	je	LBB73_1268
## %bb.1267:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.681(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_1268:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-3944(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$64, %ecx
	cmpl	$0, %ecx
	setne	%dl
	andb	$1, %dl
	movzbl	%dl, %ecx
	movslq	%ecx, %rax
	leaq	_do_meta_command.azBool(%rip), %rsi
	movq	(%rsi,%rax,8), %rcx
	leaq	L_.str.682(%rip), %rsi
	leaq	L_.str.396(%rip), %rdx
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-3944(%rbp), %rcx
	movzbl	9(%rcx), %r8d
	andl	$3, %r8d
	movslq	%r8d, %rcx
	leaq	_do_meta_command.azBool(%rip), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	L_.str.682(%rip), %rsi
	leaq	L_.str.398(%rip), %rdx
	movl	%eax, -6256(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-3944(%rbp), %rcx
	cmpl	$9, 84(%rcx)
	movq	%rdi, -6264(%rbp)       ## 8-byte Spill
	jne	LBB73_1270
## %bb.1269:
	leaq	L_.str.372(%rip), %rax
	movq	%rax, -6272(%rbp)       ## 8-byte Spill
	jmp	LBB73_1271
LBB73_1270:
	movq	-3944(%rbp), %rax
	movzbl	8(%rax), %ecx
	cmpl	$0, %ecx
	leaq	L_.str.405(%rip), %rax
	leaq	L_.str.373(%rip), %rdx
	cmovneq	%rax, %rdx
	movq	%rdx, -6272(%rbp)       ## 8-byte Spill
LBB73_1271:
	movq	-6272(%rbp), %rax       ## 8-byte Reload
	movq	-6264(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.682(%rip), %rsi
	leaq	L_.str.404(%rip), %rdx
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-3944(%rbp), %rcx
	cmpl	$0, 104(%rcx)
	setne	%r8b
	andb	$1, %r8b
	movzbl	%r8b, %r9d
	movslq	%r9d, %rcx
	leaq	_do_meta_command.azBool(%rip), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	L_.str.682(%rip), %rsi
	leaq	L_.str.443(%rip), %rdx
	movl	%eax, -6276(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	cmpl	$1, 84(%rcx)
	je	LBB73_1274
## %bb.1272:
	movq	-3944(%rbp), %rax
	cmpl	$14, 84(%rax)
	jl	LBB73_1275
## %bb.1273:
	movq	-3944(%rbp), %rax
	cmpl	$16, 84(%rax)
	jg	LBB73_1275
LBB73_1274:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-3944(%rbp), %rax
	movslq	84(%rax), %rax
	leaq	_modeDescr(%rip), %rcx
	movq	(%rcx,%rax,8), %rcx
	movq	-3944(%rbp), %rax
	movl	20(%rax), %r8d
	movq	-3944(%rbp), %rax
	movzbl	25(%rax), %edx
	cmpl	$0, %edx
	leaq	L_.str.372(%rip), %rax
	leaq	L_.str.373(%rip), %rsi
	cmovneq	%rax, %rsi
	movq	-3944(%rbp), %rax
	movzbl	24(%rax), %edx
	cmpl	$0, %edx
	leaq	L_.str.27(%rip), %rax
	leaq	L_.str.526(%rip), %r9
	cmovneq	%rax, %r9
	leaq	L_.str.683(%rip), %rax
	movq	%rsi, -6288(%rbp)       ## 8-byte Spill
	movq	%rax, %rsi
	leaq	L_.str.515(%rip), %rdx
	movq	-6288(%rbp), %rax       ## 8-byte Reload
	movq	%r9, -6296(%rbp)        ## 8-byte Spill
	movq	%rax, %r9
	movq	-6296(%rbp), %r10       ## 8-byte Reload
	movq	%r10, (%rsp)
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_1276
LBB73_1275:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-3944(%rbp), %rax
	movslq	84(%rax), %rax
	leaq	_modeDescr(%rip), %rcx
	movq	(%rcx,%rax,8), %rcx
	leaq	L_.str.682(%rip), %rsi
	leaq	L_.str.515(%rip), %rdx
	movb	$0, %al
	callq	_fprintf
LBB73_1276:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.684(%rip), %rsi
	leaq	L_.str.545(%rip), %rdx
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-3944(%rbp), %rcx
	addq	$292, %rcx              ## imm = 0x124
	movq	%rcx, %rsi
	movl	%eax, -6300(%rbp)       ## 4-byte Spill
	callq	_output_c_string
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.66(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-3944(%rbp), %rcx
	addq	$312, %rcx              ## imm = 0x138
	movq	%rdi, -6312(%rbp)       ## 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -6316(%rbp)       ## 4-byte Spill
	callq	_strlen30
	cmpl	$0, %eax
	je	LBB73_1278
## %bb.1277:
	movq	-3944(%rbp), %rax
	addq	$312, %rax              ## imm = 0x138
	movq	%rax, -6328(%rbp)       ## 8-byte Spill
	jmp	LBB73_1279
LBB73_1278:
	leaq	L_.str.565(%rip), %rax
	movq	%rax, -6328(%rbp)       ## 8-byte Spill
	jmp	LBB73_1279
LBB73_1279:
	movq	-6328(%rbp), %rax       ## 8-byte Reload
	leaq	L_.str.682(%rip), %rsi
	leaq	L_.str.557(%rip), %rdx
	xorl	%ecx, %ecx
                                        ## kill: def $cl killed $cl killed $ecx
	movq	-6312(%rbp), %rdi       ## 8-byte Reload
	movb	%cl, -6329(%rbp)        ## 1-byte Spill
	movq	%rax, %rcx
	movb	-6329(%rbp), %al        ## 1-byte Reload
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.684(%rip), %rcx
	leaq	L_.str.685(%rip), %rdx
	movq	%rcx, %rsi
	movb	-6329(%rbp), %r8b       ## 1-byte Reload
	movl	%eax, -6336(%rbp)       ## 4-byte Spill
	movb	%r8b, %al
	movq	%rcx, -6344(%rbp)       ## 8-byte Spill
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	addq	$190, %rcx
	movq	%rcx, %rsi
	movl	%eax, -6348(%rbp)       ## 4-byte Spill
	callq	_output_c_string
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.66(%rip), %rcx
	movq	%rcx, %rsi
	movb	-6329(%rbp), %al        ## 1-byte Reload
	movq	%rcx, -6360(%rbp)       ## 8-byte Spill
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.686(%rip), %rdx
	movq	-6344(%rbp), %rsi       ## 8-byte Reload
	movb	-6329(%rbp), %r8b       ## 1-byte Reload
	movl	%eax, -6364(%rbp)       ## 4-byte Spill
	movb	%r8b, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	addq	$210, %rcx
	movq	%rcx, %rsi
	movl	%eax, -6368(%rbp)       ## 4-byte Spill
	callq	_output_c_string
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-6360(%rbp), %rsi       ## 8-byte Reload
	movb	-6329(%rbp), %al        ## 1-byte Reload
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movl	28(%rcx), %r9d
	testl	%r9d, %r9d
	movl	%r9d, -6372(%rbp)       ## 4-byte Spill
	je	LBB73_1280
	jmp	LBB73_1637
LBB73_1637:
	movl	-6372(%rbp), %eax       ## 4-byte Reload
	subl	$2, %eax
	je	LBB73_1282
	jmp	LBB73_1638
LBB73_1638:
	movl	-6372(%rbp), %eax       ## 4-byte Reload
	subl	$3, %eax
	je	LBB73_1283
	jmp	LBB73_1281
LBB73_1280:
	leaq	L_.str.373(%rip), %rax
	movq	%rax, -5192(%rbp)
	jmp	LBB73_1284
LBB73_1281:
	leaq	L_.str.372(%rip), %rax
	movq	%rax, -5192(%rbp)
	jmp	LBB73_1284
LBB73_1282:
	leaq	L_.str.687(%rip), %rax
	movq	%rax, -5192(%rbp)
	jmp	LBB73_1284
LBB73_1283:
	leaq	L_.str.688(%rip), %rax
	movq	%rax, -5192(%rbp)
LBB73_1284:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-5192(%rbp), %rcx
	leaq	L_.str.682(%rip), %rsi
	leaq	L_.str.689(%rip), %rdx
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.684(%rip), %rsi
	leaq	L_.str.690(%rip), %rdx
	movl	%eax, -6376(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movl	$0, -5196(%rbp)
LBB73_1285:                             ## =>This Inner Loop Header: Depth=1
	movl	-5196(%rbp), %eax
	movq	-3944(%rbp), %rcx
	cmpl	288(%rcx), %eax
	jge	LBB73_1288
## %bb.1286:                            ##   in Loop: Header=BB73_1285 Depth=1
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-3944(%rbp), %rax
	movq	272(%rax), %rax
	movslq	-5196(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	L_.str.691(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
## %bb.1287:                            ##   in Loop: Header=BB73_1285 Depth=1
	movl	-5196(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -5196(%rbp)
	jmp	LBB73_1285
LBB73_1288:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.66(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-3944(%rbp), %rcx
	movq	1472(%rcx), %rcx
	cmpq	$0, 8(%rcx)
	movq	%rdi, -6384(%rbp)       ## 8-byte Spill
	je	LBB73_1290
## %bb.1289:
	movq	-3944(%rbp), %rax
	movq	1472(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -6392(%rbp)       ## 8-byte Spill
	jmp	LBB73_1291
LBB73_1290:
	leaq	L_.str.27(%rip), %rax
	movq	%rax, -6392(%rbp)       ## 8-byte Spill
	jmp	LBB73_1291
LBB73_1291:
	movq	-6392(%rbp), %rax       ## 8-byte Reload
	movq	-6384(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.682(%rip), %rsi
	leaq	L_.str.692(%rip), %rdx
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_1579
LBB73_1292:
	cmpl	$115, -3960(%rbp)
	jne	LBB73_1307
## %bb.1293:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.689(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1307
## %bb.1294:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_1302
## %bb.1295:
	movq	-424(%rbp), %rdi
	leaq	L_.str.687(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1297
## %bb.1296:
	movq	-3944(%rbp), %rax
	movl	$2, 28(%rax)
	jmp	LBB73_1301
LBB73_1297:
	movq	-424(%rbp), %rdi
	leaq	L_.str.688(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1299
## %bb.1298:
	movq	-3944(%rbp), %rax
	movl	$3, 28(%rax)
	jmp	LBB73_1300
LBB73_1299:
	movq	-424(%rbp), %rdi
	callq	_booleanValue
                                        ## kill: def $al killed $al killed $eax
	movzbl	%al, %ecx
	movq	-3944(%rbp), %rdx
	movl	%ecx, 28(%rdx)
LBB73_1300:
	jmp	LBB73_1301
LBB73_1301:
	jmp	LBB73_1306
LBB73_1302:
	cmpl	$1, -3952(%rbp)
	jne	LBB73_1304
## %bb.1303:
	xorl	%edx, %edx
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-3944(%rbp), %rsi
	callq	_display_stats
	jmp	LBB73_1305
LBB73_1304:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.693(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_1305:
	jmp	LBB73_1306
LBB73_1306:
	jmp	LBB73_1578
LBB73_1307:
	cmpl	$116, -3960(%rbp)
	jne	LBB73_1310
## %bb.1308:
	cmpl	$1, -3956(%rbp)
	jle	LBB73_1310
## %bb.1309:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.694(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	je	LBB73_1313
LBB73_1310:
	cmpl	$105, -3960(%rbp)
	jne	LBB73_1374
## %bb.1311:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.695(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	je	LBB73_1313
## %bb.1312:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.696(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1374
LBB73_1313:
	leaq	-5248(%rbp), %rdi
	callq	_initText
	xorl	%esi, %esi
	movq	-3944(%rbp), %rdi
	callq	_open_db
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.126(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-5208(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -3964(%rbp)
	cmpl	$0, -3964(%rbp)
	je	LBB73_1315
## %bb.1314:
	movq	-5208(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	movl	%eax, -6396(%rbp)       ## 4-byte Spill
	callq	_shellDatabaseError
	movl	%eax, -3924(%rbp)
	jmp	LBB73_1633
LBB73_1315:
	cmpl	$2, -3952(%rbp)
	jle	LBB73_1318
## %bb.1316:
	cmpl	$105, -3960(%rbp)
	jne	LBB73_1318
## %bb.1317:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.697(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	movq	-5208(%rbp), %rdi
	movl	%eax, -6400(%rbp)       ## 4-byte Spill
	callq	_sqlite3_finalize
	jmp	LBB73_1628
LBB73_1318:
	movl	$0, -5228(%rbp)
LBB73_1319:                             ## =>This Inner Loop Header: Depth=1
	movq	-5208(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB73_1333
## %bb.1320:                            ##   in Loop: Header=BB73_1319 Depth=1
	movq	-5208(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -5256(%rbp)
	cmpq	$0, -5256(%rbp)
	jne	LBB73_1322
## %bb.1321:                            ##   in Loop: Header=BB73_1319 Depth=1
	jmp	LBB73_1332
LBB73_1322:                             ##   in Loop: Header=BB73_1319 Depth=1
	cmpq	$0, -5248(%rbp)
	je	LBB73_1325
## %bb.1323:                            ##   in Loop: Header=BB73_1319 Depth=1
	movq	-5248(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB73_1325
## %bb.1324:                            ##   in Loop: Header=BB73_1319 Depth=1
	xorl	%edx, %edx
	leaq	-5248(%rbp), %rdi
	leaq	L_.str.614(%rip), %rsi
	callq	_appendText
LBB73_1325:                             ##   in Loop: Header=BB73_1319 Depth=1
	movq	-5256(%rbp), %rdi
	leaq	L___func__.main(%rip), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	jne	LBB73_1327
## %bb.1326:                            ##   in Loop: Header=BB73_1319 Depth=1
	xorl	%edx, %edx
	leaq	-5248(%rbp), %rdi
	leaq	L_.str.698(%rip), %rsi
	callq	_appendText
	jmp	LBB73_1328
LBB73_1327:                             ##   in Loop: Header=BB73_1319 Depth=1
	xorl	%edx, %edx
	leaq	-5248(%rbp), %rdi
	leaq	L_.str.699(%rip), %rsi
	callq	_appendText
	movq	-5256(%rbp), %rsi
	leaq	-5248(%rbp), %rdi
	movl	$39, %edx
	callq	_appendText
	xorl	%edx, %edx
	leaq	-5248(%rbp), %rdi
	leaq	L_.str.700(%rip), %rsi
	callq	_appendText
LBB73_1328:                             ##   in Loop: Header=BB73_1319 Depth=1
	movq	-5256(%rbp), %rsi
	leaq	-5248(%rbp), %rdi
	movl	$34, %edx
	callq	_appendText
	xorl	%edx, %edx
	leaq	-5248(%rbp), %rdi
	leaq	L_.str.701(%rip), %rsi
	callq	_appendText
	cmpl	$116, -3960(%rbp)
	jne	LBB73_1330
## %bb.1329:                            ##   in Loop: Header=BB73_1319 Depth=1
	xorl	%edx, %edx
	leaq	-5248(%rbp), %rdi
	leaq	L_.str.702(%rip), %rsi
	callq	_appendText
	jmp	LBB73_1331
LBB73_1330:                             ##   in Loop: Header=BB73_1319 Depth=1
	xorl	%edx, %edx
	leaq	-5248(%rbp), %rdi
	leaq	L_.str.703(%rip), %rsi
	callq	_appendText
LBB73_1331:                             ##   in Loop: Header=BB73_1319 Depth=1
	jmp	LBB73_1332
LBB73_1332:                             ##   in Loop: Header=BB73_1319 Depth=1
	movl	-5228(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -5228(%rbp)
	jmp	LBB73_1319
LBB73_1333:
	movq	-5208(%rbp), %rdi
	callq	_sqlite3_finalize
	movl	%eax, -3964(%rbp)
	cmpl	$0, -3964(%rbp)
	jne	LBB73_1335
## %bb.1334:
	xorl	%edx, %edx
	leaq	-5248(%rbp), %rdi
	leaq	L_.str.704(%rip), %rsi
	callq	_appendText
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	-5248(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-5208(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -3964(%rbp)
LBB73_1335:
	leaq	-5248(%rbp), %rdi
	callq	_freeText
	cmpl	$0, -3964(%rbp)
	je	LBB73_1337
## %bb.1336:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	callq	_shellDatabaseError
	movl	%eax, -3924(%rbp)
	jmp	LBB73_1633
LBB73_1337:
	movl	$0, -5224(%rbp)
	movl	$0, -5220(%rbp)
	movq	$0, -5216(%rbp)
	cmpl	$1, -3952(%rbp)
	jle	LBB73_1339
## %bb.1338:
	movq	-5208(%rbp), %rdi
	movq	-424(%rbp), %rdx
	movl	$1, %esi
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	movq	$-1, %r8
	callq	_sqlite3_bind_text
	jmp	LBB73_1340
LBB73_1339:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-5208(%rbp), %rdi
	movl	$1, %esi
	leaq	L_.str.705(%rip), %rdx
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_bind_text
LBB73_1340:
	jmp	LBB73_1341
LBB73_1341:                             ## =>This Inner Loop Header: Depth=1
	movq	-5208(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB73_1345
## %bb.1342:                            ##   in Loop: Header=BB73_1341 Depth=1
	movl	-5220(%rbp), %eax
	cmpl	-5224(%rbp), %eax
	jl	LBB73_1344
## %bb.1343:                            ##   in Loop: Header=BB73_1341 Depth=1
	movl	-5224(%rbp), %eax
	shll	$1, %eax
	addl	$10, %eax
	movl	%eax, -5268(%rbp)
	movq	-5216(%rbp), %rcx
	movslq	-5268(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	callq	_sqlite3_realloc64
	movq	%rax, -5264(%rbp)
	movq	-5264(%rbp), %rax
	movq	%rax, %rdi
	callq	_shell_check_oom
	movl	-5268(%rbp), %r8d
	movl	%r8d, -5224(%rbp)
	movq	-5264(%rbp), %rax
	movq	%rax, -5216(%rbp)
LBB73_1344:                             ##   in Loop: Header=BB73_1341 Depth=1
	xorl	%esi, %esi
	movq	-5208(%rbp), %rdi
	callq	_sqlite3_column_text
	leaq	L_.str.79(%rip), %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-5216(%rbp), %rcx
	movslq	-5220(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-5216(%rbp), %rax
	movslq	-5220(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_shell_check_oom
	movl	-5220(%rbp), %r8d
	addl	$1, %r8d
	movl	%r8d, -5220(%rbp)
	jmp	LBB73_1341
LBB73_1345:
	movq	-5208(%rbp), %rdi
	callq	_sqlite3_finalize
	cmpl	$0, %eax
	je	LBB73_1347
## %bb.1346:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	callq	_shellDatabaseError
	movl	%eax, -3964(%rbp)
LBB73_1347:
	cmpl	$0, -3964(%rbp)
	jne	LBB73_1369
## %bb.1348:
	cmpl	$0, -5220(%rbp)
	jle	LBB73_1369
## %bb.1349:
	movl	$0, -5276(%rbp)
	movl	$0, -5280(%rbp)
LBB73_1350:                             ## =>This Inner Loop Header: Depth=1
	movl	-5280(%rbp), %eax
	cmpl	-5220(%rbp), %eax
	jge	LBB73_1355
## %bb.1351:                            ##   in Loop: Header=BB73_1350 Depth=1
	movq	-5216(%rbp), %rax
	movslq	-5280(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_strlen30
	movl	%eax, -5272(%rbp)
	movl	-5272(%rbp), %eax
	cmpl	-5276(%rbp), %eax
	jle	LBB73_1353
## %bb.1352:                            ##   in Loop: Header=BB73_1350 Depth=1
	movl	-5272(%rbp), %eax
	movl	%eax, -5276(%rbp)
LBB73_1353:                             ##   in Loop: Header=BB73_1350 Depth=1
	jmp	LBB73_1354
LBB73_1354:                             ##   in Loop: Header=BB73_1350 Depth=1
	movl	-5280(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -5280(%rbp)
	jmp	LBB73_1350
LBB73_1355:
	movl	-5276(%rbp), %eax
	addl	$2, %eax
	movl	$80, %ecx
	movl	%eax, -6404(%rbp)       ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-6404(%rbp), %ecx       ## 4-byte Reload
	idivl	%ecx
	movl	%eax, -5288(%rbp)
	cmpl	$1, -5288(%rbp)
	jge	LBB73_1357
## %bb.1356:
	movl	$1, -5288(%rbp)
LBB73_1357:
	movl	-5220(%rbp), %eax
	addl	-5288(%rbp), %eax
	subl	$1, %eax
	cltd
	idivl	-5288(%rbp)
	movl	%eax, -5292(%rbp)
	movl	$0, -5280(%rbp)
LBB73_1358:                             ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB73_1360 Depth 2
	movl	-5280(%rbp), %eax
	cmpl	-5292(%rbp), %eax
	jge	LBB73_1368
## %bb.1359:                            ##   in Loop: Header=BB73_1358 Depth=1
	movl	-5280(%rbp), %eax
	movl	%eax, -5284(%rbp)
LBB73_1360:                             ##   Parent Loop BB73_1358 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-5284(%rbp), %eax
	cmpl	-5220(%rbp), %eax
	jge	LBB73_1366
## %bb.1361:                            ##   in Loop: Header=BB73_1360 Depth=2
	movl	-5284(%rbp), %eax
	movl	-5292(%rbp), %ecx
	cmpl	%ecx, %eax
	leaq	L_.str.27(%rip), %rdx
	leaq	L_.str.706(%rip), %rsi
	cmovlq	%rdx, %rsi
	movq	%rsi, -5304(%rbp)
	movq	-3944(%rbp), %rdx
	movq	64(%rdx), %rdi
	movq	-5304(%rbp), %rdx
	movl	-5276(%rbp), %ecx
	movq	-5216(%rbp), %rsi
	movslq	-5284(%rbp), %r8
	cmpq	$0, (%rsi,%r8,8)
	movq	%rdi, -6416(%rbp)       ## 8-byte Spill
	movq	%rdx, -6424(%rbp)       ## 8-byte Spill
	movl	%ecx, -6428(%rbp)       ## 4-byte Spill
	je	LBB73_1363
## %bb.1362:                            ##   in Loop: Header=BB73_1360 Depth=2
	movq	-5216(%rbp), %rax
	movslq	-5284(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -6440(%rbp)       ## 8-byte Spill
	jmp	LBB73_1364
LBB73_1363:                             ##   in Loop: Header=BB73_1360 Depth=2
	leaq	L_.str.27(%rip), %rax
	movq	%rax, -6440(%rbp)       ## 8-byte Spill
	jmp	LBB73_1364
LBB73_1364:                             ##   in Loop: Header=BB73_1360 Depth=2
	movq	-6440(%rbp), %rax       ## 8-byte Reload
	movq	-6416(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.707(%rip), %rsi
	movq	-6424(%rbp), %rdx       ## 8-byte Reload
	movl	-6428(%rbp), %ecx       ## 4-byte Reload
	movq	%rax, %r8
	movb	$0, %al
	callq	_fprintf
## %bb.1365:                            ##   in Loop: Header=BB73_1360 Depth=2
	movl	-5292(%rbp), %eax
	addl	-5284(%rbp), %eax
	movl	%eax, -5284(%rbp)
	jmp	LBB73_1360
LBB73_1366:                             ##   in Loop: Header=BB73_1358 Depth=1
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.66(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
## %bb.1367:                            ##   in Loop: Header=BB73_1358 Depth=1
	movl	-5280(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -5280(%rbp)
	jmp	LBB73_1358
LBB73_1368:
	jmp	LBB73_1369
LBB73_1369:
	movl	$0, -5228(%rbp)
LBB73_1370:                             ## =>This Inner Loop Header: Depth=1
	movl	-5228(%rbp), %eax
	cmpl	-5220(%rbp), %eax
	jge	LBB73_1373
## %bb.1371:                            ##   in Loop: Header=BB73_1370 Depth=1
	movq	-5216(%rbp), %rax
	movslq	-5228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_sqlite3_free
## %bb.1372:                            ##   in Loop: Header=BB73_1370 Depth=1
	movl	-5228(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -5228(%rbp)
	jmp	LBB73_1370
LBB73_1373:
	movq	-5216(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	jmp	LBB73_1577
LBB73_1374:
	cmpl	$116, -3960(%rbp)
	jne	LBB73_1382
## %bb.1375:
	movq	-432(%rbp), %rdi
	leaq	L_.str.708(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1382
## %bb.1376:
	movq	-3944(%rbp), %rdi
	callq	_output_reset
	xorl	%esi, %esi
	leaq	L_.str.333(%rip), %rdi
	callq	_output_file_open
	movq	-3944(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-3944(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	LBB73_1378
## %bb.1377:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.709(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_1378:
	cmpl	$2, -3952(%rbp)
	jl	LBB73_1380
## %bb.1379:
	movq	-3944(%rbp), %rax
	addq	$160, %rax
	movq	-424(%rbp), %rcx
	movl	$30, %edi
	movq	%rax, %rsi
	leaq	L_.str.79(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB73_1381
LBB73_1380:
	movq	-3944(%rbp), %rax
	addq	$160, %rax
	movl	$30, %edi
	movq	%rax, %rsi
	leaq	L_.str.710(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
LBB73_1381:
	jmp	LBB73_1576
LBB73_1382:
	cmpl	$116, -3960(%rbp)
	jne	LBB73_1460
## %bb.1383:
	cmpl	$8, -3956(%rbp)
	jl	LBB73_1460
## %bb.1384:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.711(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1460
## %bb.1385:
	xorl	%esi, %esi
	movl	$-1, -5308(%rbp)
	movl	$-1, -5312(%rbp)
	movl	$0, -5316(%rbp)
	movl	$0, -5320(%rbp)
	movq	$0, -5336(%rbp)
	movq	-3944(%rbp), %rdi
	callq	_open_db
	cmpl	$2, -3952(%rbp)
	jl	LBB73_1387
## %bb.1386:
	movq	-424(%rbp), %rax
	movq	%rax, -6448(%rbp)       ## 8-byte Spill
	jmp	LBB73_1388
LBB73_1387:
	leaq	L_.str.422(%rip), %rax
	movq	%rax, -6448(%rbp)       ## 8-byte Spill
	jmp	LBB73_1388
LBB73_1388:
	movq	-6448(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -5336(%rbp)
	movq	-5336(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_1394
## %bb.1389:
	movq	-5336(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB73_1394
## %bb.1390:
	movq	-5336(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -5336(%rbp)
	movq	-5336(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_1393
## %bb.1391:
	movq	-5336(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB73_1393
## %bb.1392:
	movq	-5336(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -5336(%rbp)
LBB73_1393:
	jmp	LBB73_1394
LBB73_1394:
	movq	-5336(%rbp), %rdi
	leaq	L_.str.422(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1400
## %bb.1395:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.735(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$0, -5324(%rbp)
LBB73_1396:                             ## =>This Inner Loop Header: Depth=1
	cmpl	$16, -5324(%rbp)
	jge	LBB73_1399
## %bb.1397:                            ##   in Loop: Header=BB73_1396 Depth=1
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movslq	-5324(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	_do_meta_command.aCtrl.712(%rip), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movq	(%rdx), %rdx
	movslq	-5324(%rbp), %rax
	imulq	$24, %rax, %rax
	addq	%rax, %rcx
	movq	16(%rcx), %rcx
	leaq	L_.str.736(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
## %bb.1398:                            ##   in Loop: Header=BB73_1396 Depth=1
	movl	-5324(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -5324(%rbp)
	jmp	LBB73_1396
LBB73_1399:
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_1400:
	movq	-5336(%rbp), %rdi
	callq	_strlen30
	movl	%eax, -5328(%rbp)
	movl	$0, -5324(%rbp)
LBB73_1401:                             ## =>This Inner Loop Header: Depth=1
	cmpl	$16, -5324(%rbp)
	jge	LBB73_1409
## %bb.1402:                            ##   in Loop: Header=BB73_1401 Depth=1
	movq	-5336(%rbp), %rdi
	movslq	-5324(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	_do_meta_command.aCtrl.712(%rip), %rcx
	addq	%rax, %rcx
	movq	(%rcx), %rsi
	movslq	-5328(%rbp), %rdx
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1407
## %bb.1403:                            ##   in Loop: Header=BB73_1401 Depth=1
	cmpl	$0, -5308(%rbp)
	jge	LBB73_1405
## %bb.1404:                            ##   in Loop: Header=BB73_1401 Depth=1
	movslq	-5324(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	_do_meta_command.aCtrl.712(%rip), %rcx
	addq	%rax, %rcx
	movl	8(%rcx), %edx
	movl	%edx, -5308(%rbp)
	movl	-5324(%rbp), %edx
	movl	%edx, -5312(%rbp)
	jmp	LBB73_1406
LBB73_1405:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-5336(%rbp), %rdx
	leaq	L_.str.737(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_1406:                             ##   in Loop: Header=BB73_1401 Depth=1
	jmp	LBB73_1407
LBB73_1407:                             ##   in Loop: Header=BB73_1401 Depth=1
	jmp	LBB73_1408
LBB73_1408:                             ##   in Loop: Header=BB73_1401 Depth=1
	movl	-5324(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -5324(%rbp)
	jmp	LBB73_1401
LBB73_1409:
	cmpl	$0, -5308(%rbp)
	jge	LBB73_1411
## %bb.1410:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-5336(%rbp), %rdx
	leaq	L_.str.738(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_1450
LBB73_1411:
	movslq	-5312(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	_do_meta_command.aCtrl.712(%rip), %rcx
	addq	%rax, %rcx
	cmpl	$0, 12(%rcx)
	je	LBB73_1414
## %bb.1412:
	movq	-3944(%rbp), %rax
	movzbl	17(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB73_1414
## %bb.1413:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-3944(%rbp), %rax
	movl	48(%rax), %edx
	movslq	-5312(%rbp), %rax
	leaq	(%rax,%rax,2), %rax
	leaq	_do_meta_command.aCtrl.712(%rip), %rcx
	movq	(%rcx,%rax,8), %rcx
	leaq	L_.str.739(%rip), %rsi
	xorl	%r8d, %r8d
                                        ## kill: def $r8b killed $r8b killed $r8d
	movb	%r8b, %al
	callq	_fprintf
	movl	$1, %edi
	movl	%eax, -6452(%rbp)       ## 4-byte Spill
	callq	_exit
LBB73_1414:
	movl	-5308(%rbp), %eax
	addl	$-5, %eax
	movl	%eax, %ecx
	subl	$25, %eax
	movq	%rcx, -6464(%rbp)       ## 8-byte Spill
	ja	LBB73_1448
## %bb.1636:
	leaq	LJTI73_0(%rip), %rax
	movq	-6464(%rbp), %rcx       ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB73_1415:
	cmpl	$3, -3952(%rbp)
	jne	LBB73_1417
## %bb.1416:
	xorl	%eax, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movq	-416(%rbp), %rdi
	callq	_strtol
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -5340(%rbp)
	movl	-5308(%rbp), %edi
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rsi
	movl	-5340(%rbp), %edx
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	%eax, -5316(%rbp)
	movl	$3, -5320(%rbp)
LBB73_1417:
	jmp	LBB73_1448
LBB73_1418:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_1420
## %bb.1419:
	movl	-5308(%rbp), %edi
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	%eax, -5316(%rbp)
	movl	-5308(%rbp), %eax
	cmpl	$22, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -5320(%rbp)
LBB73_1420:
	jmp	LBB73_1448
LBB73_1421:
	cmpl	$3, -3952(%rbp)
	jne	LBB73_1423
## %bb.1422:
	movq	-416(%rbp), %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -5344(%rbp)
	movl	-5308(%rbp), %edi
	movl	-5344(%rbp), %esi
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	%eax, -5316(%rbp)
	movl	$3, -5320(%rbp)
LBB73_1423:
	jmp	LBB73_1448
LBB73_1424:
	cmpl	$3, -3952(%rbp)
	je	LBB73_1426
## %bb.1425:
	cmpl	$4, -3952(%rbp)
	jne	LBB73_1433
LBB73_1426:
	movq	-416(%rbp), %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -5348(%rbp)
	cmpl	$0, -5348(%rbp)
	jne	LBB73_1429
## %bb.1427:
	movq	-416(%rbp), %rdi
	leaq	L_.str.740(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB73_1429
## %bb.1428:
	leaq	-5348(%rbp), %rax
	movl	$4, %edi
	movq	%rax, %rsi
	callq	_sqlite3_randomness
	movl	-5348(%rbp), %esi
	leaq	L_.str.741(%rip), %rdi
	movb	$0, %al
	callq	_printf
LBB73_1429:
	cmpl	$3, -3952(%rbp)
	jne	LBB73_1431
## %bb.1430:
	movq	$0, -5360(%rbp)
	jmp	LBB73_1432
LBB73_1431:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, -5360(%rbp)
	movq	-5360(%rbp), %rdi
	movq	%rcx, %rsi
	leaq	L_.str.637(%rip), %rdx
	movq	%rcx, -6472(%rbp)       ## 8-byte Spill
	movq	-6472(%rbp), %r8        ## 8-byte Reload
	movq	-6472(%rbp), %r9        ## 8-byte Reload
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movq	$0, 16(%rsp)
	callq	_sqlite3_table_column_metadata
LBB73_1432:
	movl	-5308(%rbp), %edi
	movl	-5348(%rbp), %esi
	movq	-5360(%rbp), %rdx
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	%eax, -5316(%rbp)
	movl	$3, -5320(%rbp)
LBB73_1433:
	jmp	LBB73_1448
LBB73_1434:
	cmpl	$3, -3952(%rbp)
	jne	LBB73_1436
## %bb.1435:
	movq	-416(%rbp), %rdi
	callq	_booleanValue
	movl	%eax, -5364(%rbp)
	movl	-5308(%rbp), %edi
	movl	-5364(%rbp), %esi
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	%eax, -5316(%rbp)
	movl	$1, -5320(%rbp)
LBB73_1436:
	jmp	LBB73_1448
LBB73_1437:
	cmpl	$3, -3952(%rbp)
	jne	LBB73_1439
## %bb.1438:
	movq	-416(%rbp), %rdi
	callq	_booleanValue
	movl	%eax, -5368(%rbp)
	movl	-5308(%rbp), %edi
	movl	-5368(%rbp), %esi
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	%eax, -5316(%rbp)
	movl	$3, -5320(%rbp)
LBB73_1439:
	jmp	LBB73_1448
LBB73_1440:
	movl	-5308(%rbp), %edi
	movq	-3944(%rbp), %rax
	movq	(%rax), %rsi
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	%eax, -5316(%rbp)
	movl	$3, -5320(%rbp)
	jmp	LBB73_1448
LBB73_1441:
	cmpl	$5, -3952(%rbp)
	jne	LBB73_1443
## %bb.1442:
	movl	-5308(%rbp), %edi
	movq	-3944(%rbp), %rax
	movq	(%rax), %rsi
	movq	-416(%rbp), %rdx
	movq	-408(%rbp), %rax
	movl	%edi, -6476(%rbp)       ## 4-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -6488(%rbp)       ## 8-byte Spill
	movq	%rdx, -6496(%rbp)       ## 8-byte Spill
	callq	_integerValue
	movq	-400(%rbp), %rdi
	movq	%rax, -6504(%rbp)       ## 8-byte Spill
	callq	_integerValue
	movl	-6476(%rbp), %edi       ## 4-byte Reload
	movq	-6488(%rbp), %rsi       ## 8-byte Reload
	movq	-6496(%rbp), %rdx       ## 8-byte Reload
	movq	-6504(%rbp), %rcx       ## 8-byte Reload
	movq	%rax, %r8
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	%eax, -5316(%rbp)
	movl	$3, -5320(%rbp)
LBB73_1443:
	jmp	LBB73_1448
LBB73_1444:
	movq	$0, -5376(%rbp)
	movl	-5308(%rbp), %edi
	movq	-3944(%rbp), %rax
	movq	(%rax), %rsi
	leaq	-5376(%rbp), %rdx
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	%eax, -5316(%rbp)
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-5376(%rbp), %rdx
	leaq	L_.str.742(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$3, -5320(%rbp)
	jmp	LBB73_1448
LBB73_1445:
	cmpl	$3, -3952(%rbp)
	jne	LBB73_1447
## %bb.1446:
	movq	-416(%rbp), %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -5380(%rbp)
	movl	-5308(%rbp), %edi
	movq	-3944(%rbp), %rcx
	movq	(%rcx), %rsi
	movl	-5380(%rbp), %edx
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	%eax, -5316(%rbp)
	movl	$3, -5320(%rbp)
LBB73_1447:
	jmp	LBB73_1448
LBB73_1448:
	jmp	LBB73_1449
LBB73_1449:
	jmp	LBB73_1450
LBB73_1450:
	cmpl	$0, -5320(%rbp)
	jne	LBB73_1453
## %bb.1451:
	cmpl	$0, -5312(%rbp)
	jl	LBB73_1453
## %bb.1452:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-5336(%rbp), %rdx
	movslq	-5312(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	_do_meta_command.aCtrl.712(%rip), %rcx
	addq	%rax, %rcx
	movq	16(%rcx), %rcx
	leaq	L_.str.743(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1459
LBB73_1453:
	cmpl	$1, -5320(%rbp)
	jne	LBB73_1455
## %bb.1454:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-5316(%rbp), %edx
	leaq	L_.str.429(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_1458
LBB73_1455:
	cmpl	$2, -5320(%rbp)
	jne	LBB73_1457
## %bb.1456:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-5316(%rbp), %edx
	leaq	L_.str.744(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_1457:
	jmp	LBB73_1458
LBB73_1458:
	jmp	LBB73_1459
LBB73_1459:
	jmp	LBB73_1575
LBB73_1460:
	cmpl	$116, -3960(%rbp)
	jne	LBB73_1467
## %bb.1461:
	cmpl	$4, -3956(%rbp)
	jle	LBB73_1467
## %bb.1462:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.745(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1467
## %bb.1463:
	xorl	%esi, %esi
	movq	-3944(%rbp), %rdi
	callq	_open_db
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	cmpl	$2, -3952(%rbp)
	movq	%rdi, -6512(%rbp)       ## 8-byte Spill
	jl	LBB73_1465
## %bb.1464:
	movq	-424(%rbp), %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -6516(%rbp)       ## 4-byte Spill
	jmp	LBB73_1466
LBB73_1465:
	xorl	%eax, %eax
	movl	%eax, -6516(%rbp)       ## 4-byte Spill
	jmp	LBB73_1466
LBB73_1466:
	movl	-6516(%rbp), %eax       ## 4-byte Reload
	movq	-6512(%rbp), %rdi       ## 8-byte Reload
	movl	%eax, %esi
	callq	_sqlite3_busy_timeout
	jmp	LBB73_1574
LBB73_1467:
	cmpl	$116, -3960(%rbp)
	jne	LBB73_1477
## %bb.1468:
	cmpl	$5, -3956(%rbp)
	jl	LBB73_1477
## %bb.1469:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.746(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1477
## %bb.1470:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_1475
## %bb.1471:
	movq	-424(%rbp), %rdi
	callq	_booleanValue
	movl	%eax, _enableTimer(%rip)
	cmpl	$0, _enableTimer(%rip)
	je	LBB73_1474
## %bb.1472:
	movb	$1, %al
	testb	$1, %al
	jne	LBB73_1474
	jmp	LBB73_1473
LBB73_1473:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.747(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$0, _enableTimer(%rip)
LBB73_1474:
	jmp	LBB73_1476
LBB73_1475:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.748(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_1476:
	jmp	LBB73_1573
LBB73_1477:
	cmpl	$116, -3960(%rbp)
	jne	LBB73_1510
## %bb.1478:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.749(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1510
## %bb.1479:
	xorl	%esi, %esi
	movl	$0, -5384(%rbp)
	movq	-3944(%rbp), %rdi
	callq	_open_db
	movl	$1, -5388(%rbp)
LBB73_1480:                             ## =>This Inner Loop Header: Depth=1
	movl	-5388(%rbp), %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_1504
## %bb.1481:                            ##   in Loop: Header=BB73_1480 Depth=1
	movslq	-5388(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movq	%rax, -5400(%rbp)
	movq	-5400(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB73_1501
## %bb.1482:                            ##   in Loop: Header=BB73_1480 Depth=1
	movq	-5400(%rbp), %rdi
	leaq	L_.str.750(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_1484
## %bb.1483:                            ##   in Loop: Header=BB73_1480 Depth=1
	movq	-3944(%rbp), %rax
	movb	$1, 16(%rax)
	jmp	LBB73_1500
LBB73_1484:                             ##   in Loop: Header=BB73_1480 Depth=1
	movq	-5400(%rbp), %rdi
	leaq	L_.str.751(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_1486
## %bb.1485:                            ##   in Loop: Header=BB73_1480 Depth=1
	movq	-3944(%rbp), %rax
	movb	$0, 16(%rax)
	jmp	LBB73_1499
LBB73_1486:                             ##   in Loop: Header=BB73_1480 Depth=1
	movq	-5400(%rbp), %rdi
	leaq	L_.str.752(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_1488
## %bb.1487:                            ##   in Loop: Header=BB73_1480 Depth=1
	movl	-5384(%rbp), %eax
	orl	$2, %eax
	movl	%eax, -5384(%rbp)
	jmp	LBB73_1498
LBB73_1488:                             ##   in Loop: Header=BB73_1480 Depth=1
	movq	-5400(%rbp), %rdi
	leaq	L_.str.753(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_1490
## %bb.1489:                            ##   in Loop: Header=BB73_1480 Depth=1
	movl	-5384(%rbp), %eax
	orl	$4, %eax
	movl	%eax, -5384(%rbp)
	jmp	LBB73_1497
LBB73_1490:                             ##   in Loop: Header=BB73_1480 Depth=1
	movq	-5400(%rbp), %rdi
	leaq	L_.str.687(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_1492
## %bb.1491:                            ##   in Loop: Header=BB73_1480 Depth=1
	movl	-5384(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -5384(%rbp)
	jmp	LBB73_1496
LBB73_1492:                             ##   in Loop: Header=BB73_1480 Depth=1
	movq	-5400(%rbp), %rdi
	leaq	L_.str.346(%rip), %rsi
	callq	_optionMatch
	cmpl	$0, %eax
	je	LBB73_1494
## %bb.1493:                            ##   in Loop: Header=BB73_1480 Depth=1
	movl	-5384(%rbp), %eax
	orl	$8, %eax
	movl	%eax, -5384(%rbp)
	jmp	LBB73_1495
LBB73_1494:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-5400(%rbp), %rdx
	leaq	L_.str.754(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
	jmp	LBB73_1628
LBB73_1495:                             ##   in Loop: Header=BB73_1480 Depth=1
	jmp	LBB73_1496
LBB73_1496:                             ##   in Loop: Header=BB73_1480 Depth=1
	jmp	LBB73_1497
LBB73_1497:                             ##   in Loop: Header=BB73_1480 Depth=1
	jmp	LBB73_1498
LBB73_1498:                             ##   in Loop: Header=BB73_1480 Depth=1
	jmp	LBB73_1499
LBB73_1499:                             ##   in Loop: Header=BB73_1480 Depth=1
	jmp	LBB73_1500
LBB73_1500:                             ##   in Loop: Header=BB73_1480 Depth=1
	jmp	LBB73_1502
LBB73_1501:                             ##   in Loop: Header=BB73_1480 Depth=1
	movq	-3944(%rbp), %rax
	movq	72(%rax), %rdi
	callq	_output_file_close
	xorl	%esi, %esi
	movq	-424(%rbp), %rdi
	callq	_output_file_open
	movq	-3944(%rbp), %rcx
	movq	%rax, 72(%rcx)
LBB73_1502:                             ##   in Loop: Header=BB73_1480 Depth=1
	jmp	LBB73_1503
LBB73_1503:                             ##   in Loop: Header=BB73_1480 Depth=1
	movl	-5388(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -5388(%rbp)
	jmp	LBB73_1480
LBB73_1504:
	movq	-3944(%rbp), %rax
	cmpq	$0, 72(%rax)
	jne	LBB73_1506
## %bb.1505:
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-3944(%rbp), %rdx
	movq	(%rdx), %rdi
	movq	%rcx, %rdx
	callq	_sqlite3_trace_v2
	jmp	LBB73_1509
LBB73_1506:
	cmpl	$0, -5384(%rbp)
	jne	LBB73_1508
## %bb.1507:
	movl	$1, -5384(%rbp)
LBB73_1508:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movl	-5384(%rbp), %esi
	movq	-3944(%rbp), %rax
	leaq	_sql_trace_callback(%rip), %rdx
	movq	%rax, %rcx
	callq	_sqlite3_trace_v2
LBB73_1509:
	jmp	LBB73_1572
LBB73_1510:
	cmpl	$118, -3960(%rbp)
	jne	LBB73_1513
## %bb.1511:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.755(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1513
## %bb.1512:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	%rdi, -6528(%rbp)       ## 8-byte Spill
	callq	_sqlite3_libversion
	movq	%rax, -6536(%rbp)       ## 8-byte Spill
	callq	_sqlite3_sourceid
	movq	-6528(%rbp), %rdi       ## 8-byte Reload
	leaq	L_.str.756(%rip), %rsi
	movq	-6536(%rbp), %rdx       ## 8-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.757(%rip), %rsi
	movl	%eax, -6540(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	jmp	LBB73_1571
LBB73_1513:
	cmpl	$118, -3960(%rbp)
	jne	LBB73_1523
## %bb.1514:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.758(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1523
## %bb.1515:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_1517
## %bb.1516:
	movq	-424(%rbp), %rax
	movq	%rax, -6552(%rbp)       ## 8-byte Spill
	jmp	LBB73_1518
LBB73_1517:
	leaq	L___func__.main(%rip), %rax
	movq	%rax, -6552(%rbp)       ## 8-byte Spill
	jmp	LBB73_1518
LBB73_1518:
	movq	-6552(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -5408(%rbp)
	movq	$0, -5416(%rbp)
	movq	-3944(%rbp), %rax
	cmpq	$0, (%rax)
	je	LBB73_1522
## %bb.1519:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-5408(%rbp), %rsi
	leaq	-5416(%rbp), %rax
	movl	$27, %edx
	movq	%rax, %rcx
	callq	_sqlite3_file_control
	cmpq	$0, -5416(%rbp)
	je	LBB73_1521
## %bb.1520:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-5416(%rbp), %rax
	movq	24(%rax), %rdx
	leaq	L_.str.759(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-5416(%rbp), %rcx
	movl	(%rcx), %edx
	leaq	L_.str.760(%rip), %rsi
	movl	%eax, -6556(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-5416(%rbp), %rcx
	movl	4(%rcx), %edx
	leaq	L_.str.761(%rip), %rsi
	movl	%eax, -6560(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-5416(%rbp), %rcx
	movl	8(%rcx), %edx
	leaq	L_.str.762(%rip), %rsi
	movl	%eax, -6564(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
LBB73_1521:
	jmp	LBB73_1522
LBB73_1522:
	jmp	LBB73_1570
LBB73_1523:
	cmpl	$118, -3960(%rbp)
	jne	LBB73_1534
## %bb.1524:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.763(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1534
## %bb.1525:
	movq	$0, -5432(%rbp)
	movq	-3944(%rbp), %rax
	cmpq	$0, (%rax)
	je	LBB73_1527
## %bb.1526:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	leaq	-5432(%rbp), %rax
	leaq	L___func__.main(%rip), %rsi
	movl	$27, %edx
	movq	%rax, %rcx
	callq	_sqlite3_file_control
LBB73_1527:
	xorl	%eax, %eax
	movl	%eax, %edi
	callq	_sqlite3_vfs_find
	movq	%rax, -5424(%rbp)
LBB73_1528:                             ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -5424(%rbp)
	je	LBB73_1533
## %bb.1529:                            ##   in Loop: Header=BB73_1528 Depth=1
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-5424(%rbp), %rax
	movq	24(%rax), %rdx
	movq	-5424(%rbp), %rax
	movq	-5432(%rbp), %rcx
	cmpq	%rcx, %rax
	leaq	L_.str.765(%rip), %rax
	leaq	L_.str.27(%rip), %rcx
	cmoveq	%rax, %rcx
	leaq	L_.str.764(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-5424(%rbp), %rcx
	movl	(%rcx), %edx
	leaq	L_.str.760(%rip), %rsi
	movl	%eax, -6568(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-5424(%rbp), %rcx
	movl	4(%rcx), %edx
	leaq	L_.str.761(%rip), %rsi
	movl	%eax, -6572(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movq	-3944(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-5424(%rbp), %rcx
	movl	8(%rcx), %edx
	leaq	L_.str.762(%rip), %rsi
	movl	%eax, -6576(%rbp)       ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movq	-5424(%rbp), %rcx
	cmpq	$0, 16(%rcx)
	je	LBB73_1531
## %bb.1530:                            ##   in Loop: Header=BB73_1528 Depth=1
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.766(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB73_1531:                             ##   in Loop: Header=BB73_1528 Depth=1
	jmp	LBB73_1532
LBB73_1532:                             ##   in Loop: Header=BB73_1528 Depth=1
	movq	-5424(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -5424(%rbp)
	jmp	LBB73_1528
LBB73_1533:
	jmp	LBB73_1569
LBB73_1534:
	cmpl	$118, -3960(%rbp)
	jne	LBB73_1544
## %bb.1535:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.767(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1544
## %bb.1536:
	cmpl	$2, -3952(%rbp)
	jne	LBB73_1538
## %bb.1537:
	movq	-424(%rbp), %rax
	movq	%rax, -6584(%rbp)       ## 8-byte Spill
	jmp	LBB73_1539
LBB73_1538:
	leaq	L___func__.main(%rip), %rax
	movq	%rax, -6584(%rbp)       ## 8-byte Spill
	jmp	LBB73_1539
LBB73_1539:
	movq	-6584(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -5440(%rbp)
	movq	$0, -5448(%rbp)
	movq	-3944(%rbp), %rax
	cmpq	$0, (%rax)
	je	LBB73_1543
## %bb.1540:
	movq	-3944(%rbp), %rax
	movq	(%rax), %rdi
	movq	-5440(%rbp), %rsi
	leaq	-5448(%rbp), %rax
	movl	$12, %edx
	movq	%rax, %rcx
	callq	_sqlite3_file_control
	cmpq	$0, -5448(%rbp)
	je	LBB73_1542
## %bb.1541:
	movq	-3944(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-5448(%rbp), %rdx
	leaq	L_.str.219(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-5448(%rbp), %rdi
	movl	%eax, -6588(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
LBB73_1542:
	jmp	LBB73_1543
LBB73_1543:
	jmp	LBB73_1568
LBB73_1544:
	cmpl	$119, -3960(%rbp)
	jne	LBB73_1550
## %bb.1545:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.768(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1550
## %bb.1546:
	cmpl	$2, -3952(%rbp)
	jl	LBB73_1548
## %bb.1547:
	movq	-424(%rbp), %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -6592(%rbp)       ## 4-byte Spill
	jmp	LBB73_1549
LBB73_1548:
	movl	$4294967295, %eax       ## imm = 0xFFFFFFFF
	movl	%eax, -6592(%rbp)       ## 4-byte Spill
	jmp	LBB73_1549
LBB73_1549:
	movl	-6592(%rbp), %eax       ## 4-byte Reload
	movl	%eax, -5452(%rbp)
	movl	$31, %edi
	movl	$3, %esi
	leaq	-5452(%rbp), %rdx
	movb	$0, %al
	callq	_sqlite3_test_control
	jmp	LBB73_1567
LBB73_1550:
	cmpl	$119, -3960(%rbp)
	jne	LBB73_1565
## %bb.1551:
	movq	-432(%rbp), %rdi
	movslq	-3956(%rbp), %rdx
	leaq	L_.str.690(%rip), %rsi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB73_1565
## %bb.1552:
	cmpl	$52, -3952(%rbp)
	setle	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movslq	%ecx, %rdx
	cmpq	$0, %rdx
	je	LBB73_1554
## %bb.1553:
	leaq	L___func__.do_meta_command(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.769(%rip), %rcx
	movl	$22328, %edx            ## imm = 0x5738
	callq	___assert_rtn
LBB73_1554:
	jmp	LBB73_1555
LBB73_1555:
	movl	-3952(%rbp), %eax
	subl	$1, %eax
	movq	-3944(%rbp), %rcx
	movl	%eax, 288(%rcx)
	movq	-3944(%rbp), %rcx
	movq	272(%rcx), %rcx
	movq	-3944(%rbp), %rdx
	movl	288(%rdx), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	shlq	$1, %rdx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	callq	_realloc
	movq	-3944(%rbp), %rcx
	movq	%rax, 272(%rcx)
	movq	-3944(%rbp), %rax
	cmpq	$0, 272(%rax)
	jne	LBB73_1558
## %bb.1556:
	movq	-3944(%rbp), %rax
	cmpl	$0, 288(%rax)
	jle	LBB73_1558
## %bb.1557:
	callq	_shell_out_of_memory
LBB73_1558:
	movq	-3944(%rbp), %rax
	cmpl	$0, 288(%rax)
	je	LBB73_1560
## %bb.1559:
	movq	-3944(%rbp), %rax
	movq	272(%rax), %rax
	movq	-3944(%rbp), %rcx
	movslq	288(%rcx), %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	-3944(%rbp), %rcx
	movq	%rax, 280(%rcx)
LBB73_1560:
	movl	$1, -5456(%rbp)
LBB73_1561:                             ## =>This Inner Loop Header: Depth=1
	movl	-5456(%rbp), %eax
	cmpl	-3952(%rbp), %eax
	jge	LBB73_1564
## %bb.1562:                            ##   in Loop: Header=BB73_1561 Depth=1
	movslq	-5456(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movq	-3944(%rbp), %rcx
	movq	272(%rcx), %rcx
	movl	-5456(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rsi
	movl	%eax, (%rcx,%rsi,4)
## %bb.1563:                            ##   in Loop: Header=BB73_1561 Depth=1
	movl	-5456(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -5456(%rbp)
	jmp	LBB73_1561
LBB73_1564:
	jmp	LBB73_1566
LBB73_1565:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-432(%rbp), %rdx
	leaq	L_.str.770(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -3964(%rbp)
LBB73_1566:
	jmp	LBB73_1567
LBB73_1567:
	jmp	LBB73_1568
LBB73_1568:
	jmp	LBB73_1569
LBB73_1569:
	jmp	LBB73_1570
LBB73_1570:
	jmp	LBB73_1571
LBB73_1571:
	jmp	LBB73_1572
LBB73_1572:
	jmp	LBB73_1573
LBB73_1573:
	jmp	LBB73_1574
LBB73_1574:
	jmp	LBB73_1575
LBB73_1575:
	jmp	LBB73_1576
LBB73_1576:
	jmp	LBB73_1577
LBB73_1577:
	jmp	LBB73_1578
LBB73_1578:
	jmp	LBB73_1579
LBB73_1579:
	jmp	LBB73_1580
LBB73_1580:
	jmp	LBB73_1581
LBB73_1581:
	jmp	LBB73_1582
LBB73_1582:
	jmp	LBB73_1583
LBB73_1583:
	jmp	LBB73_1584
LBB73_1584:
	jmp	LBB73_1585
LBB73_1585:
	jmp	LBB73_1586
LBB73_1586:
	jmp	LBB73_1587
LBB73_1587:
	jmp	LBB73_1588
LBB73_1588:
	jmp	LBB73_1589
LBB73_1589:
	jmp	LBB73_1590
LBB73_1590:
	jmp	LBB73_1591
LBB73_1591:
	jmp	LBB73_1592
LBB73_1592:
	jmp	LBB73_1593
LBB73_1593:
	jmp	LBB73_1594
LBB73_1594:
	jmp	LBB73_1595
LBB73_1595:
	jmp	LBB73_1596
LBB73_1596:
	jmp	LBB73_1597
LBB73_1597:
	jmp	LBB73_1598
LBB73_1598:
	jmp	LBB73_1599
LBB73_1599:
	jmp	LBB73_1600
LBB73_1600:
	jmp	LBB73_1601
LBB73_1601:
	jmp	LBB73_1602
LBB73_1602:
	jmp	LBB73_1603
LBB73_1603:
	jmp	LBB73_1604
LBB73_1604:
	jmp	LBB73_1605
LBB73_1605:
	jmp	LBB73_1606
LBB73_1606:
	jmp	LBB73_1607
LBB73_1607:
	jmp	LBB73_1608
LBB73_1608:
	jmp	LBB73_1609
LBB73_1609:
	jmp	LBB73_1610
LBB73_1610:
	jmp	LBB73_1611
LBB73_1611:
	jmp	LBB73_1612
LBB73_1612:
	jmp	LBB73_1613
LBB73_1613:
	jmp	LBB73_1614
LBB73_1614:
	jmp	LBB73_1615
LBB73_1615:
	jmp	LBB73_1616
LBB73_1616:
	jmp	LBB73_1617
LBB73_1617:
	jmp	LBB73_1618
LBB73_1618:
	jmp	LBB73_1619
LBB73_1619:
	jmp	LBB73_1620
LBB73_1620:
	jmp	LBB73_1621
LBB73_1621:
	jmp	LBB73_1622
LBB73_1622:
	jmp	LBB73_1623
LBB73_1623:
	jmp	LBB73_1624
LBB73_1624:
	jmp	LBB73_1625
LBB73_1625:
	jmp	LBB73_1626
LBB73_1626:
	jmp	LBB73_1627
LBB73_1627:
	jmp	LBB73_1628
LBB73_1628:
	movq	-3944(%rbp), %rax
	cmpl	$0, 40(%rax)
	je	LBB73_1632
## %bb.1629:
	movq	-3944(%rbp), %rax
	movl	40(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 40(%rax)
	movq	-3944(%rbp), %rax
	cmpl	$0, 40(%rax)
	jne	LBB73_1631
## %bb.1630:
	movq	-3944(%rbp), %rdi
	callq	_output_reset
LBB73_1631:
	jmp	LBB73_1632
LBB73_1632:
	movq	-3944(%rbp), %rax
	movb	18(%rax), %cl
	movq	-3944(%rbp), %rax
	movb	%cl, 17(%rax)
	movl	-3964(%rbp), %edx
	movl	%edx, -3924(%rbp)
LBB73_1633:
	movl	-3924(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movl	%eax, -6596(%rbp)       ## 4-byte Spill
	jne	LBB73_1635
## %bb.1634:
	movl	-6596(%rbp), %eax       ## 4-byte Reload
	addq	$6624, %rsp             ## imm = 0x19E0
	popq	%rbp
	retq
LBB73_1635:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L73_0_set_1418, LBB73_1418-LJTI73_0
.set L73_0_set_1448, LBB73_1448-LJTI73_0
.set L73_0_set_1421, LBB73_1421-LJTI73_0
.set L73_0_set_1434, LBB73_1434-LJTI73_0
.set L73_0_set_1415, LBB73_1415-LJTI73_0
.set L73_0_set_1440, LBB73_1440-LJTI73_0
.set L73_0_set_1437, LBB73_1437-LJTI73_0
.set L73_0_set_1445, LBB73_1445-LJTI73_0
.set L73_0_set_1441, LBB73_1441-LJTI73_0
.set L73_0_set_1424, LBB73_1424-LJTI73_0
.set L73_0_set_1444, LBB73_1444-LJTI73_0
LJTI73_0:
	.long	L73_0_set_1418
	.long	L73_0_set_1418
	.long	L73_0_set_1448
	.long	L73_0_set_1448
	.long	L73_0_set_1448
	.long	L73_0_set_1448
	.long	L73_0_set_1421
	.long	L73_0_set_1434
	.long	L73_0_set_1434
	.long	L73_0_set_1448
	.long	L73_0_set_1415
	.long	L73_0_set_1448
	.long	L73_0_set_1440
	.long	L73_0_set_1437
	.long	L73_0_set_1448
	.long	L73_0_set_1437
	.long	L73_0_set_1448
	.long	L73_0_set_1418
	.long	L73_0_set_1448
	.long	L73_0_set_1445
	.long	L73_0_set_1441
	.long	L73_0_set_1448
	.long	L73_0_set_1448
	.long	L73_0_set_1424
	.long	L73_0_set_1448
	.long	L73_0_set_1444
.set L73_1_set_379, LBB73_379-LJTI73_1
.set L73_1_set_400, LBB73_400-LJTI73_1
.set L73_1_set_382, LBB73_382-LJTI73_1
.set L73_1_set_392, LBB73_392-LJTI73_1
.set L73_1_set_389, LBB73_389-LJTI73_1
.set L73_1_set_372, LBB73_372-LJTI73_1
.set L73_1_set_397, LBB73_397-LJTI73_1
LJTI73_1:
	.long	L73_1_set_379
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_382
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_382
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_392
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_389
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_400
	.long	L73_1_set_379
	.long	L73_1_set_389
	.long	L73_1_set_372
	.long	L73_1_set_400
	.long	L73_1_set_397
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shell_exec
_shell_exec:                            ## @shell_exec
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	cmpq	$0, -32(%rbp)
	je	LBB74_2
## %bb.1:
	movq	-32(%rbp), %rax
	movq	$0, (%rax)
LBB74_2:
	movq	-16(%rbp), %rax
	cmpq	$0, 1624(%rax)
	je	LBB74_4
## %bb.3:
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	callq	_expertHandleSQL
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rdi
	cmpl	$0, -44(%rbp)
	setne	%cl
	andb	$1, %cl
	movzbl	%cl, %esi
	movq	-32(%rbp), %rdx
	callq	_expertFinish
	movl	%eax, -4(%rbp)
	jmp	LBB74_85
LBB74_4:
	jmp	LBB74_5
LBB74_5:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB74_14 Depth 2
                                        ##     Child Loop BB74_20 Depth 2
                                        ##     Child Loop BB74_37 Depth 2
                                        ##     Child Loop BB74_74 Depth 2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-24(%rbp), %rcx
	movsbl	(%rcx), %edx
	cmpl	$0, %edx
	movb	%al, -105(%rbp)         ## 1-byte Spill
	je	LBB74_7
## %bb.6:                               ##   in Loop: Header=BB74_5 Depth=1
	xorl	%eax, %eax
	cmpl	-44(%rbp), %eax
	sete	%cl
	movb	%cl, -105(%rbp)         ## 1-byte Spill
LBB74_7:                                ##   in Loop: Header=BB74_5 Depth=1
	movb	-105(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB74_8
	jmp	LBB74_84
LBB74_8:                                ##   in Loop: Header=BB74_5 Depth=1
	movq	-64(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-40(%rbp), %rcx
	leaq	-56(%rbp), %r8
	callq	_sqlite3_prepare_v2
	xorl	%edx, %edx
	movl	%eax, -44(%rbp)
	cmpl	-44(%rbp), %edx
	je	LBB74_12
## %bb.9:                               ##   in Loop: Header=BB74_5 Depth=1
	cmpq	$0, -32(%rbp)
	je	LBB74_11
## %bb.10:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-64(%rbp), %rdi
	movl	-44(%rbp), %edx
	movq	-24(%rbp), %rcx
	leaq	L_.str.1203(%rip), %rsi
	callq	_save_err_msg
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
LBB74_11:                               ##   in Loop: Header=BB74_5 Depth=1
	jmp	LBB74_83
LBB74_12:                               ##   in Loop: Header=BB74_5 Depth=1
	cmpq	$0, -40(%rbp)
	jne	LBB74_17
## %bb.13:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-56(%rbp), %rax
	movq	%rax, -24(%rbp)
LBB74_14:                               ##   Parent Loop BB74_5 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB74_16
## %bb.15:                              ##   in Loop: Header=BB74_14 Depth=2
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	LBB74_14
LBB74_16:                               ##   in Loop: Header=BB74_5 Depth=1
	jmp	LBB74_5
LBB74_17:                               ##   in Loop: Header=BB74_5 Depth=1
	movq	-40(%rbp), %rdi
	callq	_sqlite3_sql
	movq	%rax, _shell_exec.zStmtSql(%rip)
	cmpq	$0, _shell_exec.zStmtSql(%rip)
	jne	LBB74_19
## %bb.18:                              ##   in Loop: Header=BB74_5 Depth=1
	leaq	L_.str.27(%rip), %rax
	movq	%rax, _shell_exec.zStmtSql(%rip)
LBB74_19:                               ##   in Loop: Header=BB74_5 Depth=1
	jmp	LBB74_20
LBB74_20:                               ##   Parent Loop BB74_5 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	_shell_exec.zStmtSql(%rip), %rax
	movzbl	(%rax), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB74_22
## %bb.21:                              ##   in Loop: Header=BB74_20 Depth=2
	movq	_shell_exec.zStmtSql(%rip), %rax
	addq	$1, %rax
	movq	%rax, _shell_exec.zStmtSql(%rip)
	jmp	LBB74_20
LBB74_22:                               ##   in Loop: Header=BB74_5 Depth=1
	cmpq	$0, -16(%rbp)
	je	LBB74_24
## %bb.23:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 1336(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 44(%rax)
LBB74_24:                               ##   in Loop: Header=BB74_5 Depth=1
	cmpq	$0, -16(%rbp)
	je	LBB74_30
## %bb.25:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$64, %ecx
	cmpl	$0, %ecx
	je	LBB74_30
## %bb.26:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rax
	movq	64(%rax), %rdi
	cmpq	$0, _shell_exec.zStmtSql(%rip)
	movq	%rdi, -120(%rbp)        ## 8-byte Spill
	je	LBB74_28
## %bb.27:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	_shell_exec.zStmtSql(%rip), %rax
	movq	%rax, -128(%rbp)        ## 8-byte Spill
	jmp	LBB74_29
LBB74_28:                               ##   in Loop: Header=BB74_5 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, -128(%rbp)        ## 8-byte Spill
LBB74_29:                               ##   in Loop: Header=BB74_5 Depth=1
	movq	-128(%rbp), %rax        ## 8-byte Reload
	movq	-120(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.219(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB74_30:                               ##   in Loop: Header=BB74_5 Depth=1
	cmpq	$0, -16(%rbp)
	je	LBB74_54
## %bb.31:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rax
	movzbl	9(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB74_54
## %bb.32:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-40(%rbp), %rdi
	callq	_sqlite3_stmt_isexplain
	cmpl	$0, %eax
	jne	LBB74_54
## %bb.33:                              ##   in Loop: Header=BB74_5 Depth=1
	movl	$0, -84(%rbp)
	callq	_disable_debug_trace_modes
	movq	-64(%rbp), %rdi
	movl	$1008, %esi             ## imm = 0x3F0
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-84(%rbp), %rcx
	movb	$0, %al
	callq	_sqlite3_db_config
	movq	-16(%rbp), %rcx
	movzbl	9(%rcx), %edx
	cmpl	$2, %edx
	jl	LBB74_35
## %bb.34:                              ##   in Loop: Header=BB74_5 Depth=1
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdi
	movl	$1008, %esi             ## imm = 0x3F0
	movl	$1, %edx
	movb	$0, %al
	callq	_sqlite3_db_config
LBB74_35:                               ##   in Loop: Header=BB74_5 Depth=1
	movq	_shell_exec.zStmtSql(%rip), %rsi
	leaq	L_.str.216(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rdi
	callq	_shell_check_oom
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-64(%rbp), %rdi
	movq	-80(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-72(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	jne	LBB74_44
## %bb.36:                              ##   in Loop: Header=BB74_5 Depth=1
	jmp	LBB74_37
LBB74_37:                               ##   Parent Loop BB74_5 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-72(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB74_43
## %bb.38:                              ##   in Loop: Header=BB74_37 Depth=2
	movq	-72(%rbp), %rdi
	movl	$3, %esi
	callq	_sqlite3_column_text
	xorl	%esi, %esi
	movq	%rax, -96(%rbp)
	movq	-72(%rbp), %rdi
	callq	_sqlite3_column_int
	movl	%eax, -100(%rbp)
	movq	-72(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_int
	movl	%eax, -104(%rbp)
	cmpq	$0, -96(%rbp)
	jne	LBB74_40
## %bb.39:                              ##   in Loop: Header=BB74_37 Depth=2
	leaq	L_.str.27(%rip), %rax
	movq	%rax, -96(%rbp)
LBB74_40:                               ##   in Loop: Header=BB74_37 Depth=2
	movq	-96(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB74_42
## %bb.41:                              ##   in Loop: Header=BB74_37 Depth=2
	movq	-16(%rbp), %rdi
	callq	_eqp_render
LBB74_42:                               ##   in Loop: Header=BB74_37 Depth=2
	movq	-16(%rbp), %rdi
	movl	-100(%rbp), %esi
	movl	-104(%rbp), %edx
	movq	-96(%rbp), %rcx
	callq	_eqp_append
	jmp	LBB74_37
LBB74_43:                               ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rdi
	callq	_eqp_render
LBB74_44:                               ##   in Loop: Header=BB74_5 Depth=1
	movq	-72(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	-80(%rbp), %rdi
	movl	%eax, -132(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
	movq	-16(%rbp), %rcx
	movzbl	9(%rcx), %eax
	cmpl	$3, %eax
	jl	LBB74_48
## %bb.45:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	_shell_exec.zStmtSql(%rip), %rsi
	leaq	L_.str.1204(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rdi
	callq	_shell_check_oom
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-64(%rbp), %rdi
	movq	-80(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-72(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	jne	LBB74_47
## %bb.46:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rax
	movl	$9, 92(%rax)
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	_explain_data_prepare
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	_exec_prepared_stmt
	movq	-16(%rbp), %rdi
	callq	_explain_data_delete
LBB74_47:                               ##   in Loop: Header=BB74_5 Depth=1
	movq	-72(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	-80(%rbp), %rdi
	movl	%eax, -136(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
LBB74_48:                               ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rax
	movzbl	9(%rax), %ecx
	cmpl	$2, %ecx
	jl	LBB74_53
## %bb.49:                              ##   in Loop: Header=BB74_5 Depth=1
	cmpl	$0, -84(%rbp)
	jne	LBB74_53
## %bb.50:                              ##   in Loop: Header=BB74_5 Depth=1
	xorl	%eax, %eax
	movq	-64(%rbp), %rdi
	movl	$1008, %esi             ## imm = 0x3F0
	movl	%eax, %edx
	movl	%eax, %ecx
	movb	$0, %al
	callq	_sqlite3_db_config
	movq	-40(%rbp), %rdi
	movl	%eax, -140(%rbp)        ## 4-byte Spill
	callq	_sqlite3_finalize
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-64(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-40(%rbp), %rcx
	movl	%eax, -144(%rbp)        ## 4-byte Spill
	callq	_sqlite3_prepare_v2
	cmpq	$0, -16(%rbp)
	je	LBB74_52
## %bb.51:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 1336(%rcx)
LBB74_52:                               ##   in Loop: Header=BB74_5 Depth=1
	jmp	LBB74_53
LBB74_53:                               ##   in Loop: Header=BB74_5 Depth=1
	callq	_restore_debug_trace_modes
LBB74_54:                               ##   in Loop: Header=BB74_5 Depth=1
	cmpq	$0, -16(%rbp)
	je	LBB74_64
## %bb.55:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rax
	movl	84(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 92(%rax)
	movq	-16(%rbp), %rax
	cmpb	$0, 8(%rax)
	je	LBB74_61
## %bb.56:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-40(%rbp), %rdi
	callq	_sqlite3_stmt_isexplain
	cmpl	$1, %eax
	jne	LBB74_58
## %bb.57:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rax
	movl	$9, 92(%rax)
LBB74_58:                               ##   in Loop: Header=BB74_5 Depth=1
	movq	-40(%rbp), %rdi
	callq	_sqlite3_stmt_isexplain
	cmpl	$2, %eax
	jne	LBB74_60
## %bb.59:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rax
	movl	$12, 92(%rax)
LBB74_60:                               ##   in Loop: Header=BB74_5 Depth=1
	jmp	LBB74_61
LBB74_61:                               ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$9, 92(%rax)
	jne	LBB74_63
## %bb.62:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_explain_data_prepare
LBB74_63:                               ##   in Loop: Header=BB74_5 Depth=1
	jmp	LBB74_64
LBB74_64:                               ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_bind_prepared_stmt
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_exec_prepared_stmt
	movq	-16(%rbp), %rdi
	callq	_explain_data_delete
	movq	-16(%rbp), %rdi
	callq	_eqp_render
	cmpq	$0, -16(%rbp)
	je	LBB74_67
## %bb.65:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 28(%rax)
	je	LBB74_67
## %bb.66:                              ##   in Loop: Header=BB74_5 Depth=1
	xorl	%edx, %edx
	movq	-64(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_display_stats
LBB74_67:                               ##   in Loop: Header=BB74_5 Depth=1
	cmpq	$0, -16(%rbp)
	je	LBB74_70
## %bb.68:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rax
	movzbl	12(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB74_70
## %bb.69:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-64(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_display_scanstats
LBB74_70:                               ##   in Loop: Header=BB74_5 Depth=1
	movq	-40(%rbp), %rdi
	callq	_sqlite3_finalize
	movl	%eax, -48(%rbp)
	cmpl	$7, -44(%rbp)
	je	LBB74_72
## %bb.71:                              ##   in Loop: Header=BB74_5 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -44(%rbp)
LBB74_72:                               ##   in Loop: Header=BB74_5 Depth=1
	cmpl	$0, -44(%rbp)
	jne	LBB74_77
## %bb.73:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-56(%rbp), %rax
	movq	%rax, -24(%rbp)
LBB74_74:                               ##   Parent Loop BB74_5 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB74_76
## %bb.75:                              ##   in Loop: Header=BB74_74 Depth=2
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	LBB74_74
LBB74_76:                               ##   in Loop: Header=BB74_5 Depth=1
	jmp	LBB74_80
LBB74_77:                               ##   in Loop: Header=BB74_5 Depth=1
	cmpq	$0, -32(%rbp)
	je	LBB74_79
## %bb.78:                              ##   in Loop: Header=BB74_5 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-64(%rbp), %rdi
	movl	-44(%rbp), %edx
	leaq	L_.str.1205(%rip), %rsi
	callq	_save_err_msg
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
LBB74_79:                               ##   in Loop: Header=BB74_5 Depth=1
	jmp	LBB74_80
LBB74_80:                               ##   in Loop: Header=BB74_5 Depth=1
	cmpq	$0, -16(%rbp)
	je	LBB74_82
## %bb.81:                              ##   in Loop: Header=BB74_5 Depth=1
	movq	-16(%rbp), %rax
	movq	$0, 1336(%rax)
LBB74_82:                               ##   in Loop: Header=BB74_5 Depth=1
	jmp	LBB74_83
LBB74_83:                               ##   in Loop: Header=BB74_5 Depth=1
	jmp	LBB74_5
LBB74_84:
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB74_85:
	movl	-4(%rbp), %eax
	addq	$144, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function printBold
_printBold:                             ## @printBold
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rsi
	leaq	L_.str.1262(%rip), %rdi
	movb	$0, %al
	callq	_printf
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function find_home_dir
_find_home_dir:                         ## @find_home_dir
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	LBB76_2
## %bb.1:
	movq	_find_home_dir.home_dir(%rip), %rdi
	callq	_free
	movq	$0, _find_home_dir.home_dir(%rip)
	movq	$0, -8(%rbp)
	jmp	LBB76_13
LBB76_2:
	cmpq	$0, _find_home_dir.home_dir(%rip)
	je	LBB76_4
## %bb.3:
	movq	_find_home_dir.home_dir(%rip), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB76_13
LBB76_4:
	callq	_getuid
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %edi
	callq	_getpwuid
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	je	LBB76_6
## %bb.5:
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, _find_home_dir.home_dir(%rip)
LBB76_6:
	cmpq	$0, _find_home_dir.home_dir(%rip)
	jne	LBB76_8
## %bb.7:
	leaq	L_.str.1263(%rip), %rdi
	callq	_getenv
	movq	%rax, _find_home_dir.home_dir(%rip)
LBB76_8:
	cmpq	$0, _find_home_dir.home_dir(%rip)
	je	LBB76_12
## %bb.9:
	movq	_find_home_dir.home_dir(%rip), %rdi
	callq	_strlen30
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rdi
	callq	_malloc
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	LBB76_11
## %bb.10:
	movq	$-1, %rcx
	movq	-40(%rbp), %rdi
	movq	_find_home_dir.home_dir(%rip), %rsi
	movslq	-32(%rbp), %rdx
	callq	___memcpy_chk
LBB76_11:
	movq	-40(%rbp), %rax
	movq	%rax, _find_home_dir.home_dir(%rip)
LBB76_12:
	movq	_find_home_dir.home_dir(%rip), %rax
	movq	%rax, -8(%rbp)
LBB76_13:
	movq	-8(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function strlen30
_strlen30:                              ## @strlen30
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
LBB77_1:                                ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpb	$0, (%rax)
	je	LBB77_3
## %bb.2:                               ##   in Loop: Header=BB77_1 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	LBB77_1
LBB77_3:
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	subq	%rcx, %rax
                                        ## kill: def $eax killed $eax killed $rax
	andl	$1073741823, %eax       ## imm = 0x3FFFFFFF
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function process_input
_process_input:                         ## @process_input
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -16(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -60(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$25, 36(%rax)
	jne	LBB78_2
## %bb.1:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	leaq	L_.str.1264(%rip), %rsi
	movl	$25, %edx
	movb	$0, %al
	callq	_fprintf
	movl	$1, -4(%rbp)
	jmp	LBB78_75
LBB78_2:
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 48(%rax)
LBB78_3:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB78_45 Depth 2
	cmpl	$0, -52(%rbp)
	movb	$1, %al
	movb	%al, -65(%rbp)          ## 1-byte Spill
	je	LBB78_8
## %bb.4:                               ##   in Loop: Header=BB78_3 Depth=1
	cmpl	$0, _bail_on_error(%rip)
	movb	$1, %al
	movb	%al, -65(%rbp)          ## 1-byte Spill
	je	LBB78_8
## %bb.5:                               ##   in Loop: Header=BB78_3 Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-16(%rbp), %rcx
	cmpq	$0, 56(%rcx)
	movb	%al, -66(%rbp)          ## 1-byte Spill
	jne	LBB78_7
## %bb.6:                               ##   in Loop: Header=BB78_3 Depth=1
	cmpl	$0, _stdin_is_interactive(%rip)
	setne	%al
	movb	%al, -66(%rbp)          ## 1-byte Spill
LBB78_7:                                ##   in Loop: Header=BB78_3 Depth=1
	movb	-66(%rbp), %al          ## 1-byte Reload
	movb	%al, -65(%rbp)          ## 1-byte Spill
LBB78_8:                                ##   in Loop: Header=BB78_3 Depth=1
	movb	-65(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB78_9
	jmp	LBB78_71
LBB78_9:                                ##   in Loop: Header=BB78_3 Depth=1
	movq	-16(%rbp), %rax
	movq	64(%rax), %rdi
	callq	_fflush
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rdi
	movq	-24(%rbp), %rsi
	cmpl	$0, -40(%rbp)
	setg	%dl
	andb	$1, %dl
	movzbl	%dl, %edx
	movl	%eax, -72(%rbp)         ## 4-byte Spill
	callq	_one_input_line
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	LBB78_14
## %bb.10:
	movq	-16(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	LBB78_13
## %bb.11:
	cmpl	$0, _stdin_is_interactive(%rip)
	je	LBB78_13
## %bb.12:
	leaq	L_.str.66(%rip), %rdi
	movb	$0, %al
	callq	_printf
LBB78_13:
	jmp	LBB78_71
LBB78_14:                               ##   in Loop: Header=BB78_3 Depth=1
	movl	_seenInterrupt(%rip), %eax
	cmpl	$0, %eax
	je	LBB78_18
## %bb.15:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 56(%rax)
	je	LBB78_17
## %bb.16:
	jmp	LBB78_71
LBB78_17:                               ##   in Loop: Header=BB78_3 Depth=1
	movl	$0, _seenInterrupt(%rip)
LBB78_18:                               ##   in Loop: Header=BB78_3 Depth=1
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 48(%rax)
	movl	-60(%rbp), %ecx
	andl	$255, %ecx
	cmpl	$0, %ecx
	jne	LBB78_22
## %bb.19:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-24(%rbp), %rdi
	callq	_line_is_command_terminator
	cmpl	$0, %eax
	je	LBB78_22
## %bb.20:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-32(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	_line_is_complete
	cmpl	$0, %eax
	je	LBB78_22
## %bb.21:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	$-1, %rcx
	movq	-24(%rbp), %rdi
	leaq	L_.str.1265(%rip), %rsi
	movl	$2, %edx
	callq	___memcpy_chk
LBB78_22:                               ##   in Loop: Header=BB78_3 Depth=1
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	callq	_quickscan
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	andl	$-513, %eax             ## imm = 0xFDFF
	cmpl	$0, %eax
	jne	LBB78_27
## %bb.23:                              ##   in Loop: Header=BB78_3 Depth=1
	cmpl	$0, -40(%rbp)
	jne	LBB78_27
## %bb.24:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-16(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$64, %ecx
	cmpl	$0, %ecx
	je	LBB78_26
## %bb.25:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-24(%rbp), %rsi
	leaq	L_.str.219(%rip), %rdi
	movb	$0, %al
	callq	_printf
LBB78_26:                               ##   in Loop: Header=BB78_3 Depth=1
	movl	$0, -60(%rbp)
	jmp	LBB78_3
LBB78_27:                               ##   in Loop: Header=BB78_3 Depth=1
	cmpq	$0, -24(%rbp)
	je	LBB78_41
## %bb.28:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-24(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$46, %ecx
	je	LBB78_30
## %bb.29:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-24(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$35, %ecx
	jne	LBB78_41
LBB78_30:                               ##   in Loop: Header=BB78_3 Depth=1
	cmpl	$0, -40(%rbp)
	jne	LBB78_41
## %bb.31:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-16(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$64, %ecx
	cmpl	$0, %ecx
	je	LBB78_33
## %bb.32:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-24(%rbp), %rsi
	leaq	L_.str.219(%rip), %rdi
	movb	$0, %al
	callq	_printf
LBB78_33:                               ##   in Loop: Header=BB78_3 Depth=1
	movq	-24(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$46, %ecx
	jne	LBB78_40
## %bb.34:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_do_meta_command
	movl	%eax, -48(%rbp)
	cmpl	$2, -48(%rbp)
	jne	LBB78_36
## %bb.35:
	jmp	LBB78_71
LBB78_36:                               ##   in Loop: Header=BB78_3 Depth=1
	cmpl	$0, -48(%rbp)
	je	LBB78_38
## %bb.37:                              ##   in Loop: Header=BB78_3 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
LBB78_38:                               ##   in Loop: Header=BB78_3 Depth=1
	jmp	LBB78_39
LBB78_39:                               ##   in Loop: Header=BB78_3 Depth=1
	jmp	LBB78_40
LBB78_40:                               ##   in Loop: Header=BB78_3 Depth=1
	movl	$0, -60(%rbp)
	jmp	LBB78_3
LBB78_41:                               ##   in Loop: Header=BB78_3 Depth=1
	movq	-24(%rbp), %rdi
	callq	_strlen30
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cmpl	-44(%rbp), %eax
	jl	LBB78_43
## %bb.42:                              ##   in Loop: Header=BB78_3 Depth=1
	movl	-40(%rbp), %eax
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	addl	-36(%rbp), %eax
	addl	$100, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	movslq	-44(%rbp), %rsi
	callq	_realloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	_shell_check_oom
LBB78_43:                               ##   in Loop: Header=BB78_3 Depth=1
	cmpl	$0, -40(%rbp)
	jne	LBB78_56
## %bb.44:                              ##   in Loop: Header=BB78_3 Depth=1
	movl	$0, -64(%rbp)
LBB78_45:                               ##   Parent Loop BB78_3 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-24(%rbp), %rcx
	movslq	-64(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	cmpl	$0, %esi
	movb	%al, -73(%rbp)          ## 1-byte Spill
	je	LBB78_47
## %bb.46:                              ##   in Loop: Header=BB78_45 Depth=2
	movq	-24(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %edi
	callq	_isspace
	cmpl	$0, %eax
	setne	%dl
	movb	%dl, -73(%rbp)          ## 1-byte Spill
LBB78_47:                               ##   in Loop: Header=BB78_45 Depth=2
	movb	-73(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB78_48
	jmp	LBB78_50
LBB78_48:                               ##   in Loop: Header=BB78_45 Depth=2
	jmp	LBB78_49
LBB78_49:                               ##   in Loop: Header=BB78_45 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	LBB78_45
LBB78_50:                               ##   in Loop: Header=BB78_3 Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -44(%rbp)
	movb	%al, -74(%rbp)          ## 1-byte Spill
	jle	LBB78_52
## %bb.51:                              ##   in Loop: Header=BB78_3 Depth=1
	cmpq	$0, -32(%rbp)
	setne	%al
	movb	%al, -74(%rbp)          ## 1-byte Spill
LBB78_52:                               ##   in Loop: Header=BB78_3 Depth=1
	movb	-74(%rbp), %al          ## 1-byte Reload
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movslq	%ecx, %rdx
	cmpq	$0, %rdx
	je	LBB78_54
## %bb.53:
	leaq	L___func__.process_input(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.1266(%rip), %rcx
	movl	$22613, %edx            ## imm = 0x5855
	callq	___assert_rtn
LBB78_54:                               ##   in Loop: Header=BB78_3 Depth=1
	jmp	LBB78_55
LBB78_55:                               ##   in Loop: Header=BB78_3 Depth=1
	movq	$-1, %rcx
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rax
	movslq	-64(%rbp), %rdx
	addq	%rdx, %rax
	movl	-36(%rbp), %esi
	addl	$1, %esi
	subl	-64(%rbp), %esi
	movslq	%esi, %rdx
	movq	%rax, %rsi
	callq	___memcpy_chk
	movq	-16(%rbp), %rcx
	movl	48(%rcx), %r8d
	movl	%r8d, -56(%rbp)
	movl	-36(%rbp), %r8d
	subl	-64(%rbp), %r8d
	movl	%r8d, -40(%rbp)
	jmp	LBB78_57
LBB78_56:                               ##   in Loop: Header=BB78_3 Depth=1
	movq	$-1, %rcx
	movq	-32(%rbp), %rax
	movl	-40(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -40(%rbp)
	movslq	%edx, %rdi
	movb	$10, (%rax,%rdi)
	movq	-32(%rbp), %rax
	movslq	-40(%rbp), %rdi
	addq	%rdi, %rax
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, %rdi
	callq	___memcpy_chk
	movl	-36(%rbp), %r8d
	addl	-40(%rbp), %r8d
	movl	%r8d, -40(%rbp)
LBB78_57:                               ##   in Loop: Header=BB78_3 Depth=1
	cmpl	$0, -40(%rbp)
	je	LBB78_64
## %bb.58:                              ##   in Loop: Header=BB78_3 Depth=1
	movl	-60(%rbp), %eax
	andl	$-257, %eax             ## imm = 0xFEFF
	cmpl	$512, %eax              ## imm = 0x200
	jne	LBB78_64
## %bb.59:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	_sqlite3_complete
	cmpl	$0, %eax
	je	LBB78_64
## %bb.60:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdx
	movl	-56(%rbp), %ecx
	callq	_runOneSqlLine
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -40(%rbp)
	movq	-16(%rbp), %rdx
	cmpl	$0, 40(%rdx)
	je	LBB78_62
## %bb.61:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-16(%rbp), %rdi
	callq	_output_reset
	movq	-16(%rbp), %rax
	movl	$0, 40(%rax)
	jmp	LBB78_63
LBB78_62:                               ##   in Loop: Header=BB78_3 Depth=1
	movq	-16(%rbp), %rdi
	callq	_clearTempFile
LBB78_63:                               ##   in Loop: Header=BB78_3 Depth=1
	movq	-16(%rbp), %rax
	movb	18(%rax), %cl
	movq	-16(%rbp), %rax
	movb	%cl, 17(%rax)
	movl	$0, -60(%rbp)
	jmp	LBB78_70
LBB78_64:                               ##   in Loop: Header=BB78_3 Depth=1
	cmpl	$0, -40(%rbp)
	je	LBB78_69
## %bb.65:                              ##   in Loop: Header=BB78_3 Depth=1
	movl	-60(%rbp), %eax
	andl	$-513, %eax             ## imm = 0xFDFF
	cmpl	$0, %eax
	jne	LBB78_69
## %bb.66:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-16(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$64, %ecx
	cmpl	$0, %ecx
	je	LBB78_68
## %bb.67:                              ##   in Loop: Header=BB78_3 Depth=1
	movq	-32(%rbp), %rsi
	leaq	L_.str.219(%rip), %rdi
	movb	$0, %al
	callq	_printf
LBB78_68:                               ##   in Loop: Header=BB78_3 Depth=1
	movl	$0, -40(%rbp)
	movl	$0, -60(%rbp)
LBB78_69:                               ##   in Loop: Header=BB78_3 Depth=1
	jmp	LBB78_70
LBB78_70:                               ##   in Loop: Header=BB78_3 Depth=1
	jmp	LBB78_3
LBB78_71:
	cmpl	$0, -40(%rbp)
	je	LBB78_74
## %bb.72:
	movl	-60(%rbp), %eax
	andl	$-513, %eax             ## imm = 0xFDFF
	cmpl	$256, %eax              ## imm = 0x100
	jne	LBB78_74
## %bb.73:
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdx
	movl	-56(%rbp), %ecx
	callq	_runOneSqlLine
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
LBB78_74:
	movq	-32(%rbp), %rdi
	callq	_free
	movq	-24(%rbp), %rdi
	callq	_free
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 36(%rax)
	cmpl	$0, -52(%rbp)
	setg	%dl
	andb	$1, %dl
	movzbl	%dl, %ecx
	movl	%ecx, -4(%rbp)
LBB78_75:
	movl	-4(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function set_table_name
_set_table_name:                        ## @set_table_name
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 144(%rax)
	je	LBB79_2
## %bb.1:
	movq	-8(%rbp), %rax
	movq	144(%rax), %rdi
	callq	_free
	movq	-8(%rbp), %rax
	movq	$0, 144(%rax)
LBB79_2:
	cmpq	$0, -16(%rbp)
	jne	LBB79_4
## %bb.3:
	jmp	LBB79_17
LBB79_4:
	movq	-16(%rbp), %rdi
	callq	_quoteChar
	movb	%al, -25(%rbp)
	movq	-16(%rbp), %rdi
	callq	_strlen30
	movl	%eax, -24(%rbp)
	cmpb	$0, -25(%rbp)
	je	LBB79_6
## %bb.5:
	movl	-24(%rbp), %eax
	addl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
LBB79_6:
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	callq	_malloc
	movq	-8(%rbp), %rcx
	movq	%rax, 144(%rcx)
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	_shell_check_oom
	movl	$0, -24(%rbp)
	cmpb	$0, -25(%rbp)
	je	LBB79_8
## %bb.7:
	movb	-25(%rbp), %al
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdi
	movb	%al, (%rcx,%rdi)
LBB79_8:
	movl	$0, -20(%rbp)
LBB79_9:                                ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	LBB79_14
## %bb.10:                              ##   in Loop: Header=BB79_9 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %dl
	movq	-40(%rbp), %rax
	movl	-24(%rbp), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, -24(%rbp)
	movslq	%esi, %rcx
	movb	%dl, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %esi
	movsbl	-25(%rbp), %edi
	cmpl	%edi, %esi
	jne	LBB79_12
## %bb.11:                              ##   in Loop: Header=BB79_9 Depth=1
	movb	-25(%rbp), %al
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdi
	movb	%al, (%rcx,%rdi)
LBB79_12:                               ##   in Loop: Header=BB79_9 Depth=1
	jmp	LBB79_13
LBB79_13:                               ##   in Loop: Header=BB79_9 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB79_9
LBB79_14:
	cmpb	$0, -25(%rbp)
	je	LBB79_16
## %bb.15:
	movb	-25(%rbp), %al
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdi
	movb	%al, (%rcx,%rdi)
LBB79_16:
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movb	$0, (%rax,%rcx)
LBB79_17:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function output_reset
_output_reset:                          ## @output_reset
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movsbl	312(%rax), %ecx
	cmpl	$124, %ecx
	jne	LBB80_2
## %bb.1:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	callq	_pclose
	jmp	LBB80_8
LBB80_2:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	callq	_output_file_close
	movq	-8(%rbp), %rax
	cmpb	$0, 14(%rax)
	je	LBB80_7
## %bb.3:
	leaq	L_.str.547(%rip), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	152(%rax), %rdx
	leaq	L_.str.1277(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	_system
	cmpl	$0, %eax
	je	LBB80_5
## %bb.4:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rdx
	leaq	L_.str.1278(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB80_6
LBB80_5:
	movl	$2000, %edi             ## imm = 0x7D0
	callq	_sqlite3_sleep
LBB80_6:
	movq	-24(%rbp), %rdi
	callq	_sqlite3_free
	movq	-8(%rbp), %rdi
	callq	_outputModePop
	movq	-8(%rbp), %rax
	movb	$0, 14(%rax)
LBB80_7:
	jmp	LBB80_8
LBB80_8:
	movq	___stdoutp@GOTPCREL(%rip), %rax
	movq	-8(%rbp), %rcx
	movb	$0, 312(%rcx)
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 64(%rcx)
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function clearTempFile
_clearTempFile:                         ## @clearTempFile
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 152(%rax)
	jne	LBB81_2
## %bb.1:
	jmp	LBB81_7
LBB81_2:
	movq	-8(%rbp), %rax
	cmpb	$0, 14(%rax)
	je	LBB81_4
## %bb.3:
	jmp	LBB81_7
LBB81_4:
	movq	-8(%rbp), %rax
	movq	152(%rax), %rdi
	callq	_shellDeleteFile
	cmpl	$0, %eax
	je	LBB81_6
## %bb.5:
	jmp	LBB81_7
LBB81_6:
	movq	-8(%rbp), %rax
	movq	152(%rax), %rdi
	callq	_sqlite3_free
	movq	-8(%rbp), %rax
	movq	$0, 152(%rax)
LBB81_7:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function SHA3Init
_SHA3Init:                              ## @SHA3Init
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%eax, %eax
	movq	$-1, %rcx
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rdx, %rdi
	movl	%eax, %esi
	movl	$1616, %edx             ## imm = 0x650
	callq	___memset_chk
	cmpl	$128, -12(%rbp)
	jl	LBB82_3
## %bb.1:
	cmpl	$512, -12(%rbp)         ## imm = 0x200
	jg	LBB82_3
## %bb.2:
	movl	-12(%rbp), %eax
	addl	$31, %eax
	andl	$-32, %eax
	shll	$1, %eax
	movl	$1600, %ecx             ## imm = 0x640
	subl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movq	-8(%rbp), %rsi
	movl	%eax, 1600(%rsi)
	jmp	LBB82_4
LBB82_3:
	movq	-8(%rbp), %rax
	movl	$136, 1600(%rax)
LBB82_4:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function SHA3Update
_SHA3Update:                            ## @SHA3Update
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	$0, -24(%rbp)
	cmpq	$0, -16(%rbp)
	jne	LBB83_2
## %bb.1:
	jmp	LBB83_17
LBB83_2:
	movq	-8(%rbp), %rax
	movl	1604(%rax), %ecx
	andl	$7, %ecx
	cmpl	$0, %ecx
	jne	LBB83_11
## %bb.3:
	movq	-16(%rbp), %rax
	subq	$0, %rax
	andq	$7, %rax
	cmpq	$0, %rax
	jne	LBB83_11
## %bb.4:
	jmp	LBB83_5
LBB83_5:                                ## =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	addl	$7, %eax
	cmpl	-20(%rbp), %eax
	jae	LBB83_10
## %bb.6:                               ##   in Loop: Header=BB83_5 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	movl	%ecx, %edx
	movq	(%rax,%rdx), %rax
	movq	-8(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movl	1604(%rsi), %ecx
	shrl	$3, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	xorq	(%rdx,%rsi,8), %rax
	movq	%rax, (%rdx,%rsi,8)
	movq	-8(%rbp), %rax
	movl	1604(%rax), %ecx
	addl	$8, %ecx
	movl	%ecx, 1604(%rax)
	movq	-8(%rbp), %rax
	movl	1604(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	1600(%rax), %ecx
	jb	LBB83_8
## %bb.7:                               ##   in Loop: Header=BB83_5 Depth=1
	movq	-8(%rbp), %rdi
	callq	_KeccakF1600Step
	movq	-8(%rbp), %rax
	movl	$0, 1604(%rax)
LBB83_8:                                ##   in Loop: Header=BB83_5 Depth=1
	jmp	LBB83_9
LBB83_9:                                ##   in Loop: Header=BB83_5 Depth=1
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	jmp	LBB83_5
LBB83_10:
	jmp	LBB83_11
LBB83_11:
	jmp	LBB83_12
LBB83_12:                               ## =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jae	LBB83_17
## %bb.13:                              ##   in Loop: Header=BB83_12 Depth=1
	movq	-16(%rbp), %rax
	movl	-24(%rbp), %ecx
	movl	%ecx, %edx
	movzbl	(%rax,%rdx), %ecx
	movq	-8(%rbp), %rax
	movq	-8(%rbp), %rdx
	movl	1604(%rdx), %esi
	movl	%esi, %edx
	movzbl	(%rax,%rdx), %esi
	xorl	%ecx, %esi
                                        ## kill: def $sil killed $sil killed $esi
	movb	%sil, (%rax,%rdx)
	movq	-8(%rbp), %rax
	movl	1604(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1604(%rax)
	movq	-8(%rbp), %rax
	movl	1604(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	1600(%rax), %ecx
	jne	LBB83_15
## %bb.14:                              ##   in Loop: Header=BB83_12 Depth=1
	movq	-8(%rbp), %rdi
	callq	_KeccakF1600Step
	movq	-8(%rbp), %rax
	movl	$0, 1604(%rax)
LBB83_15:                               ##   in Loop: Header=BB83_12 Depth=1
	jmp	LBB83_16
LBB83_16:                               ##   in Loop: Header=BB83_12 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	LBB83_12
LBB83_17:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function SHA3Final
_SHA3Final:                             ## @SHA3Final
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	1604(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	1600(%rax), %edx
	subl	$1, %edx
	cmpl	%edx, %ecx
	jne	LBB84_2
## %bb.1:
	movb	$-122, -13(%rbp)
	movq	-8(%rbp), %rdi
	leaq	-13(%rbp), %rsi
	movl	$1, %edx
	callq	_SHA3Update
	jmp	LBB84_3
LBB84_2:
	movb	$6, -14(%rbp)
	movb	$-128, -15(%rbp)
	movq	-8(%rbp), %rdi
	leaq	-14(%rbp), %rsi
	movl	$1, %edx
	callq	_SHA3Update
	movq	-8(%rbp), %rax
	movl	1600(%rax), %ecx
	subl	$1, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 1604(%rax)
	movq	-8(%rbp), %rdi
	leaq	-15(%rbp), %rsi
	movl	$1, %edx
	callq	_SHA3Update
LBB84_3:
	movl	$0, -12(%rbp)
LBB84_4:                                ## =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	1600(%rcx), %eax
	jae	LBB84_7
## %bb.5:                               ##   in Loop: Header=BB84_4 Depth=1
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	xorl	1608(%rdx), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edx
	movb	(%rax,%rdx), %sil
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	addl	1600(%rdx), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edx
	movb	%sil, (%rax,%rdx)
## %bb.6:                               ##   in Loop: Header=BB84_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	LBB84_4
LBB84_7:
	movq	-8(%rbp), %rax
	movq	-8(%rbp), %rcx
	movl	1600(%rcx), %edx
	movl	%edx, %ecx
	addq	%rcx, %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function KeccakF1600Step
_KeccakF1600Step:                       ## @KeccakF1600Step
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rax
	movq	%rdi, -8(%rbp)
	movl	$0, -12(%rbp)
LBB85_1:                                ## =>This Inner Loop Header: Depth=1
	cmpl	$24, -12(%rbp)
	jge	LBB85_4
## %bb.2:                               ##   in Loop: Header=BB85_1 Depth=1
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	xorq	40(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	80(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	120(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	160(%rcx), %rax
	movq	%rax, -64(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	xorq	48(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	88(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	128(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	168(%rcx), %rax
	movq	%rax, -72(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	-8(%rbp), %rcx
	xorq	56(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	96(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	136(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	176(%rcx), %rax
	movq	%rax, -80(%rbp)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	xorq	64(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	104(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	144(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	184(%rcx), %rax
	movq	%rax, -88(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	-8(%rbp), %rcx
	xorq	72(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	112(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	152(%rcx), %rax
	movq	-8(%rbp), %rcx
	xorq	192(%rcx), %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	-72(%rbp), %rcx
	shlq	$1, %rcx
	movq	-72(%rbp), %rdx
	shrq	$63, %rdx
	orq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movq	-80(%rbp), %rcx
	shlq	$1, %rcx
	movq	-80(%rbp), %rdx
	shrq	$63, %rdx
	orq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-72(%rbp), %rax
	movq	-88(%rbp), %rcx
	shlq	$1, %rcx
	movq	-88(%rbp), %rdx
	shrq	$63, %rdx
	orq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-80(%rbp), %rax
	movq	-96(%rbp), %rcx
	shlq	$1, %rcx
	movq	-96(%rbp), %rdx
	shrq	$63, %rdx
	orq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-88(%rbp), %rax
	movq	-64(%rbp), %rcx
	shlq	$1, %rcx
	movq	-64(%rbp), %rdx
	shrq	$63, %rdx
	orq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	xorq	-104(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$44, %rax
	movq	-8(%rbp), %rcx
	movq	48(%rcx), %rcx
	xorq	-112(%rbp), %rcx
	shrq	$20, %rcx
	orq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$43, %rax
	movq	-8(%rbp), %rcx
	movq	96(%rcx), %rcx
	xorq	-120(%rbp), %rcx
	shrq	$21, %rcx
	orq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	144(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$21, %rax
	movq	-8(%rbp), %rcx
	movq	144(%rcx), %rcx
	xorq	-128(%rbp), %rcx
	shrq	$43, %rcx
	orq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$14, %rax
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	xorq	-136(%rbp), %rcx
	shrq	$50, %rcx
	orq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-40(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movslq	-12(%rbp), %rax
	leaq	_KeccakF1600Step.RC(%rip), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	-8(%rbp), %rdx
	xorq	(%rdx), %rax
	movq	%rax, (%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 48(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 96(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 144(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 192(%rdx)
	movq	-8(%rbp), %rax
	movq	80(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$3, %rax
	movq	-8(%rbp), %rdx
	movq	80(%rdx), %rdx
	xorq	-104(%rbp), %rdx
	shrq	$61, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$45, %rax
	movq	-8(%rbp), %rdx
	movq	128(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$19, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	176(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$61, %rax
	movq	-8(%rbp), %rdx
	movq	176(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$3, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$28, %rax
	movq	-8(%rbp), %rdx
	movq	24(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$36, %rdx
	orq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$20, %rax
	movq	-8(%rbp), %rdx
	movq	72(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$44, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 80(%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 128(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 176(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 24(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 72(%rdx)
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$18, %rax
	movq	-8(%rbp), %rdx
	movq	160(%rdx), %rdx
	xorq	-104(%rbp), %rdx
	shrq	$46, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$1, %rax
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$63, %rdx
	orq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$6, %rax
	movq	-8(%rbp), %rdx
	movq	56(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$58, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$25, %rax
	movq	-8(%rbp), %rdx
	movq	104(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$39, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$8, %rax
	movq	-8(%rbp), %rdx
	movq	152(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$56, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 160(%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 8(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 56(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 104(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 152(%rdx)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$36, %rax
	movq	-8(%rbp), %rdx
	movq	40(%rdx), %rdx
	xorq	-104(%rbp), %rdx
	shrq	$28, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$10, %rax
	movq	-8(%rbp), %rdx
	movq	88(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$54, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	136(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$15, %rax
	movq	-8(%rbp), %rdx
	movq	136(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$49, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	184(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$56, %rax
	movq	-8(%rbp), %rdx
	movq	184(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$8, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$27, %rax
	movq	-8(%rbp), %rdx
	movq	32(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$37, %rdx
	orq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 40(%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 88(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 136(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 184(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 32(%rdx)
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$41, %rax
	movq	-8(%rbp), %rdx
	movq	120(%rdx), %rdx
	xorq	-104(%rbp), %rdx
	shrq	$23, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	168(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$2, %rax
	movq	-8(%rbp), %rdx
	movq	168(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$62, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$62, %rax
	movq	-8(%rbp), %rdx
	movq	16(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$2, %rdx
	orq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$55, %rax
	movq	-8(%rbp), %rdx
	movq	64(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$9, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$39, %rax
	movq	-8(%rbp), %rdx
	movq	112(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$25, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 120(%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 168(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 16(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 64(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 112(%rdx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	80(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	160(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	40(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	120(%rdx), %rax
	movq	%rax, -64(%rbp)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	128(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	8(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	88(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	168(%rdx), %rax
	movq	%rax, -72(%rbp)
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	176(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	56(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	136(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	16(%rdx), %rax
	movq	%rax, -80(%rbp)
	movq	-8(%rbp), %rax
	movq	144(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	24(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	104(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	184(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	64(%rdx), %rax
	movq	%rax, -88(%rbp)
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	72(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	152(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	32(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	112(%rdx), %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	-72(%rbp), %rdx
	shlq	$1, %rdx
	movq	-72(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movq	-80(%rbp), %rdx
	shlq	$1, %rdx
	movq	-80(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -112(%rbp)
	movq	-72(%rbp), %rax
	movq	-88(%rbp), %rdx
	shlq	$1, %rdx
	movq	-88(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -120(%rbp)
	movq	-80(%rbp), %rax
	movq	-96(%rbp), %rdx
	shlq	$1, %rdx
	movq	-96(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -128(%rbp)
	movq	-88(%rbp), %rax
	movq	-64(%rbp), %rdx
	shlq	$1, %rdx
	movq	-64(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -136(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	xorq	-104(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$44, %rax
	movq	-8(%rbp), %rdx
	movq	128(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$20, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$43, %rax
	movq	-8(%rbp), %rdx
	movq	56(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$21, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	184(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$21, %rax
	movq	-8(%rbp), %rdx
	movq	184(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$43, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$14, %rax
	movq	-8(%rbp), %rdx
	movq	112(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$50, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, (%rdx)
	movl	-12(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rax
	movq	(%rcx,%rax,8), %rax
	movq	-8(%rbp), %rdx
	xorq	(%rdx), %rax
	movq	%rax, (%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 128(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 56(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 184(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 112(%rdx)
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$3, %rax
	movq	-8(%rbp), %rdx
	movq	160(%rdx), %rdx
	xorq	-104(%rbp), %rdx
	shrq	$61, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$45, %rax
	movq	-8(%rbp), %rdx
	movq	88(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$19, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$61, %rax
	movq	-8(%rbp), %rdx
	movq	16(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$3, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	144(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$28, %rax
	movq	-8(%rbp), %rdx
	movq	144(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$36, %rdx
	orq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$20, %rax
	movq	-8(%rbp), %rdx
	movq	72(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$44, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 160(%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 88(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 16(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 144(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 72(%rdx)
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$18, %rax
	movq	-8(%rbp), %rdx
	movq	120(%rdx), %rdx
	xorq	-104(%rbp), %rdx
	shrq	$46, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$1, %rax
	movq	-8(%rbp), %rdx
	movq	48(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$63, %rdx
	orq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	176(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$6, %rax
	movq	-8(%rbp), %rdx
	movq	176(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$58, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$25, %rax
	movq	-8(%rbp), %rdx
	movq	104(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$39, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$8, %rax
	movq	-8(%rbp), %rdx
	movq	32(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$56, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 120(%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 48(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 176(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 104(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 32(%rdx)
	movq	-8(%rbp), %rax
	movq	80(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$36, %rax
	movq	-8(%rbp), %rdx
	movq	80(%rdx), %rdx
	xorq	-104(%rbp), %rdx
	shrq	$28, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$10, %rax
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$54, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	136(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$15, %rax
	movq	-8(%rbp), %rdx
	movq	136(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$49, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$56, %rax
	movq	-8(%rbp), %rdx
	movq	64(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$8, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$27, %rax
	movq	-8(%rbp), %rdx
	movq	192(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$37, %rdx
	orq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 80(%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 8(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 136(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 64(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 192(%rdx)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$41, %rax
	movq	-8(%rbp), %rdx
	movq	40(%rdx), %rdx
	xorq	-104(%rbp), %rdx
	shrq	$23, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	168(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$2, %rax
	movq	-8(%rbp), %rdx
	movq	168(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$62, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$62, %rax
	movq	-8(%rbp), %rdx
	movq	96(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$2, %rdx
	orq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$55, %rax
	movq	-8(%rbp), %rdx
	movq	24(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$9, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$39, %rax
	movq	-8(%rbp), %rdx
	movq	152(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$25, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 40(%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 168(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 96(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 24(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 152(%rdx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	160(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	120(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	80(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	40(%rdx), %rax
	movq	%rax, -64(%rbp)
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	88(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	48(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	8(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	168(%rdx), %rax
	movq	%rax, -72(%rbp)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	16(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	176(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	136(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	96(%rdx), %rax
	movq	%rax, -80(%rbp)
	movq	-8(%rbp), %rax
	movq	184(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	144(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	104(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	64(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	24(%rdx), %rax
	movq	%rax, -88(%rbp)
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	72(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	32(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	192(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	152(%rdx), %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	-72(%rbp), %rdx
	shlq	$1, %rdx
	movq	-72(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movq	-80(%rbp), %rdx
	shlq	$1, %rdx
	movq	-80(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -112(%rbp)
	movq	-72(%rbp), %rax
	movq	-88(%rbp), %rdx
	shlq	$1, %rdx
	movq	-88(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -120(%rbp)
	movq	-80(%rbp), %rax
	movq	-96(%rbp), %rdx
	shlq	$1, %rdx
	movq	-96(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -128(%rbp)
	movq	-88(%rbp), %rax
	movq	-64(%rbp), %rdx
	shlq	$1, %rdx
	movq	-64(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -136(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	xorq	-104(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$44, %rax
	movq	-8(%rbp), %rdx
	movq	88(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$20, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	176(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$43, %rax
	movq	-8(%rbp), %rdx
	movq	176(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$21, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$21, %rax
	movq	-8(%rbp), %rdx
	movq	64(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$43, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$14, %rax
	movq	-8(%rbp), %rdx
	movq	152(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$50, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, (%rdx)
	movl	-12(%rbp), %edi
	addl	$2, %edi
	movslq	%edi, %rax
	movq	(%rcx,%rax,8), %rax
	movq	-8(%rbp), %rdx
	xorq	(%rdx), %rax
	movq	%rax, (%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 88(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 176(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 64(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 152(%rdx)
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$3, %rax
	movq	-8(%rbp), %rdx
	movq	120(%rdx), %rdx
	xorq	-104(%rbp), %rdx
	shrq	$61, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$45, %rax
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$19, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$61, %rax
	movq	-8(%rbp), %rdx
	movq	96(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$3, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	184(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$28, %rax
	movq	-8(%rbp), %rdx
	movq	184(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$36, %rdx
	orq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$20, %rax
	movq	-8(%rbp), %rdx
	movq	72(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$44, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 120(%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 8(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 96(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 184(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 72(%rdx)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$18, %rax
	movq	-8(%rbp), %rdx
	movq	40(%rdx), %rdx
	xorq	-104(%rbp), %rdx
	shrq	$46, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$1, %rax
	movq	-8(%rbp), %rdx
	movq	128(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$63, %rdx
	orq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$6, %rax
	movq	-8(%rbp), %rdx
	movq	16(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$58, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$25, %rax
	movq	-8(%rbp), %rdx
	movq	104(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$39, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$8, %rax
	movq	-8(%rbp), %rdx
	movq	192(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$56, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 40(%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 128(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 16(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 104(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 192(%rdx)
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$36, %rax
	movq	-8(%rbp), %rdx
	movq	160(%rdx), %rdx
	xorq	-104(%rbp), %rdx
	shrq	$28, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$10, %rax
	movq	-8(%rbp), %rdx
	movq	48(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$54, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	136(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$15, %rax
	movq	-8(%rbp), %rdx
	movq	136(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$49, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$56, %rax
	movq	-8(%rbp), %rdx
	movq	24(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$8, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$27, %rax
	movq	-8(%rbp), %rdx
	movq	112(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$37, %rdx
	orq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 160(%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 48(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 136(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 24(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 112(%rdx)
	movq	-8(%rbp), %rax
	movq	80(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$41, %rax
	movq	-8(%rbp), %rdx
	movq	80(%rdx), %rdx
	xorq	-104(%rbp), %rdx
	shrq	$23, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	168(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$2, %rax
	movq	-8(%rbp), %rdx
	movq	168(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$62, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$62, %rax
	movq	-8(%rbp), %rdx
	movq	56(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$2, %rdx
	orq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	144(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$55, %rax
	movq	-8(%rbp), %rdx
	movq	144(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$9, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$39, %rax
	movq	-8(%rbp), %rdx
	movq	32(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$25, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 80(%rdx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-48(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 168(%rdx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-56(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 56(%rdx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-24(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 144(%rdx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-32(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 32(%rdx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	120(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	40(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	160(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	80(%rdx), %rax
	movq	%rax, -64(%rbp)
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	8(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	128(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	48(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	168(%rdx), %rax
	movq	%rax, -72(%rbp)
	movq	-8(%rbp), %rax
	movq	176(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	96(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	16(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	136(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	56(%rdx), %rax
	movq	%rax, -80(%rbp)
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	184(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	104(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	24(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	144(%rdx), %rax
	movq	%rax, -88(%rbp)
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	movq	-8(%rbp), %rdx
	xorq	72(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	192(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	112(%rdx), %rax
	movq	-8(%rbp), %rdx
	xorq	32(%rdx), %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	-72(%rbp), %rdx
	shlq	$1, %rdx
	movq	-72(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movq	-80(%rbp), %rdx
	shlq	$1, %rdx
	movq	-80(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -112(%rbp)
	movq	-72(%rbp), %rax
	movq	-88(%rbp), %rdx
	shlq	$1, %rdx
	movq	-88(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -120(%rbp)
	movq	-80(%rbp), %rax
	movq	-96(%rbp), %rdx
	shlq	$1, %rdx
	movq	-96(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -128(%rbp)
	movq	-88(%rbp), %rax
	movq	-64(%rbp), %rdx
	shlq	$1, %rdx
	movq	-64(%rbp), %rsi
	shrq	$63, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rax
	movq	%rax, -136(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	xorq	-104(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$44, %rax
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	xorq	-112(%rbp), %rdx
	shrq	$20, %rdx
	orq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$43, %rax
	movq	-8(%rbp), %rdx
	movq	16(%rdx), %rdx
	xorq	-120(%rbp), %rdx
	shrq	$21, %rdx
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$21, %rax
	movq	-8(%rbp), %rdx
	movq	24(%rdx), %rdx
	xorq	-128(%rbp), %rdx
	shrq	$43, %rdx
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$14, %rax
	movq	-8(%rbp), %rdx
	movq	32(%rdx), %rdx
	xorq	-136(%rbp), %rdx
	shrq	$50, %rdx
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	xorq	$-1, %rdx
	andq	-40(%rbp), %rdx
	xorq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, (%rdx)
	movl	-12(%rbp), %edi
	addl	$3, %edi
	movslq	%edi, %rax
	movq	(%rcx,%rax,8), %rax
	movq	-8(%rbp), %rcx
	xorq	(%rcx), %rax
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-48(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-56(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-24(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-32(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$3, %rax
	movq	-8(%rbp), %rcx
	movq	40(%rcx), %rcx
	xorq	-104(%rbp), %rcx
	shrq	$61, %rcx
	orq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$45, %rax
	movq	-8(%rbp), %rcx
	movq	48(%rcx), %rcx
	xorq	-112(%rbp), %rcx
	shrq	$19, %rcx
	orq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$61, %rax
	movq	-8(%rbp), %rcx
	movq	56(%rcx), %rcx
	xorq	-120(%rbp), %rcx
	shrq	$3, %rcx
	orq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$28, %rax
	movq	-8(%rbp), %rcx
	movq	64(%rcx), %rcx
	xorq	-128(%rbp), %rcx
	shrq	$36, %rcx
	orq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$20, %rax
	movq	-8(%rbp), %rcx
	movq	72(%rcx), %rcx
	xorq	-136(%rbp), %rcx
	shrq	$44, %rcx
	orq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-40(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-48(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-56(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-24(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-32(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-8(%rbp), %rax
	movq	80(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$18, %rax
	movq	-8(%rbp), %rcx
	movq	80(%rcx), %rcx
	xorq	-104(%rbp), %rcx
	shrq	$46, %rcx
	orq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$1, %rax
	movq	-8(%rbp), %rcx
	movq	88(%rcx), %rcx
	xorq	-112(%rbp), %rcx
	shrq	$63, %rcx
	orq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$6, %rax
	movq	-8(%rbp), %rcx
	movq	96(%rcx), %rcx
	xorq	-120(%rbp), %rcx
	shrq	$58, %rcx
	orq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$25, %rax
	movq	-8(%rbp), %rcx
	movq	104(%rcx), %rcx
	xorq	-128(%rbp), %rcx
	shrq	$39, %rcx
	orq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$8, %rax
	movq	-8(%rbp), %rcx
	movq	112(%rcx), %rcx
	xorq	-136(%rbp), %rcx
	shrq	$56, %rcx
	orq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-40(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 80(%rcx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-48(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 88(%rcx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-56(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 96(%rcx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-24(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 104(%rcx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-32(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 112(%rcx)
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$36, %rax
	movq	-8(%rbp), %rcx
	movq	120(%rcx), %rcx
	xorq	-104(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$10, %rax
	movq	-8(%rbp), %rcx
	movq	128(%rcx), %rcx
	xorq	-112(%rbp), %rcx
	shrq	$54, %rcx
	orq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	136(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$15, %rax
	movq	-8(%rbp), %rcx
	movq	136(%rcx), %rcx
	xorq	-120(%rbp), %rcx
	shrq	$49, %rcx
	orq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	144(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$56, %rax
	movq	-8(%rbp), %rcx
	movq	144(%rcx), %rcx
	xorq	-128(%rbp), %rcx
	shrq	$8, %rcx
	orq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$27, %rax
	movq	-8(%rbp), %rcx
	movq	152(%rcx), %rcx
	xorq	-136(%rbp), %rcx
	shrq	$37, %rcx
	orq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-40(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 120(%rcx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-48(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 128(%rcx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-56(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 136(%rcx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-24(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 144(%rcx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-32(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 152(%rcx)
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	xorq	-104(%rbp), %rax
	shlq	$41, %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	xorq	-104(%rbp), %rcx
	shrq	$23, %rcx
	orq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	168(%rax), %rax
	xorq	-112(%rbp), %rax
	shlq	$2, %rax
	movq	-8(%rbp), %rcx
	movq	168(%rcx), %rcx
	xorq	-112(%rbp), %rcx
	shrq	$62, %rcx
	orq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	176(%rax), %rax
	xorq	-120(%rbp), %rax
	shlq	$62, %rax
	movq	-8(%rbp), %rcx
	movq	176(%rcx), %rcx
	xorq	-120(%rbp), %rcx
	shrq	$2, %rcx
	orq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	184(%rax), %rax
	xorq	-128(%rbp), %rax
	shlq	$55, %rax
	movq	-8(%rbp), %rcx
	movq	184(%rcx), %rcx
	xorq	-128(%rbp), %rcx
	shrq	$9, %rcx
	orq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	xorq	-136(%rbp), %rax
	shlq	$39, %rax
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	xorq	-136(%rbp), %rcx
	shrq	$25, %rcx
	orq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-40(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 160(%rcx)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-48(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 168(%rcx)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-56(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 176(%rcx)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-24(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 184(%rcx)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rcx
	xorq	$-1, %rcx
	andq	-32(%rbp), %rcx
	xorq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 192(%rcx)
## %bb.3:                               ##   in Loop: Header=BB85_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	LBB85_1
LBB85_4:
	addq	$8, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function hash_step_vformat
_hash_step_vformat:                     ## @hash_step_vformat
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$520, %rsp              ## imm = 0x208
	.cfi_offset %rbx, -24
	testb	%al, %al
	movaps	%xmm7, -336(%rbp)       ## 16-byte Spill
	movaps	%xmm6, -352(%rbp)       ## 16-byte Spill
	movaps	%xmm5, -368(%rbp)       ## 16-byte Spill
	movaps	%xmm4, -384(%rbp)       ## 16-byte Spill
	movaps	%xmm3, -400(%rbp)       ## 16-byte Spill
	movaps	%xmm2, -416(%rbp)       ## 16-byte Spill
	movaps	%xmm1, -432(%rbp)       ## 16-byte Spill
	movaps	%xmm0, -448(%rbp)       ## 16-byte Spill
	movq	%r9, -456(%rbp)         ## 8-byte Spill
	movq	%r8, -464(%rbp)         ## 8-byte Spill
	movq	%rcx, -472(%rbp)        ## 8-byte Spill
	movq	%rdx, -480(%rbp)        ## 8-byte Spill
	movq	%rsi, -488(%rbp)        ## 8-byte Spill
	movq	%rdi, -496(%rbp)        ## 8-byte Spill
	je	LBB86_4
## %bb.3:
	movaps	-448(%rbp), %xmm0       ## 16-byte Reload
	movaps	%xmm0, -272(%rbp)
	movaps	-432(%rbp), %xmm1       ## 16-byte Reload
	movaps	%xmm1, -256(%rbp)
	movaps	-416(%rbp), %xmm2       ## 16-byte Reload
	movaps	%xmm2, -240(%rbp)
	movaps	-400(%rbp), %xmm3       ## 16-byte Reload
	movaps	%xmm3, -224(%rbp)
	movaps	-384(%rbp), %xmm4       ## 16-byte Reload
	movaps	%xmm4, -208(%rbp)
	movaps	-368(%rbp), %xmm5       ## 16-byte Reload
	movaps	%xmm5, -192(%rbp)
	movaps	-352(%rbp), %xmm6       ## 16-byte Reload
	movaps	%xmm6, -176(%rbp)
	movaps	-336(%rbp), %xmm7       ## 16-byte Reload
	movaps	%xmm7, -160(%rbp)
LBB86_4:
	movq	-456(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -280(%rbp)
	movq	-464(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -288(%rbp)
	movq	-472(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -296(%rbp)
	movq	-480(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -304(%rbp)
	leaq	-48(%rbp), %rdi
	leaq	-112(%rbp), %rsi
	movq	___stack_chk_guard@GOTPCREL(%rip), %r8
	movq	(%r8), %r8
	movq	%r8, -16(%rbp)
	movq	-496(%rbp), %r8         ## 8-byte Reload
	movq	%r8, -120(%rbp)
	movq	-488(%rbp), %r9         ## 8-byte Reload
	movq	%r9, -128(%rbp)
	movq	%rdi, %r10
	leaq	-320(%rbp), %r11
	movq	%r11, 16(%r10)
	leaq	16(%rbp), %r11
	movq	%r11, 8(%r10)
	movl	$48, 4(%r10)
	movl	$16, (%r10)
	movq	-128(%rbp), %rdx
	movl	$50, %ebx
	movq	%rdi, -504(%rbp)        ## 8-byte Spill
	movl	%ebx, %edi
	movq	-504(%rbp), %rcx        ## 8-byte Reload
	callq	_sqlite3_vsnprintf
	leaq	-112(%rbp), %rcx
	leaq	-48(%rbp), %rdx
	movq	%rcx, %rdi
	movq	%rax, -512(%rbp)        ## 8-byte Spill
	movq	%rcx, -520(%rbp)        ## 8-byte Spill
	movq	%rdx, -528(%rbp)        ## 8-byte Spill
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -132(%rbp)
	movq	-120(%rbp), %rdi
	movl	-132(%rbp), %edx
	movq	-520(%rbp), %rsi        ## 8-byte Reload
	callq	_SHA3Update
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-16(%rbp), %rsi
	cmpq	%rsi, %rcx
	jne	LBB86_2
## %bb.1:
	addq	$520, %rsp              ## imm = 0x208
	popq	%rbx
	popq	%rbp
	retq
LBB86_2:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function readFileContents
_readFileContents:                      ## @readFileContents
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdi
	leaq	L_.str.28(%rip), %rsi
	callq	_fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	LBB87_2
## %bb.1:
	jmp	LBB87_13
LBB87_2:
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	movl	$2, %edx
	callq	_fseek
	movq	-24(%rbp), %rdi
	movl	%eax, -56(%rbp)         ## 4-byte Spill
	callq	_ftell
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rdi
	callq	_rewind
	movq	-8(%rbp), %rdi
	callq	_sqlite3_context_db_handle
	xorl	%esi, %esi
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_limit
	movl	%eax, -52(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-52(%rbp), %rdi
	cmpq	%rdi, %rcx
	jle	LBB87_4
## %bb.3:
	movq	-8(%rbp), %rdi
	movl	$18, %esi
	callq	_sqlite3_result_error_code
	movq	-24(%rbp), %rdi
	callq	_fclose
	jmp	LBB87_13
LBB87_4:
	cmpq	$0, -32(%rbp)
	je	LBB87_6
## %bb.5:
	movq	-32(%rbp), %rax
	movq	%rax, -64(%rbp)         ## 8-byte Spill
	jmp	LBB87_7
LBB87_6:
	movl	$1, %eax
	movq	%rax, -64(%rbp)         ## 8-byte Spill
	jmp	LBB87_7
LBB87_7:
	movq	-64(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	LBB87_9
## %bb.8:
	movq	-8(%rbp), %rdi
	callq	_sqlite3_result_error_nomem
	movq	-24(%rbp), %rdi
	callq	_fclose
	jmp	LBB87_13
LBB87_9:
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movq	%rax, -72(%rbp)         ## 8-byte Spill
	callq	_fread
	movq	-72(%rbp), %rcx         ## 8-byte Reload
	cmpq	%rax, %rcx
	jne	LBB87_11
## %bb.10:
	movq	_sqlite3_free@GOTPCREL(%rip), %rcx
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	callq	_sqlite3_result_blob64
	jmp	LBB87_12
LBB87_11:
	movq	-8(%rbp), %rdi
	movl	$10, %esi
	callq	_sqlite3_result_error_code
	movq	-40(%rbp), %rdi
	callq	_sqlite3_free
LBB87_12:
	movq	-24(%rbp), %rdi
	callq	_fclose
LBB87_13:
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function writeFile
_writeFile:                             ## @writeFile
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$304, %rsp              ## imm = 0x130
                                        ## kill: def $cx killed $cx killed $ecx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -64(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -80(%rbp)
	movw	%cx, -82(%rbp)
	movq	%r8, -96(%rbp)
	cmpq	$0, -72(%rbp)
	jne	LBB88_2
## %bb.1:
	movl	$1, -52(%rbp)
	jmp	LBB88_36
LBB88_2:
	movzwl	-82(%rbp), %eax
	andl	$61440, %eax            ## imm = 0xF000
	cmpl	$40960, %eax            ## imm = 0xA000
	jne	LBB88_7
## %bb.3:
	movq	-80(%rbp), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -104(%rbp)
	cmpq	$0, -104(%rbp)
	je	LBB88_5
## %bb.4:
	movq	-104(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	_symlink
	cmpl	$0, %eax
	jge	LBB88_6
LBB88_5:
	movl	$1, -52(%rbp)
	jmp	LBB88_36
LBB88_6:
	jmp	LBB88_31
LBB88_7:
	movzwl	-82(%rbp), %eax
	andl	$61440, %eax            ## imm = 0xF000
	cmpl	$16384, %eax            ## imm = 0x4000
	jne	LBB88_17
## %bb.8:
	movq	-72(%rbp), %rdi
	movzwl	-82(%rbp), %esi
	callq	_mkdir
	cmpl	$0, %eax
	je	LBB88_16
## %bb.9:
	callq	___error
	cmpl	$17, (%rax)
	jne	LBB88_14
## %bb.10:
	movq	-72(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	callq	_fileStat
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jne	LBB88_14
## %bb.11:
	movzwl	-244(%rbp), %eax
	andl	$61440, %eax            ## imm = 0xF000
	cmpl	$16384, %eax            ## imm = 0x4000
	jne	LBB88_14
## %bb.12:
	movzwl	-244(%rbp), %eax
	andl	$511, %eax              ## imm = 0x1FF
	movzwl	-82(%rbp), %ecx
	andl	$511, %ecx              ## imm = 0x1FF
	cmpl	%ecx, %eax
	je	LBB88_15
## %bb.13:
	movq	-72(%rbp), %rdi
	movzwl	-82(%rbp), %eax
	andl	$511, %eax              ## imm = 0x1FF
                                        ## kill: def $ax killed $ax killed $eax
	movzwl	%ax, %esi
	callq	_chmod
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	je	LBB88_15
LBB88_14:
	movl	$1, -52(%rbp)
	jmp	LBB88_36
LBB88_15:
	jmp	LBB88_16
LBB88_16:
	jmp	LBB88_30
LBB88_17:
	movq	$0, -256(%rbp)
	movl	$0, -268(%rbp)
	movq	-72(%rbp), %rdi
	leaq	L_.str.115(%rip), %rsi
	callq	_fopen
	movq	%rax, -280(%rbp)
	cmpq	$0, -280(%rbp)
	jne	LBB88_19
## %bb.18:
	movl	$1, -52(%rbp)
	jmp	LBB88_36
LBB88_19:
	movq	-80(%rbp), %rdi
	callq	_sqlite3_value_blob
	movq	%rax, -264(%rbp)
	cmpq	$0, -264(%rbp)
	je	LBB88_23
## %bb.20:
	movq	-264(%rbp), %rdi
	movq	-80(%rbp), %rax
	movq	%rdi, -296(%rbp)        ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_value_bytes
	movslq	%eax, %rdx
	movq	-280(%rbp), %rcx
	movq	-296(%rbp), %rdi        ## 8-byte Reload
	movl	$1, %esi
	callq	_fwrite
	movq	%rax, -288(%rbp)
	movq	-80(%rbp), %rdi
	callq	_sqlite3_value_bytes
	movslq	%eax, %rcx
	movq	%rcx, -256(%rbp)
	movq	-256(%rbp), %rcx
	cmpq	-288(%rbp), %rcx
	je	LBB88_22
## %bb.21:
	movl	$1, -268(%rbp)
LBB88_22:
	jmp	LBB88_23
LBB88_23:
	movq	-280(%rbp), %rdi
	callq	_fclose
	cmpl	$0, -268(%rbp)
	jne	LBB88_27
## %bb.24:
	movzwl	-82(%rbp), %eax
	cmpl	$0, %eax
	je	LBB88_27
## %bb.25:
	movq	-72(%rbp), %rdi
	movzwl	-82(%rbp), %eax
	andl	$511, %eax              ## imm = 0x1FF
                                        ## kill: def $ax killed $ax killed $eax
	movzwl	%ax, %esi
	callq	_chmod
	cmpl	$0, %eax
	je	LBB88_27
## %bb.26:
	movl	$1, -268(%rbp)
LBB88_27:
	cmpl	$0, -268(%rbp)
	je	LBB88_29
## %bb.28:
	movl	$2, -52(%rbp)
	jmp	LBB88_36
LBB88_29:
	movq	-64(%rbp), %rdi
	movq	-256(%rbp), %rsi
	callq	_sqlite3_result_int64
LBB88_30:
	jmp	LBB88_31
LBB88_31:
	cmpq	$0, -96(%rbp)
	jl	LBB88_35
## %bb.32:
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	$0, -24(%rbp)
	movl	$0, -40(%rbp)
	callq	_time
	leaq	-48(%rbp), %rsi
	movq	%rax, -48(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-72(%rbp), %rdi
	callq	_utimes
	cmpl	$0, %eax
	je	LBB88_34
## %bb.33:
	movl	$1, -52(%rbp)
	jmp	LBB88_36
LBB88_34:
	jmp	LBB88_35
LBB88_35:
	movl	$0, -52(%rbp)
LBB88_36:
	movl	-52(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movl	%eax, -300(%rbp)        ## 4-byte Spill
	jne	LBB88_38
## %bb.37:
	movl	-300(%rbp), %eax        ## 4-byte Reload
	addq	$304, %rsp              ## imm = 0x130
	popq	%rbp
	retq
LBB88_38:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function makeDirectory
_makeDirectory:                         ## @makeDirectory
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rsi
	leaq	L_.str.79(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -16(%rbp)
	movl	$0, -20(%rbp)
	cmpq	$0, -16(%rbp)
	jne	LBB89_2
## %bb.1:
	movl	$7, -20(%rbp)
	jmp	LBB89_21
LBB89_2:
	movq	-16(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -24(%rbp)
	movl	$1, -28(%rbp)
LBB89_3:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB89_5 Depth 2
	cmpl	$0, -20(%rbp)
	jne	LBB89_20
## %bb.4:                               ##   in Loop: Header=BB89_3 Depth=1
	jmp	LBB89_5
LBB89_5:                                ##   Parent Loop BB89_3 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-16(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	cmpl	$47, %esi
	movb	%al, -181(%rbp)         ## 1-byte Spill
	je	LBB89_7
## %bb.6:                               ##   in Loop: Header=BB89_5 Depth=2
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	setl	%cl
	movb	%cl, -181(%rbp)         ## 1-byte Spill
LBB89_7:                                ##   in Loop: Header=BB89_5 Depth=2
	movb	-181(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB89_8
	jmp	LBB89_10
LBB89_8:                                ##   in Loop: Header=BB89_5 Depth=2
	jmp	LBB89_9
LBB89_9:                                ##   in Loop: Header=BB89_5 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB89_5
LBB89_10:                               ##   in Loop: Header=BB89_3 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	LBB89_12
## %bb.11:
	jmp	LBB89_20
LBB89_12:                               ##   in Loop: Header=BB89_3 Depth=1
	movq	-16(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	_fileStat
	movl	%eax, -180(%rbp)
	cmpl	$0, -180(%rbp)
	je	LBB89_16
## %bb.13:                              ##   in Loop: Header=BB89_3 Depth=1
	movq	-16(%rbp), %rdi
	movl	$511, %esi              ## imm = 0x1FF
	callq	_mkdir
	cmpl	$0, %eax
	je	LBB89_15
## %bb.14:                              ##   in Loop: Header=BB89_3 Depth=1
	movl	$1, -20(%rbp)
LBB89_15:                               ##   in Loop: Header=BB89_3 Depth=1
	jmp	LBB89_19
LBB89_16:                               ##   in Loop: Header=BB89_3 Depth=1
	movzwl	-172(%rbp), %eax
	andl	$61440, %eax            ## imm = 0xF000
	cmpl	$16384, %eax            ## imm = 0x4000
	je	LBB89_18
## %bb.17:                              ##   in Loop: Header=BB89_3 Depth=1
	movl	$1, -20(%rbp)
LBB89_18:                               ##   in Loop: Header=BB89_3 Depth=1
	jmp	LBB89_19
LBB89_19:                               ##   in Loop: Header=BB89_3 Depth=1
	movq	-16(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$47, (%rax,%rcx)
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movl	%edx, -28(%rbp)
	jmp	LBB89_3
LBB89_20:
	movq	-16(%rbp), %rdi
	callq	_sqlite3_free
LBB89_21:
	movl	-20(%rbp), %eax
	addq	$192, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function ctxErrorMsg
_ctxErrorMsg:                           ## @ctxErrorMsg
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$432, %rsp              ## imm = 0x1B0
	testb	%al, %al
	movaps	%xmm7, -256(%rbp)       ## 16-byte Spill
	movaps	%xmm6, -272(%rbp)       ## 16-byte Spill
	movaps	%xmm5, -288(%rbp)       ## 16-byte Spill
	movaps	%xmm4, -304(%rbp)       ## 16-byte Spill
	movaps	%xmm3, -320(%rbp)       ## 16-byte Spill
	movaps	%xmm2, -336(%rbp)       ## 16-byte Spill
	movaps	%xmm1, -352(%rbp)       ## 16-byte Spill
	movaps	%xmm0, -368(%rbp)       ## 16-byte Spill
	movq	%r9, -376(%rbp)         ## 8-byte Spill
	movq	%r8, -384(%rbp)         ## 8-byte Spill
	movq	%rcx, -392(%rbp)        ## 8-byte Spill
	movq	%rdx, -400(%rbp)        ## 8-byte Spill
	movq	%rsi, -408(%rbp)        ## 8-byte Spill
	movq	%rdi, -416(%rbp)        ## 8-byte Spill
	je	LBB90_4
## %bb.3:
	movaps	-368(%rbp), %xmm0       ## 16-byte Reload
	movaps	%xmm0, -192(%rbp)
	movaps	-352(%rbp), %xmm1       ## 16-byte Reload
	movaps	%xmm1, -176(%rbp)
	movaps	-336(%rbp), %xmm2       ## 16-byte Reload
	movaps	%xmm2, -160(%rbp)
	movaps	-320(%rbp), %xmm3       ## 16-byte Reload
	movaps	%xmm3, -144(%rbp)
	movaps	-304(%rbp), %xmm4       ## 16-byte Reload
	movaps	%xmm4, -128(%rbp)
	movaps	-288(%rbp), %xmm5       ## 16-byte Reload
	movaps	%xmm5, -112(%rbp)
	movaps	-272(%rbp), %xmm6       ## 16-byte Reload
	movaps	%xmm6, -96(%rbp)
	movaps	-256(%rbp), %xmm7       ## 16-byte Reload
	movaps	%xmm7, -80(%rbp)
LBB90_4:
	movq	-376(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -200(%rbp)
	movq	-384(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -208(%rbp)
	movq	-392(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -216(%rbp)
	movq	-400(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -224(%rbp)
	leaq	-32(%rbp), %rdi
	movq	___stack_chk_guard@GOTPCREL(%rip), %r8
	movq	(%r8), %r8
	movq	%r8, -8(%rbp)
	movq	-416(%rbp), %r8         ## 8-byte Reload
	movq	%r8, -40(%rbp)
	movq	-408(%rbp), %r9         ## 8-byte Reload
	movq	%r9, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	%rdi, %r10
	leaq	-240(%rbp), %r11
	movq	%r11, 16(%r10)
	leaq	16(%rbp), %r11
	movq	%r11, 8(%r10)
	movl	$48, 4(%r10)
	movl	$16, (%r10)
	movq	-48(%rbp), %r10
	movq	%rdi, -424(%rbp)        ## 8-byte Spill
	movq	%r10, %rdi
	movq	-424(%rbp), %rsi        ## 8-byte Reload
	callq	_sqlite3_vmprintf
	movq	%rax, -56(%rbp)
	movq	-40(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_error
	movq	-56(%rbp), %rdi
	callq	_sqlite3_free
	leaq	-32(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rsi
	cmpq	%rsi, %rcx
	jne	LBB90_2
## %bb.1:
	addq	$432, %rsp              ## imm = 0x1B0
	popq	%rbp
	retq
LBB90_2:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function fileStat
_fileStat:                              ## @fileStat
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_stat$INODE64
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function fsdirConnect
_fsdirConnect:                          ## @fsdirConnect
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -56(%rbp)
	movq	$0, -64(%rbp)
	movq	-16(%rbp), %rdi
	leaq	L_.str.117(%rip), %rsi
	callq	_sqlite3_declare_vtab
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	jne	LBB92_4
## %bb.1:
	movl	$24, %edi
	callq	_sqlite3_malloc
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	jne	LBB92_3
## %bb.2:
	movl	$7, -4(%rbp)
	jmp	LBB92_5
LBB92_3:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	movl	$24, %edx
	callq	___memset_chk
	movq	-16(%rbp), %rdi
	movl	$3, %esi
	movq	%rax, -80(%rbp)         ## 8-byte Spill
	movb	$0, %al
	callq	_sqlite3_vtab_config
LBB92_4:
	movq	-64(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	-68(%rbp), %edx
	movl	%edx, -4(%rbp)
LBB92_5:
	movl	-4(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3               ## -- Begin function fsdirBestIndex
LCPI93_0:
	.quad	4636737291354636288     ## double 100
LCPI93_1:
	.quad	4621819117588971520     ## double 10
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
_fsdirBestIndex:                        ## @fsdirBestIndex
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$-1, -32(%rbp)
	movl	$-1, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -28(%rbp)
LBB93_1:                                ## =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	LBB93_19
## %bb.2:                               ##   in Loop: Header=BB93_1 Depth=1
	movq	-56(%rbp), %rax
	movzbl	4(%rax), %ecx
	cmpl	$2, %ecx
	je	LBB93_4
## %bb.3:                               ##   in Loop: Header=BB93_1 Depth=1
	jmp	LBB93_18
LBB93_4:                                ##   in Loop: Header=BB93_1 Depth=1
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, %edx
	subl	$4, %edx
	movl	%ecx, -60(%rbp)         ## 4-byte Spill
	je	LBB93_5
	jmp	LBB93_30
LBB93_30:                               ##   in Loop: Header=BB93_1 Depth=1
	movl	-60(%rbp), %eax         ## 4-byte Reload
	subl	$5, %eax
	je	LBB93_11
	jmp	LBB93_17
LBB93_5:                                ##   in Loop: Header=BB93_1 Depth=1
	movq	-56(%rbp), %rax
	cmpb	$0, 5(%rax)
	je	LBB93_7
## %bb.6:                               ##   in Loop: Header=BB93_1 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -40(%rbp)
	jmp	LBB93_10
LBB93_7:                                ##   in Loop: Header=BB93_1 Depth=1
	cmpl	$0, -32(%rbp)
	jge	LBB93_9
## %bb.8:                               ##   in Loop: Header=BB93_1 Depth=1
	movl	$1, -40(%rbp)
LBB93_9:                                ##   in Loop: Header=BB93_1 Depth=1
	jmp	LBB93_10
LBB93_10:                               ##   in Loop: Header=BB93_1 Depth=1
	jmp	LBB93_17
LBB93_11:                               ##   in Loop: Header=BB93_1 Depth=1
	movq	-56(%rbp), %rax
	cmpb	$0, 5(%rax)
	je	LBB93_13
## %bb.12:                              ##   in Loop: Header=BB93_1 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -44(%rbp)
	jmp	LBB93_16
LBB93_13:                               ##   in Loop: Header=BB93_1 Depth=1
	cmpl	$0, -36(%rbp)
	jge	LBB93_15
## %bb.14:                              ##   in Loop: Header=BB93_1 Depth=1
	movl	$1, -44(%rbp)
LBB93_15:                               ##   in Loop: Header=BB93_1 Depth=1
	jmp	LBB93_16
LBB93_16:                               ##   in Loop: Header=BB93_1 Depth=1
	jmp	LBB93_17
LBB93_17:                               ##   in Loop: Header=BB93_1 Depth=1
	jmp	LBB93_18
LBB93_18:                               ##   in Loop: Header=BB93_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movq	-56(%rbp), %rcx
	addq	$12, %rcx
	movq	%rcx, -56(%rbp)
	jmp	LBB93_1
LBB93_19:
	cmpl	$0, -40(%rbp)
	jne	LBB93_21
## %bb.20:
	cmpl	$0, -44(%rbp)
	je	LBB93_22
LBB93_21:
	movl	$19, -4(%rbp)
	jmp	LBB93_29
LBB93_22:
	cmpl	$0, -32(%rbp)
	jge	LBB93_24
## %bb.23:
	movq	-24(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-24(%rbp), %rax
	movq	$2147483647, 72(%rax)   ## imm = 0x7FFFFFFF
	jmp	LBB93_28
LBB93_24:
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-32(%rbp), %rcx
	movb	$1, 4(%rax,%rcx,8)
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-32(%rbp), %rcx
	movl	$1, (%rax,%rcx,8)
	cmpl	$0, -36(%rbp)
	jl	LBB93_26
## %bb.25:
	movsd	LCPI93_1(%rip), %xmm0   ## xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-36(%rbp), %rcx
	movb	$1, 4(%rax,%rcx,8)
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	$2, (%rax,%rcx,8)
	movq	-24(%rbp), %rax
	movl	$2, 40(%rax)
	movq	-24(%rbp), %rax
	movsd	%xmm0, 64(%rax)
	jmp	LBB93_27
LBB93_26:
	movsd	LCPI93_0(%rip), %xmm0   ## xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	movl	$1, 40(%rax)
	movq	-24(%rbp), %rax
	movsd	%xmm0, 64(%rax)
LBB93_27:
	jmp	LBB93_28
LBB93_28:
	movl	$0, -4(%rbp)
LBB93_29:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function fsdirDisconnect
_fsdirDisconnect:                       ## @fsdirDisconnect
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	xorl	%eax, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function fsdirOpen
_fsdirOpen:                             ## @fsdirOpen
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$200, %edi
	callq	_sqlite3_malloc
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	LBB95_2
## %bb.1:
	movl	$7, -4(%rbp)
	jmp	LBB95_3
LBB95_2:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	movl	$200, %edx
	callq	___memset_chk
	movq	-32(%rbp), %rcx
	movl	$-1, 12(%rcx)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	%rcx, (%rdx)
	movl	$0, -4(%rbp)
LBB95_3:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function fsdirClose
_fsdirClose:                            ## @fsdirClose
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	_fsdirResetCursor
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	xorl	%eax, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function fsdirFilter
_fsdirFilter:                           ## @fsdirFilter
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movq	%r8, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	_fsdirResetCursor
	cmpl	$0, -20(%rbp)
	jne	LBB97_2
## %bb.1:
	movq	-64(%rbp), %rdi
	leaq	L_.str.118(%rip), %rsi
	movb	$0, %al
	callq	_fsdirSetErrmsg
	movl	$1, -4(%rbp)
	jmp	LBB97_21
LBB97_2:
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-36(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	movb	%al, -65(%rbp)          ## 1-byte Spill
	jne	LBB97_6
## %bb.3:
	cmpl	$1, -36(%rbp)
	movb	$1, %al
	movb	%al, -66(%rbp)          ## 1-byte Spill
	je	LBB97_5
## %bb.4:
	cmpl	$2, -36(%rbp)
	sete	%al
	movb	%al, -66(%rbp)          ## 1-byte Spill
LBB97_5:
	movb	-66(%rbp), %al          ## 1-byte Reload
	movb	%al, -65(%rbp)          ## 1-byte Spill
LBB97_6:
	movb	-65(%rbp), %al          ## 1-byte Reload
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movslq	%ecx, %rdx
	cmpq	$0, %rdx
	je	LBB97_8
## %bb.7:
	leaq	L___func__.fsdirFilter(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.119(%rip), %rcx
	movl	$2964, %edx             ## imm = 0xB94
	callq	___assert_rtn
LBB97_8:
	jmp	LBB97_9
LBB97_9:
	movq	-48(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	LBB97_11
## %bb.10:
	movq	-64(%rbp), %rdi
	leaq	L_.str.120(%rip), %rsi
	movb	$0, %al
	callq	_fsdirSetErrmsg
	movl	$1, -4(%rbp)
	jmp	LBB97_21
LBB97_11:
	cmpl	$2, -36(%rbp)
	jne	LBB97_13
## %bb.12:
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_text
	movq	-64(%rbp), %rcx
	movq	%rax, 24(%rcx)
LBB97_13:
	movq	-64(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	LBB97_15
## %bb.14:
	movq	-64(%rbp), %rax
	movq	24(%rax), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	addl	$1, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-64(%rbp), %rcx
	movq	24(%rcx), %rsi
	movq	-56(%rbp), %rdx
	leaq	L_.str.121(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-64(%rbp), %rcx
	movq	%rax, 184(%rcx)
	jmp	LBB97_16
LBB97_15:
	movq	-56(%rbp), %rsi
	leaq	L_.str.79(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-64(%rbp), %rcx
	movq	%rax, 184(%rcx)
LBB97_16:
	movq	-64(%rbp), %rax
	cmpq	$0, 184(%rax)
	jne	LBB97_18
## %bb.17:
	movl	$7, -4(%rbp)
	jmp	LBB97_21
LBB97_18:
	movq	-64(%rbp), %rax
	movq	184(%rax), %rdi
	movq	-64(%rbp), %rax
	addq	$40, %rax
	movq	%rax, %rsi
	callq	_fileLinkStat
	cmpl	$0, %eax
	je	LBB97_20
## %bb.19:
	movq	-64(%rbp), %rdi
	movq	-64(%rbp), %rax
	movq	184(%rax), %rdx
	leaq	L_.str.122(%rip), %rsi
	movb	$0, %al
	callq	_fsdirSetErrmsg
	movl	$1, -4(%rbp)
	jmp	LBB97_21
LBB97_20:
	movl	$0, -4(%rbp)
LBB97_21:
	movl	-4(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function fsdirNext
_fsdirNext:                             ## @fsdirNext
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movw	44(%rax), %cx
	movw	%cx, -26(%rbp)
	movq	-24(%rbp), %rax
	movq	192(%rax), %rdx
	addq	$1, %rdx
	movq	%rdx, 192(%rax)
	movzwl	-26(%rbp), %esi
	andl	$61440, %esi            ## imm = 0xF000
	cmpl	$16384, %esi            ## imm = 0x4000
	jne	LBB98_8
## %bb.1:
	movq	-24(%rbp), %rax
	movl	12(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, -32(%rbp)
	movl	-32(%rbp), %ecx
	movq	-24(%rbp), %rax
	cmpl	8(%rax), %ecx
	jl	LBB98_5
## %bb.2:
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	movslq	-44(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rcx, -56(%rbp)
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	-56(%rbp), %rsi
	movq	%rcx, %rdi
	callq	_sqlite3_realloc64
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	jne	LBB98_4
## %bb.3:
	movl	$7, -4(%rbp)
	jmp	LBB98_25
LBB98_4:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-64(%rbp), %rax
	movq	-24(%rbp), %rdx
	movslq	8(%rdx), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	-44(%rbp), %edi
	movq	-24(%rbp), %rdx
	subl	8(%rdx), %edi
	movslq	%edi, %rdx
	shlq	$4, %rdx
	movq	%rax, %rdi
	callq	___memset_chk
	movq	-64(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	%rcx, 16(%rdx)
	movl	-44(%rbp), %esi
	movq	-24(%rbp), %rcx
	movl	%esi, 8(%rcx)
LBB98_5:
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -40(%rbp)
	movq	-24(%rbp), %rcx
	movq	184(%rcx), %rcx
	movq	-40(%rbp), %rdx
	movq	%rcx, 8(%rdx)
	movq	-24(%rbp), %rcx
	movq	$0, 184(%rcx)
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rdi
	callq	_opendir$INODE64
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	cmpq	$0, (%rax)
	jne	LBB98_7
## %bb.6:
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	184(%rax), %rdx
	leaq	L_.str.123(%rip), %rsi
	movb	$0, %al
	callq	_fsdirSetErrmsg
	movl	$1, -4(%rbp)
	jmp	LBB98_25
LBB98_7:
	jmp	LBB98_8
LBB98_8:
	jmp	LBB98_9
LBB98_9:                                ## =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 12(%rax)
	jl	LBB98_24
## %bb.10:                              ##   in Loop: Header=BB98_9 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	12(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	(%rax), %rdi
	callq	_readdir$INODE64
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	je	LBB98_23
## %bb.11:                              ##   in Loop: Header=BB98_9 Depth=1
	movq	-80(%rbp), %rax
	movsbl	21(%rax), %ecx
	cmpl	$46, %ecx
	jne	LBB98_18
## %bb.12:                              ##   in Loop: Header=BB98_9 Depth=1
	movq	-80(%rbp), %rax
	movsbl	22(%rax), %ecx
	cmpl	$46, %ecx
	jne	LBB98_15
## %bb.13:                              ##   in Loop: Header=BB98_9 Depth=1
	movq	-80(%rbp), %rax
	movsbl	23(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB98_15
## %bb.14:                              ##   in Loop: Header=BB98_9 Depth=1
	jmp	LBB98_9
LBB98_15:                               ##   in Loop: Header=BB98_9 Depth=1
	movq	-80(%rbp), %rax
	movsbl	22(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB98_17
## %bb.16:                              ##   in Loop: Header=BB98_9 Depth=1
	jmp	LBB98_9
LBB98_17:
	jmp	LBB98_18
LBB98_18:
	movq	-24(%rbp), %rax
	movq	184(%rax), %rdi
	callq	_sqlite3_free
	movq	-72(%rbp), %rax
	movq	8(%rax), %rsi
	movq	-80(%rbp), %rax
	addq	$21, %rax
	leaq	L_.str.121(%rip), %rdi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-24(%rbp), %rcx
	movq	%rax, 184(%rcx)
	movq	-24(%rbp), %rax
	cmpq	$0, 184(%rax)
	jne	LBB98_20
## %bb.19:
	movl	$7, -4(%rbp)
	jmp	LBB98_25
LBB98_20:
	movq	-24(%rbp), %rax
	movq	184(%rax), %rdi
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, %rsi
	callq	_fileLinkStat
	cmpl	$0, %eax
	je	LBB98_22
## %bb.21:
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	184(%rax), %rdx
	leaq	L_.str.122(%rip), %rsi
	movb	$0, %al
	callq	_fsdirSetErrmsg
	movl	$1, -4(%rbp)
	jmp	LBB98_25
LBB98_22:
	movl	$0, -4(%rbp)
	jmp	LBB98_25
LBB98_23:                               ##   in Loop: Header=BB98_9 Depth=1
	movq	-72(%rbp), %rax
	movq	(%rax), %rdi
	callq	_closedir
	movq	-72(%rbp), %rcx
	movq	8(%rcx), %rdi
	movl	%eax, -84(%rbp)         ## 4-byte Spill
	callq	_sqlite3_free
	movq	-72(%rbp), %rcx
	movq	$0, (%rcx)
	movq	-72(%rbp), %rcx
	movq	$0, 8(%rcx)
	movq	-24(%rbp), %rcx
	movl	12(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, 12(%rcx)
	jmp	LBB98_9
LBB98_24:
	movq	-24(%rbp), %rax
	movq	184(%rax), %rdi
	callq	_sqlite3_free
	movq	-24(%rbp), %rax
	movq	$0, 184(%rax)
	movl	$0, -4(%rbp)
LBB98_25:
	movl	-4(%rbp), %eax
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function fsdirEof
_fsdirEof:                              ## @fsdirEof
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 184(%rax)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function fsdirColumn
_fsdirColumn:                           ## @fsdirColumn
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -96(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -108(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -120(%rbp)
	movl	-108(%rbp), %ecx
	movl	%ecx, %eax
	movq	%rax, %rsi
	subq	$4, %rsi
	movq	%rax, -160(%rbp)        ## 8-byte Spill
	ja	LBB100_22
## %bb.27:
	leaq	LJTI100_0(%rip), %rax
	movq	-160(%rbp), %rcx        ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB100_1:
	movq	-104(%rbp), %rdi
	movq	-120(%rbp), %rax
	movq	184(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	32(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	movq	$-1, %rcx
	callq	_sqlite3_result_text
	jmp	LBB100_23
LBB100_2:
	movq	-104(%rbp), %rdi
	movq	-120(%rbp), %rax
	movzwl	44(%rax), %ecx
	movl	%ecx, %esi
	callq	_sqlite3_result_int64
	jmp	LBB100_23
LBB100_3:
	movq	-104(%rbp), %rdi
	movq	-120(%rbp), %rax
	movq	88(%rax), %rsi
	callq	_sqlite3_result_int64
	jmp	LBB100_23
LBB100_4:
	movq	-120(%rbp), %rax
	movw	44(%rax), %cx
	movw	%cx, -122(%rbp)
	movzwl	-122(%rbp), %edx
	andl	$61440, %edx            ## imm = 0xF000
	cmpl	$16384, %edx            ## imm = 0x4000
	jne	LBB100_6
## %bb.5:
	movq	-104(%rbp), %rdi
	callq	_sqlite3_result_null
	jmp	LBB100_20
LBB100_6:
	movzwl	-122(%rbp), %eax
	andl	$61440, %eax            ## imm = 0xF000
	cmpl	$40960, %eax            ## imm = 0xA000
	jne	LBB100_18
## %bb.7:
	leaq	-80(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	$64, -144(%rbp)
LBB100_8:                               ## =>This Inner Loop Header: Depth=1
	movq	-120(%rbp), %rax
	movq	184(%rax), %rdi
	movq	-136(%rbp), %rsi
	movq	-144(%rbp), %rdx
	callq	_readlink
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -148(%rbp)
	movslq	-148(%rbp), %rcx
	cmpq	-144(%rbp), %rcx
	jge	LBB100_10
## %bb.9:
	jmp	LBB100_15
LBB100_10:                              ##   in Loop: Header=BB100_8 Depth=1
	leaq	-80(%rbp), %rax
	movq	-136(%rbp), %rcx
	cmpq	%rax, %rcx
	je	LBB100_12
## %bb.11:                              ##   in Loop: Header=BB100_8 Depth=1
	movq	-136(%rbp), %rdi
	callq	_sqlite3_free
LBB100_12:                              ##   in Loop: Header=BB100_8 Depth=1
	movq	-144(%rbp), %rax
	shlq	$1, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -136(%rbp)
	cmpq	$0, -136(%rbp)
	jne	LBB100_14
## %bb.13:
	movq	-104(%rbp), %rdi
	callq	_sqlite3_result_error_nomem
	movl	$7, -84(%rbp)
	jmp	LBB100_24
LBB100_14:                              ##   in Loop: Header=BB100_8 Depth=1
	jmp	LBB100_8
LBB100_15:
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	movl	-148(%rbp), %edx
	movq	$-1, %rcx
	callq	_sqlite3_result_text
	leaq	-80(%rbp), %rax
	movq	-136(%rbp), %rcx
	cmpq	%rax, %rcx
	je	LBB100_17
## %bb.16:
	movq	-136(%rbp), %rdi
	callq	_sqlite3_free
LBB100_17:
	jmp	LBB100_19
LBB100_18:
	movq	-104(%rbp), %rdi
	movq	-120(%rbp), %rax
	movq	184(%rax), %rsi
	callq	_readFileContents
LBB100_19:
	jmp	LBB100_20
LBB100_20:
	jmp	LBB100_21
LBB100_21:
	jmp	LBB100_22
LBB100_22:
	jmp	LBB100_23
LBB100_23:
	movl	$0, -84(%rbp)
LBB100_24:
	movl	-84(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movl	%eax, -164(%rbp)        ## 4-byte Spill
	jne	LBB100_26
## %bb.25:
	movl	-164(%rbp), %eax        ## 4-byte Reload
	addq	$176, %rsp
	popq	%rbp
	retq
LBB100_26:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L100_0_set_1, LBB100_1-LJTI100_0
.set L100_0_set_2, LBB100_2-LJTI100_0
.set L100_0_set_3, LBB100_3-LJTI100_0
.set L100_0_set_4, LBB100_4-LJTI100_0
.set L100_0_set_21, LBB100_21-LJTI100_0
LJTI100_0:
	.long	L100_0_set_1
	.long	L100_0_set_2
	.long	L100_0_set_3
	.long	L100_0_set_4
	.long	L100_0_set_21
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function fsdirRowid
_fsdirRowid:                            ## @fsdirRowid
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, (%rdx)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function fsdirResetCursor
_fsdirResetCursor:                      ## @fsdirResetCursor
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	$0, -12(%rbp)
LBB102_1:                               ## =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jg	LBB102_6
## %bb.2:                               ##   in Loop: Header=BB102_1 Depth=1
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpq	$0, (%rax)
	je	LBB102_4
## %bb.3:                               ##   in Loop: Header=BB102_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_closedir
LBB102_4:                               ##   in Loop: Header=BB102_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_free
## %bb.5:                               ##   in Loop: Header=BB102_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	LBB102_1
LBB102_6:
	movq	-8(%rbp), %rax
	movq	184(%rax), %rdi
	callq	_sqlite3_free
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	movq	-8(%rbp), %rax
	movq	$0, 16(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 184(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$-1, 12(%rax)
	movq	-8(%rbp), %rax
	movq	$1, 192(%rax)
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function fsdirSetErrmsg
_fsdirSetErrmsg:                        ## @fsdirSetErrmsg
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$416, %rsp              ## imm = 0x1A0
	testb	%al, %al
	movaps	%xmm7, -240(%rbp)       ## 16-byte Spill
	movaps	%xmm6, -256(%rbp)       ## 16-byte Spill
	movaps	%xmm5, -272(%rbp)       ## 16-byte Spill
	movaps	%xmm4, -288(%rbp)       ## 16-byte Spill
	movaps	%xmm3, -304(%rbp)       ## 16-byte Spill
	movaps	%xmm2, -320(%rbp)       ## 16-byte Spill
	movaps	%xmm1, -336(%rbp)       ## 16-byte Spill
	movaps	%xmm0, -352(%rbp)       ## 16-byte Spill
	movq	%r9, -360(%rbp)         ## 8-byte Spill
	movq	%r8, -368(%rbp)         ## 8-byte Spill
	movq	%rcx, -376(%rbp)        ## 8-byte Spill
	movq	%rdx, -384(%rbp)        ## 8-byte Spill
	movq	%rsi, -392(%rbp)        ## 8-byte Spill
	movq	%rdi, -400(%rbp)        ## 8-byte Spill
	je	LBB103_4
## %bb.3:
	movaps	-352(%rbp), %xmm0       ## 16-byte Reload
	movaps	%xmm0, -176(%rbp)
	movaps	-336(%rbp), %xmm1       ## 16-byte Reload
	movaps	%xmm1, -160(%rbp)
	movaps	-320(%rbp), %xmm2       ## 16-byte Reload
	movaps	%xmm2, -144(%rbp)
	movaps	-304(%rbp), %xmm3       ## 16-byte Reload
	movaps	%xmm3, -128(%rbp)
	movaps	-288(%rbp), %xmm4       ## 16-byte Reload
	movaps	%xmm4, -112(%rbp)
	movaps	-272(%rbp), %xmm5       ## 16-byte Reload
	movaps	%xmm5, -96(%rbp)
	movaps	-256(%rbp), %xmm6       ## 16-byte Reload
	movaps	%xmm6, -80(%rbp)
	movaps	-240(%rbp), %xmm7       ## 16-byte Reload
	movaps	%xmm7, -64(%rbp)
LBB103_4:
	movq	-360(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -184(%rbp)
	movq	-368(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -192(%rbp)
	movq	-376(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -200(%rbp)
	movq	-384(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -208(%rbp)
	leaq	-32(%rbp), %rdi
	movq	___stack_chk_guard@GOTPCREL(%rip), %r8
	movq	(%r8), %r8
	movq	%r8, -8(%rbp)
	movq	-400(%rbp), %r8         ## 8-byte Reload
	movq	%r8, -40(%rbp)
	movq	-392(%rbp), %r9         ## 8-byte Reload
	movq	%r9, -48(%rbp)
	movq	%rdi, %r10
	leaq	-224(%rbp), %r11
	movq	%r11, 16(%r10)
	leaq	16(%rbp), %r11
	movq	%r11, 8(%r10)
	movl	$48, 4(%r10)
	movl	$16, (%r10)
	movq	-48(%rbp), %r10
	movq	%rdi, -408(%rbp)        ## 8-byte Spill
	movq	%r10, %rdi
	movq	-408(%rbp), %rsi        ## 8-byte Reload
	callq	_sqlite3_vmprintf
	leaq	-32(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rax, 16(%rdx)
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rax
	jne	LBB103_2
## %bb.1:
	addq	$416, %rsp              ## imm = 0x1A0
	popq	%rbp
	retq
LBB103_2:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function fileLinkStat
_fileLinkStat:                          ## @fileLinkStat
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	_lstat$INODE64
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function completionConnect
_completionConnect:                     ## @completionConnect
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -56(%rbp)
	movq	-16(%rbp), %rdi
	movl	$2, %esi
	movb	$0, %al
	callq	_sqlite3_vtab_config
	movq	-16(%rbp), %rdi
	leaq	L_.str.124(%rip), %rsi
	movl	%eax, -72(%rbp)         ## 4-byte Spill
	callq	_sqlite3_declare_vtab
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	jne	LBB105_4
## %bb.1:
	movl	$32, %edi
	callq	_sqlite3_malloc
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	cmpq	$0, -64(%rbp)
	jne	LBB105_3
## %bb.2:
	movl	$7, -4(%rbp)
	jmp	LBB105_5
LBB105_3:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	movl	$32, %edx
	callq	___memset_chk
	movq	-16(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movq	%rcx, 24(%rdx)
LBB105_4:
	movl	-68(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB105_5:
	movl	-4(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3               ## -- Begin function completionBestIndex
LCPI106_0:
	.quad	4662219572839972864     ## double 5000
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
_completionBestIndex:                   ## @completionBestIndex
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, -24(%rbp)
	movl	$-1, -28(%rbp)
	movl	$-1, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -20(%rbp)
LBB106_1:                               ## =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	LBB106_11
## %bb.2:                               ##   in Loop: Header=BB106_1 Depth=1
	movq	-48(%rbp), %rax
	movzbl	5(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB106_4
## %bb.3:                               ##   in Loop: Header=BB106_1 Depth=1
	jmp	LBB106_10
LBB106_4:                               ##   in Loop: Header=BB106_1 Depth=1
	movq	-48(%rbp), %rax
	movzbl	4(%rax), %ecx
	cmpl	$2, %ecx
	je	LBB106_6
## %bb.5:                               ##   in Loop: Header=BB106_1 Depth=1
	jmp	LBB106_10
LBB106_6:                               ##   in Loop: Header=BB106_1 Depth=1
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, %edx
	subl	$1, %edx
	movl	%ecx, -52(%rbp)         ## 4-byte Spill
	je	LBB106_7
	jmp	LBB106_16
LBB106_16:                              ##   in Loop: Header=BB106_1 Depth=1
	movl	-52(%rbp), %eax         ## 4-byte Reload
	subl	$2, %eax
	je	LBB106_8
	jmp	LBB106_9
LBB106_7:                               ##   in Loop: Header=BB106_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	LBB106_9
LBB106_8:                               ##   in Loop: Header=BB106_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	orl	$2, %eax
	movl	%eax, -24(%rbp)
LBB106_9:                               ##   in Loop: Header=BB106_1 Depth=1
	jmp	LBB106_10
LBB106_10:                              ##   in Loop: Header=BB106_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movq	-48(%rbp), %rcx
	addq	$12, %rcx
	movq	%rcx, -48(%rbp)
	jmp	LBB106_1
LBB106_11:
	cmpl	$0, -28(%rbp)
	jl	LBB106_13
## %bb.12:
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movb	$1, 4(%rcx,%rdx,8)
LBB106_13:
	cmpl	$0, -32(%rbp)
	jl	LBB106_15
## %bb.14:
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movb	$1, 4(%rcx,%rdx,8)
LBB106_15:
	xorl	%eax, %eax
	movsd	LCPI106_0(%rip), %xmm0  ## xmm0 = mem[0],zero
	movl	-24(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 40(%rdx)
	imull	$1000, -36(%rbp), %ecx  ## imm = 0x3E8
	cvtsi2sd	%ecx, %xmm1
	subsd	%xmm1, %xmm0
	movq	-16(%rbp), %rdx
	movsd	%xmm0, 64(%rdx)
	imull	$100, -36(%rbp), %ecx
	movl	$500, %esi              ## imm = 0x1F4
	subl	%ecx, %esi
	movslq	%esi, %rdx
	movq	-16(%rbp), %rdi
	movq	%rdx, 72(%rdi)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function completionDisconnect
_completionDisconnect:                  ## @completionDisconnect
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	xorl	%eax, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function completionOpen
_completionOpen:                        ## @completionOpen
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$80, %edi
	callq	_sqlite3_malloc
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	LBB108_2
## %bb.1:
	movl	$7, -4(%rbp)
	jmp	LBB108_3
LBB108_2:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	movl	$80, %edx
	callq	___memset_chk
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movq	-32(%rbp), %rdx
	movq	%rcx, 8(%rdx)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	%rcx, (%rdx)
	movl	$0, -4(%rbp)
LBB108_3:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function completionClose
_completionClose:                       ## @completionClose
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	callq	_completionCursorReset
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	xorl	%eax, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function completionFilter
_completionFilter:                      ## @completionFilter
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movq	%r8, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -60(%rbp)
	movq	-56(%rbp), %rdi
	callq	_completionCursorReset
	movl	-20(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	LBB110_6
## %bb.1:
	movq	-48(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_sqlite3_value_bytes
	movq	-56(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-56(%rbp), %rcx
	cmpl	$0, 16(%rcx)
	jle	LBB110_5
## %bb.2:
	movq	-48(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_sqlite3_value_text
	leaq	L_.str.79(%rip), %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-56(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-56(%rbp), %rax
	cmpq	$0, 24(%rax)
	jne	LBB110_4
## %bb.3:
	movl	$7, -4(%rbp)
	jmp	LBB110_27
LBB110_4:
	jmp	LBB110_5
LBB110_5:
	movl	$1, -60(%rbp)
LBB110_6:
	movl	-20(%rbp), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	LBB110_12
## %bb.7:
	movq	-48(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_sqlite3_value_bytes
	movq	-56(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-56(%rbp), %rcx
	cmpl	$0, 20(%rcx)
	jle	LBB110_11
## %bb.8:
	movq	-48(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_sqlite3_value_text
	leaq	L_.str.79(%rip), %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-56(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-56(%rbp), %rax
	cmpq	$0, 32(%rax)
	jne	LBB110_10
## %bb.9:
	movl	$7, -4(%rbp)
	jmp	LBB110_27
LBB110_10:
	jmp	LBB110_11
LBB110_11:
	jmp	LBB110_12
LBB110_12:
	movq	-56(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	LBB110_26
## %bb.13:
	movq	-56(%rbp), %rax
	cmpq	$0, 24(%rax)
	jne	LBB110_26
## %bb.14:
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	movl	%ecx, -64(%rbp)
LBB110_15:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -64(%rbp)
	movb	%al, -65(%rbp)          ## 1-byte Spill
	jle	LBB110_19
## %bb.16:                              ##   in Loop: Header=BB110_15 Depth=1
	movq	-56(%rbp), %rax
	movq	32(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %edi
	callq	_isalnum
	cmpl	$0, %eax
	movb	$1, %sil
	movb	%sil, -66(%rbp)         ## 1-byte Spill
	jne	LBB110_18
## %bb.17:                              ##   in Loop: Header=BB110_15 Depth=1
	movq	-56(%rbp), %rax
	movq	32(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$95, %ecx
	sete	%sil
	movb	%sil, -66(%rbp)         ## 1-byte Spill
LBB110_18:                              ##   in Loop: Header=BB110_15 Depth=1
	movb	-66(%rbp), %al          ## 1-byte Reload
	movb	%al, -65(%rbp)          ## 1-byte Spill
LBB110_19:                              ##   in Loop: Header=BB110_15 Depth=1
	movb	-65(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB110_20
	jmp	LBB110_21
LBB110_20:                              ##   in Loop: Header=BB110_15 Depth=1
	movl	-64(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -64(%rbp)
	jmp	LBB110_15
LBB110_21:
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	subl	-64(%rbp), %ecx
	movq	-56(%rbp), %rax
	movl	%ecx, 16(%rax)
	movq	-56(%rbp), %rax
	cmpl	$0, 16(%rax)
	jle	LBB110_25
## %bb.22:
	movq	-56(%rbp), %rax
	movl	16(%rax), %esi
	movq	-56(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-64(%rbp), %rcx
	addq	%rcx, %rax
	leaq	L_.str.125(%rip), %rdi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-56(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-56(%rbp), %rax
	cmpq	$0, 24(%rax)
	jne	LBB110_24
## %bb.23:
	movl	$7, -4(%rbp)
	jmp	LBB110_27
LBB110_24:
	jmp	LBB110_25
LBB110_25:
	jmp	LBB110_26
LBB110_26:
	movq	-56(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-56(%rbp), %rax
	movl	$1, 72(%rax)
	movq	-16(%rbp), %rdi
	callq	_completionNext
	movl	%eax, -4(%rbp)
LBB110_27:
	movl	-4(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function completionNext
_completionNext:                        ## @completionNext
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -28(%rbp)
	movl	$-1, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	64(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 64(%rax)
LBB111_1:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB111_20 Depth 2
                                        ##     Child Loop BB111_12 Depth 2
	movq	-24(%rbp), %rax
	cmpl	$11, 72(%rax)
	je	LBB111_40
## %bb.2:                               ##   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	movl	72(%rax), %ecx
	decl	%ecx
	movl	%ecx, %eax
	subl	$8, %ecx
	movq	%rax, -104(%rbp)        ## 8-byte Spill
	ja	LBB111_26
## %bb.42:                              ##   in Loop: Header=BB111_1 Depth=1
	leaq	LJTI111_0(%rip), %rax
	movq	-104(%rbp), %rcx        ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB111_3:                               ##   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	movl	76(%rax), %ecx
	movl	%ecx, -108(%rbp)        ## 4-byte Spill
	callq	_sqlite3_keyword_count
	movl	-108(%rbp), %ecx        ## 4-byte Reload
	cmpl	%eax, %ecx
	jl	LBB111_5
## %bb.4:                               ##   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$7, 72(%rax)
	jmp	LBB111_6
LBB111_5:                               ##   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	movl	76(%rax), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, 76(%rax)
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	-24(%rbp), %rsi
	addq	$48, %rsi
	movl	%ecx, %edi
	movq	%rsi, -120(%rbp)        ## 8-byte Spill
	movq	%rax, %rsi
	movq	-120(%rbp), %rdx        ## 8-byte Reload
	callq	_sqlite3_keyword_name
LBB111_6:                               ##   in Loop: Header=BB111_1 Depth=1
	movl	$-1, -32(%rbp)
	jmp	LBB111_26
LBB111_7:                               ##   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	LBB111_9
## %bb.8:                               ##   in Loop: Header=BB111_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rdi
	movq	-24(%rbp), %rcx
	addq	$56, %rcx
	leaq	L_.str.126(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_prepare_v2
LBB111_9:                               ##   in Loop: Header=BB111_1 Depth=1
	movl	$1, -32(%rbp)
	movl	$8, -28(%rbp)
	jmp	LBB111_26
LBB111_10:                              ##   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	LBB111_17
## %bb.11:                              ##   in Loop: Header=BB111_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	$0, -48(%rbp)
	leaq	L_.str.27(%rip), %rcx
	movq	%rcx, -56(%rbp)
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rdi
	leaq	L_.str.126(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-40(%rbp), %rcx
	callq	_sqlite3_prepare_v2
LBB111_12:                              ##   Parent Loop BB111_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-40(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB111_16
## %bb.13:                              ##   in Loop: Header=BB111_12 Depth=2
	movq	-40(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -64(%rbp)
	movq	-48(%rbp), %rsi
	movq	-56(%rbp), %rdx
	movq	-64(%rbp), %rcx
	leaq	L_.str.127(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	jne	LBB111_15
## %bb.14:
	movl	$7, -4(%rbp)
	jmp	LBB111_41
LBB111_15:                              ##   in Loop: Header=BB111_12 Depth=2
	leaq	L_.str.128(%rip), %rax
	movq	%rax, -56(%rbp)
	jmp	LBB111_12
LBB111_16:                              ##   in Loop: Header=BB111_1 Depth=1
	movq	-40(%rbp), %rdi
	callq	_sqlite3_finalize
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-24(%rbp), %rdx
	movq	8(%rdx), %rdi
	movq	-48(%rbp), %rsi
	movq	-24(%rbp), %rdx
	addq	$56, %rdx
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	movq	%rdx, -128(%rbp)        ## 8-byte Spill
	movl	%ecx, %edx
	movq	-128(%rbp), %rcx        ## 8-byte Reload
	movl	%eax, -132(%rbp)        ## 4-byte Spill
	callq	_sqlite3_prepare_v2
	movq	-48(%rbp), %rdi
	movl	%eax, -136(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
LBB111_17:                              ##   in Loop: Header=BB111_1 Depth=1
	movl	$0, -32(%rbp)
	movl	$9, -28(%rbp)
	jmp	LBB111_26
LBB111_18:                              ##   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 56(%rax)
	jne	LBB111_25
## %bb.19:                              ##   in Loop: Header=BB111_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	$0, -80(%rbp)
	leaq	L_.str.27(%rip), %rcx
	movq	%rcx, -88(%rbp)
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rdi
	leaq	L_.str.126(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-72(%rbp), %rcx
	callq	_sqlite3_prepare_v2
LBB111_20:                              ##   Parent Loop BB111_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-72(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB111_24
## %bb.21:                              ##   in Loop: Header=BB111_20 Depth=2
	movq	-72(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -96(%rbp)
	movq	-80(%rbp), %rsi
	movq	-88(%rbp), %rdx
	movq	-96(%rbp), %rcx
	movq	-96(%rbp), %r8
	leaq	L_.str.129(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	jne	LBB111_23
## %bb.22:
	movl	$7, -4(%rbp)
	jmp	LBB111_41
LBB111_23:                              ##   in Loop: Header=BB111_20 Depth=2
	leaq	L_.str.128(%rip), %rax
	movq	%rax, -88(%rbp)
	jmp	LBB111_20
LBB111_24:                              ##   in Loop: Header=BB111_1 Depth=1
	movq	-72(%rbp), %rdi
	callq	_sqlite3_finalize
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-24(%rbp), %rdx
	movq	8(%rdx), %rdi
	movq	-80(%rbp), %rsi
	movq	-24(%rbp), %rdx
	addq	$56, %rdx
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	movq	%rdx, -144(%rbp)        ## 8-byte Spill
	movl	%ecx, %edx
	movq	-144(%rbp), %rcx        ## 8-byte Reload
	movl	%eax, -148(%rbp)        ## 4-byte Spill
	callq	_sqlite3_prepare_v2
	movq	-80(%rbp), %rdi
	movl	%eax, -152(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
LBB111_25:                              ##   in Loop: Header=BB111_1 Depth=1
	movl	$0, -32(%rbp)
	movl	$11, -28(%rbp)
LBB111_26:                              ##   in Loop: Header=BB111_1 Depth=1
	cmpl	$0, -32(%rbp)
	jge	LBB111_30
## %bb.27:                              ##   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 40(%rax)
	jne	LBB111_29
## %bb.28:                              ##   in Loop: Header=BB111_1 Depth=1
	jmp	LBB111_1
LBB111_29:                              ##   in Loop: Header=BB111_1 Depth=1
	jmp	LBB111_34
LBB111_30:                              ##   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	movq	56(%rax), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB111_32
## %bb.31:                              ##   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	movq	56(%rax), %rdi
	movl	-32(%rbp), %esi
	callq	_sqlite3_column_text
	movq	-24(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-24(%rbp), %rax
	movq	56(%rax), %rdi
	movl	-32(%rbp), %esi
	callq	_sqlite3_column_bytes
	movq	-24(%rbp), %rcx
	movl	%eax, 48(%rcx)
	jmp	LBB111_33
LBB111_32:                              ##   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	movq	56(%rax), %rdi
	callq	_sqlite3_finalize
	movq	-24(%rbp), %rcx
	movq	$0, 56(%rcx)
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rcx
	movl	%edx, 72(%rcx)
	jmp	LBB111_1
LBB111_33:                              ##   in Loop: Header=BB111_1 Depth=1
	jmp	LBB111_34
LBB111_34:                              ##   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	LBB111_36
## %bb.35:
	jmp	LBB111_40
LBB111_36:                              ##   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	movq	-24(%rbp), %rax
	cmpl	48(%rax), %ecx
	jg	LBB111_39
## %bb.37:                              ##   in Loop: Header=BB111_1 Depth=1
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-24(%rbp), %rax
	movq	40(%rax), %rsi
	movq	-24(%rbp), %rax
	movl	16(%rax), %edx
	callq	_sqlite3_strnicmp
	cmpl	$0, %eax
	jne	LBB111_39
## %bb.38:
	jmp	LBB111_40
LBB111_39:                              ##   in Loop: Header=BB111_1 Depth=1
	jmp	LBB111_1
LBB111_40:
	movl	$0, -4(%rbp)
LBB111_41:
	movl	-4(%rbp), %eax
	addq	$160, %rsp
	popq	%rbp
	retq
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L111_0_set_3, LBB111_3-LJTI111_0
.set L111_0_set_26, LBB111_26-LJTI111_0
.set L111_0_set_7, LBB111_7-LJTI111_0
.set L111_0_set_10, LBB111_10-LJTI111_0
.set L111_0_set_18, LBB111_18-LJTI111_0
LJTI111_0:
	.long	L111_0_set_3
	.long	L111_0_set_26
	.long	L111_0_set_26
	.long	L111_0_set_26
	.long	L111_0_set_26
	.long	L111_0_set_26
	.long	L111_0_set_7
	.long	L111_0_set_10
	.long	L111_0_set_18
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function completionEof
_completionEof:                         ## @completionEof
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$11, 72(%rax)
	setge	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function completionColumn
_completionColumn:                      ## @completionColumn
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	-20(%rbp), %ecx
	movl	%ecx, %eax
	movq	%rax, %rsi
	subq	$3, %rsi
	movq	%rax, -40(%rbp)         ## 8-byte Spill
	ja	LBB113_5
## %bb.6:
	leaq	LJTI113_0(%rip), %rax
	movq	-40(%rbp), %rcx         ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB113_1:
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	40(%rax), %rsi
	movq	-32(%rbp), %rax
	movl	48(%rax), %edx
	movq	$-1, %rcx
	callq	_sqlite3_result_text
	jmp	LBB113_5
LBB113_2:
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	24(%rax), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	movq	$-1, %rcx
	callq	_sqlite3_result_text
	jmp	LBB113_5
LBB113_3:
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	32(%rax), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	movq	$-1, %rcx
	callq	_sqlite3_result_text
	jmp	LBB113_5
LBB113_4:
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movl	72(%rax), %esi
	callq	_sqlite3_result_int
LBB113_5:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L113_0_set_1, LBB113_1-LJTI113_0
.set L113_0_set_2, LBB113_2-LJTI113_0
.set L113_0_set_3, LBB113_3-LJTI113_0
.set L113_0_set_4, LBB113_4-LJTI113_0
LJTI113_0:
	.long	L113_0_set_1
	.long	L113_0_set_2
	.long	L113_0_set_3
	.long	L113_0_set_4
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function completionRowid
_completionRowid:                       ## @completionRowid
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, (%rdx)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function completionCursorReset
_completionCursorReset:                 ## @completionCursorReset
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	_sqlite3_free
	movq	-8(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rdi
	callq	_sqlite3_free
	movq	-8(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	_sqlite3_finalize
	movq	-8(%rbp), %rcx
	movq	$0, 56(%rcx)
	movq	-8(%rbp), %rcx
	movl	$0, 76(%rcx)
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndOpen
_apndOpen:                              ## @apndOpen
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movq	%r8, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	-36(%rbp), %ecx
	andl	$256, %ecx              ## imm = 0x100
	cmpl	$0, %ecx
	jne	LBB116_2
## %bb.1:
	movq	-72(%rbp), %rax
	movq	40(%rax), %rax
	movq	-72(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-36(%rbp), %ecx
	movq	-48(%rbp), %r8
	callq	*%rax
	movl	%eax, -4(%rbp)
	jmp	LBB116_16
LBB116_2:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	movl	$24, %edx
	callq	___memset_chk
	movq	-32(%rbp), %rcx
	leaq	_apnd_io_methods(%rip), %rdx
	movq	%rdx, (%rcx)
	movq	-56(%rbp), %rcx
	movq	$-1, 16(%rcx)
	movq	-72(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	-72(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-64(%rbp), %rdx
	movl	-36(%rbp), %r8d
	movq	-48(%rbp), %r9
	movq	%rcx, -96(%rbp)         ## 8-byte Spill
	movl	%r8d, %ecx
	movq	%r9, %r8
	movq	-96(%rbp), %r9          ## 8-byte Reload
	movq	%rax, -104(%rbp)        ## 8-byte Spill
	callq	*%r9
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jne	LBB116_6
## %bb.3:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	48(%rax), %rax
	movq	-64(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	*%rax
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	je	LBB116_5
## %bb.4:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	-64(%rbp), %rdi
	callq	*%rax
LBB116_5:
	jmp	LBB116_6
LBB116_6:
	cmpl	$0, -76(%rbp)
	je	LBB116_8
## %bb.7:
	movq	-32(%rbp), %rax
	movq	$0, (%rax)
	movl	-76(%rbp), %ecx
	movl	%ecx, -4(%rbp)
	jmp	LBB116_16
LBB116_8:
	movq	-88(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	_apndIsOrdinaryDatabaseFile
	cmpl	$0, %eax
	je	LBB116_10
## %bb.9:
	movq	$-1, %rcx
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	-72(%rbp), %rsi
	movslq	4(%rsi), %rsi
	movq	%rax, %rdi
	movq	%rsi, -112(%rbp)        ## 8-byte Spill
	movq	%rdx, %rsi
	movq	-112(%rbp), %rdx        ## 8-byte Reload
	callq	___memmove_chk
	movl	$0, -4(%rbp)
	jmp	LBB116_16
LBB116_10:
	movq	-88(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	_apndReadMark
	movq	-56(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-56(%rbp), %rax
	cmpq	$0, 8(%rax)
	jl	LBB116_12
## %bb.11:
	movq	-88(%rbp), %rax
	subq	$25, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movl	$0, -4(%rbp)
	jmp	LBB116_16
LBB116_12:
	movl	-36(%rbp), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	jne	LBB116_14
## %bb.13:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	-64(%rbp), %rdi
	callq	*%rax
	movl	$14, -76(%rbp)
	movq	-32(%rbp), %rcx
	movq	$0, (%rcx)
	jmp	LBB116_15
LBB116_14:
	movq	-88(%rbp), %rax
	addq	$4095, %rax             ## imm = 0xFFF
	andq	$-4096, %rax            ## imm = 0xF000
	movq	-56(%rbp), %rcx
	movq	%rax, 8(%rcx)
LBB116_15:
	movl	-76(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB116_16:
	movl	-4(%rbp), %eax
	addq	$112, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndDelete
_apndDelete:                            ## @apndDelete
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	48(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movq	%rcx, %rdi
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndAccess
_apndAccess:                            ## @apndAccess
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	56(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movq	-32(%rbp), %rdi
	movq	%rdi, -40(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdi
	movq	-40(%rbp), %rcx         ## 8-byte Reload
	callq	*%rax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndFullPathname
_apndFullPathname:                      ## @apndFullPathname
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	64(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movq	-32(%rbp), %rdi
	movq	%rdi, -40(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdi
	movq	-40(%rbp), %rcx         ## 8-byte Reload
	callq	*%rax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndDlOpen
_apndDlOpen:                            ## @apndDlOpen
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	72(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndDlError
_apndDlError:                           ## @apndDlError
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	80(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rdx
	movq	%rcx, %rdi
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndDlSym
_apndDlSym:                             ## @apndDlSym
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	88(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rcx, %rdi
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndDlClose
_apndDlClose:                           ## @apndDlClose
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	96(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndRandomness
_apndRandomness:                        ## @apndRandomness
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	104(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rdx
	movq	%rcx, %rdi
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndSleep
_apndSleep:                             ## @apndSleep
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	112(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movl	-12(%rbp), %esi
	movq	%rcx, %rdi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndCurrentTime
_apndCurrentTime:                       ## @apndCurrentTime
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	120(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndGetLastError
_apndGetLastError:                      ## @apndGetLastError
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	128(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rdx
	movq	%rcx, %rdi
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndCurrentTimeInt64
_apndCurrentTimeInt64:                  ## @apndCurrentTimeInt64
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	136(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndSetSystemCall
_apndSetSystemCall:                     ## @apndSetSystemCall
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	144(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rcx, %rdi
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndGetSystemCall
_apndGetSystemCall:                     ## @apndGetSystemCall
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	152(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndNextSystemCall
_apndNextSystemCall:                    ## @apndNextSystemCall
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	160(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4               ## -- Begin function apndIsOrdinaryDatabaseFile
LCPI132_0:
	.byte	83                      ## 0x53
	.byte	81                      ## 0x51
	.byte	76                      ## 0x4c
	.byte	105                     ## 0x69
	.byte	116                     ## 0x74
	.byte	101                     ## 0x65
	.byte	32                      ## 0x20
	.byte	102                     ## 0x66
	.byte	111                     ## 0x6f
	.byte	114                     ## 0x72
	.byte	109                     ## 0x6d
	.byte	97                      ## 0x61
	.byte	116                     ## 0x74
	.byte	32                      ## 0x20
	.byte	51                      ## 0x33
	.byte	0                       ## 0x0
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
_apndIsOrdinaryDatabaseFile:            ## @apndIsOrdinaryDatabaseFile
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -48(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-48(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	_apndIsAppendvfsDatabase
	cmpl	$0, %eax
	jne	LBB132_4
## %bb.1:
	movq	-48(%rbp), %rax
	andq	$511, %rax              ## imm = 0x1FF
	cmpq	$0, %rax
	jne	LBB132_4
## %bb.2:
	xorl	%eax, %eax
	movl	%eax, %ecx
	leaq	-32(%rbp), %rsi
	movq	-56(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	-56(%rbp), %rdi
	movl	$16, %eax
	movq	%rdx, -64(%rbp)         ## 8-byte Spill
	movl	%eax, %edx
	movq	-64(%rbp), %r8          ## 8-byte Reload
	callq	*%r8
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jne	LBB132_4
## %bb.3:
	leaq	-32(%rbp), %rax
	movups	(%rax), %xmm0
	movaps	LCPI132_0(%rip), %xmm1  ## xmm1 = [83,81,76,105,116,101,32,102,111,114,109,97,116,32,51,0]
	pcmpeqb	%xmm1, %xmm0
	pmovmskb	%xmm0, %ecx
	subl	$65535, %ecx            ## imm = 0xFFFF
	setne	%dl
	movzbl	%dl, %esi
	cmpl	$0, %esi
	je	LBB132_5
LBB132_4:
	movl	$0, -36(%rbp)
	jmp	LBB132_6
LBB132_5:
	movl	$1, -36(%rbp)
LBB132_6:
	movl	-36(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movl	%eax, -68(%rbp)         ## 4-byte Spill
	jne	LBB132_8
## %bb.7:
	movl	-68(%rbp), %eax         ## 4-byte Reload
	addq	$80, %rsp
	popq	%rbp
	retq
LBB132_8:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndReadMark
_apndReadMark:                          ## @apndReadMark
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -64(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$56, -92(%rbp)
	movq	-64(%rbp), %rax
	andq	$511, %rax              ## imm = 0x1FF
	movl	$25, %ecx
	cmpq	%rax, %rcx
	je	LBB133_2
## %bb.1:
	movq	$-1, -56(%rbp)
	jmp	LBB133_15
LBB133_2:
	leaq	-48(%rbp), %rsi
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	-72(%rbp), %rdi
	movq	-64(%rbp), %rcx
	subq	$25, %rcx
	movl	$25, %edx
	callq	*%rax
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	je	LBB133_4
## %bb.3:
	movq	$-1, -56(%rbp)
	jmp	LBB133_15
LBB133_4:
	leaq	-48(%rbp), %rdi
	leaq	L_.str.31(%rip), %rsi
	movl	$17, %edx
	callq	_memcmp
	cmpl	$0, %eax
	je	LBB133_6
## %bb.5:
	movq	$-1, -56(%rbp)
	jmp	LBB133_15
LBB133_6:
	movzbl	-31(%rbp), %eax
	andl	$127, %eax
	movslq	%eax, %rcx
	movl	-92(%rbp), %eax
	movl	%eax, %edx
	movq	%rcx, -104(%rbp)        ## 8-byte Spill
	movq	%rdx, %rcx
                                        ## kill: def $cl killed $rcx
	movq	-104(%rbp), %rdx        ## 8-byte Reload
	shlq	%cl, %rdx
	movq	%rdx, -88(%rbp)
	movl	$1, -80(%rbp)
LBB133_7:                               ## =>This Inner Loop Header: Depth=1
	cmpl	$8, -80(%rbp)
	jge	LBB133_10
## %bb.8:                               ##   in Loop: Header=BB133_7 Depth=1
	movl	-92(%rbp), %eax
	subl	$8, %eax
	movl	%eax, -92(%rbp)
	movl	-80(%rbp), %eax
	addl	$17, %eax
	movslq	%eax, %rcx
	movzbl	-48(%rbp,%rcx), %eax
	movl	%eax, %ecx
	movl	-92(%rbp), %eax
	movl	%eax, %edx
	movq	%rcx, -112(%rbp)        ## 8-byte Spill
	movq	%rdx, %rcx
                                        ## kill: def $cl killed $rcx
	movq	-112(%rbp), %rdx        ## 8-byte Reload
	shlq	%cl, %rdx
	orq	-88(%rbp), %rdx
	movq	%rdx, -88(%rbp)
## %bb.9:                               ##   in Loop: Header=BB133_7 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	LBB133_7
LBB133_10:
	movq	-88(%rbp), %rax
	movq	-64(%rbp), %rcx
	subq	$25, %rcx
	subq	$512, %rcx              ## imm = 0x200
	cmpq	%rcx, %rax
	jle	LBB133_12
## %bb.11:
	movq	$-1, -56(%rbp)
	jmp	LBB133_15
LBB133_12:
	movq	-88(%rbp), %rax
	andq	$511, %rax              ## imm = 0x1FF
	cmpq	$0, %rax
	je	LBB133_14
## %bb.13:
	movq	$-1, -56(%rbp)
	jmp	LBB133_15
LBB133_14:
	movq	-88(%rbp), %rax
	movq	%rax, -56(%rbp)
LBB133_15:
	movq	-56(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movq	%rax, -120(%rbp)        ## 8-byte Spill
	jne	LBB133_17
## %bb.16:
	movq	-120(%rbp), %rax        ## 8-byte Reload
	addq	$128, %rsp
	popq	%rbp
	retq
LBB133_17:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndClose
_apndClose:                             ## @apndClose
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndRead
_apndRead:                              ## @apndRead
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	addq	-32(%rbp), %rcx
	callq	*%rax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndWrite
_apndWrite:                             ## @apndWrite
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rax
	movslq	-28(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	cmpq	$1073741824, -56(%rbp)  ## imm = 0x40000000
	jl	LBB136_2
## %bb.1:
	movl	$13, -4(%rbp)
	jmp	LBB136_8
LBB136_2:
	movq	-16(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpq	$0, 16(%rax)
	jl	LBB136_4
## %bb.3:
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	addq	-56(%rbp), %rax
	movq	-48(%rbp), %rcx
	cmpq	16(%rcx), %rax
	jle	LBB136_7
LBB136_4:
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-56(%rbp), %rdx
	callq	_apndWriteMark
	xorl	%ecx, %ecx
	movl	%eax, -60(%rbp)
	cmpl	-60(%rbp), %ecx
	je	LBB136_6
## %bb.5:
	movl	-60(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	LBB136_8
LBB136_6:
	jmp	LBB136_7
LBB136_7:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	8(%rcx), %rcx
	addq	-40(%rbp), %rcx
	callq	*%rax
	movl	%eax, -4(%rbp)
LBB136_8:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndTruncate
_apndTruncate:                          ## @apndTruncate
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_apndWriteMark
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	je	LBB137_2
## %bb.1:
	movl	$10, -4(%rbp)
	jmp	LBB137_3
LBB137_2:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	addq	$25, %rcx
	movq	%rcx, %rsi
	callq	*%rax
	movl	%eax, -4(%rbp)
LBB137_3:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndSync
_apndSync:                              ## @apndSync
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndFileSize
_apndFileSize:                          ## @apndFileSize
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpq	$0, 16(%rax)
	jl	LBB139_2
## %bb.1:
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	-24(%rbp), %rcx
	subq	8(%rcx), %rax
	movq	%rax, -32(%rbp)         ## 8-byte Spill
	jmp	LBB139_3
LBB139_2:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -32(%rbp)         ## 8-byte Spill
	jmp	LBB139_3
LBB139_3:
	movq	-32(%rbp), %rax         ## 8-byte Reload
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, (%rdx)
	movl	%ecx, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndLock
_apndLock:                              ## @apndLock
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	56(%rax), %rax
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndUnlock
_apndUnlock:                            ## @apndUnlock
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	64(%rax), %rax
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndCheckReservedLock
_apndCheckReservedLock:                 ## @apndCheckReservedLock
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	72(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndFileControl
_apndFileControl:                       ## @apndFileControl
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -8(%rbp)
	cmpl	$5, -12(%rbp)
	jne	LBB143_2
## %bb.1:
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	addq	(%rcx), %rax
	movq	%rax, (%rcx)
LBB143_2:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	80(%rax), %rax
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rdx
	callq	*%rax
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jne	LBB143_5
## %bb.3:
	cmpl	$12, -12(%rbp)
	jne	LBB143_5
## %bb.4:
	movq	-32(%rbp), %rax
	movq	8(%rax), %rsi
	movq	-24(%rbp), %rax
	movq	(%rax), %rdx
	leaq	L_.str.132(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
LBB143_5:
	movl	-36(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndSectorSize
_apndSectorSize:                        ## @apndSectorSize
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	88(%rax), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndDeviceCharacteristics
_apndDeviceCharacteristics:             ## @apndDeviceCharacteristics
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	96(%rax), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndShmMap
_apndShmMap:                            ## @apndShmMap
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	%r8, -32(%rbp)
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	104(%rax), %rax
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-32(%rbp), %r8
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndShmLock
_apndShmLock:                           ## @apndShmLock
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	112(%rax), %rax
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-20(%rbp), %ecx
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndShmBarrier
_apndShmBarrier:                        ## @apndShmBarrier
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	120(%rax), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndShmUnmap
_apndShmUnmap:                          ## @apndShmUnmap
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	128(%rax), %rax
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndFetch
_apndFetch:                             ## @apndFetch
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	cmpq	$0, 16(%rax)
	jl	LBB150_2
## %bb.1:
	movq	-24(%rbp), %rax
	movslq	-28(%rbp), %rcx
	addq	%rcx, %rax
	movq	-48(%rbp), %rcx
	cmpq	16(%rcx), %rax
	jle	LBB150_3
LBB150_2:
	movl	$10, -4(%rbp)
	jmp	LBB150_4
LBB150_3:
	movq	-16(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	136(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movq	-48(%rbp), %rdx
	addq	8(%rdx), %rcx
	movl	-28(%rbp), %edx
	movq	-40(%rbp), %rsi
	movq	%rsi, -56(%rbp)         ## 8-byte Spill
	movq	%rcx, %rsi
	movq	-56(%rbp), %rcx         ## 8-byte Reload
	callq	*%rax
	movl	%eax, -4(%rbp)
LBB150_4:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndUnfetch
_apndUnfetch:                           ## @apndUnfetch
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	144(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rcx
	movq	-32(%rbp), %rdx
	addq	8(%rdx), %rcx
	movq	-24(%rbp), %rdx
	movq	%rcx, %rsi
	callq	*%rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function apndWriteMark
_apndWriteMark:                         ## @apndWriteMark
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$8, -84(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rcx
	addq	$24, %rcx
	cmpq	%rcx, %rax
	sete	%r8b
	xorb	$-1, %r8b
	andb	$1, %r8b
	movzbl	%r8b, %r9d
	movslq	%r9d, %rax
	cmpq	$0, %rax
	je	LBB152_2
## %bb.1:
	leaq	L___func__.apndWriteMark(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.131(%rip), %rcx
	movl	$3908, %edx             ## imm = 0xF44
	callq	___assert_rtn
LBB152_2:
	jmp	LBB152_3
LBB152_3:
	movq	L_.str.31(%rip), %rax
	movq	%rax, -48(%rbp)
	movq	L_.str.31+8(%rip), %rax
	movq	%rax, -40(%rbp)
	movb	L_.str.31+16(%rip), %cl
	movb	%cl, -32(%rbp)
LBB152_4:                               ## =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, %eax
	jl	LBB152_6
## %bb.5:                               ##   in Loop: Header=BB152_4 Depth=1
	movq	-80(%rbp), %rax
	andq	$255, %rax
                                        ## kill: def $al killed $al killed $rax
	movl	-84(%rbp), %ecx
	addl	$17, %ecx
	movslq	%ecx, %rdx
	movb	%al, -48(%rbp,%rdx)
	movq	-80(%rbp), %rdx
	sarq	$8, %rdx
	movq	%rdx, -80(%rbp)
	jmp	LBB152_4
LBB152_6:
	leaq	-48(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	addq	-72(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rdi
	movq	-72(%rbp), %rcx
	movl	$25, %edx
	callq	*%rax
	xorl	%edx, %edx
	movl	%eax, -88(%rbp)
	cmpl	%eax, %edx
	jne	LBB152_8
## %bb.7:
	movq	-72(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	%rax, 16(%rcx)
LBB152_8:
	movl	-88(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movl	%eax, -92(%rbp)         ## 4-byte Spill
	jne	LBB152_10
## %bb.9:
	movl	-92(%rbp), %eax         ## 4-byte Reload
	addq	$96, %rsp
	popq	%rbp
	retq
LBB152_10:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4               ## -- Begin function apndIsAppendvfsDatabase
LCPI153_0:
	.byte	83                      ## 0x53
	.byte	81                      ## 0x51
	.byte	76                      ## 0x4c
	.byte	105                     ## 0x69
	.byte	116                     ## 0x74
	.byte	101                     ## 0x65
	.byte	32                      ## 0x20
	.byte	102                     ## 0x66
	.byte	111                     ## 0x6f
	.byte	114                     ## 0x72
	.byte	109                     ## 0x6d
	.byte	97                      ## 0x61
	.byte	116                     ## 0x74
	.byte	32                      ## 0x20
	.byte	51                      ## 0x33
	.byte	0                       ## 0x0
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
_apndIsAppendvfsDatabase:               ## @apndIsAppendvfsDatabase
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -48(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-48(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	_apndReadMark
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	jl	LBB153_7
## %bb.1:
	leaq	-32(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	-56(%rbp), %rdi
	movq	-72(%rbp), %rcx
	movl	$16, %edx
	callq	*%rax
	xorl	%edx, %edx
	movl	%eax, -60(%rbp)
	cmpl	-60(%rbp), %edx
	jne	LBB153_6
## %bb.2:
	leaq	-32(%rbp), %rax
	movups	(%rax), %xmm0
	movaps	LCPI153_0(%rip), %xmm1  ## xmm1 = [83,81,76,105,116,101,32,102,111,114,109,97,116,32,51,0]
	pcmpeqb	%xmm1, %xmm0
	pmovmskb	%xmm0, %ecx
	subl	$65535, %ecx            ## imm = 0xFFFF
	setne	%dl
	movzbl	%dl, %esi
	cmpl	$0, %esi
	jne	LBB153_6
## %bb.3:
	movq	-48(%rbp), %rax
	andq	$511, %rax              ## imm = 0x1FF
	cmpq	$25, %rax
	jne	LBB153_6
## %bb.4:
	cmpq	$537, -48(%rbp)         ## imm = 0x219
	jl	LBB153_6
## %bb.5:
	movl	$1, -36(%rbp)
	jmp	LBB153_8
LBB153_6:
	jmp	LBB153_7
LBB153_7:
	movl	$0, -36(%rbp)
LBB153_8:
	movl	-36(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movl	%eax, -76(%rbp)         ## 4-byte Spill
	jne	LBB153_10
## %bb.9:
	movl	-76(%rbp), %eax         ## 4-byte Reload
	addq	$80, %rsp
	popq	%rbp
	retq
LBB153_10:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function memtraceMalloc
_memtraceMalloc:                        ## @memtraceMalloc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	cmpq	$0, _memtraceOut(%rip)
	je	LBB154_2
## %bb.1:
	movq	_memtraceOut(%rip), %rdi
	movq	_memtraceBase+32(%rip), %rax
	movl	-4(%rbp), %ecx
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	movl	%ecx, %edi
	callq	*%rax
	movq	-16(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.133(%rip), %rsi
	movl	%eax, %edx
	movb	$0, %al
	callq	_fprintf
LBB154_2:
	movq	_memtraceBase(%rip), %rax
	movl	-4(%rbp), %edi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function memtraceFree
_memtraceFree:                          ## @memtraceFree
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	LBB155_2
## %bb.1:
	jmp	LBB155_5
LBB155_2:
	cmpq	$0, _memtraceOut(%rip)
	je	LBB155_4
## %bb.3:
	movq	_memtraceOut(%rip), %rdi
	movq	_memtraceBase+24(%rip), %rax
	movq	-8(%rbp), %rcx
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdi
	callq	*%rax
	movq	-16(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.134(%rip), %rsi
	movl	%eax, %edx
	movb	$0, %al
	callq	_fprintf
LBB155_4:
	movq	_memtraceBase+8(%rip), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
LBB155_5:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function memtraceRealloc
_memtraceRealloc:                       ## @memtraceRealloc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	cmpq	$0, -16(%rbp)
	jne	LBB156_2
## %bb.1:
	movl	-20(%rbp), %edi
	callq	_memtraceMalloc
	movq	%rax, -8(%rbp)
	jmp	LBB156_7
LBB156_2:
	cmpl	$0, -20(%rbp)
	jne	LBB156_4
## %bb.3:
	movq	-16(%rbp), %rdi
	callq	_memtraceFree
	movq	$0, -8(%rbp)
	jmp	LBB156_7
LBB156_4:
	cmpq	$0, _memtraceOut(%rip)
	je	LBB156_6
## %bb.5:
	movq	_memtraceOut(%rip), %rdi
	movq	_memtraceBase+24(%rip), %rax
	movq	-16(%rbp), %rcx
	movq	%rdi, -32(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdi
	callq	*%rax
	movq	_memtraceBase+32(%rip), %rcx
	movl	-20(%rbp), %edi
	movl	%eax, -36(%rbp)         ## 4-byte Spill
	callq	*%rcx
	movq	-32(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.135(%rip), %rsi
	movl	-36(%rbp), %edx         ## 4-byte Reload
	movl	%eax, %ecx
	movb	$0, %al
	callq	_fprintf
LBB156_6:
	movq	_memtraceBase+16(%rip), %rax
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	*%rax
	movq	%rax, -8(%rbp)
LBB156_7:
	movq	-8(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function memtraceSize
_memtraceSize:                          ## @memtraceSize
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	_memtraceBase+24(%rip), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function memtraceRoundup
_memtraceRoundup:                       ## @memtraceRoundup
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	_memtraceBase+32(%rip), %rax
	movl	-4(%rbp), %edi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function memtraceInit
_memtraceInit:                          ## @memtraceInit
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	_memtraceBase+40(%rip), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function memtraceShutdown
_memtraceShutdown:                      ## @memtraceShutdown
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	_memtraceBase+48(%rip), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimal_new
_decimal_new:                           ## @decimal_new
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	$0, -68(%rbp)
	movl	$24, %edi
	callq	_sqlite3_malloc
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	jne	LBB161_2
## %bb.1:
	jmp	LBB161_79
LBB161_2:
	movq	-48(%rbp), %rax
	movb	$0, (%rax)
	movq	-48(%rbp), %rax
	movb	$0, 1(%rax)
	movq	-48(%rbp), %rax
	movb	$1, 3(%rax)
	movq	-48(%rbp), %rax
	movb	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	cmpq	$0, -40(%rbp)
	je	LBB161_4
## %bb.3:
	movl	-28(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-40(%rbp), %rcx
	movq	%rcx, -64(%rbp)
	jmp	LBB161_7
LBB161_4:
	movq	-24(%rbp), %rdi
	callq	_sqlite3_value_type
	cmpl	$5, %eax
	jne	LBB161_6
## %bb.5:
	movq	-48(%rbp), %rax
	movq	$0, 16(%rax)
	movq	-48(%rbp), %rax
	movb	$1, 2(%rax)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB161_82
LBB161_6:
	movq	-24(%rbp), %rdi
	callq	_sqlite3_value_bytes
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -64(%rbp)
LBB161_7:
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	callq	_sqlite3_malloc64
	movq	-48(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-48(%rbp), %rax
	cmpq	$0, 16(%rax)
	jne	LBB161_9
## %bb.8:
	jmp	LBB161_79
LBB161_9:
	movl	$0, -56(%rbp)
LBB161_10:                              ## =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB161_13
## %bb.11:                              ##   in Loop: Header=BB161_10 Depth=1
	jmp	LBB161_12
LBB161_12:                              ##   in Loop: Header=BB161_10 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	LBB161_10
LBB161_13:
	movq	-64(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$45, %edx
	jne	LBB161_15
## %bb.14:
	movq	-48(%rbp), %rax
	movb	$1, (%rax)
	movl	-56(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -56(%rbp)
	jmp	LBB161_18
LBB161_15:
	movq	-64(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$43, %edx
	jne	LBB161_17
## %bb.16:
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
LBB161_17:
	jmp	LBB161_18
LBB161_18:
	jmp	LBB161_19
LBB161_19:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-56(%rbp), %ecx
	cmpl	-52(%rbp), %ecx
	movb	%al, -85(%rbp)          ## 1-byte Spill
	jge	LBB161_21
## %bb.20:                              ##   in Loop: Header=BB161_19 Depth=1
	movq	-64(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$48, %edx
	sete	%sil
	movb	%sil, -85(%rbp)         ## 1-byte Spill
LBB161_21:                              ##   in Loop: Header=BB161_19 Depth=1
	movb	-85(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB161_22
	jmp	LBB161_23
LBB161_22:                              ##   in Loop: Header=BB161_19 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	LBB161_19
LBB161_23:
	jmp	LBB161_24
LBB161_24:                              ## =>This Inner Loop Header: Depth=1
	movl	-56(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	LBB161_53
## %bb.25:                              ##   in Loop: Header=BB161_24 Depth=1
	movq	-64(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movb	(%rax,%rcx), %dl
	movb	%dl, -69(%rbp)
	movsbl	-69(%rbp), %esi
	cmpl	$48, %esi
	jl	LBB161_28
## %bb.26:                              ##   in Loop: Header=BB161_24 Depth=1
	movsbl	-69(%rbp), %eax
	cmpl	$57, %eax
	jg	LBB161_28
## %bb.27:                              ##   in Loop: Header=BB161_24 Depth=1
	movsbl	-69(%rbp), %eax
	subl	$48, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-48(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	-48(%rbp), %rdx
	movl	4(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, 4(%rdx)
	movslq	%esi, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	LBB161_52
LBB161_28:                              ##   in Loop: Header=BB161_24 Depth=1
	movsbl	-69(%rbp), %eax
	cmpl	$46, %eax
	jne	LBB161_30
## %bb.29:                              ##   in Loop: Header=BB161_24 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movq	-48(%rbp), %rax
	movl	%ecx, 8(%rax)
	jmp	LBB161_51
LBB161_30:                              ##   in Loop: Header=BB161_24 Depth=1
	movsbl	-69(%rbp), %eax
	cmpl	$101, %eax
	je	LBB161_32
## %bb.31:                              ##   in Loop: Header=BB161_24 Depth=1
	movsbl	-69(%rbp), %eax
	cmpl	$69, %eax
	jne	LBB161_50
LBB161_32:
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -80(%rbp)
	movl	-76(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jl	LBB161_34
## %bb.33:
	jmp	LBB161_53
LBB161_34:
	movq	-64(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$45, %edx
	jne	LBB161_36
## %bb.35:
	movl	$1, -80(%rbp)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	LBB161_39
LBB161_36:
	movq	-64(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$43, %edx
	jne	LBB161_38
## %bb.37:
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
LBB161_38:
	jmp	LBB161_39
LBB161_39:
	jmp	LBB161_40
LBB161_40:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-76(%rbp), %ecx
	cmpl	-52(%rbp), %ecx
	movb	%al, -86(%rbp)          ## 1-byte Spill
	jge	LBB161_42
## %bb.41:                              ##   in Loop: Header=BB161_40 Depth=1
	cmpl	$1000000, -68(%rbp)     ## imm = 0xF4240
	setl	%al
	movb	%al, -86(%rbp)          ## 1-byte Spill
LBB161_42:                              ##   in Loop: Header=BB161_40 Depth=1
	movb	-86(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB161_43
	jmp	LBB161_47
LBB161_43:                              ##   in Loop: Header=BB161_40 Depth=1
	movq	-64(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$48, %edx
	jl	LBB161_46
## %bb.44:                              ##   in Loop: Header=BB161_40 Depth=1
	movq	-64(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$57, %edx
	jg	LBB161_46
## %bb.45:                              ##   in Loop: Header=BB161_40 Depth=1
	imull	$10, -68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movzbl	(%rcx,%rdx), %esi
	addl	%esi, %eax
	subl	$48, %eax
	movl	%eax, -68(%rbp)
LBB161_46:                              ##   in Loop: Header=BB161_40 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	LBB161_40
LBB161_47:
	cmpl	$0, -80(%rbp)
	je	LBB161_49
## %bb.48:
	xorl	%eax, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
LBB161_49:
	jmp	LBB161_53
LBB161_50:                              ##   in Loop: Header=BB161_24 Depth=1
	jmp	LBB161_51
LBB161_51:                              ##   in Loop: Header=BB161_24 Depth=1
	jmp	LBB161_52
LBB161_52:                              ##   in Loop: Header=BB161_24 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	LBB161_24
LBB161_53:
	movq	-48(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	LBB161_55
## %bb.54:
	movq	-48(%rbp), %rax
	movl	4(%rax), %ecx
	movq	-48(%rbp), %rax
	movl	8(%rax), %edx
	subl	$1, %edx
	subl	%edx, %ecx
	movq	-48(%rbp), %rax
	movl	%ecx, 8(%rax)
LBB161_55:
	cmpl	$0, -68(%rbp)
	jle	LBB161_66
## %bb.56:
	movq	-48(%rbp), %rax
	cmpl	$0, 8(%rax)
	jle	LBB161_61
## %bb.57:
	movl	-68(%rbp), %eax
	movq	-48(%rbp), %rcx
	cmpl	8(%rcx), %eax
	jg	LBB161_59
## %bb.58:
	movl	-68(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	8(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 8(%rcx)
	movl	$0, -68(%rbp)
	jmp	LBB161_60
LBB161_59:
	movq	-48(%rbp), %rax
	movl	8(%rax), %ecx
	movl	-68(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -68(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
LBB161_60:
	jmp	LBB161_61
LBB161_61:
	cmpl	$0, -68(%rbp)
	jle	LBB161_65
## %bb.62:
	movq	-48(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-48(%rbp), %rax
	movl	4(%rax), %ecx
	addl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rsi
	callq	_sqlite3_realloc64
	movq	-48(%rbp), %rdx
	movq	%rax, 16(%rdx)
	movq	-48(%rbp), %rax
	cmpq	$0, 16(%rax)
	jne	LBB161_64
## %bb.63:
	jmp	LBB161_79
LBB161_64:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	-48(%rbp), %rdx
	movslq	4(%rdx), %rdx
	addq	%rdx, %rax
	movslq	-68(%rbp), %rdx
	movq	%rax, %rdi
	callq	___memset_chk
	movl	-68(%rbp), %esi
	movq	-48(%rbp), %rcx
	addl	4(%rcx), %esi
	movl	%esi, 4(%rcx)
LBB161_65:
	jmp	LBB161_78
LBB161_66:
	cmpl	$0, -68(%rbp)
	jge	LBB161_77
## %bb.67:
	xorl	%eax, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	-48(%rbp), %rcx
	movl	4(%rcx), %eax
	movq	-48(%rbp), %rcx
	subl	8(%rcx), %eax
	subl	$1, %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -84(%rbp)
	je	LBB161_72
## %bb.68:
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jl	LBB161_70
## %bb.69:
	movl	-68(%rbp), %eax
	movq	-48(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movl	$0, -68(%rbp)
	jmp	LBB161_71
LBB161_70:
	movl	-84(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movq	-48(%rbp), %rdx
	movl	4(%rdx), %eax
	subl	$1, %eax
	movq	-48(%rbp), %rdx
	movl	%eax, 8(%rdx)
LBB161_71:
	jmp	LBB161_72
LBB161_72:
	cmpl	$0, -68(%rbp)
	jle	LBB161_76
## %bb.73:
	movq	-48(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-48(%rbp), %rax
	movl	4(%rax), %ecx
	addl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rsi
	callq	_sqlite3_realloc64
	movq	-48(%rbp), %rdx
	movq	%rax, 16(%rdx)
	movq	-48(%rbp), %rax
	cmpq	$0, 16(%rax)
	jne	LBB161_75
## %bb.74:
	jmp	LBB161_79
LBB161_75:
	movq	$-1, %rcx
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-68(%rbp), %rdx
	addq	%rdx, %rax
	movq	-48(%rbp), %rdx
	movq	16(%rdx), %rsi
	movq	-48(%rbp), %rdx
	movslq	4(%rdx), %rdx
	movq	%rax, %rdi
	callq	___memmove_chk
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-48(%rbp), %rdx
	movq	16(%rdx), %rdi
	movslq	-68(%rbp), %rdx
	movq	%rax, -96(%rbp)         ## 8-byte Spill
	callq	___memset_chk
	movl	-68(%rbp), %esi
	movq	-48(%rbp), %rcx
	addl	4(%rcx), %esi
	movl	%esi, 4(%rcx)
	movl	-68(%rbp), %esi
	movq	-48(%rbp), %rcx
	addl	8(%rcx), %esi
	movl	%esi, 8(%rcx)
LBB161_76:
	jmp	LBB161_77
LBB161_77:
	jmp	LBB161_78
LBB161_78:
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB161_82
LBB161_79:
	cmpq	$0, -16(%rbp)
	je	LBB161_81
## %bb.80:
	movq	-16(%rbp), %rdi
	callq	_sqlite3_result_error_nomem
LBB161_81:
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	movq	$0, -8(%rbp)
LBB161_82:
	movq	-8(%rbp), %rax
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimal_result
_decimal_result:                        ## @decimal_result
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	LBB162_2
## %bb.1:
	movq	-16(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB162_3
LBB162_2:
	movq	-8(%rbp), %rdi
	callq	_sqlite3_result_error_nomem
	jmp	LBB162_29
LBB162_3:
	movq	-16(%rbp), %rax
	cmpb	$0, 2(%rax)
	je	LBB162_5
## %bb.4:
	movq	-8(%rbp), %rdi
	callq	_sqlite3_result_null
	jmp	LBB162_29
LBB162_5:
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$4, %ecx
	movl	%ecx, %edi
	callq	_sqlite3_malloc
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	LBB162_7
## %bb.6:
	movq	-8(%rbp), %rdi
	callq	_sqlite3_result_error_nomem
	jmp	LBB162_29
LBB162_7:
	movl	$0, -28(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	je	LBB162_10
## %bb.8:
	movq	-16(%rbp), %rax
	cmpl	$1, 4(%rax)
	jne	LBB162_11
## %bb.9:
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movsbl	(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB162_11
LBB162_10:
	movq	-16(%rbp), %rax
	movb	$0, (%rax)
LBB162_11:
	movq	-16(%rbp), %rax
	cmpb	$0, (%rax)
	je	LBB162_13
## %bb.12:
	movq	-24(%rbp), %rax
	movb	$45, (%rax)
	movl	$1, -28(%rbp)
LBB162_13:
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	subl	8(%rax), %ecx
	movl	%ecx, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jg	LBB162_15
## %bb.14:
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -28(%rbp)
	movslq	%ecx, %rsi
	movb	$48, (%rax,%rsi)
LBB162_15:
	movl	$0, -32(%rbp)
LBB162_16:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$1, -36(%rbp)
	movb	%al, -37(%rbp)          ## 1-byte Spill
	jle	LBB162_18
## %bb.17:                              ##   in Loop: Header=BB162_16 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-32(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$0, %edx
	sete	%sil
	movb	%sil, -37(%rbp)         ## 1-byte Spill
LBB162_18:                              ##   in Loop: Header=BB162_16 Depth=1
	movb	-37(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB162_19
	jmp	LBB162_20
LBB162_19:                              ##   in Loop: Header=BB162_16 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-36(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -36(%rbp)
	jmp	LBB162_16
LBB162_20:
	jmp	LBB162_21
LBB162_21:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$0, -36(%rbp)
	jle	LBB162_23
## %bb.22:                              ##   in Loop: Header=BB162_21 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-32(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	addl	$48, %edx
                                        ## kill: def $dl killed $dl killed $edx
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, -28(%rbp)
	movslq	%esi, %rcx
	movb	%dl, (%rax,%rcx)
	movl	-32(%rbp), %esi
	addl	$1, %esi
	movl	%esi, -32(%rbp)
	movl	-36(%rbp), %esi
	addl	$-1, %esi
	movl	%esi, -36(%rbp)
	jmp	LBB162_21
LBB162_23:
	movq	-16(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	LBB162_28
## %bb.24:
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -28(%rbp)
	movslq	%ecx, %rsi
	movb	$46, (%rax,%rsi)
LBB162_25:                              ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-32(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	addl	$48, %edx
                                        ## kill: def $dl killed $dl killed $edx
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, -28(%rbp)
	movslq	%esi, %rcx
	movb	%dl, (%rax,%rcx)
	movl	-32(%rbp), %esi
	addl	$1, %esi
	movl	%esi, -32(%rbp)
## %bb.26:                              ##   in Loop: Header=BB162_25 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	4(%rcx), %eax
	jl	LBB162_25
## %bb.27:
	jmp	LBB162_28
LBB162_28:
	movq	_sqlite3_free@GOTPCREL(%rip), %rcx
	movq	-24(%rbp), %rax
	movslq	-28(%rbp), %rdx
	movb	$0, (%rax,%rdx)
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	callq	_sqlite3_result_text
LBB162_29:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimal_free
_decimal_free:                          ## @decimal_free
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	LBB163_2
## %bb.1:
	movq	-8(%rbp), %rdi
	callq	_decimal_clear
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
LBB163_2:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimal_clear
_decimal_clear:                         ## @decimal_clear
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	_sqlite3_free
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimal_cmp
_decimal_cmp:                           ## @decimal_cmp
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	movq	-24(%rbp), %rax
	movsbl	(%rax), %edx
	cmpl	%edx, %ecx
	je	LBB165_2
## %bb.1:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	movl	$1, %edx
	cmovnel	%ecx, %edx
	movl	%edx, -4(%rbp)
	jmp	LBB165_11
LBB165_2:
	movq	-16(%rbp), %rax
	cmpb	$0, (%rax)
	je	LBB165_4
## %bb.3:
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -24(%rbp)
LBB165_4:
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	subl	8(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	4(%rax), %ecx
	movq	-24(%rbp), %rax
	subl	8(%rax), %ecx
	movl	%ecx, -32(%rbp)
	movl	-28(%rbp), %ecx
	cmpl	-32(%rbp), %ecx
	je	LBB165_6
## %bb.5:
	movl	-28(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	LBB165_11
LBB165_6:
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%ecx, -40(%rbp)
	movl	-40(%rbp), %ecx
	movq	-24(%rbp), %rax
	cmpl	4(%rax), %ecx
	jle	LBB165_8
## %bb.7:
	movq	-24(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%ecx, -40(%rbp)
LBB165_8:
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-24(%rbp), %rax
	movq	16(%rax), %rsi
	movslq	-40(%rbp), %rdx
	callq	_memcmp
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jne	LBB165_10
## %bb.9:
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	movq	-24(%rbp), %rax
	subl	4(%rax), %ecx
	movl	%ecx, -36(%rbp)
LBB165_10:
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB165_11:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimal_add
_decimal_add:                           ## @decimal_add
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -8(%rbp)
	jne	LBB166_2
## %bb.1:
	jmp	LBB166_40
LBB166_2:
	movq	-8(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB166_5
## %bb.3:
	cmpq	$0, -16(%rbp)
	je	LBB166_5
## %bb.4:
	movq	-16(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB166_6
LBB166_5:
	movq	-8(%rbp), %rax
	movb	$1, 1(%rax)
	jmp	LBB166_40
LBB166_6:
	movq	-8(%rbp), %rax
	movsbl	2(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB166_8
## %bb.7:
	movq	-16(%rbp), %rax
	movsbl	2(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB166_9
LBB166_8:
	movq	-8(%rbp), %rax
	movb	$1, 2(%rax)
	jmp	LBB166_40
LBB166_9:
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	movq	-8(%rbp), %rax
	subl	8(%rax), %ecx
	movl	%ecx, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	LBB166_12
## %bb.10:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movsbl	(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB166_12
## %bb.11:
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
LBB166_12:
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	4(%rcx), %edx
	movq	-16(%rbp), %rcx
	subl	8(%rcx), %edx
	cmpl	%edx, %eax
	jge	LBB166_14
## %bb.13:
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	subl	8(%rax), %ecx
	movl	%ecx, -20(%rbp)
LBB166_14:
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movl	-24(%rbp), %ecx
	movq	-16(%rbp), %rax
	cmpl	8(%rax), %ecx
	jge	LBB166_16
## %bb.15:
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	movl	%ecx, -24(%rbp)
LBB166_16:
	movl	-20(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	_decimal_expand
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	_decimal_expand
	movq	-8(%rbp), %rcx
	movsbl	1(%rcx), %eax
	cmpl	$0, %eax
	jne	LBB166_18
## %bb.17:
	movq	-16(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB166_19
LBB166_18:
	movq	-8(%rbp), %rax
	movb	$1, 1(%rax)
	jmp	LBB166_40
LBB166_19:
	movq	-8(%rbp), %rax
	movsbl	(%rax), %ecx
	movq	-16(%rbp), %rax
	movsbl	(%rax), %edx
	cmpl	%edx, %ecx
	jne	LBB166_28
## %bb.20:
	movl	$0, -40(%rbp)
	movl	-28(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
LBB166_21:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$0, -32(%rbp)
	jl	LBB166_27
## %bb.22:                              ##   in Loop: Header=BB166_21 Depth=1
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-32(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-32(%rbp), %rcx
	movsbl	(%rax,%rcx), %esi
	addl	%esi, %edx
	addl	-40(%rbp), %edx
	movl	%edx, -44(%rbp)
	cmpl	$10, -44(%rbp)
	jl	LBB166_24
## %bb.23:                              ##   in Loop: Header=BB166_21 Depth=1
	movl	$1, -40(%rbp)
	movl	-44(%rbp), %eax
	subl	$10, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	jmp	LBB166_25
LBB166_24:                              ##   in Loop: Header=BB166_21 Depth=1
	movl	$0, -40(%rbp)
	movl	-44(%rbp), %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
LBB166_25:                              ##   in Loop: Header=BB166_21 Depth=1
	jmp	LBB166_26
LBB166_26:                              ##   in Loop: Header=BB166_21 Depth=1
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -32(%rbp)
	jmp	LBB166_21
LBB166_27:
	jmp	LBB166_39
LBB166_28:
	movl	$0, -68(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	16(%rax), %rsi
	movslq	-28(%rbp), %rdx
	callq	_memcmp
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jge	LBB166_30
## %bb.29:
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-8(%rbp), %rax
	cmpb	$0, (%rax)
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %edx
                                        ## kill: def $dl killed $dl killed $edx
	movq	-8(%rbp), %rax
	movb	%dl, (%rax)
	jmp	LBB166_31
LBB166_30:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -64(%rbp)
LBB166_31:
	movl	-28(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
LBB166_32:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$0, -32(%rbp)
	jl	LBB166_38
## %bb.33:                              ##   in Loop: Header=BB166_32 Depth=1
	movq	-56(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	movq	-64(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movsbl	(%rax,%rcx), %esi
	subl	%esi, %edx
	subl	-68(%rbp), %edx
	movl	%edx, -72(%rbp)
	cmpl	$0, -72(%rbp)
	jge	LBB166_35
## %bb.34:                              ##   in Loop: Header=BB166_32 Depth=1
	movl	-72(%rbp), %eax
	addl	$10, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	$1, -68(%rbp)
	jmp	LBB166_36
LBB166_35:                              ##   in Loop: Header=BB166_32 Depth=1
	movl	-72(%rbp), %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	$0, -68(%rbp)
LBB166_36:                              ##   in Loop: Header=BB166_32 Depth=1
	jmp	LBB166_37
LBB166_37:                              ##   in Loop: Header=BB166_32 Depth=1
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -32(%rbp)
	jmp	LBB166_32
LBB166_38:
	jmp	LBB166_39
LBB166_39:
	jmp	LBB166_40
LBB166_40:
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function decimal_expand
_decimal_expand:                        ## @decimal_expand
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	cmpq	$0, -8(%rbp)
	jne	LBB167_2
## %bb.1:
	jmp	LBB167_11
LBB167_2:
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	subl	4(%rcx), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jne	LBB167_5
## %bb.3:
	cmpl	$0, -20(%rbp)
	jne	LBB167_5
## %bb.4:
	jmp	LBB167_11
LBB167_5:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rsi
	callq	_sqlite3_realloc64
	movq	-8(%rbp), %rdx
	movq	%rax, 16(%rdx)
	movq	-8(%rbp), %rax
	cmpq	$0, 16(%rax)
	jne	LBB167_7
## %bb.6:
	movq	-8(%rbp), %rax
	movb	$1, 1(%rax)
	jmp	LBB167_11
LBB167_7:
	cmpl	$0, -20(%rbp)
	je	LBB167_9
## %bb.8:
	movq	$-1, %rcx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-20(%rbp), %rdx
	addq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	16(%rdx), %rsi
	movq	-8(%rbp), %rdx
	movslq	4(%rdx), %rdx
	movq	%rax, %rdi
	callq	___memmove_chk
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-8(%rbp), %rdx
	movq	16(%rdx), %rdi
	movslq	-20(%rbp), %rdx
	movq	%rax, -32(%rbp)         ## 8-byte Spill
	callq	___memset_chk
	movl	-20(%rbp), %esi
	movq	-8(%rbp), %rcx
	addl	4(%rcx), %esi
	movl	%esi, 4(%rcx)
LBB167_9:
	cmpl	$0, -24(%rbp)
	je	LBB167_11
## %bb.10:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	-8(%rbp), %rdx
	movslq	4(%rdx), %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	___memset_chk
	movl	-24(%rbp), %esi
	movq	-8(%rbp), %rcx
	addl	4(%rcx), %esi
	movl	%esi, 4(%rcx)
	movl	-24(%rbp), %esi
	movq	-8(%rbp), %rcx
	addl	8(%rcx), %esi
	movl	%esi, 8(%rcx)
LBB167_11:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function seriesConnect
_seriesConnect:                         ## @seriesConnect
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -56(%rbp)
	movq	-16(%rbp), %rdi
	leaq	L_.str.137(%rip), %rsi
	callq	_sqlite3_declare_vtab
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	jne	LBB168_4
## %bb.1:
	movl	$24, %edi
	callq	_sqlite3_malloc
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	jne	LBB168_3
## %bb.2:
	movl	$7, -4(%rbp)
	jmp	LBB168_5
LBB168_3:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	movl	$24, %edx
	callq	___memset_chk
	movq	-16(%rbp), %rdi
	movl	$2, %esi
	movq	%rax, -80(%rbp)         ## 8-byte Spill
	movb	$0, %al
	callq	_sqlite3_vtab_config
LBB168_4:
	movl	-68(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB168_5:
	movl	-4(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function seriesBestIndex
_seriesBestIndex:                       ## @seriesBestIndex
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -64(%rbp)
	movl	$-1, -12(%rbp)
	movl	$-1, -16(%rbp)
	movl	$-1, -20(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -44(%rbp)
LBB169_1:                               ## =>This Inner Loop Header: Depth=1
	movl	-44(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	LBB169_18
## %bb.2:                               ##   in Loop: Header=BB169_1 Depth=1
	movq	-72(%rbp), %rax
	cmpl	$1, (%rax)
	jge	LBB169_4
## %bb.3:                               ##   in Loop: Header=BB169_1 Depth=1
	jmp	LBB169_17
LBB169_4:                               ##   in Loop: Header=BB169_1 Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-72(%rbp), %rcx
	movl	(%rcx), %edx
	subl	$1, %edx
	movl	%edx, -76(%rbp)
	cmpl	$0, -76(%rbp)
	movb	%al, -81(%rbp)          ## 1-byte Spill
	jl	LBB169_6
## %bb.5:                               ##   in Loop: Header=BB169_1 Depth=1
	cmpl	$2, -76(%rbp)
	setle	%al
	movb	%al, -81(%rbp)          ## 1-byte Spill
LBB169_6:                               ##   in Loop: Header=BB169_1 Depth=1
	movb	-81(%rbp), %al          ## 1-byte Reload
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movslq	%ecx, %rdx
	cmpq	$0, %rdx
	je	LBB169_8
## %bb.7:
	leaq	L___func__.seriesBestIndex(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.138(%rip), %rcx
	movl	$5812, %edx             ## imm = 0x16B4
	callq	___assert_rtn
LBB169_8:                               ##   in Loop: Header=BB169_1 Depth=1
	jmp	LBB169_9
LBB169_9:                               ##   in Loop: Header=BB169_1 Depth=1
	movl	-76(%rbp), %ecx
                                        ## kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -76(%rbp)
	jne	LBB169_11
## %bb.10:                              ##   in Loop: Header=BB169_1 Depth=1
	movl	$1, -56(%rbp)
LBB169_11:                              ##   in Loop: Header=BB169_1 Depth=1
	movq	-72(%rbp), %rax
	movzbl	5(%rax), %ecx
	cmpl	$0, %ecx
	jne	LBB169_13
## %bb.12:                              ##   in Loop: Header=BB169_1 Depth=1
	movl	-80(%rbp), %eax
	orl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	LBB169_17
LBB169_13:                              ##   in Loop: Header=BB169_1 Depth=1
	movq	-72(%rbp), %rax
	movzbl	4(%rax), %ecx
	cmpl	$2, %ecx
	jne	LBB169_15
## %bb.14:                              ##   in Loop: Header=BB169_1 Depth=1
	movl	-80(%rbp), %eax
	orl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-44(%rbp), %eax
	movslq	-76(%rbp), %rcx
	movl	%eax, -20(%rbp,%rcx,4)
LBB169_15:                              ##   in Loop: Header=BB169_1 Depth=1
	jmp	LBB169_16
LBB169_16:                              ##   in Loop: Header=BB169_1 Depth=1
	jmp	LBB169_17
LBB169_17:                              ##   in Loop: Header=BB169_1 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rcx
	addq	$12, %rcx
	movq	%rcx, -72(%rbp)
	jmp	LBB169_1
LBB169_18:
	movl	$0, -44(%rbp)
LBB169_19:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$3, -44(%rbp)
	jge	LBB169_24
## %bb.20:                              ##   in Loop: Header=BB169_19 Depth=1
	movslq	-44(%rbp), %rax
	movl	-20(%rbp,%rax,4), %ecx
	movl	%ecx, -48(%rbp)
	cmpl	$0, %ecx
	jl	LBB169_22
## %bb.21:                              ##   in Loop: Header=BB169_19 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movq	-40(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movb	$1, 4(%rcx,%rdx,8)
LBB169_22:                              ##   in Loop: Header=BB169_19 Depth=1
	jmp	LBB169_23
LBB169_23:                              ##   in Loop: Header=BB169_19 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	LBB169_19
LBB169_24:
	cmpl	$0, -56(%rbp)
	jne	LBB169_26
## %bb.25:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rdi
	callq	_sqlite3_free
	leaq	L_.str.139(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-32(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movl	$1, -24(%rbp)
	jmp	LBB169_38
LBB169_26:
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	xorl	$-1, %ecx
	andl	%ecx, %eax
	cmpl	$0, %eax
	je	LBB169_28
## %bb.27:
	movl	$19, -24(%rbp)
	jmp	LBB169_38
LBB169_28:
	movl	-52(%rbp), %eax
	andl	$3, %eax
	cmpl	$3, %eax
	jne	LBB169_36
## %bb.29:
	movl	-52(%rbp), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	setne	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	$2, %edx
	subl	%eax, %edx
	cvtsi2sd	%edx, %xmm0
	movq	-40(%rbp), %rsi
	movsd	%xmm0, 64(%rsi)
	movq	-40(%rbp), %rsi
	movq	$1000, 72(%rsi)         ## imm = 0x3E8
	movq	-40(%rbp), %rsi
	cmpl	$1, 16(%rsi)
	jl	LBB169_35
## %bb.30:
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	cmpl	$0, (%rax)
	jne	LBB169_35
## %bb.31:
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	cmpb	$0, 4(%rax)
	je	LBB169_33
## %bb.32:
	movl	-52(%rbp), %eax
	orl	$8, %eax
	movl	%eax, -52(%rbp)
	jmp	LBB169_34
LBB169_33:
	movl	-52(%rbp), %eax
	orl	$16, %eax
	movl	%eax, -52(%rbp)
LBB169_34:
	movq	-40(%rbp), %rax
	movl	$1, 60(%rax)
LBB169_35:
	jmp	LBB169_37
LBB169_36:
	movq	-40(%rbp), %rax
	movq	$2147483647, 72(%rax)   ## imm = 0x7FFFFFFF
LBB169_37:
	movl	-52(%rbp), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movl	$0, -24(%rbp)
LBB169_38:
	movl	-24(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movl	%eax, -88(%rbp)         ## 4-byte Spill
	jne	LBB169_40
## %bb.39:
	movl	-88(%rbp), %eax         ## 4-byte Reload
	addq	$96, %rsp
	popq	%rbp
	retq
LBB169_40:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function seriesDisconnect
_seriesDisconnect:                      ## @seriesDisconnect
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	xorl	%eax, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function seriesOpen
_seriesOpen:                            ## @seriesOpen
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$56, %edi
	callq	_sqlite3_malloc
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	LBB171_2
## %bb.1:
	movl	$7, -4(%rbp)
	jmp	LBB171_3
LBB171_2:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	movl	$56, %edx
	callq	___memset_chk
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	%rcx, (%rdx)
	movl	$0, -4(%rbp)
LBB171_3:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function seriesClose
_seriesClose:                           ## @seriesClose
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	xorl	%eax, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function seriesFilter
_seriesFilter:                          ## @seriesFilter
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	%r8, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -52(%rbp)
	movl	-12(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	LBB173_2
## %bb.1:
	movq	-40(%rbp), %rax
	movl	-52(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -52(%rbp)
	movslq	%ecx, %rsi
	movq	(%rax,%rsi,8), %rdi
	callq	_sqlite3_value_int64
	movq	-48(%rbp), %rsi
	movq	%rax, 32(%rsi)
	jmp	LBB173_3
LBB173_2:
	movq	-48(%rbp), %rax
	movq	$0, 32(%rax)
LBB173_3:
	movl	-12(%rbp), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	LBB173_5
## %bb.4:
	movq	-40(%rbp), %rax
	movl	-52(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -52(%rbp)
	movslq	%ecx, %rsi
	movq	(%rax,%rsi,8), %rdi
	callq	_sqlite3_value_int64
	movq	-48(%rbp), %rsi
	movq	%rax, 40(%rsi)
	jmp	LBB173_6
LBB173_5:
	movq	-48(%rbp), %rax
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	movq	%rcx, 40(%rax)
LBB173_6:
	movl	-12(%rbp), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	LBB173_15
## %bb.7:
	movq	-40(%rbp), %rax
	movl	-52(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -52(%rbp)
	movslq	%ecx, %rsi
	movq	(%rax,%rsi,8), %rdi
	callq	_sqlite3_value_int64
	movq	-48(%rbp), %rsi
	movq	%rax, 48(%rsi)
	movq	-48(%rbp), %rax
	cmpq	$0, 48(%rax)
	jne	LBB173_9
## %bb.8:
	movq	-48(%rbp), %rax
	movq	$1, 48(%rax)
	jmp	LBB173_14
LBB173_9:
	movq	-48(%rbp), %rax
	cmpq	$0, 48(%rax)
	jge	LBB173_13
## %bb.10:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-48(%rbp), %rdx
	subq	48(%rdx), %rcx
	movq	-48(%rbp), %rdx
	movq	%rcx, 48(%rdx)
	movl	-12(%rbp), %eax
	andl	$16, %eax
	cmpl	$0, %eax
	jne	LBB173_12
## %bb.11:
	movl	-12(%rbp), %eax
	orl	$8, %eax
	movl	%eax, -12(%rbp)
LBB173_12:
	jmp	LBB173_13
LBB173_13:
	jmp	LBB173_14
LBB173_14:
	jmp	LBB173_16
LBB173_15:
	movq	-48(%rbp), %rax
	movq	$1, 48(%rax)
LBB173_16:
	movl	$0, -52(%rbp)
LBB173_17:                              ## =>This Inner Loop Header: Depth=1
	movl	-52(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	LBB173_22
## %bb.18:                              ##   in Loop: Header=BB173_17 Depth=1
	movq	-40(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_sqlite3_value_type
	cmpl	$5, %eax
	jne	LBB173_20
## %bb.19:
	movq	-48(%rbp), %rax
	movq	$1, 32(%rax)
	movq	-48(%rbp), %rax
	movq	$0, 40(%rax)
	jmp	LBB173_22
LBB173_20:                              ##   in Loop: Header=BB173_17 Depth=1
	jmp	LBB173_21
LBB173_21:                              ##   in Loop: Header=BB173_17 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	LBB173_17
LBB173_22:
	movl	-12(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	LBB173_26
## %bb.23:
	movq	-48(%rbp), %rax
	movl	$1, 8(%rax)
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpq	$0, 48(%rax)
	jle	LBB173_25
## %bb.24:
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	-48(%rbp), %rcx
	subq	32(%rcx), %rax
	movq	-48(%rbp), %rcx
	cqto
	idivq	48(%rcx)
	movq	-48(%rbp), %rcx
	movq	24(%rcx), %rsi
	subq	%rdx, %rsi
	movq	%rsi, 24(%rcx)
LBB173_25:
	jmp	LBB173_27
LBB173_26:
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movq	32(%rax), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, 24(%rcx)
LBB173_27:
	xorl	%eax, %eax
	movq	-48(%rbp), %rcx
	movq	$1, 16(%rcx)
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function seriesNext
_seriesNext:                            ## @seriesNext
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	LBB174_2
## %bb.1:
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rdx
	subq	%rax, %rdx
	movq	%rdx, 24(%rcx)
	jmp	LBB174_3
LBB174_2:
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	addq	24(%rcx), %rax
	movq	%rax, 24(%rcx)
LBB174_3:
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rdx
	addq	$1, %rdx
	movq	%rdx, 16(%rcx)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function seriesEof
_seriesEof:                             ## @seriesEof
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	LBB175_2
## %bb.1:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	cmpq	32(%rcx), %rax
	setl	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	%esi, -4(%rbp)
	jmp	LBB175_3
LBB175_2:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	cmpq	40(%rcx), %rax
	setg	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	%esi, -4(%rbp)
LBB175_3:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function seriesColumn
_seriesColumn:                          ## @seriesColumn
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	$0, -40(%rbp)
	movl	-20(%rbp), %ecx
	movl	%ecx, %edx
	subl	$1, %edx
	movl	%ecx, -44(%rbp)         ## 4-byte Spill
	je	LBB176_1
	jmp	LBB176_6
LBB176_6:
	movl	-44(%rbp), %eax         ## 4-byte Reload
	subl	$2, %eax
	je	LBB176_2
	jmp	LBB176_7
LBB176_7:
	movl	-44(%rbp), %eax         ## 4-byte Reload
	subl	$3, %eax
	je	LBB176_3
	jmp	LBB176_4
LBB176_1:
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	LBB176_5
LBB176_2:
	movq	-32(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	LBB176_5
LBB176_3:
	movq	-32(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	LBB176_5
LBB176_4:
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -40(%rbp)
LBB176_5:
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_sqlite3_result_int64
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function seriesRowid
_seriesRowid:                           ## @seriesRowid
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, (%rdx)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function sqlite3re_compile
_sqlite3re_compile:                     ## @sqlite3re_compile
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	$0, (%rax)
	movl	$72, %edi
	callq	_sqlite3_malloc
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	LBB178_2
## %bb.1:
	leaq	L_.str.140(%rip), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB178_38
LBB178_2:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	movl	$72, %edx
	callq	___memset_chk
	movl	-28(%rbp), %esi
	cmpl	$0, %esi
	leaq	_re_next_char_nocase(%rip), %rcx
	leaq	_re_next_char(%rip), %rdx
	cmovneq	%rcx, %rdx
	movq	-40(%rbp), %rcx
	movq	%rdx, 40(%rcx)
	movq	-40(%rbp), %rdi
	movl	$30, %esi
	movq	%rax, -72(%rbp)         ## 8-byte Spill
	callq	_re_resize
	cmpl	$0, %eax
	je	LBB178_4
## %bb.3:
	movq	-40(%rbp), %rdi
	callq	_sqlite3re_free
	leaq	L_.str.140(%rip), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB178_38
LBB178_4:
	movq	-24(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$94, %ecx
	jne	LBB178_6
## %bb.5:
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	LBB178_7
LBB178_6:
	xorl	%edx, %edx
	movq	-40(%rbp), %rdi
	movl	$3, %esi
	callq	_re_append
LBB178_7:
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movq	-40(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-40(%rbp), %rdi
	callq	_re_subcompile_re
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	LBB178_9
## %bb.8:
	movq	-40(%rbp), %rdi
	callq	_sqlite3re_free
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB178_38
LBB178_9:
	movq	-40(%rbp), %rdi
	callq	_rePeek
	movzbl	%al, %ecx
	cmpl	$36, %ecx
	jne	LBB178_12
## %bb.10:
	movq	-40(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$1, %ecx
	movq	-40(%rbp), %rax
	cmpl	12(%rax), %ecx
	jl	LBB178_12
## %bb.11:
	xorl	%edx, %edx
	movq	-40(%rbp), %rdi
	movl	$1, %esi
	callq	_re_append
	xorl	%edx, %edx
	movq	-40(%rbp), %rdi
	movl	$6, %esi
	movl	%eax, -76(%rbp)         ## 4-byte Spill
	callq	_re_append
	movq	-40(%rbp), %rcx
	movq	-16(%rbp), %rdi
	movq	%rcx, (%rdi)
	jmp	LBB178_16
LBB178_12:
	movq	-40(%rbp), %rax
	movl	8(%rax), %ecx
	movq	-40(%rbp), %rax
	cmpl	12(%rax), %ecx
	jl	LBB178_14
## %bb.13:
	xorl	%edx, %edx
	movq	-40(%rbp), %rdi
	movl	$6, %esi
	callq	_re_append
	movq	-40(%rbp), %rcx
	movq	-16(%rbp), %rdi
	movq	%rcx, (%rdi)
	jmp	LBB178_15
LBB178_14:
	movq	-40(%rbp), %rdi
	callq	_sqlite3re_free
	leaq	L_.str.141(%rip), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB178_38
LBB178_15:
	jmp	LBB178_16
LBB178_16:
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movsbl	(%rax), %ecx
	cmpl	$3, %ecx
	jne	LBB178_37
## %bb.17:
	cmpl	$0, -28(%rbp)
	jne	LBB178_37
## %bb.18:
	movl	$0, -56(%rbp)
	movl	$1, -52(%rbp)
LBB178_19:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$10, -56(%rbp)
	movb	%al, -77(%rbp)          ## 1-byte Spill
	jge	LBB178_21
## %bb.20:                              ##   in Loop: Header=BB178_19 Depth=1
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-52(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$1, %edx
	sete	%sil
	movb	%sil, -77(%rbp)         ## 1-byte Spill
LBB178_21:                              ##   in Loop: Header=BB178_19 Depth=1
	movb	-77(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB178_22
	jmp	LBB178_33
LBB178_22:                              ##   in Loop: Header=BB178_19 Depth=1
	movq	-40(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movl	%edx, -60(%rbp)
	cmpl	$127, -60(%rbp)
	ja	LBB178_24
## %bb.23:                              ##   in Loop: Header=BB178_19 Depth=1
	movl	-60(%rbp), %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-40(%rbp), %rcx
	movl	-56(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -56(%rbp)
	movslq	%edx, %rdi
	movb	%al, 48(%rcx,%rdi)
	jmp	LBB178_31
LBB178_24:                              ##   in Loop: Header=BB178_19 Depth=1
	cmpl	$4095, -60(%rbp)        ## imm = 0xFFF
	ja	LBB178_26
## %bb.25:                              ##   in Loop: Header=BB178_19 Depth=1
	movl	-60(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-40(%rbp), %rcx
	movl	-56(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -56(%rbp)
	movslq	%edx, %rdi
	movb	%al, 48(%rcx,%rdi)
	movl	-60(%rbp), %edx
	andl	$63, %edx
	orl	$128, %edx
                                        ## kill: def $dl killed $dl killed $edx
	movq	-40(%rbp), %rcx
	movl	-56(%rbp), %esi
	movl	%esi, %r8d
	addl	$1, %r8d
	movl	%r8d, -56(%rbp)
	movslq	%esi, %rdi
	movb	%dl, 48(%rcx,%rdi)
	jmp	LBB178_30
LBB178_26:                              ##   in Loop: Header=BB178_19 Depth=1
	cmpl	$65535, -60(%rbp)       ## imm = 0xFFFF
	ja	LBB178_28
## %bb.27:                              ##   in Loop: Header=BB178_19 Depth=1
	movl	-60(%rbp), %eax
	shrl	$12, %eax
	orl	$208, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-40(%rbp), %rcx
	movl	-56(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -56(%rbp)
	movslq	%edx, %rdi
	movb	%al, 48(%rcx,%rdi)
	movl	-60(%rbp), %edx
	shrl	$6, %edx
	andl	$63, %edx
	orl	$128, %edx
                                        ## kill: def $dl killed $dl killed $edx
	movq	-40(%rbp), %rcx
	movl	-56(%rbp), %esi
	movl	%esi, %r8d
	addl	$1, %r8d
	movl	%r8d, -56(%rbp)
	movslq	%esi, %rdi
	movb	%dl, 48(%rcx,%rdi)
	movl	-60(%rbp), %esi
	andl	$63, %esi
	orl	$128, %esi
                                        ## kill: def $sil killed $sil killed $esi
	movq	-40(%rbp), %rcx
	movl	-56(%rbp), %r8d
	movl	%r8d, %r9d
	addl	$1, %r9d
	movl	%r9d, -56(%rbp)
	movslq	%r8d, %rdi
	movb	%sil, 48(%rcx,%rdi)
	jmp	LBB178_29
LBB178_28:
	jmp	LBB178_33
LBB178_29:                              ##   in Loop: Header=BB178_19 Depth=1
	jmp	LBB178_30
LBB178_30:                              ##   in Loop: Header=BB178_19 Depth=1
	jmp	LBB178_31
LBB178_31:                              ##   in Loop: Header=BB178_19 Depth=1
	jmp	LBB178_32
LBB178_32:                              ##   in Loop: Header=BB178_19 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	LBB178_19
LBB178_33:
	cmpl	$0, -56(%rbp)
	jle	LBB178_36
## %bb.34:
	movq	-40(%rbp), %rax
	movl	-56(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movzbl	48(%rax,%rdx), %ecx
	cmpl	$0, %ecx
	jne	LBB178_36
## %bb.35:
	movl	-56(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -56(%rbp)
LBB178_36:
	movl	-56(%rbp), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, 60(%rcx)
LBB178_37:
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -8(%rbp)
LBB178_38:
	movq	-8(%rbp), %rax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function sqlite3re_free
_sqlite3re_free:                        ## @sqlite3re_free
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	LBB179_2
## %bb.1:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	_sqlite3_free
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
LBB179_2:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function sqlite3re_match
_sqlite3re_match:                       ## @sqlite3re_match
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$416, %rsp              ## imm = 0x1A0
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -272(%rbp)
	movq	%rsi, -280(%rbp)
	movl	%edx, -284(%rbp)
	movl	$0, -316(%rbp)
	movl	$0, -320(%rbp)
	movl	$1, -324(%rbp)
	movl	$0, -328(%rbp)
	movl	$0, -332(%rbp)
	movq	-280(%rbp), %rax
	movq	%rax, -352(%rbp)
	movl	$0, -344(%rbp)
	cmpl	$0, -284(%rbp)
	jl	LBB180_2
## %bb.1:
	movl	-284(%rbp), %eax
	movl	%eax, -376(%rbp)        ## 4-byte Spill
	jmp	LBB180_3
LBB180_2:
	movq	-280(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -376(%rbp)        ## 4-byte Spill
LBB180_3:
	movl	-376(%rbp), %eax        ## 4-byte Reload
	movl	%eax, -340(%rbp)
	movq	-272(%rbp), %rcx
	cmpl	$0, 60(%rcx)
	je	LBB180_14
## %bb.4:
	movq	-272(%rbp), %rax
	movb	48(%rax), %cl
	movb	%cl, -353(%rbp)
LBB180_5:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-344(%rbp), %ecx
	movq	-272(%rbp), %rdx
	addl	60(%rdx), %ecx
	cmpl	-340(%rbp), %ecx
	movb	%al, -377(%rbp)         ## 1-byte Spill
	jg	LBB180_9
## %bb.6:                               ##   in Loop: Header=BB180_5 Depth=1
	movq	-280(%rbp), %rax
	movslq	-344(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	movzbl	-353(%rbp), %esi
	cmpl	%esi, %edx
	movb	$1, %dil
	movb	%dil, -378(%rbp)        ## 1-byte Spill
	jne	LBB180_8
## %bb.7:                               ##   in Loop: Header=BB180_5 Depth=1
	movq	-280(%rbp), %rax
	movslq	-344(%rbp), %rcx
	addq	%rcx, %rax
	movq	-272(%rbp), %rcx
	addq	$48, %rcx
	movq	-272(%rbp), %rdx
	movslq	60(%rdx), %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_strncmp
	cmpl	$0, %eax
	setne	%r8b
	movb	%r8b, -378(%rbp)        ## 1-byte Spill
LBB180_8:                               ##   in Loop: Header=BB180_5 Depth=1
	movb	-378(%rbp), %al         ## 1-byte Reload
	movb	%al, -377(%rbp)         ## 1-byte Spill
LBB180_9:                               ##   in Loop: Header=BB180_5 Depth=1
	movb	-377(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB180_10
	jmp	LBB180_11
LBB180_10:                              ##   in Loop: Header=BB180_5 Depth=1
	movl	-344(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -344(%rbp)
	jmp	LBB180_5
LBB180_11:
	movl	-344(%rbp), %eax
	movq	-272(%rbp), %rcx
	addl	60(%rcx), %eax
	cmpl	-340(%rbp), %eax
	jle	LBB180_13
## %bb.12:
	movl	$0, -260(%rbp)
	jmp	LBB180_95
LBB180_13:
	jmp	LBB180_14
LBB180_14:
	movq	-272(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, %eax
	cmpq	$50, %rax
	ja	LBB180_16
## %bb.15:
	leaq	-256(%rbp), %rax
	movq	$0, -312(%rbp)
	movq	%rax, -40(%rbp)
	jmp	LBB180_19
LBB180_16:
	movq	-272(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, %eax
	shlq	$2, %rax
	movq	%rax, %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -312(%rbp)
	cmpq	$0, -312(%rbp)
	jne	LBB180_18
## %bb.17:
	movl	$-1, -260(%rbp)
	jmp	LBB180_95
LBB180_18:
	movq	-312(%rbp), %rax
	movq	%rax, -40(%rbp)
LBB180_19:
	xorl	%esi, %esi
	movq	-40(%rbp), %rax
	movq	-272(%rbp), %rcx
	movl	64(%rcx), %edx
	movl	%edx, %ecx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	leaq	-48(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -304(%rbp)
	movq	-304(%rbp), %rax
	movl	$0, (%rax)
	movq	-304(%rbp), %rdi
	callq	_re_add_state
LBB180_20:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB180_24 Depth 2
                                        ##       Child Loop BB180_65 Depth 3
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -324(%rbp)
	movb	%al, -379(%rbp)         ## 1-byte Spill
	je	LBB180_22
## %bb.21:                              ##   in Loop: Header=BB180_20 Depth=1
	movq	-304(%rbp), %rax
	cmpl	$0, (%rax)
	seta	%cl
	movb	%cl, -379(%rbp)         ## 1-byte Spill
LBB180_22:                              ##   in Loop: Header=BB180_20 Depth=1
	movb	-379(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB180_23
	jmp	LBB180_87
LBB180_23:                              ##   in Loop: Header=BB180_20 Depth=1
	movl	-324(%rbp), %eax
	movl	%eax, -328(%rbp)
	movq	-272(%rbp), %rcx
	leaq	-352(%rbp), %rdi
	callq	*40(%rcx)
	movl	%eax, -324(%rbp)
	movq	-304(%rbp), %rcx
	movq	%rcx, -296(%rbp)
	movl	-320(%rbp), %eax
	movl	%eax, %ecx
	shlq	$4, %rcx
	leaq	-48(%rbp), %rdx
	addq	%rcx, %rdx
	movq	%rdx, -304(%rbp)
	movl	$1, %eax
	subl	-320(%rbp), %eax
	movl	%eax, -320(%rbp)
	movq	-304(%rbp), %rcx
	movl	$0, (%rcx)
	movl	$0, -316(%rbp)
LBB180_24:                              ##   Parent Loop BB180_20 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB180_65 Depth 3
	movl	-316(%rbp), %eax
	movq	-296(%rbp), %rcx
	cmpl	(%rcx), %eax
	jae	LBB180_86
## %bb.25:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-296(%rbp), %rax
	movq	8(%rax), %rax
	movl	-316(%rbp), %ecx
	movl	%ecx, %edx
	movzwl	(%rax,%rdx,2), %ecx
	movl	%ecx, -360(%rbp)
	movq	-272(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-360(%rbp), %rdx
	movsbl	(%rax,%rdx), %ecx
	decl	%ecx
	movl	%ecx, %eax
	subl	$16, %ecx
	movq	%rax, -392(%rbp)        ## 8-byte Spill
	ja	LBB180_84
## %bb.98:                              ##   in Loop: Header=BB180_24 Depth=2
	leaq	LJTI180_0(%rip), %rax
	movq	-392(%rbp), %rcx        ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB180_26:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-272(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-360(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	cmpl	-324(%rbp), %edx
	jne	LBB180_28
## %bb.27:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-304(%rbp), %rdi
	movl	-360(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %esi
	callq	_re_add_state
LBB180_28:                              ##   in Loop: Header=BB180_24 Depth=2
	jmp	LBB180_84
LBB180_29:                              ##   in Loop: Header=BB180_24 Depth=2
	cmpl	$0, -324(%rbp)
	je	LBB180_31
## %bb.30:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-304(%rbp), %rdi
	movl	-360(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %esi
	callq	_re_add_state
LBB180_31:                              ##   in Loop: Header=BB180_24 Depth=2
	jmp	LBB180_84
LBB180_32:                              ##   in Loop: Header=BB180_24 Depth=2
	movl	-324(%rbp), %edi
	callq	_re_word_char
	cmpl	$0, %eax
	je	LBB180_34
## %bb.33:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-304(%rbp), %rdi
	movl	-360(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %esi
	callq	_re_add_state
LBB180_34:                              ##   in Loop: Header=BB180_24 Depth=2
	jmp	LBB180_84
LBB180_35:                              ##   in Loop: Header=BB180_24 Depth=2
	movl	-324(%rbp), %edi
	callq	_re_word_char
	cmpl	$0, %eax
	jne	LBB180_38
## %bb.36:                              ##   in Loop: Header=BB180_24 Depth=2
	cmpl	$0, -324(%rbp)
	je	LBB180_38
## %bb.37:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-304(%rbp), %rdi
	movl	-360(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %esi
	callq	_re_add_state
LBB180_38:                              ##   in Loop: Header=BB180_24 Depth=2
	jmp	LBB180_84
LBB180_39:                              ##   in Loop: Header=BB180_24 Depth=2
	movl	-324(%rbp), %edi
	callq	_re_digit_char
	cmpl	$0, %eax
	je	LBB180_41
## %bb.40:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-304(%rbp), %rdi
	movl	-360(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %esi
	callq	_re_add_state
LBB180_41:                              ##   in Loop: Header=BB180_24 Depth=2
	jmp	LBB180_84
LBB180_42:                              ##   in Loop: Header=BB180_24 Depth=2
	movl	-324(%rbp), %edi
	callq	_re_digit_char
	cmpl	$0, %eax
	jne	LBB180_45
## %bb.43:                              ##   in Loop: Header=BB180_24 Depth=2
	cmpl	$0, -324(%rbp)
	je	LBB180_45
## %bb.44:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-304(%rbp), %rdi
	movl	-360(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %esi
	callq	_re_add_state
LBB180_45:                              ##   in Loop: Header=BB180_24 Depth=2
	jmp	LBB180_84
LBB180_46:                              ##   in Loop: Header=BB180_24 Depth=2
	movl	-324(%rbp), %edi
	callq	_re_space_char
	cmpl	$0, %eax
	je	LBB180_48
## %bb.47:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-304(%rbp), %rdi
	movl	-360(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %esi
	callq	_re_add_state
LBB180_48:                              ##   in Loop: Header=BB180_24 Depth=2
	jmp	LBB180_84
LBB180_49:                              ##   in Loop: Header=BB180_24 Depth=2
	movl	-324(%rbp), %edi
	callq	_re_space_char
	cmpl	$0, %eax
	jne	LBB180_52
## %bb.50:                              ##   in Loop: Header=BB180_24 Depth=2
	cmpl	$0, -324(%rbp)
	je	LBB180_52
## %bb.51:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-304(%rbp), %rdi
	movl	-360(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %esi
	callq	_re_add_state
LBB180_52:                              ##   in Loop: Header=BB180_24 Depth=2
	jmp	LBB180_84
LBB180_53:                              ##   in Loop: Header=BB180_24 Depth=2
	movl	-324(%rbp), %edi
	callq	_re_word_char
	movl	-328(%rbp), %edi
	movl	%eax, -396(%rbp)        ## 4-byte Spill
	callq	_re_word_char
	movl	-396(%rbp), %ecx        ## 4-byte Reload
	cmpl	%eax, %ecx
	je	LBB180_55
## %bb.54:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-296(%rbp), %rdi
	movl	-360(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %esi
	callq	_re_add_state
LBB180_55:                              ##   in Loop: Header=BB180_24 Depth=2
	jmp	LBB180_84
LBB180_56:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-304(%rbp), %rdi
	movl	-360(%rbp), %esi
	callq	_re_add_state
	movq	-296(%rbp), %rdi
	movl	-360(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %esi
	callq	_re_add_state
	jmp	LBB180_84
LBB180_57:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-296(%rbp), %rdi
	movl	-360(%rbp), %eax
	movq	-272(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-360(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, %esi
	callq	_re_add_state
	movq	-296(%rbp), %rdi
	movl	-360(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %esi
	callq	_re_add_state
	jmp	LBB180_84
LBB180_58:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-296(%rbp), %rdi
	movl	-360(%rbp), %eax
	movq	-272(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-360(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, %esi
	callq	_re_add_state
	jmp	LBB180_84
LBB180_59:
	movl	$1, -332(%rbp)
	jmp	LBB180_94
LBB180_60:                              ##   in Loop: Header=BB180_24 Depth=2
	cmpl	$0, -324(%rbp)
	jne	LBB180_62
## %bb.61:                              ##   in Loop: Header=BB180_24 Depth=2
	jmp	LBB180_84
LBB180_62:                              ##   in Loop: Header=BB180_24 Depth=2
	jmp	LBB180_64
LBB180_63:                              ##   in Loop: Header=BB180_24 Depth=2
	jmp	LBB180_64
LBB180_64:                              ##   in Loop: Header=BB180_24 Depth=2
	movl	$1, -364(%rbp)
	movq	-272(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-360(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movl	%edx, -368(%rbp)
	movl	$0, -372(%rbp)
	movl	$1, -364(%rbp)
LBB180_65:                              ##   Parent Loop BB180_20 Depth=1
                                        ##     Parent Loop BB180_24 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -364(%rbp)
	movb	%al, -397(%rbp)         ## 1-byte Spill
	jle	LBB180_67
## %bb.66:                              ##   in Loop: Header=BB180_65 Depth=3
	movl	-364(%rbp), %eax
	cmpl	-368(%rbp), %eax
	setl	%cl
	movb	%cl, -397(%rbp)         ## 1-byte Spill
LBB180_67:                              ##   in Loop: Header=BB180_65 Depth=3
	movb	-397(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB180_68
	jmp	LBB180_79
LBB180_68:                              ##   in Loop: Header=BB180_65 Depth=3
	movq	-272(%rbp), %rax
	movq	24(%rax), %rax
	movl	-360(%rbp), %ecx
	addl	-364(%rbp), %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$9, %ecx
	jne	LBB180_72
## %bb.69:                              ##   in Loop: Header=BB180_65 Depth=3
	movq	-272(%rbp), %rax
	movq	32(%rax), %rax
	movl	-360(%rbp), %ecx
	addl	-364(%rbp), %ecx
	movslq	%ecx, %rdx
	movl	(%rax,%rdx,4), %ecx
	cmpl	-324(%rbp), %ecx
	jne	LBB180_71
## %bb.70:                              ##   in Loop: Header=BB180_65 Depth=3
	movl	$1, -372(%rbp)
	movl	$-1, -364(%rbp)
LBB180_71:                              ##   in Loop: Header=BB180_65 Depth=3
	jmp	LBB180_77
LBB180_72:                              ##   in Loop: Header=BB180_65 Depth=3
	movq	-272(%rbp), %rax
	movq	32(%rax), %rax
	movl	-360(%rbp), %ecx
	addl	-364(%rbp), %ecx
	movslq	%ecx, %rdx
	movl	(%rax,%rdx,4), %ecx
	cmpl	-324(%rbp), %ecx
	jg	LBB180_75
## %bb.73:                              ##   in Loop: Header=BB180_65 Depth=3
	movq	-272(%rbp), %rax
	movq	32(%rax), %rax
	movl	-360(%rbp), %ecx
	addl	-364(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movl	(%rax,%rdx,4), %ecx
	cmpl	-324(%rbp), %ecx
	jl	LBB180_75
## %bb.74:                              ##   in Loop: Header=BB180_65 Depth=3
	movl	$1, -372(%rbp)
	movl	$-1, -364(%rbp)
	jmp	LBB180_76
LBB180_75:                              ##   in Loop: Header=BB180_65 Depth=3
	movl	-364(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -364(%rbp)
LBB180_76:                              ##   in Loop: Header=BB180_65 Depth=3
	jmp	LBB180_77
LBB180_77:                              ##   in Loop: Header=BB180_65 Depth=3
	jmp	LBB180_78
LBB180_78:                              ##   in Loop: Header=BB180_65 Depth=3
	movl	-364(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -364(%rbp)
	jmp	LBB180_65
LBB180_79:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-272(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-360(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$8, %edx
	jne	LBB180_81
## %bb.80:                              ##   in Loop: Header=BB180_24 Depth=2
	cmpl	$0, -372(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -372(%rbp)
LBB180_81:                              ##   in Loop: Header=BB180_24 Depth=2
	cmpl	$0, -372(%rbp)
	je	LBB180_83
## %bb.82:                              ##   in Loop: Header=BB180_24 Depth=2
	movq	-304(%rbp), %rdi
	movl	-360(%rbp), %eax
	addl	-368(%rbp), %eax
	movl	%eax, %esi
	callq	_re_add_state
LBB180_83:                              ##   in Loop: Header=BB180_24 Depth=2
	jmp	LBB180_84
LBB180_84:                              ##   in Loop: Header=BB180_24 Depth=2
	jmp	LBB180_85
LBB180_85:                              ##   in Loop: Header=BB180_24 Depth=2
	movl	-316(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -316(%rbp)
	jmp	LBB180_24
LBB180_86:                              ##   in Loop: Header=BB180_20 Depth=1
	jmp	LBB180_20
LBB180_87:
	movl	$0, -316(%rbp)
LBB180_88:                              ## =>This Inner Loop Header: Depth=1
	movl	-316(%rbp), %eax
	movq	-304(%rbp), %rcx
	cmpl	(%rcx), %eax
	jae	LBB180_93
## %bb.89:                              ##   in Loop: Header=BB180_88 Depth=1
	movq	-272(%rbp), %rax
	movq	24(%rax), %rax
	movq	-304(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	-316(%rbp), %edx
	movl	%edx, %esi
	movzwl	(%rcx,%rsi,2), %edx
	movl	%edx, %ecx
	movsbl	(%rax,%rcx), %edx
	cmpl	$6, %edx
	jne	LBB180_91
## %bb.90:
	movl	$1, -332(%rbp)
	jmp	LBB180_93
LBB180_91:                              ##   in Loop: Header=BB180_88 Depth=1
	jmp	LBB180_92
LBB180_92:                              ##   in Loop: Header=BB180_88 Depth=1
	movl	-316(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -316(%rbp)
	jmp	LBB180_88
LBB180_93:
	jmp	LBB180_94
LBB180_94:
	movq	-312(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	movl	-332(%rbp), %ecx
	movl	%ecx, -260(%rbp)
LBB180_95:
	movl	-260(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movl	%eax, -404(%rbp)        ## 4-byte Spill
	jne	LBB180_97
## %bb.96:
	movl	-404(%rbp), %eax        ## 4-byte Reload
	addq	$416, %rsp              ## imm = 0x1A0
	popq	%rbp
	retq
LBB180_97:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L180_0_set_26, LBB180_26-LJTI180_0
.set L180_0_set_29, LBB180_29-LJTI180_0
.set L180_0_set_56, LBB180_56-LJTI180_0
.set L180_0_set_57, LBB180_57-LJTI180_0
.set L180_0_set_58, LBB180_58-LJTI180_0
.set L180_0_set_59, LBB180_59-LJTI180_0
.set L180_0_set_63, LBB180_63-LJTI180_0
.set L180_0_set_60, LBB180_60-LJTI180_0
.set L180_0_set_84, LBB180_84-LJTI180_0
.set L180_0_set_32, LBB180_32-LJTI180_0
.set L180_0_set_35, LBB180_35-LJTI180_0
.set L180_0_set_39, LBB180_39-LJTI180_0
.set L180_0_set_42, LBB180_42-LJTI180_0
.set L180_0_set_46, LBB180_46-LJTI180_0
.set L180_0_set_49, LBB180_49-LJTI180_0
.set L180_0_set_53, LBB180_53-LJTI180_0
LJTI180_0:
	.long	L180_0_set_26
	.long	L180_0_set_29
	.long	L180_0_set_56
	.long	L180_0_set_57
	.long	L180_0_set_58
	.long	L180_0_set_59
	.long	L180_0_set_63
	.long	L180_0_set_60
	.long	L180_0_set_84
	.long	L180_0_set_84
	.long	L180_0_set_32
	.long	L180_0_set_35
	.long	L180_0_set_39
	.long	L180_0_set_42
	.long	L180_0_set_46
	.long	L180_0_set_49
	.long	L180_0_set_53
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_next_char_nocase
_re_next_char_nocase:                   ## @re_next_char_nocase
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_re_next_char
	movl	%eax, -12(%rbp)
	cmpl	$65, -12(%rbp)
	jb	LBB181_3
## %bb.1:
	cmpl	$90, -12(%rbp)
	ja	LBB181_3
## %bb.2:
	movl	-12(%rbp), %eax
	addl	$32, %eax
	movl	%eax, -12(%rbp)
LBB181_3:
	movl	-12(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_next_char
_re_next_char:                          ## @re_next_char
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	12(%rax), %ecx
	jl	LBB182_2
## %bb.1:
	movl	$0, -4(%rbp)
	jmp	LBB182_32
LBB182_2:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, 8(%rcx)
	movslq	%edx, %rcx
	movzbl	(%rax,%rcx), %edx
	movl	%edx, -20(%rbp)
	cmpl	$128, -20(%rbp)
	jb	LBB182_31
## %bb.3:
	movl	-20(%rbp), %eax
	andl	$224, %eax
	cmpl	$192, %eax
	jne	LBB182_9
## %bb.4:
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	12(%rax), %ecx
	jge	LBB182_9
## %bb.5:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	8(%rcx), %rcx
	movzbl	(%rax,%rcx), %edx
	andl	$192, %edx
	cmpl	$128, %edx
	jne	LBB182_9
## %bb.6:
	movl	-20(%rbp), %eax
	andl	$31, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	8(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, 8(%rdx)
	movslq	%esi, %rdx
	movzbl	(%rcx,%rdx), %esi
	andl	$63, %esi
	orl	%esi, %eax
	movl	%eax, -20(%rbp)
	cmpl	$128, -20(%rbp)
	jae	LBB182_8
## %bb.7:
	movl	$65533, -20(%rbp)       ## imm = 0xFFFD
LBB182_8:
	jmp	LBB182_30
LBB182_9:
	movl	-20(%rbp), %eax
	andl	$240, %eax
	cmpl	$224, %eax
	jne	LBB182_18
## %bb.10:
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$1, %ecx
	movq	-16(%rbp), %rax
	cmpl	12(%rax), %ecx
	jge	LBB182_18
## %bb.11:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	8(%rcx), %rcx
	movzbl	(%rax,%rcx), %edx
	andl	$192, %edx
	cmpl	$128, %edx
	jne	LBB182_18
## %bb.12:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %edx
	addl	$1, %edx
	movslq	%edx, %rcx
	movzbl	(%rax,%rcx), %edx
	andl	$192, %edx
	cmpl	$128, %edx
	jne	LBB182_18
## %bb.13:
	movl	-20(%rbp), %eax
	andl	$15, %eax
	shll	$12, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	8(%rdx), %rdx
	movzbl	(%rcx,%rdx), %esi
	andl	$63, %esi
	shll	$6, %esi
	orl	%esi, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	8(%rdx), %esi
	addl	$1, %esi
	movslq	%esi, %rdx
	movzbl	(%rcx,%rdx), %esi
	andl	$63, %esi
	orl	%esi, %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %eax
	addl	$2, %eax
	movl	%eax, 8(%rcx)
	cmpl	$2047, -20(%rbp)        ## imm = 0x7FF
	jbe	LBB182_16
## %bb.14:
	cmpl	$55296, -20(%rbp)       ## imm = 0xD800
	jb	LBB182_17
## %bb.15:
	cmpl	$57343, -20(%rbp)       ## imm = 0xDFFF
	ja	LBB182_17
LBB182_16:
	movl	$65533, -20(%rbp)       ## imm = 0xFFFD
LBB182_17:
	jmp	LBB182_29
LBB182_18:
	movl	-20(%rbp), %eax
	andl	$248, %eax
	cmpl	$240, %eax
	jne	LBB182_27
## %bb.19:
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$3, %ecx
	movq	-16(%rbp), %rax
	cmpl	12(%rax), %ecx
	jge	LBB182_27
## %bb.20:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	8(%rcx), %rcx
	movzbl	(%rax,%rcx), %edx
	andl	$192, %edx
	cmpl	$128, %edx
	jne	LBB182_27
## %bb.21:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %edx
	addl	$1, %edx
	movslq	%edx, %rcx
	movzbl	(%rax,%rcx), %edx
	andl	$192, %edx
	cmpl	$128, %edx
	jne	LBB182_27
## %bb.22:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %edx
	addl	$2, %edx
	movslq	%edx, %rcx
	movzbl	(%rax,%rcx), %edx
	andl	$192, %edx
	cmpl	$128, %edx
	jne	LBB182_27
## %bb.23:
	movl	-20(%rbp), %eax
	andl	$7, %eax
	shll	$18, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	8(%rdx), %rdx
	movzbl	(%rcx,%rdx), %esi
	andl	$63, %esi
	shll	$12, %esi
	orl	%esi, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	8(%rdx), %esi
	addl	$1, %esi
	movslq	%esi, %rdx
	movzbl	(%rcx,%rdx), %esi
	andl	$63, %esi
	shll	$6, %esi
	orl	%esi, %eax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movl	8(%rdx), %esi
	addl	$2, %esi
	movslq	%esi, %rdx
	movzbl	(%rcx,%rdx), %esi
	andl	$63, %esi
	orl	%esi, %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %eax
	addl	$3, %eax
	movl	%eax, 8(%rcx)
	cmpl	$65535, -20(%rbp)       ## imm = 0xFFFF
	jbe	LBB182_25
## %bb.24:
	cmpl	$1114111, -20(%rbp)     ## imm = 0x10FFFF
	jbe	LBB182_26
LBB182_25:
	movl	$65533, -20(%rbp)       ## imm = 0xFFFD
LBB182_26:
	jmp	LBB182_28
LBB182_27:
	movl	$65533, -20(%rbp)       ## imm = 0xFFFD
LBB182_28:
	jmp	LBB182_29
LBB182_29:
	jmp	LBB182_30
LBB182_30:
	jmp	LBB182_31
LBB182_31:
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB182_32:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_resize
_re_resize:                             ## @re_resize
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rdi
	movslq	-20(%rbp), %rax
	shlq	$0, %rax
	movq	%rax, %rsi
	callq	_sqlite3_realloc64
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	LBB183_2
## %bb.1:
	movl	$1, -4(%rbp)
	jmp	LBB183_5
LBB183_2:
	movq	-32(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-20(%rbp), %rcx
	shlq	$2, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_sqlite3_realloc64
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	LBB183_4
## %bb.3:
	movl	$1, -4(%rbp)
	jmp	LBB183_5
LBB183_4:
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movl	-20(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 68(%rax)
	movl	$0, -4(%rbp)
LBB183_5:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_append
_re_append:                             ## @re_append
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	64(%rax), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	callq	_re_insert
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_subcompile_re
_re_subcompile_re:                      ## @re_subcompile_re
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rdi
	callq	_re_subcompile_string
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	LBB185_2
## %bb.1:
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB185_8
LBB185_2:
	jmp	LBB185_3
LBB185_3:                               ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rdi
	callq	_rePeek
	movzbl	%al, %ecx
	cmpl	$124, %ecx
	jne	LBB185_7
## %bb.4:                               ##   in Loop: Header=BB185_3 Depth=1
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	subl	-28(%rbp), %ecx
	movl	$4, %edx
	callq	_re_insert
	xorl	%edx, %edx
	movq	-16(%rbp), %rdi
	movl	$5, %esi
	movl	%eax, -40(%rbp)         ## 4-byte Spill
	callq	_re_append
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rdi
	movl	8(%rdi), %eax
	addl	$1, %eax
	movl	%eax, 8(%rdi)
	movq	-16(%rbp), %rdi
	callq	_re_subcompile_string
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	LBB185_6
## %bb.5:
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB185_8
LBB185_6:                               ##   in Loop: Header=BB185_3 Depth=1
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	subl	-36(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-36(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
	jmp	LBB185_3
LBB185_7:
	movq	$0, -8(%rbp)
LBB185_8:
	movq	-8(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function rePeek
_rePeek:                                ## @rePeek
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	12(%rax), %ecx
	jge	LBB186_2
## %bb.1:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	8(%rcx), %rcx
	movzbl	(%rax,%rcx), %edx
	movl	%edx, -12(%rbp)         ## 4-byte Spill
	jmp	LBB186_3
LBB186_2:
	xorl	%eax, %eax
	movl	%eax, -12(%rbp)         ## 4-byte Spill
	jmp	LBB186_3
LBB186_3:
	movl	-12(%rbp), %eax         ## 4-byte Reload
                                        ## kill: def $al killed $al killed $eax
	movzbl	%al, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_insert
_re_insert:                             ## @re_insert
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	68(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	64(%rax), %ecx
	ja	LBB187_3
## %bb.1:
	movq	-16(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	68(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, %esi
	callq	_re_resize
	cmpl	$0, %eax
	je	LBB187_3
## %bb.2:
	movl	$0, -4(%rbp)
	jmp	LBB187_8
LBB187_3:
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, -32(%rbp)
LBB187_4:                               ## =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	LBB187_7
## %bb.5:                               ##   in Loop: Header=BB187_4 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movl	-32(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movb	(%rax,%rdx), %sil
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-32(%rbp), %rdx
	movb	%sil, (%rax,%rdx)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movl	-32(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movl	(%rax,%rdx,4), %ecx
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-32(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
## %bb.6:                               ##   in Loop: Header=BB187_4 Depth=1
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -32(%rbp)
	jmp	LBB187_4
LBB187_7:
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 64(%rax)
	movl	-24(%rbp), %ecx
                                        ## kill: def $cl killed $cl killed $ecx
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-20(%rbp), %rdx
	movb	%cl, (%rax,%rdx)
	movl	-28(%rbp), %esi
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-20(%rbp), %rdx
	movl	%esi, (%rax,%rdx,4)
	movl	-20(%rbp), %esi
	movl	%esi, -4(%rbp)
LBB187_8:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_subcompile_string
_re_subcompile_string:                  ## @re_subcompile_string
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -16(%rbp)
	movl	$-1, -20(%rbp)
LBB188_1:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB188_25 Depth 2
                                        ##     Child Loop BB188_31 Depth 2
                                        ##     Child Loop BB188_46 Depth 2
                                        ##     Child Loop BB188_51 Depth 2
                                        ##     Child Loop BB188_62 Depth 2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	movl	%eax, -28(%rbp)
	cmpl	$0, %eax
	je	LBB188_93
## %bb.2:                               ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movl	-28(%rbp), %ecx
	addl	$-36, %ecx
	movl	%ecx, %eax
	subl	$88, %ecx
	movq	%rax, -72(%rbp)         ## 8-byte Spill
	ja	LBB188_91
## %bb.95:                              ##   in Loop: Header=BB188_1 Depth=1
	leaq	LJTI188_0(%rip), %rax
	movq	-72(%rbp), %rcx         ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB188_3:
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 8(%rax)
	movq	$0, -8(%rbp)
	jmp	LBB188_94
LBB188_4:                               ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rdi
	callq	_re_subcompile_re
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	LBB188_6
## %bb.5:
	movq	-40(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB188_94
LBB188_6:                               ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rdi
	callq	_rePeek
	movzbl	%al, %ecx
	cmpl	$41, %ecx
	je	LBB188_8
## %bb.7:
	leaq	L_.str.142(%rip), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB188_94
LBB188_8:                               ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 8(%rax)
	jmp	LBB188_92
LBB188_9:                               ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rdi
	callq	_rePeek
	movzbl	%al, %ecx
	cmpl	$42, %ecx
	jne	LBB188_11
## %bb.10:                              ##   in Loop: Header=BB188_1 Depth=1
	xorl	%edx, %edx
	movq	-16(%rbp), %rdi
	movl	$3, %esi
	callq	_re_append
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %edx
	addl	$1, %edx
	movl	%edx, 8(%rcx)
	jmp	LBB188_12
LBB188_11:                              ##   in Loop: Header=BB188_1 Depth=1
	xorl	%edx, %edx
	movq	-16(%rbp), %rdi
	movl	$2, %esi
	callq	_re_append
LBB188_12:                              ##   in Loop: Header=BB188_1 Depth=1
	jmp	LBB188_92
LBB188_13:                              ##   in Loop: Header=BB188_1 Depth=1
	cmpl	$0, -20(%rbp)
	jge	LBB188_15
## %bb.14:
	leaq	L_.str.143(%rip), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB188_94
LBB188_15:                              ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	subl	-20(%rbp), %ecx
	addl	$1, %ecx
	movl	$5, %edx
	callq	_re_insert
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %r8
	subl	64(%r8), %ecx
	addl	$1, %ecx
	movl	$4, %esi
	movl	%ecx, %edx
	movl	%eax, -76(%rbp)         ## 4-byte Spill
	callq	_re_append
	jmp	LBB188_92
LBB188_16:                              ##   in Loop: Header=BB188_1 Depth=1
	cmpl	$0, -20(%rbp)
	jge	LBB188_18
## %bb.17:
	leaq	L_.str.144(%rip), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB188_94
LBB188_18:                              ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	64(%rcx), %eax
	movl	$4, %esi
	movl	%eax, %edx
	callq	_re_append
	jmp	LBB188_92
LBB188_19:                              ##   in Loop: Header=BB188_1 Depth=1
	cmpl	$0, -20(%rbp)
	jge	LBB188_21
## %bb.20:
	leaq	L_.str.145(%rip), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB188_94
LBB188_21:                              ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	subl	-20(%rbp), %ecx
	addl	$1, %ecx
	movl	$4, %edx
	callq	_re_insert
	jmp	LBB188_92
LBB188_22:                              ##   in Loop: Header=BB188_1 Depth=1
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	cmpl	$0, -20(%rbp)
	jge	LBB188_24
## %bb.23:
	leaq	L_.str.146(%rip), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB188_94
LBB188_24:                              ##   in Loop: Header=BB188_1 Depth=1
	jmp	LBB188_25
LBB188_25:                              ##   Parent Loop BB188_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rdi
	callq	_rePeek
	xorl	%ecx, %ecx
                                        ## kill: def $cl killed $cl killed $ecx
	movzbl	%al, %edx
	movl	%edx, -28(%rbp)
	cmpl	$48, %edx
	movb	%cl, -77(%rbp)          ## 1-byte Spill
	jb	LBB188_27
## %bb.26:                              ##   in Loop: Header=BB188_25 Depth=2
	cmpl	$57, -28(%rbp)
	setbe	%al
	movb	%al, -77(%rbp)          ## 1-byte Spill
LBB188_27:                              ##   in Loop: Header=BB188_25 Depth=2
	movb	-77(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB188_28
	jmp	LBB188_29
LBB188_28:                              ##   in Loop: Header=BB188_25 Depth=2
	imull	$10, -44(%rbp), %eax
	addl	-28(%rbp), %eax
	subl	$48, %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %eax
	addl	$1, %eax
	movl	%eax, 8(%rcx)
	jmp	LBB188_25
LBB188_29:                              ##   in Loop: Header=BB188_1 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -48(%rbp)
	cmpl	$44, -28(%rbp)
	jne	LBB188_36
## %bb.30:                              ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 8(%rax)
	movl	$0, -48(%rbp)
LBB188_31:                              ##   Parent Loop BB188_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rdi
	callq	_rePeek
	xorl	%ecx, %ecx
                                        ## kill: def $cl killed $cl killed $ecx
	movzbl	%al, %edx
	movl	%edx, -28(%rbp)
	cmpl	$48, %edx
	movb	%cl, -78(%rbp)          ## 1-byte Spill
	jb	LBB188_33
## %bb.32:                              ##   in Loop: Header=BB188_31 Depth=2
	cmpl	$57, -28(%rbp)
	setbe	%al
	movb	%al, -78(%rbp)          ## 1-byte Spill
LBB188_33:                              ##   in Loop: Header=BB188_31 Depth=2
	movb	-78(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB188_34
	jmp	LBB188_35
LBB188_34:                              ##   in Loop: Header=BB188_31 Depth=2
	imull	$10, -48(%rbp), %eax
	addl	-28(%rbp), %eax
	subl	$48, %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %eax
	addl	$1, %eax
	movl	%eax, 8(%rcx)
	jmp	LBB188_31
LBB188_35:                              ##   in Loop: Header=BB188_1 Depth=1
	jmp	LBB188_36
LBB188_36:                              ##   in Loop: Header=BB188_1 Depth=1
	cmpl	$125, -28(%rbp)
	je	LBB188_38
## %bb.37:
	leaq	L_.str.147(%rip), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB188_94
LBB188_38:                              ##   in Loop: Header=BB188_1 Depth=1
	cmpl	$0, -48(%rbp)
	jle	LBB188_41
## %bb.39:                              ##   in Loop: Header=BB188_1 Depth=1
	movl	-48(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	LBB188_41
## %bb.40:
	leaq	L_.str.148(%rip), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB188_94
LBB188_41:                              ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	subl	-20(%rbp), %ecx
	movl	%ecx, -52(%rbp)
	cmpl	$0, -44(%rbp)
	jne	LBB188_45
## %bb.42:                              ##   in Loop: Header=BB188_1 Depth=1
	cmpl	$0, -48(%rbp)
	jne	LBB188_44
## %bb.43:
	leaq	L_.str.149(%rip), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB188_94
LBB188_44:                              ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	$4, %edx
	movl	%eax, %ecx
	callq	_re_insert
	movl	-48(%rbp), %ecx
	addl	$-1, %ecx
	movl	%ecx, -48(%rbp)
	jmp	LBB188_50
LBB188_45:                              ##   in Loop: Header=BB188_1 Depth=1
	movl	$1, -56(%rbp)
LBB188_46:                              ##   Parent Loop BB188_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	LBB188_49
## %bb.47:                              ##   in Loop: Header=BB188_46 Depth=2
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	callq	_re_copy
## %bb.48:                              ##   in Loop: Header=BB188_46 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	LBB188_46
LBB188_49:                              ##   in Loop: Header=BB188_1 Depth=1
	jmp	LBB188_50
LBB188_50:                              ##   in Loop: Header=BB188_1 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
LBB188_51:                              ##   Parent Loop BB188_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	LBB188_54
## %bb.52:                              ##   in Loop: Header=BB188_51 Depth=2
	movq	-16(%rbp), %rdi
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	$4, %esi
	movl	%eax, %edx
	callq	_re_append
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	%eax, -84(%rbp)         ## 4-byte Spill
	callq	_re_copy
## %bb.53:                              ##   in Loop: Header=BB188_51 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	LBB188_51
LBB188_54:                              ##   in Loop: Header=BB188_1 Depth=1
	cmpl	$0, -48(%rbp)
	jne	LBB188_57
## %bb.55:                              ##   in Loop: Header=BB188_1 Depth=1
	cmpl	$0, -44(%rbp)
	jle	LBB188_57
## %bb.56:                              ##   in Loop: Header=BB188_1 Depth=1
	xorl	%eax, %eax
	movq	-16(%rbp), %rdi
	subl	-52(%rbp), %eax
	movl	$4, %esi
	movl	%eax, %edx
	callq	_re_append
LBB188_57:                              ##   in Loop: Header=BB188_1 Depth=1
	jmp	LBB188_92
LBB188_58:                              ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, -60(%rbp)
	movq	-16(%rbp), %rdi
	callq	_rePeek
	movzbl	%al, %ecx
	cmpl	$94, %ecx
	jne	LBB188_60
## %bb.59:                              ##   in Loop: Header=BB188_1 Depth=1
	xorl	%edx, %edx
	movq	-16(%rbp), %rdi
	movl	$8, %esi
	callq	_re_append
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %edx
	addl	$1, %edx
	movl	%edx, 8(%rcx)
	jmp	LBB188_61
LBB188_60:                              ##   in Loop: Header=BB188_1 Depth=1
	xorl	%edx, %edx
	movq	-16(%rbp), %rdi
	movl	$7, %esi
	callq	_re_append
LBB188_61:                              ##   in Loop: Header=BB188_1 Depth=1
	jmp	LBB188_62
LBB188_62:                              ##   Parent Loop BB188_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	movl	%eax, -28(%rbp)
	cmpl	$0, %eax
	je	LBB188_76
## %bb.63:                              ##   in Loop: Header=BB188_62 Depth=2
	cmpl	$91, -28(%rbp)
	jne	LBB188_66
## %bb.64:                              ##   in Loop: Header=BB188_62 Depth=2
	movq	-16(%rbp), %rdi
	callq	_rePeek
	movzbl	%al, %ecx
	cmpl	$58, %ecx
	jne	LBB188_66
## %bb.65:
	leaq	L_.str.150(%rip), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB188_94
LBB188_66:                              ##   in Loop: Header=BB188_62 Depth=2
	cmpl	$92, -28(%rbp)
	jne	LBB188_68
## %bb.67:                              ##   in Loop: Header=BB188_62 Depth=2
	movq	-16(%rbp), %rdi
	callq	_re_esc_char
	movl	%eax, -28(%rbp)
LBB188_68:                              ##   in Loop: Header=BB188_62 Depth=2
	movq	-16(%rbp), %rdi
	callq	_rePeek
	movzbl	%al, %ecx
	cmpl	$45, %ecx
	jne	LBB188_72
## %bb.69:                              ##   in Loop: Header=BB188_62 Depth=2
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %edx
	movl	$10, %esi
	callq	_re_append
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %edx
	addl	$1, %edx
	movl	%edx, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	-16(%rbp), %rdi
	movl	%eax, -88(%rbp)         ## 4-byte Spill
	callq	*%rcx
	movl	%eax, -28(%rbp)
	cmpl	$92, -28(%rbp)
	jne	LBB188_71
## %bb.70:                              ##   in Loop: Header=BB188_62 Depth=2
	movq	-16(%rbp), %rdi
	callq	_re_esc_char
	movl	%eax, -28(%rbp)
LBB188_71:                              ##   in Loop: Header=BB188_62 Depth=2
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %edx
	movl	$10, %esi
	callq	_re_append
	jmp	LBB188_73
LBB188_72:                              ##   in Loop: Header=BB188_62 Depth=2
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %edx
	movl	$9, %esi
	callq	_re_append
LBB188_73:                              ##   in Loop: Header=BB188_62 Depth=2
	movq	-16(%rbp), %rdi
	callq	_rePeek
	movzbl	%al, %ecx
	cmpl	$93, %ecx
	jne	LBB188_75
## %bb.74:                              ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 8(%rax)
	jmp	LBB188_76
LBB188_75:                              ##   in Loop: Header=BB188_62 Depth=2
	jmp	LBB188_62
LBB188_76:                              ##   in Loop: Header=BB188_1 Depth=1
	cmpl	$0, -28(%rbp)
	jne	LBB188_78
## %bb.77:
	leaq	L_.str.151(%rip), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB188_94
LBB188_78:                              ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	subl	-60(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movslq	-60(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
	jmp	LBB188_92
LBB188_79:                              ##   in Loop: Header=BB188_1 Depth=1
	movl	$0, -64(%rbp)
	movq	-16(%rbp), %rdi
	callq	_rePeek
	movzbl	%al, %ecx
	addl	$-68, %ecx
	movl	%ecx, %edx
	subl	$51, %ecx
	movq	%rdx, -96(%rbp)         ## 8-byte Spill
	ja	LBB188_87
## %bb.96:                              ##   in Loop: Header=BB188_1 Depth=1
	leaq	LJTI188_1(%rip), %rax
	movq	-96(%rbp), %rcx         ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB188_80:                              ##   in Loop: Header=BB188_1 Depth=1
	movl	$17, -64(%rbp)
	jmp	LBB188_87
LBB188_81:                              ##   in Loop: Header=BB188_1 Depth=1
	movl	$13, -64(%rbp)
	jmp	LBB188_87
LBB188_82:                              ##   in Loop: Header=BB188_1 Depth=1
	movl	$14, -64(%rbp)
	jmp	LBB188_87
LBB188_83:                              ##   in Loop: Header=BB188_1 Depth=1
	movl	$15, -64(%rbp)
	jmp	LBB188_87
LBB188_84:                              ##   in Loop: Header=BB188_1 Depth=1
	movl	$16, -64(%rbp)
	jmp	LBB188_87
LBB188_85:                              ##   in Loop: Header=BB188_1 Depth=1
	movl	$11, -64(%rbp)
	jmp	LBB188_87
LBB188_86:                              ##   in Loop: Header=BB188_1 Depth=1
	movl	$12, -64(%rbp)
LBB188_87:                              ##   in Loop: Header=BB188_1 Depth=1
	cmpl	$0, -64(%rbp)
	je	LBB188_89
## %bb.88:                              ##   in Loop: Header=BB188_1 Depth=1
	xorl	%edx, %edx
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rdi
	movl	-64(%rbp), %esi
	callq	_re_append
	jmp	LBB188_90
LBB188_89:                              ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rdi
	callq	_re_esc_char
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %edx
	movl	$1, %esi
	callq	_re_append
LBB188_90:                              ##   in Loop: Header=BB188_1 Depth=1
	jmp	LBB188_92
LBB188_91:                              ##   in Loop: Header=BB188_1 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %edx
	movl	$1, %esi
	callq	_re_append
LBB188_92:                              ##   in Loop: Header=BB188_1 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	LBB188_1
LBB188_93:
	movq	$0, -8(%rbp)
LBB188_94:
	movq	-8(%rbp), %rax
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L188_0_set_3, LBB188_3-LJTI188_0
.set L188_0_set_91, LBB188_91-LJTI188_0
.set L188_0_set_4, LBB188_4-LJTI188_0
.set L188_0_set_13, LBB188_13-LJTI188_0
.set L188_0_set_16, LBB188_16-LJTI188_0
.set L188_0_set_9, LBB188_9-LJTI188_0
.set L188_0_set_19, LBB188_19-LJTI188_0
.set L188_0_set_58, LBB188_58-LJTI188_0
.set L188_0_set_79, LBB188_79-LJTI188_0
.set L188_0_set_22, LBB188_22-LJTI188_0
LJTI188_0:
	.long	L188_0_set_3
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_4
	.long	L188_0_set_3
	.long	L188_0_set_13
	.long	L188_0_set_16
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_9
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_19
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_58
	.long	L188_0_set_79
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_91
	.long	L188_0_set_22
	.long	L188_0_set_3
.set L188_1_set_82, LBB188_82-LJTI188_1
.set L188_1_set_87, LBB188_87-LJTI188_1
.set L188_1_set_84, LBB188_84-LJTI188_1
.set L188_1_set_86, LBB188_86-LJTI188_1
.set L188_1_set_80, LBB188_80-LJTI188_1
.set L188_1_set_81, LBB188_81-LJTI188_1
.set L188_1_set_83, LBB188_83-LJTI188_1
.set L188_1_set_85, LBB188_85-LJTI188_1
LJTI188_1:
	.long	L188_1_set_82
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_84
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_86
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_80
	.long	L188_1_set_87
	.long	L188_1_set_81
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_83
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_87
	.long	L188_1_set_85
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_copy
_re_copy:                               ## @re_copy
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	-8(%rbp), %rax
	movl	64(%rax), %ecx
	addl	-16(%rbp), %ecx
	movq	-8(%rbp), %rax
	cmpl	68(%rax), %ecx
	jb	LBB189_3
## %bb.1:
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	68(%rax), %ecx
	shll	$1, %ecx
	addl	-16(%rbp), %ecx
	movl	%ecx, %esi
	callq	_re_resize
	cmpl	$0, %eax
	je	LBB189_3
## %bb.2:
	jmp	LBB189_4
LBB189_3:
	movq	$-1, %rcx
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	-8(%rbp), %rdx
	movl	64(%rdx), %esi
	movl	%esi, %edx
	addq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	24(%rdx), %rdx
	movslq	-12(%rbp), %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	shlq	$0, %rdi
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	movq	%rdx, %rsi
	movq	-24(%rbp), %rdx         ## 8-byte Reload
	callq	___memcpy_chk
	movq	$-1, %rcx
	movq	-8(%rbp), %rdx
	movq	32(%rdx), %rdx
	movq	-8(%rbp), %rsi
	movl	64(%rsi), %r8d
	movl	%r8d, %esi
	shlq	$2, %rsi
	addq	%rsi, %rdx
	movq	-8(%rbp), %rsi
	movq	32(%rsi), %rsi
	movslq	-12(%rbp), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$2, %rdi
	movq	%rdi, -32(%rbp)         ## 8-byte Spill
	movq	%rdx, %rdi
	movq	-32(%rbp), %rdx         ## 8-byte Reload
	movq	%rax, -40(%rbp)         ## 8-byte Spill
	callq	___memcpy_chk
	movl	-16(%rbp), %r8d
	movq	-8(%rbp), %rcx
	addl	64(%rcx), %r8d
	movl	%r8d, 64(%rcx)
LBB189_4:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_esc_char
_re_esc_char:                           ## @re_esc_char
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movl	$0, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	12(%rax), %ecx
	jl	LBB190_2
## %bb.1:
	movl	$0, -4(%rbp)
	jmp	LBB190_28
LBB190_2:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	8(%rcx), %rcx
	movb	(%rax,%rcx), %dl
	movb	%dl, -25(%rbp)
	movsbl	-25(%rbp), %esi
	cmpl	$117, %esi
	jne	LBB190_10
## %bb.3:
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$4, %ecx
	movq	-16(%rbp), %rax
	cmpl	12(%rax), %ecx
	jge	LBB190_10
## %bb.4:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	8(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movzbl	1(%rax), %edi
	leaq	-24(%rbp), %rsi
	callq	_re_hex
	cmpl	$0, %eax
	je	LBB190_9
## %bb.5:
	movq	-40(%rbp), %rax
	movzbl	2(%rax), %edi
	leaq	-24(%rbp), %rsi
	callq	_re_hex
	cmpl	$0, %eax
	je	LBB190_9
## %bb.6:
	movq	-40(%rbp), %rax
	movzbl	3(%rax), %edi
	leaq	-24(%rbp), %rsi
	callq	_re_hex
	cmpl	$0, %eax
	je	LBB190_9
## %bb.7:
	movq	-40(%rbp), %rax
	movzbl	4(%rax), %edi
	leaq	-24(%rbp), %rsi
	callq	_re_hex
	cmpl	$0, %eax
	je	LBB190_9
## %bb.8:
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$5, %ecx
	movl	%ecx, 8(%rax)
	movl	-24(%rbp), %ecx
	movl	%ecx, -4(%rbp)
	jmp	LBB190_28
LBB190_9:
	jmp	LBB190_10
LBB190_10:
	movsbl	-25(%rbp), %eax
	cmpl	$120, %eax
	jne	LBB190_16
## %bb.11:
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$2, %ecx
	movq	-16(%rbp), %rax
	cmpl	12(%rax), %ecx
	jge	LBB190_16
## %bb.12:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	8(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movzbl	1(%rax), %edi
	leaq	-24(%rbp), %rsi
	callq	_re_hex
	cmpl	$0, %eax
	je	LBB190_15
## %bb.13:
	movq	-48(%rbp), %rax
	movzbl	2(%rax), %edi
	leaq	-24(%rbp), %rsi
	callq	_re_hex
	cmpl	$0, %eax
	je	LBB190_15
## %bb.14:
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$3, %ecx
	movl	%ecx, 8(%rax)
	movl	-24(%rbp), %ecx
	movl	%ecx, -4(%rbp)
	jmp	LBB190_28
LBB190_15:
	jmp	LBB190_16
LBB190_16:
	movl	$0, -20(%rbp)
LBB190_17:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movslq	-20(%rbp), %rcx
	leaq	_re_esc_char.zEsc(%rip), %rdx
	movsbl	(%rdx,%rcx), %esi
	cmpl	$0, %esi
	movb	%al, -49(%rbp)          ## 1-byte Spill
	je	LBB190_19
## %bb.18:                              ##   in Loop: Header=BB190_17 Depth=1
	movslq	-20(%rbp), %rax
	leaq	_re_esc_char.zEsc(%rip), %rcx
	movsbl	(%rcx,%rax), %edx
	movsbl	-25(%rbp), %esi
	cmpl	%esi, %edx
	setne	%dil
	movb	%dil, -49(%rbp)         ## 1-byte Spill
LBB190_19:                              ##   in Loop: Header=BB190_17 Depth=1
	movb	-49(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB190_20
	jmp	LBB190_22
LBB190_20:                              ##   in Loop: Header=BB190_17 Depth=1
	jmp	LBB190_21
LBB190_21:                              ##   in Loop: Header=BB190_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB190_17
LBB190_22:
	movslq	-20(%rbp), %rax
	leaq	_re_esc_char.zEsc(%rip), %rcx
	cmpb	$0, (%rcx,%rax)
	je	LBB190_26
## %bb.23:
	cmpl	$6, -20(%rbp)
	jge	LBB190_25
## %bb.24:
	movslq	-20(%rbp), %rax
	leaq	_re_esc_char.zTrans(%rip), %rcx
	movb	(%rcx,%rax), %dl
	movb	%dl, -25(%rbp)
LBB190_25:
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 8(%rax)
	jmp	LBB190_27
LBB190_26:
	movq	-16(%rbp), %rax
	leaq	L_.str.152(%rip), %rcx
	movq	%rcx, 16(%rax)
LBB190_27:
	movsbl	-25(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB190_28:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_hex
_re_hex:                                ## @re_hex
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$48, -8(%rbp)
	jl	LBB191_3
## %bb.1:
	cmpl	$57, -8(%rbp)
	jg	LBB191_3
## %bb.2:
	movl	-8(%rbp), %eax
	subl	$48, %eax
	movl	%eax, -8(%rbp)
	jmp	LBB191_12
LBB191_3:
	cmpl	$97, -8(%rbp)
	jl	LBB191_6
## %bb.4:
	cmpl	$102, -8(%rbp)
	jg	LBB191_6
## %bb.5:
	movl	-8(%rbp), %eax
	subl	$87, %eax
	movl	%eax, -8(%rbp)
	jmp	LBB191_11
LBB191_6:
	cmpl	$65, -8(%rbp)
	jl	LBB191_9
## %bb.7:
	cmpl	$70, -8(%rbp)
	jg	LBB191_9
## %bb.8:
	movl	-8(%rbp), %eax
	subl	$55, %eax
	movl	%eax, -8(%rbp)
	jmp	LBB191_10
LBB191_9:
	movl	$0, -4(%rbp)
	jmp	LBB191_13
LBB191_10:
	jmp	LBB191_11
LBB191_11:
	jmp	LBB191_12
LBB191_12:
	movq	-16(%rbp), %rax
	movl	(%rax), %ecx
	shll	$4, %ecx
	movl	-8(%rbp), %edx
	andl	$255, %edx
	addl	%edx, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movl	$1, -4(%rbp)
LBB191_13:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_add_state
_re_add_state:                          ## @re_add_state
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	$0, -16(%rbp)
LBB192_1:                               ## =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	(%rcx), %eax
	jae	LBB192_6
## %bb.2:                               ##   in Loop: Header=BB192_1 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	movl	%ecx, %edx
	movzwl	(%rax,%rdx,2), %ecx
	cmpl	-12(%rbp), %ecx
	jne	LBB192_4
## %bb.3:
	jmp	LBB192_7
LBB192_4:                               ##   in Loop: Header=BB192_1 Depth=1
	jmp	LBB192_5
LBB192_5:                               ##   in Loop: Header=BB192_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	LBB192_1
LBB192_6:
	movl	-12(%rbp), %eax
                                        ## kill: def $ax killed $ax killed $eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movl	%esi, %esi
	movl	%esi, %edx
	movw	%ax, (%rcx,%rdx,2)
LBB192_7:
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_word_char
_re_word_char:                          ## @re_word_char
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	cmpl	$48, -4(%rbp)
	jl	LBB193_2
## %bb.1:
	cmpl	$57, -4(%rbp)
	movb	$1, %al
	movb	%al, -5(%rbp)           ## 1-byte Spill
	jle	LBB193_7
LBB193_2:
	cmpl	$97, -4(%rbp)
	jl	LBB193_4
## %bb.3:
	cmpl	$122, -4(%rbp)
	movb	$1, %al
	movb	%al, -5(%rbp)           ## 1-byte Spill
	jle	LBB193_7
LBB193_4:
	cmpl	$65, -4(%rbp)
	jl	LBB193_6
## %bb.5:
	cmpl	$90, -4(%rbp)
	movb	$1, %al
	movb	%al, -5(%rbp)           ## 1-byte Spill
	jle	LBB193_7
LBB193_6:
	cmpl	$95, -4(%rbp)
	sete	%al
	movb	%al, -5(%rbp)           ## 1-byte Spill
LBB193_7:
	movb	-5(%rbp), %al           ## 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_digit_char
_re_digit_char:                         ## @re_digit_char
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	%edi, -4(%rbp)
	cmpl	$48, -4(%rbp)
	movb	%al, -5(%rbp)           ## 1-byte Spill
	jl	LBB194_2
## %bb.1:
	cmpl	$57, -4(%rbp)
	setle	%al
	movb	%al, -5(%rbp)           ## 1-byte Spill
LBB194_2:
	movb	-5(%rbp), %al           ## 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function re_space_char
_re_space_char:                         ## @re_space_char
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	cmpl	$32, -4(%rbp)
	movb	$1, %al
	movb	%al, -5(%rbp)           ## 1-byte Spill
	je	LBB195_6
## %bb.1:
	cmpl	$9, -4(%rbp)
	movb	$1, %al
	movb	%al, -5(%rbp)           ## 1-byte Spill
	je	LBB195_6
## %bb.2:
	cmpl	$10, -4(%rbp)
	movb	$1, %al
	movb	%al, -5(%rbp)           ## 1-byte Spill
	je	LBB195_6
## %bb.3:
	cmpl	$13, -4(%rbp)
	movb	$1, %al
	movb	%al, -5(%rbp)           ## 1-byte Spill
	je	LBB195_6
## %bb.4:
	cmpl	$11, -4(%rbp)
	movb	$1, %al
	movb	%al, -5(%rbp)           ## 1-byte Spill
	je	LBB195_6
## %bb.5:
	cmpl	$12, -4(%rbp)
	sete	%al
	movb	%al, -5(%rbp)           ## 1-byte Spill
LBB195_6:
	movb	-5(%rbp), %al           ## 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxPrepareStmt
_idxPrepareStmt:                        ## @idxPrepareStmt
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-16(%rbp), %rcx
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_prepare_v2
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	LBB196_2
## %bb.1:
	movq	-16(%rbp), %rax
	movq	$0, (%rax)
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	_idxDatabaseError
LBB196_2:
	movl	-36(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxRegisterVtab
_idxRegisterVtab:                       ## @idxRegisterVtab
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-8(%rbp), %rax
	leaq	L_.str.161(%rip), %rsi
	leaq	_idxRegisterVtab.expertModule(%rip), %rdx
	movq	%rax, %rcx
	callq	_sqlite3_create_module
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxGetTableInfo
_idxGetTableInfo:                       ## @idxGetTableInfo
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -92(%rbp)
	movq	-32(%rbp), %rax
	movq	$0, (%rax)
	cmpq	$0, -24(%rbp)
	jne	LBB198_2
## %bb.1:
	movl	$1, -4(%rbp)
	jmp	LBB198_42
LBB198_2:
	movq	-24(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -56(%rbp)
	movslq	-56(%rbp), %rcx
	addq	$32, %rcx
	addq	$1, %rcx
                                        ## kill: def $ecx killed $ecx killed $rcx
	movl	%ecx, -60(%rbp)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %r8
	leaq	-48(%rbp), %rsi
	leaq	L_.str.169(%rip), %rcx
	movb	$0, %al
	callq	_idxPrintfPrepareStmt
	movl	%eax, -76(%rbp)
LBB198_3:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -76(%rbp)
	movb	%al, -133(%rbp)         ## 1-byte Spill
	jne	LBB198_5
## %bb.4:                               ##   in Loop: Header=BB198_3 Depth=1
	movq	-48(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	sete	%dl
	movb	%dl, -133(%rbp)         ## 1-byte Spill
LBB198_5:                               ##   in Loop: Header=BB198_3 Depth=1
	movb	-133(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB198_6
	jmp	LBB198_11
LBB198_6:                               ##   in Loop: Header=BB198_3 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -104(%rbp)
	movq	$0, -112(%rbp)
	cmpq	$0, -104(%rbp)
	jne	LBB198_8
## %bb.7:
	movl	$1, -76(%rbp)
	jmp	LBB198_11
LBB198_8:                               ##   in Loop: Header=BB198_3 Depth=1
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-104(%rbp), %rdi
	movq	%r8, -144(%rbp)         ## 8-byte Spill
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	addl	$1, %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rdx
	movq	-104(%rbp), %rcx
	leaq	L___func__.main(%rip), %rsi
	movq	-144(%rbp), %r8         ## 8-byte Reload
	leaq	-112(%rbp), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movq	$0, 16(%rsp)
	callq	_sqlite3_table_column_metadata
	movl	%eax, -76(%rbp)
	cmpq	$0, -112(%rbp)
	jne	LBB198_10
## %bb.9:                               ##   in Loop: Header=BB198_3 Depth=1
	leaq	L_.str.170(%rip), %rax
	movq	%rax, -112(%rbp)
LBB198_10:                              ##   in Loop: Header=BB198_3 Depth=1
	movq	-112(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	addl	$1, %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	-48(%rbp), %rdi
	movl	$5, %esi
	callq	_sqlite3_column_int
	cmpl	$0, %eax
	setg	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	LBB198_3
LBB198_11:
	movq	-48(%rbp), %rdi
	callq	_sqlite3_reset
	movl	%eax, -80(%rbp)
	cmpl	$0, -76(%rbp)
	jne	LBB198_13
## %bb.12:
	movl	-80(%rbp), %eax
	movl	%eax, -76(%rbp)
LBB198_13:
	movslq	-52(%rbp), %rax
	imulq	$24, %rax, %rax
	movslq	-60(%rbp), %rcx
	addq	%rax, %rcx
                                        ## kill: def $ecx killed $ecx killed $rcx
	movl	%ecx, -60(%rbp)
	cmpl	$0, -76(%rbp)
	jne	LBB198_15
## %bb.14:
	movl	-60(%rbp), %esi
	leaq	-76(%rbp), %rdi
	callq	_idxMalloc
	movq	%rax, -72(%rbp)
LBB198_15:
	cmpl	$0, -76(%rbp)
	jne	LBB198_17
## %bb.16:
	movq	-72(%rbp), %rax
	addq	$32, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movl	-52(%rbp), %edx
	movq	-72(%rbp), %rax
	movl	%edx, (%rax)
	movq	-72(%rbp), %rax
	movq	16(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
LBB198_17:
	movl	$0, -52(%rbp)
LBB198_18:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -76(%rbp)
	movb	%al, -145(%rbp)         ## 1-byte Spill
	jne	LBB198_20
## %bb.19:                              ##   in Loop: Header=BB198_18 Depth=1
	movq	-48(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	sete	%dl
	movb	%dl, -145(%rbp)         ## 1-byte Spill
LBB198_20:                              ##   in Loop: Header=BB198_18 Depth=1
	movb	-145(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB198_21
	jmp	LBB198_30
LBB198_21:                              ##   in Loop: Header=BB198_18 Depth=1
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -120(%rbp)
	movq	$0, -128(%rbp)
	cmpq	$0, -120(%rbp)
	jne	LBB198_23
## %bb.22:                              ##   in Loop: Header=BB198_18 Depth=1
	jmp	LBB198_18
LBB198_23:                              ##   in Loop: Header=BB198_18 Depth=1
	movq	-120(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	addl	$1, %eax
	movl	%eax, -132(%rbp)
	movq	-88(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	16(%rdx), %rdx
	movslq	-52(%rbp), %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rdx
	movq	%rcx, (%rdx)
	movq	-48(%rbp), %rdi
	movl	$5, %esi
	callq	_sqlite3_column_int
	xorl	%esi, %esi
                                        ## kill: def $sil killed $sil killed $esi
	cmpl	$1, %eax
	movb	%sil, -146(%rbp)        ## 1-byte Spill
	jne	LBB198_25
## %bb.24:                              ##   in Loop: Header=BB198_18 Depth=1
	cmpl	$1, -92(%rbp)
	sete	%al
	movb	%al, -146(%rbp)         ## 1-byte Spill
LBB198_25:                              ##   in Loop: Header=BB198_18 Depth=1
	movb	-146(%rbp), %al         ## 1-byte Reload
	movq	$-1, %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movq	-72(%rbp), %rsi
	movq	16(%rsi), %rsi
	movslq	-52(%rbp), %rdi
	imulq	$24, %rdi, %rdi
	addq	%rdi, %rsi
	movl	%edx, 16(%rsi)
	movq	-88(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movslq	-132(%rbp), %rdx
	callq	___memcpy_chk
	xorl	%r8d, %r8d
                                        ## kill: def $r8 killed $r8d
	movl	-132(%rbp), %r9d
	movq	-88(%rbp), %rcx
	movslq	%r9d, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -88(%rbp)
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rdx
	movq	-120(%rbp), %rcx
	leaq	L___func__.main(%rip), %rsi
	leaq	-128(%rbp), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movq	$0, 16(%rsp)
	movq	%rax, -160(%rbp)        ## 8-byte Spill
	callq	_sqlite3_table_column_metadata
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jne	LBB198_29
## %bb.26:                              ##   in Loop: Header=BB198_18 Depth=1
	cmpq	$0, -128(%rbp)
	jne	LBB198_28
## %bb.27:                              ##   in Loop: Header=BB198_18 Depth=1
	leaq	L_.str.170(%rip), %rax
	movq	%rax, -128(%rbp)
LBB198_28:                              ##   in Loop: Header=BB198_18 Depth=1
	movq	$-1, %rcx
	movq	-128(%rbp), %rdi
	movq	%rcx, -168(%rbp)        ## 8-byte Spill
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	addl	$1, %eax
	movl	%eax, -132(%rbp)
	movq	-88(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	16(%rdx), %rdx
	movslq	-52(%rbp), %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rdx
	movq	%rcx, 8(%rdx)
	movq	-88(%rbp), %rdi
	movq	-128(%rbp), %rsi
	movslq	-132(%rbp), %rdx
	movq	-168(%rbp), %rcx        ## 8-byte Reload
	callq	___memcpy_chk
	movl	-132(%rbp), %r8d
	movq	-88(%rbp), %rcx
	movslq	%r8d, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -88(%rbp)
LBB198_29:                              ##   in Loop: Header=BB198_18 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	LBB198_18
LBB198_30:
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	_idxFinalize
	cmpl	$0, -76(%rbp)
	je	LBB198_32
## %bb.31:
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	movq	$0, -72(%rbp)
	jmp	LBB198_41
LBB198_32:
	cmpq	$0, -72(%rbp)
	je	LBB198_34
## %bb.33:
	movb	$1, %al
	testb	$1, %al
	jne	LBB198_35
	jmp	LBB198_40
LBB198_34:
	leaq	L___func__.idxGetTableInfo(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.171(%rip), %rcx
	movl	$9978, %edx             ## imm = 0x26FA
	callq	___assert_rtn
LBB198_35:
	movq	-88(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-72(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	LBB198_37
## %bb.36:
	movb	$1, %al
	testb	$1, %al
	jne	LBB198_38
	jmp	LBB198_39
LBB198_37:
	leaq	L___func__.idxGetTableInfo(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.171(%rip), %rcx
	movl	$9980, %edx             ## imm = 0x26FC
	callq	___assert_rtn
LBB198_38:
	movq	$-1, %rcx
	movq	-72(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-56(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	callq	___memcpy_chk
LBB198_39:
	jmp	LBB198_40
LBB198_40:
	jmp	LBB198_41
LBB198_41:
	movq	-72(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	-76(%rbp), %edx
	movl	%edx, -4(%rbp)
LBB198_42:
	movl	-4(%rbp), %eax
	addq	$192, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function expertConnect
_expertConnect:                         ## @expertConnect
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	$0, -64(%rbp)
	cmpl	$4, -20(%rbp)
	je	LBB199_2
## %bb.1:
	leaq	L_.str.162(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	$1, -68(%rbp)
	jmp	LBB199_13
LBB199_2:
	movq	-32(%rbp), %rax
	movq	24(%rax), %rdi
	callq	_expertDequote
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	je	LBB199_11
## %bb.3:
	movq	-8(%rbp), %rdi
	movq	-80(%rbp), %rsi
	callq	_sqlite3_declare_vtab
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	jne	LBB199_5
## %bb.4:
	leaq	-68(%rbp), %rdi
	movl	$40, %esi
	callq	_idxMalloc
	movq	%rax, -64(%rbp)
LBB199_5:
	cmpl	$0, -68(%rbp)
	jne	LBB199_10
## %bb.6:
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-56(%rbp), %rax
	movq	32(%rax), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rax
	movq	16(%rax), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %eax
	movslq	%eax, %rcx
	cmpq	$0, %rcx
	je	LBB199_8
## %bb.7:
	leaq	L___func__.expertConnect(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.163(%rip), %rcx
	movl	$9643, %edx             ## imm = 0x25AB
	callq	___assert_rtn
LBB199_8:
	jmp	LBB199_9
LBB199_9:
	jmp	LBB199_10
LBB199_10:
	movq	-80(%rbp), %rdi
	callq	_sqlite3_free
	jmp	LBB199_12
LBB199_11:
	movl	$7, -68(%rbp)
LBB199_12:
	jmp	LBB199_13
LBB199_13:
	movq	-64(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	-68(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3               ## -- Begin function expertBestIndex
LCPI200_0:
	.quad	4696837146684686336     ## double 1.0E+6
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
_expertBestIndex:                       ## @expertBestIndex
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	movl	$62, -44(%rbp)
	leaq	-28(%rbp), %rdi
	movl	$56, %esi
	callq	_idxMalloc
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	LBB200_24
## %bb.1:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movq	40(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -48(%rbp)
LBB200_2:                               ## =>This Inner Loop Header: Depth=1
	movl	-48(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	LBB200_15
## %bb.3:                               ##   in Loop: Header=BB200_2 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movzbl	5(%rax), %edx
	cmpl	$0, %edx
	je	LBB200_13
## %bb.4:                               ##   in Loop: Header=BB200_2 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, (%rax)
	jl	LBB200_13
## %bb.5:                               ##   in Loop: Header=BB200_2 Depth=1
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	16(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	cmpl	$0, 16(%rax)
	jne	LBB200_13
## %bb.6:                               ##   in Loop: Header=BB200_2 Depth=1
	movq	-56(%rbp), %rax
	movzbl	4(%rax), %ecx
	andl	$62, %ecx
	cmpl	$0, %ecx
	je	LBB200_13
## %bb.7:                               ##   in Loop: Header=BB200_2 Depth=1
	movq	-16(%rbp), %rdi
	movl	-48(%rbp), %esi
	callq	_sqlite3_vtab_collation
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rsi
	leaq	-28(%rbp), %rdi
	callq	_idxNewConstraint
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	LBB200_12
## %bb.8:                               ##   in Loop: Header=BB200_2 Depth=1
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	movq	-64(%rbp), %rax
	movl	%ecx, 12(%rax)
	movq	-56(%rbp), %rax
	movzbl	4(%rax), %ecx
	cmpl	$2, %ecx
	jne	LBB200_10
## %bb.9:                               ##   in Loop: Header=BB200_2 Depth=1
	movq	-40(%rbp), %rax
	movq	32(%rax), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-64(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, 32(%rcx)
	jmp	LBB200_11
LBB200_10:                              ##   in Loop: Header=BB200_2 Depth=1
	movq	-64(%rbp), %rax
	movl	$1, 8(%rax)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-64(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, 40(%rcx)
LBB200_11:                              ##   in Loop: Header=BB200_2 Depth=1
	jmp	LBB200_12
LBB200_12:                              ##   in Loop: Header=BB200_2 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,8)
LBB200_13:                              ##   in Loop: Header=BB200_2 Depth=1
	jmp	LBB200_14
LBB200_14:                              ##   in Loop: Header=BB200_2 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	LBB200_2
LBB200_15:
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -48(%rbp)
LBB200_16:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$0, -48(%rbp)
	jl	LBB200_23
## %bb.17:                              ##   in Loop: Header=BB200_16 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,8), %edx
	movl	%edx, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jl	LBB200_21
## %bb.18:                              ##   in Loop: Header=BB200_16 Depth=1
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	16(%rax), %rax
	movslq	-76(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	8(%rax), %rsi
	leaq	-28(%rbp), %rdi
	callq	_idxNewConstraint
	movq	%rax, -88(%rbp)
	cmpq	$0, -88(%rbp)
	je	LBB200_20
## %bb.19:                              ##   in Loop: Header=BB200_16 Depth=1
	movl	-76(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	24(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movzbl	4(%rcx,%rdx,8), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-40(%rbp), %rcx
	movq	24(%rcx), %rcx
	movq	-88(%rbp), %rdx
	movq	%rcx, 24(%rdx)
	movq	-40(%rbp), %rcx
	movq	24(%rcx), %rcx
	movq	-88(%rbp), %rdx
	movq	%rcx, 32(%rdx)
	movq	-88(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	%rcx, 24(%rdx)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
LBB200_20:                              ##   in Loop: Header=BB200_16 Depth=1
	jmp	LBB200_21
LBB200_21:                              ##   in Loop: Header=BB200_16 Depth=1
	jmp	LBB200_22
LBB200_22:                              ##   in Loop: Header=BB200_16 Depth=1
	movl	-48(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -48(%rbp)
	jmp	LBB200_16
LBB200_23:
	jmp	LBB200_24
LBB200_24:
	movsd	LCPI200_0(%rip), %xmm0  ## xmm0 = mem[0],zero
	movl	-32(%rbp), %eax
	addl	$1, %eax
	cvtsi2sd	%eax, %xmm1
	divsd	%xmm1, %xmm0
	movq	-16(%rbp), %rcx
	movsd	%xmm0, 64(%rcx)
	movl	-28(%rbp), %eax
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function expertDisconnect
_expertDisconnect:                      ## @expertDisconnect
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	xorl	%eax, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function expertOpen
_expertOpen:                            ## @expertOpen
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, -20(%rbp)
	leaq	-20(%rbp), %rdi
	movl	$16, %esi
	callq	_idxMalloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	-20(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function expertClose
_expertClose:                           ## @expertClose
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_finalize
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdi
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	callq	_sqlite3_free
	xorl	%eax, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function expertFilter
_expertFilter:                          ## @expertFilter
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	%r8, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_finalize
	movl	%eax, -68(%rbp)
	movq	-48(%rbp), %rdx
	movq	$0, 8(%rdx)
	cmpl	$0, -68(%rbp)
	jne	LBB204_2
## %bb.1:
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	-56(%rbp), %rcx
	addq	$16, %rcx
	movq	-56(%rbp), %rdx
	movq	24(%rdx), %rdx
	movq	8(%rdx), %r8
	movq	%rax, %rsi
	movq	%rcx, %rdx
	leaq	L_.str.167(%rip), %rcx
	movb	$0, %al
	callq	_idxPrintfPrepareStmt
	movl	%eax, -68(%rbp)
LBB204_2:
	cmpl	$0, -68(%rbp)
	jne	LBB204_4
## %bb.3:
	movq	-8(%rbp), %rdi
	callq	_expertNext
	movl	%eax, -68(%rbp)
LBB204_4:
	movl	-68(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function expertNext
_expertNext:                            ## @expertNext
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -20(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movslq	%edx, %rax
	cmpq	$0, %rax
	je	LBB205_2
## %bb.1:
	leaq	L___func__.expertNext(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.168(%rip), %rcx
	movl	$9781, %edx             ## imm = 0x2635
	callq	___assert_rtn
LBB205_2:
	jmp	LBB205_3
LBB205_3:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_step
	movl	%eax, -20(%rbp)
	cmpl	$100, -20(%rbp)
	je	LBB205_5
## %bb.4:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_finalize
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rcx
	movq	$0, 8(%rcx)
	jmp	LBB205_6
LBB205_5:
	movl	$0, -20(%rbp)
LBB205_6:
	movl	-20(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function expertEof
_expertEof:                             ## @expertEof
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function expertColumn
_expertColumn:                          ## @expertColumn
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdi
	movl	-20(%rbp), %esi
	callq	_sqlite3_column_value
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	LBB207_2
## %bb.1:
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_sqlite3_result_value
LBB207_2:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function expertRowid
_expertRowid:                           ## @expertRowid
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	$0, (%rcx)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function expertUpdate
_expertUpdate:                          ## @expertUpdate
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function expertDequote
_expertDequote:                         ## @expertDequote
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %edi
	callq	_sqlite3_malloc
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$39, %ecx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %ecx
	movslq	%ecx, %rax
	cmpq	$0, %rax
	je	LBB210_2
## %bb.1:
	leaq	L___func__.expertDequote(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.164(%rip), %rcx
	movl	$9591, %edx             ## imm = 0x2577
	callq	___assert_rtn
LBB210_2:
	jmp	LBB210_3
LBB210_3:
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$39, %ecx
	sete	%sil
	xorb	$-1, %sil
	andb	$1, %sil
	movzbl	%sil, %ecx
	movslq	%ecx, %rax
	cmpq	$0, %rax
	je	LBB210_5
## %bb.4:
	leaq	L___func__.expertDequote(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.165(%rip), %rcx
	movl	$9592, %edx             ## imm = 0x2578
	callq	___assert_rtn
LBB210_5:
	jmp	LBB210_6
LBB210_6:
	cmpq	$0, -24(%rbp)
	je	LBB210_17
## %bb.7:
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	movl	$1, -32(%rbp)
LBB210_8:                               ## =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	LBB210_16
## %bb.9:                               ##   in Loop: Header=BB210_8 Depth=1
	movq	-8(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$39, %edx
	jne	LBB210_14
## %bb.10:                              ##   in Loop: Header=BB210_8 Depth=1
	movq	-8(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$39, %ecx
	sete	%sil
	xorb	$-1, %sil
	andb	$1, %sil
	movzbl	%sil, %ecx
	movslq	%ecx, %rax
	cmpq	$0, %rax
	je	LBB210_12
## %bb.11:
	leaq	L___func__.expertDequote(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.166(%rip), %rcx
	movl	$9599, %edx             ## imm = 0x257F
	callq	___assert_rtn
LBB210_12:                              ##   in Loop: Header=BB210_8 Depth=1
	jmp	LBB210_13
LBB210_13:                              ##   in Loop: Header=BB210_8 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
LBB210_14:                              ##   in Loop: Header=BB210_8 Depth=1
	movq	-8(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movb	(%rax,%rcx), %dl
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, -28(%rbp)
	movslq	%esi, %rcx
	movb	%dl, (%rax,%rcx)
## %bb.15:                              ##   in Loop: Header=BB210_8 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	LBB210_8
LBB210_16:
	movq	-24(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	$0, (%rax,%rcx)
LBB210_17:
	movq	-24(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxNewConstraint
_idxNewConstraint:                      ## @idxNewConstraint
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, (%rcx)
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %eax
	movslq	%eax, %rcx
	cmpq	$0, %rcx
	je	LBB211_2
## %bb.1:
	leaq	L___func__.idxNewConstraint(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.153(%rip), %rcx
	movl	$9508, %edx             ## imm = 0x2524
	callq	___assert_rtn
LBB211_2:
	jmp	LBB211_3
LBB211_3:
	movq	-8(%rbp), %rdi
	movslq	-28(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	$1, %rax
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, %esi
	callq	_idxMalloc
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	LBB211_5
## %bb.4:
	movq	$-1, %rcx
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	-24(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rsi
	movl	-28(%rbp), %r8d
	addl	$1, %r8d
	movslq	%r8d, %rdx
	callq	___memcpy_chk
LBB211_5:
	movq	-24(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxConstraintFree
_idxConstraintFree:                     ## @idxConstraintFree
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)
LBB212_1:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	LBB212_4
## %bb.2:                               ##   in Loop: Header=BB212_1 Depth=1
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
## %bb.3:                               ##   in Loop: Header=BB212_1 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, -24(%rbp)
	jmp	LBB212_1
LBB212_4:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxProcessOneTrigger
_idxProcessOneTrigger:                  ## @idxProcessOneTrigger
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	leaq	L_.str.174(%rip), %rax
	movq	%rax, -48(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -60(%rbp)
	movq	$0, -72(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %r8
	movq	-40(%rbp), %r9
	leaq	-56(%rbp), %rsi
	movb	$0, %al
	callq	_idxPrintfPrepareStmt
	movl	%eax, -60(%rbp)
LBB213_1:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -60(%rbp)
	movb	%al, -105(%rbp)         ## 1-byte Spill
	jne	LBB213_3
## %bb.2:                               ##   in Loop: Header=BB213_1 Depth=1
	movq	-56(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	sete	%dl
	movb	%dl, -105(%rbp)         ## 1-byte Spill
LBB213_3:                               ##   in Loop: Header=BB213_1 Depth=1
	movb	-105(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB213_4
	jmp	LBB213_7
LBB213_4:                               ##   in Loop: Header=BB213_1 Depth=1
	xorl	%esi, %esi
	movq	-56(%rbp), %rdi
	callq	_sqlite3_column_text
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	jne	LBB213_6
## %bb.5:                               ##   in Loop: Header=BB213_1 Depth=1
	jmp	LBB213_1
LBB213_6:                               ##   in Loop: Header=BB213_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	24(%rdx), %rdi
	movq	-80(%rbp), %rsi
	movq	-24(%rbp), %r8
	movq	%rcx, %rdx
	callq	_sqlite3_exec
	movl	%eax, -60(%rbp)
	jmp	LBB213_1
LBB213_7:
	movq	-56(%rbp), %rsi
	leaq	-60(%rbp), %rdi
	callq	_idxFinalize
	cmpl	$0, -60(%rbp)
	jne	LBB213_12
## %bb.8:
	movq	-40(%rbp), %rsi
	movq	_idxProcessOneTrigger.zInt(%rip), %rdx
	leaq	L_.str.175(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -88(%rbp)
	cmpq	$0, -88(%rbp)
	jne	LBB213_10
## %bb.9:
	movl	$7, -60(%rbp)
	jmp	LBB213_11
LBB213_10:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	24(%rdx), %rdi
	movq	-88(%rbp), %rsi
	movq	-24(%rbp), %r8
	movq	%rcx, %rdx
	callq	_sqlite3_exec
	movl	%eax, -60(%rbp)
	movq	-88(%rbp), %rdi
	callq	_sqlite3_free
LBB213_11:
	jmp	LBB213_12
LBB213_12:
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	movl	%ecx, %edx
	subl	$18, %edx
	movl	%ecx, -112(%rbp)        ## 4-byte Spill
	je	LBB213_13
	jmp	LBB213_38
LBB213_38:
	movl	-112(%rbp), %eax        ## 4-byte Reload
	subl	$23, %eax
	je	LBB213_18
	jmp	LBB213_23
LBB213_13:
	movq	-72(%rbp), %rsi
	movq	_idxProcessOneTrigger.zInt(%rip), %rcx
	leaq	-60(%rbp), %rdi
	leaq	L_.str.176(%rip), %rdx
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -72(%rbp)
	movl	$0, -92(%rbp)
LBB213_14:                              ## =>This Inner Loop Header: Depth=1
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	LBB213_17
## %bb.15:                              ##   in Loop: Header=BB213_14 Depth=1
	movq	-72(%rbp), %rsi
	movl	-92(%rbp), %eax
	cmpl	$0, %eax
	leaq	L_.str.27(%rip), %rcx
	leaq	L_.str.158(%rip), %rdx
	cmoveq	%rcx, %rdx
	leaq	-60(%rbp), %rdi
	leaq	L_.str.177(%rip), %rcx
	movq	%rdx, -120(%rbp)        ## 8-byte Spill
	movq	%rcx, %rdx
	movq	-120(%rbp), %rcx        ## 8-byte Reload
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -72(%rbp)
## %bb.16:                              ##   in Loop: Header=BB213_14 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	LBB213_14
LBB213_17:
	movq	-72(%rbp), %rsi
	leaq	-60(%rbp), %rdi
	leaq	L_.str.159(%rip), %rdx
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -72(%rbp)
	jmp	LBB213_31
LBB213_18:
	movq	-72(%rbp), %rsi
	movq	_idxProcessOneTrigger.zInt(%rip), %rcx
	leaq	-60(%rbp), %rdi
	leaq	L_.str.178(%rip), %rdx
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -72(%rbp)
	movl	$0, -96(%rbp)
LBB213_19:                              ## =>This Inner Loop Header: Depth=1
	movl	-96(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	LBB213_22
## %bb.20:                              ##   in Loop: Header=BB213_19 Depth=1
	movq	-72(%rbp), %rsi
	movl	-96(%rbp), %eax
	cmpl	$0, %eax
	leaq	L_.str.27(%rip), %rcx
	leaq	L_.str.158(%rip), %rdx
	cmoveq	%rcx, %rdx
	movq	-32(%rbp), %rcx
	movq	16(%rcx), %rcx
	movslq	-96(%rbp), %rdi
	imulq	$24, %rdi, %rdi
	addq	%rdi, %rcx
	movq	(%rcx), %r8
	leaq	-60(%rbp), %rdi
	leaq	L_.str.179(%rip), %rcx
	movq	%rdx, -128(%rbp)        ## 8-byte Spill
	movq	%rcx, %rdx
	movq	-128(%rbp), %rcx        ## 8-byte Reload
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -72(%rbp)
## %bb.21:                              ##   in Loop: Header=BB213_19 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	LBB213_19
LBB213_22:
	jmp	LBB213_31
LBB213_23:
	movq	-16(%rbp), %rax
	cmpl	$9, 8(%rax)
	sete	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movslq	%edx, %rax
	cmpq	$0, %rax
	je	LBB213_25
## %bb.24:
	leaq	L___func__.idxProcessOneTrigger(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.180(%rip), %rcx
	movl	$10555, %edx            ## imm = 0x293B
	callq	___assert_rtn
LBB213_25:
	jmp	LBB213_26
LBB213_26:
	cmpl	$0, -60(%rbp)
	jne	LBB213_30
## %bb.27:
	movq	_idxProcessOneTrigger.zInt(%rip), %rsi
	leaq	L_.str.181(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	jne	LBB213_29
## %bb.28:
	movl	$7, -60(%rbp)
LBB213_29:
	jmp	LBB213_30
LBB213_30:
	jmp	LBB213_31
LBB213_31:
	cmpl	$0, -60(%rbp)
	jne	LBB213_35
## %bb.32:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	$0, -104(%rbp)
	movq	-8(%rbp), %rcx
	movq	24(%rcx), %rdi
	movq	-72(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-104(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -60(%rbp)
	movq	-104(%rbp), %rsi
	leaq	-60(%rbp), %rdi
	callq	_idxFinalize
	cmpl	$0, -60(%rbp)
	je	LBB213_34
## %bb.33:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	_idxDatabaseError
LBB213_34:
	jmp	LBB213_35
LBB213_35:
	movq	-72(%rbp), %rdi
	callq	_sqlite3_free
	cmpl	$0, -60(%rbp)
	jne	LBB213_37
## %bb.36:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	24(%rdx), %rdi
	movq	_idxProcessOneTrigger.zDrop(%rip), %rsi
	movq	-24(%rbp), %r8
	movq	%rcx, %rdx
	callq	_sqlite3_exec
	movl	%eax, -60(%rbp)
LBB213_37:
	movl	-60(%rbp), %eax
	addq	$128, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxCreateFromWhere
_idxCreateFromWhere:                    ## @idxCreateFromWhere
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -40(%rbp)
LBB214_1:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -40(%rbp)
	je	LBB214_7
## %bb.2:                               ##   in Loop: Header=BB214_1 Depth=1
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_idxFindConstraint
	cmpl	$0, %eax
	jne	LBB214_5
## %bb.3:                               ##   in Loop: Header=BB214_1 Depth=1
	movq	-24(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_idxFindConstraint
	cmpl	$0, %eax
	jne	LBB214_5
## %bb.4:                               ##   in Loop: Header=BB214_1 Depth=1
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-40(%rbp), %rax
	movq	%rax, -32(%rbp)
LBB214_5:                               ##   in Loop: Header=BB214_1 Depth=1
	jmp	LBB214_6
LBB214_6:                               ##   in Loop: Header=BB214_1 Depth=1
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	LBB214_1
LBB214_7:
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rcx
	callq	_idxCreateFromCons
	movl	%eax, -44(%rbp)
	cmpq	$0, -24(%rbp)
	jne	LBB214_21
## %bb.8:
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, -40(%rbp)
LBB214_9:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -44(%rbp)
	movb	%al, -45(%rbp)          ## 1-byte Spill
	jne	LBB214_11
## %bb.10:                              ##   in Loop: Header=BB214_9 Depth=1
	cmpq	$0, -40(%rbp)
	setne	%al
	movb	%al, -45(%rbp)          ## 1-byte Spill
LBB214_11:                              ##   in Loop: Header=BB214_9 Depth=1
	movb	-45(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB214_12
	jmp	LBB214_20
LBB214_12:                              ##   in Loop: Header=BB214_9 Depth=1
	movq	-40(%rbp), %rax
	cmpq	$0, 32(%rax)
	sete	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movslq	%edx, %rax
	cmpq	$0, %rax
	je	LBB214_14
## %bb.13:
	leaq	L___func__.idxCreateFromWhere(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.182(%rip), %rcx
	movl	$10286, %edx            ## imm = 0x282E
	callq	___assert_rtn
LBB214_14:                              ##   in Loop: Header=BB214_9 Depth=1
	jmp	LBB214_15
LBB214_15:                              ##   in Loop: Header=BB214_9 Depth=1
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_idxFindConstraint
	cmpl	$0, %eax
	jne	LBB214_18
## %bb.16:                              ##   in Loop: Header=BB214_9 Depth=1
	movq	-24(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_idxFindConstraint
	cmpl	$0, %eax
	jne	LBB214_18
## %bb.17:                              ##   in Loop: Header=BB214_9 Depth=1
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movq	-40(%rbp), %rcx
	callq	_idxCreateFromCons
	movl	%eax, -44(%rbp)
LBB214_18:                              ##   in Loop: Header=BB214_9 Depth=1
	jmp	LBB214_19
LBB214_19:                              ##   in Loop: Header=BB214_9 Depth=1
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	LBB214_9
LBB214_20:
	jmp	LBB214_21
LBB214_21:
	movl	-44(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxFindConstraint
_idxFindConstraint:                     ## @idxFindConstraint
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
LBB215_1:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -32(%rbp)
	je	LBB215_6
## %bb.2:                               ##   in Loop: Header=BB215_1 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %ecx
	movq	-32(%rbp), %rax
	cmpl	12(%rax), %ecx
	jne	LBB215_4
## %bb.3:
	movl	$1, -4(%rbp)
	jmp	LBB215_7
LBB215_4:                               ##   in Loop: Header=BB215_1 Depth=1
	jmp	LBB215_5
LBB215_5:                               ##   in Loop: Header=BB215_1 Depth=1
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	LBB215_1
LBB215_6:
	movl	$0, -4(%rbp)
LBB215_7:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxCreateFromCons
_idxCreateFromCons:                     ## @idxCreateFromCons
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
	cmpq	$0, -24(%rbp)
	jne	LBB216_2
## %bb.1:
	cmpq	$0, -32(%rbp)
	je	LBB216_45
LBB216_2:
	movq	-40(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movq	-32(%rbp), %r8
	leaq	-44(%rbp), %rdi
	callq	_idxFindCompatible
	xorl	%r9d, %r9d
	cmpl	%eax, %r9d
	jne	LBB216_45
## %bb.3:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	$0, -64(%rbp)
	movq	$0, -72(%rbp)
	movl	$0, -84(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -80(%rbp)
LBB216_4:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -80(%rbp)
	je	LBB216_7
## %bb.5:                               ##   in Loop: Header=BB216_4 Depth=1
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rdx
	movq	-80(%rbp), %rcx
	leaq	-44(%rbp), %rdi
	callq	_idxAppendColDefn
	movq	%rax, -64(%rbp)
## %bb.6:                               ##   in Loop: Header=BB216_4 Depth=1
	movq	-80(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -80(%rbp)
	jmp	LBB216_4
LBB216_7:
	movq	-32(%rbp), %rax
	movq	%rax, -80(%rbp)
LBB216_8:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -80(%rbp)
	je	LBB216_11
## %bb.9:                               ##   in Loop: Header=BB216_8 Depth=1
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rdx
	movq	-80(%rbp), %rcx
	leaq	-44(%rbp), %rdi
	callq	_idxAppendColDefn
	movq	%rax, -64(%rbp)
## %bb.10:                              ##   in Loop: Header=BB216_8 Depth=1
	movq	-80(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -80(%rbp)
	jmp	LBB216_8
LBB216_11:
	cmpl	$0, -44(%rbp)
	jne	LBB216_44
## %bb.12:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rdi
	callq	_idxIdentifierRequiresQuotes
	movl	%eax, -108(%rbp)
	movq	$0, -120(%rbp)
	movl	$0, -124(%rbp)
LBB216_13:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB216_14 Depth 2
	movl	$0, -128(%rbp)
LBB216_14:                              ##   Parent Loop BB216_13 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-64(%rbp), %rax
	movslq	-128(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	LBB216_17
## %bb.15:                              ##   in Loop: Header=BB216_14 Depth=2
	movl	-84(%rbp), %eax
	shll	$3, %eax
	movq	-64(%rbp), %rcx
	movslq	-128(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	addl	%esi, %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
## %bb.16:                              ##   in Loop: Header=BB216_14 Depth=2
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	LBB216_14
LBB216_17:                              ##   in Loop: Header=BB216_13 Depth=1
	movq	-120(%rbp), %rdi
	callq	_sqlite3_free
	movq	-104(%rbp), %rsi
	movl	-84(%rbp), %edx
	leaq	L_.str.183(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -120(%rbp)
	cmpq	$0, -120(%rbp)
	jne	LBB216_19
## %bb.18:
	jmp	LBB216_28
LBB216_19:                              ##   in Loop: Header=BB216_13 Depth=1
	leaq	L_.str.184(%rip), %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movb	$0, %al
	callq	_sqlite3_mprintf
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	%rax, -136(%rbp)
	movl	$0, -128(%rbp)
	movq	-40(%rbp), %rdi
	movq	-136(%rbp), %rsi
	leaq	-128(%rbp), %rax
	leaq	_countNonzeros(%rip), %rdx
	movq	%rax, %rcx
	callq	_sqlite3_exec
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	sete	%r9b
	xorb	$-1, %r9b
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movslq	%eax, %rcx
	cmpq	$0, %rcx
	je	LBB216_21
## %bb.20:
	leaq	L___func__.idxCreateFromCons(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.185(%rip), %rcx
	movl	$10209, %edx            ## imm = 0x27E1
	callq	___assert_rtn
LBB216_21:                              ##   in Loop: Header=BB216_13 Depth=1
	jmp	LBB216_22
LBB216_22:                              ##   in Loop: Header=BB216_13 Depth=1
	movq	-136(%rbp), %rdi
	callq	_sqlite3_free
	cmpl	$0, -128(%rbp)
	jne	LBB216_24
## %bb.23:
	movl	$0, -124(%rbp)
	jmp	LBB216_28
LBB216_24:                              ##   in Loop: Header=BB216_13 Depth=1
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
## %bb.25:                              ##   in Loop: Header=BB216_13 Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$50, -124(%rbp)
	movb	%al, -137(%rbp)         ## 1-byte Spill
	jge	LBB216_27
## %bb.26:                              ##   in Loop: Header=BB216_13 Depth=1
	cmpq	$0, -120(%rbp)
	setne	%al
	movb	%al, -137(%rbp)         ## 1-byte Spill
LBB216_27:                              ##   in Loop: Header=BB216_13 Depth=1
	movb	-137(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB216_13
LBB216_28:
	cmpl	$0, -124(%rbp)
	je	LBB216_30
## %bb.29:
	movl	$773, -44(%rbp)         ## imm = 0x305
	jmp	LBB216_43
LBB216_30:
	cmpq	$0, -120(%rbp)
	jne	LBB216_32
## %bb.31:
	movl	$7, -44(%rbp)
	jmp	LBB216_42
LBB216_32:
	cmpl	$0, -108(%rbp)
	je	LBB216_34
## %bb.33:
	leaq	L_.str.186(%rip), %rax
	movq	%rax, -96(%rbp)
	jmp	LBB216_35
LBB216_34:
	leaq	L_.str.187(%rip), %rax
	movq	%rax, -96(%rbp)
LBB216_35:
	movq	-96(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-104(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	jne	LBB216_37
## %bb.36:
	movl	$7, -44(%rbp)
	jmp	LBB216_41
LBB216_37:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-40(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	72(%rdx), %r8
	movq	%rcx, %rdx
	callq	_sqlite3_exec
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	LBB216_39
## %bb.38:
	movl	$773, -44(%rbp)         ## imm = 0x305
	jmp	LBB216_40
LBB216_39:
	movq	-8(%rbp), %rax
	addq	$88, %rax
	movq	-120(%rbp), %rdx
	movq	-72(%rbp), %rcx
	leaq	-44(%rbp), %rdi
	movq	%rax, %rsi
	callq	_idxHashAdd
LBB216_40:
	jmp	LBB216_41
LBB216_41:
	movq	-120(%rbp), %rdi
	callq	_sqlite3_free
	movq	-72(%rbp), %rdi
	callq	_sqlite3_free
LBB216_42:
	jmp	LBB216_43
LBB216_43:
	jmp	LBB216_44
LBB216_44:
	movq	-64(%rbp), %rdi
	callq	_sqlite3_free
LBB216_45:
	movl	-44(%rbp), %eax
	addq	$144, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxFindCompatible
_idxFindCompatible:                     ## @idxFindCompatible
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -76(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -72(%rbp)
LBB217_1:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -72(%rbp)
	je	LBB217_4
## %bb.2:                               ##   in Loop: Header=BB217_1 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
## %bb.3:                               ##   in Loop: Header=BB217_1 Depth=1
	movq	-72(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -72(%rbp)
	jmp	LBB217_1
LBB217_4:
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %r8
	leaq	-64(%rbp), %rsi
	leaq	L_.str.188(%rip), %rcx
	movb	$0, %al
	callq	_idxPrintfPrepareStmt
	movl	%eax, -80(%rbp)
LBB217_5:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB217_11 Depth 2
                                        ##     Child Loop BB217_15 Depth 2
                                        ##       Child Loop BB217_20 Depth 3
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -80(%rbp)
	movb	%al, -129(%rbp)         ## 1-byte Spill
	jne	LBB217_7
## %bb.6:                               ##   in Loop: Header=BB217_5 Depth=1
	movq	-64(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	sete	%cl
	movb	%cl, -129(%rbp)         ## 1-byte Spill
LBB217_7:                               ##   in Loop: Header=BB217_5 Depth=1
	movb	-129(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB217_8
	jmp	LBB217_43
LBB217_8:                               ##   in Loop: Header=BB217_5 Depth=1
	movl	$1, -84(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	$0, -104(%rbp)
	movq	-64(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -112(%rbp)
	cmpq	$0, -112(%rbp)
	jne	LBB217_10
## %bb.9:                               ##   in Loop: Header=BB217_5 Depth=1
	jmp	LBB217_5
LBB217_10:                              ##   in Loop: Header=BB217_5 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, -72(%rbp)
LBB217_11:                              ##   Parent Loop BB217_5 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpq	$0, -72(%rbp)
	je	LBB217_14
## %bb.12:                              ##   in Loop: Header=BB217_11 Depth=2
	movq	-72(%rbp), %rax
	movl	$0, 16(%rax)
## %bb.13:                              ##   in Loop: Header=BB217_11 Depth=2
	movq	-72(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -72(%rbp)
	jmp	LBB217_11
LBB217_14:                              ##   in Loop: Header=BB217_5 Depth=1
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rdi
	movq	-112(%rbp), %r8
	leaq	-104(%rbp), %rsi
	leaq	L_.str.189(%rip), %rcx
	movb	$0, %al
	callq	_idxPrintfPrepareStmt
	movl	%eax, -80(%rbp)
LBB217_15:                              ##   Parent Loop BB217_5 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB217_20 Depth 3
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -80(%rbp)
	movb	%al, -130(%rbp)         ## 1-byte Spill
	jne	LBB217_17
## %bb.16:                              ##   in Loop: Header=BB217_15 Depth=2
	movq	-104(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	sete	%cl
	movb	%cl, -130(%rbp)         ## 1-byte Spill
LBB217_17:                              ##   in Loop: Header=BB217_15 Depth=2
	movb	-130(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB217_18
	jmp	LBB217_39
LBB217_18:                              ##   in Loop: Header=BB217_15 Depth=2
	xorl	%esi, %esi
	movq	-104(%rbp), %rdi
	callq	_sqlite3_column_int
	movl	%eax, -116(%rbp)
	movq	-104(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_int
	movl	%eax, -120(%rbp)
	movq	-104(%rbp), %rdi
	movl	$4, %esi
	callq	_sqlite3_column_text
	movq	%rax, -128(%rbp)
	movl	-116(%rbp), %ecx
	cmpl	-76(%rbp), %ecx
	jge	LBB217_32
## %bb.19:                              ##   in Loop: Header=BB217_15 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, -72(%rbp)
LBB217_20:                              ##   Parent Loop BB217_5 Depth=1
                                        ##     Parent Loop BB217_15 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	cmpq	$0, -72(%rbp)
	je	LBB217_29
## %bb.21:                              ##   in Loop: Header=BB217_20 Depth=3
	movq	-72(%rbp), %rax
	cmpl	$0, 16(%rax)
	je	LBB217_23
## %bb.22:                              ##   in Loop: Header=BB217_20 Depth=3
	jmp	LBB217_28
LBB217_23:                              ##   in Loop: Header=BB217_20 Depth=3
	movq	-72(%rbp), %rax
	movl	12(%rax), %ecx
	cmpl	-120(%rbp), %ecx
	je	LBB217_25
## %bb.24:                              ##   in Loop: Header=BB217_20 Depth=3
	jmp	LBB217_28
LBB217_25:                              ##   in Loop: Header=BB217_20 Depth=3
	movq	-72(%rbp), %rax
	movq	(%rax), %rdi
	movq	-128(%rbp), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	je	LBB217_27
## %bb.26:                              ##   in Loop: Header=BB217_20 Depth=3
	jmp	LBB217_28
LBB217_27:                              ##   in Loop: Header=BB217_15 Depth=2
	movq	-72(%rbp), %rax
	movl	$1, 16(%rax)
	jmp	LBB217_29
LBB217_28:                              ##   in Loop: Header=BB217_20 Depth=3
	movq	-72(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -72(%rbp)
	jmp	LBB217_20
LBB217_29:                              ##   in Loop: Header=BB217_15 Depth=2
	cmpq	$0, -72(%rbp)
	jne	LBB217_31
## %bb.30:                              ##   in Loop: Header=BB217_5 Depth=1
	movl	$0, -84(%rbp)
	jmp	LBB217_39
LBB217_31:                              ##   in Loop: Header=BB217_15 Depth=2
	jmp	LBB217_38
LBB217_32:                              ##   in Loop: Header=BB217_15 Depth=2
	cmpq	$0, -96(%rbp)
	je	LBB217_37
## %bb.33:                              ##   in Loop: Header=BB217_15 Depth=2
	movq	-96(%rbp), %rax
	movl	12(%rax), %ecx
	cmpl	-120(%rbp), %ecx
	jne	LBB217_35
## %bb.34:                              ##   in Loop: Header=BB217_15 Depth=2
	movq	-96(%rbp), %rax
	movq	(%rax), %rdi
	movq	-128(%rbp), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	je	LBB217_36
LBB217_35:                              ##   in Loop: Header=BB217_5 Depth=1
	movl	$0, -84(%rbp)
	jmp	LBB217_39
LBB217_36:                              ##   in Loop: Header=BB217_15 Depth=2
	movq	-96(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -96(%rbp)
LBB217_37:                              ##   in Loop: Header=BB217_15 Depth=2
	jmp	LBB217_38
LBB217_38:                              ##   in Loop: Header=BB217_15 Depth=2
	jmp	LBB217_15
LBB217_39:                              ##   in Loop: Header=BB217_5 Depth=1
	movq	-104(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	_idxFinalize
	cmpl	$0, -80(%rbp)
	jne	LBB217_42
## %bb.40:                              ##   in Loop: Header=BB217_5 Depth=1
	cmpl	$0, -84(%rbp)
	je	LBB217_42
## %bb.41:
	movq	-64(%rbp), %rdi
	callq	_sqlite3_finalize
	movl	$1, -4(%rbp)
	jmp	LBB217_44
LBB217_42:                              ##   in Loop: Header=BB217_5 Depth=1
	jmp	LBB217_5
LBB217_43:
	movq	-64(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	_idxFinalize
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -4(%rbp)
LBB217_44:
	movl	-4(%rbp), %eax
	addq	$144, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxAppendColDefn
_idxAppendColDefn:                      ## @idxAppendColDefn
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	12(%rcx), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	cmpq	$0, -40(%rbp)
	je	LBB218_2
## %bb.1:
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rsi
	leaq	L_.str.158(%rip), %rdx
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -40(%rbp)
LBB218_2:
	movq	-48(%rbp), %rax
	movq	(%rax), %rdi
	callq	_idxIdentifierRequiresQuotes
	cmpl	$0, %eax
	je	LBB218_4
## %bb.3:
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rax
	movq	(%rax), %rcx
	leaq	L_.str.190(%rip), %rdx
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -40(%rbp)
	jmp	LBB218_5
LBB218_4:
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rax
	movq	(%rax), %rcx
	leaq	L_.str.79(%rip), %rdx
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -40(%rbp)
LBB218_5:
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	je	LBB218_10
## %bb.6:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	callq	_idxIdentifierRequiresQuotes
	cmpl	$0, %eax
	je	LBB218_8
## %bb.7:
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	leaq	L_.str.191(%rip), %rdx
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -40(%rbp)
	jmp	LBB218_9
LBB218_8:
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	leaq	L_.str.192(%rip), %rdx
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -40(%rbp)
LBB218_9:
	jmp	LBB218_10
LBB218_10:
	movq	-32(%rbp), %rax
	cmpl	$0, 20(%rax)
	je	LBB218_12
## %bb.11:
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rsi
	leaq	L_.str.193(%rip), %rdx
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -40(%rbp)
LBB218_12:
	movq	-40(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxIdentifierRequiresQuotes
_idxIdentifierRequiresQuotes:           ## @idxIdentifierRequiresQuotes
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movl	$0, -20(%rbp)
LBB219_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	LBB219_12
## %bb.2:                               ##   in Loop: Header=BB219_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$95, %edx
	je	LBB219_10
## %bb.3:                               ##   in Loop: Header=BB219_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$48, %edx
	jl	LBB219_5
## %bb.4:                               ##   in Loop: Header=BB219_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$57, %edx
	jle	LBB219_10
LBB219_5:                               ##   in Loop: Header=BB219_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$97, %edx
	jl	LBB219_7
## %bb.6:                               ##   in Loop: Header=BB219_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$122, %edx
	jle	LBB219_10
LBB219_7:                               ##   in Loop: Header=BB219_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$65, %edx
	jl	LBB219_9
## %bb.8:                               ##   in Loop: Header=BB219_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$90, %edx
	jle	LBB219_10
LBB219_9:
	movl	$1, -4(%rbp)
	jmp	LBB219_13
LBB219_10:                              ##   in Loop: Header=BB219_1 Depth=1
	jmp	LBB219_11
LBB219_11:                              ##   in Loop: Header=BB219_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB219_1
LBB219_12:
	movl	$0, -4(%rbp)
LBB219_13:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function countNonzeros
_countNonzeros:                         ## @countNonzeros
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	cmpl	$0, -12(%rbp)
	jle	LBB220_4
## %bb.1:
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %ecx
	cmpl	$48, %ecx
	jne	LBB220_3
## %bb.2:
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movsbl	1(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB220_4
LBB220_3:
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
LBB220_4:
	xorl	%eax, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxHashAdd
_idxHashAdd:                            ## @idxHashAdd
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	callq	_idxHashString
	movl	%eax, -48(%rbp)
	cmpq	$0, -40(%rbp)
	je	LBB221_2
## %bb.1:
	movq	-40(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -68(%rbp)         ## 4-byte Spill
	jmp	LBB221_3
LBB221_2:
	xorl	%eax, %eax
	movl	%eax, -68(%rbp)         ## 4-byte Spill
	jmp	LBB221_3
LBB221_3:
	movl	-68(%rbp), %eax         ## 4-byte Reload
	movl	%eax, -52(%rbp)
	cmpl	$0, -48(%rbp)
	setge	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movslq	%eax, %rdx
	cmpq	$0, %rdx
	je	LBB221_5
## %bb.4:
	leaq	L___func__.idxHashAdd(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.194(%rip), %rcx
	movl	$9447, %edx             ## imm = 0x24E7
	callq	___assert_rtn
LBB221_5:
	jmp	LBB221_6
LBB221_6:
	movq	-24(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -64(%rbp)
LBB221_7:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -64(%rbp)
	je	LBB221_13
## %bb.8:                               ##   in Loop: Header=BB221_7 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	cmpl	-44(%rbp), %eax
	jne	LBB221_11
## %bb.9:                               ##   in Loop: Header=BB221_7 Depth=1
	xorl	%eax, %eax
	movq	-64(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	-32(%rbp), %rsi
	movslq	-44(%rbp), %rdx
	movl	%eax, -72(%rbp)         ## 4-byte Spill
	callq	_memcmp
	movl	-72(%rbp), %r8d         ## 4-byte Reload
	cmpl	%eax, %r8d
	jne	LBB221_11
## %bb.10:
	movl	$1, -4(%rbp)
	jmp	LBB221_18
LBB221_11:                              ##   in Loop: Header=BB221_7 Depth=1
	jmp	LBB221_12
LBB221_12:                              ##   in Loop: Header=BB221_7 Depth=1
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	LBB221_7
LBB221_13:
	movq	-16(%rbp), %rdi
	movslq	-44(%rbp), %rax
	addq	$40, %rax
	addq	$1, %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	addq	$1, %rax
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, %esi
	callq	_idxMalloc
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	LBB221_17
## %bb.14:
	movq	$-1, %rcx
	movq	-64(%rbp), %rax
	addq	$40, %rax
	movq	-64(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	movslq	-44(%rbp), %rdx
	callq	___memcpy_chk
	cmpq	$0, -40(%rbp)
	je	LBB221_16
## %bb.15:
	movq	$-1, %rcx
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-44(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rsi
	addq	%rsi, %rax
	movq	-64(%rbp), %rsi
	movq	%rax, 8(%rsi)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-40(%rbp), %rsi
	movslq	-52(%rbp), %rdx
	callq	___memcpy_chk
LBB221_16:
	movq	-24(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-64(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	movq	%rax, 8(%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-64(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
LBB221_17:
	movl	$0, -4(%rbp)
LBB221_18:
	movl	-4(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxHashString
_idxHashString:                         ## @idxHashString
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
LBB222_1:                               ## =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	LBB222_4
## %bb.2:                               ##   in Loop: Header=BB222_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %esi
	addl	%esi, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
## %bb.3:                               ##   in Loop: Header=BB222_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB222_1
LBB222_4:
	movl	-16(%rbp), %eax
	xorl	%edx, %edx
	movl	$1023, %ecx             ## imm = 0x3FF
	divl	%ecx
	movl	%edx, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxLargestIndex
_idxLargestIndex:                       ## @idxLargestIndex
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -28(%rbp)
	leaq	L_.str.203(%rip), %rax
	movq	%rax, -40(%rbp)
	movq	$0, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rdx
	movq	-40(%rbp), %rcx
	leaq	-48(%rbp), %rsi
	callq	_idxPrepareStmt
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jne	LBB223_3
## %bb.1:
	movq	-48(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	jne	LBB223_3
## %bb.2:
	xorl	%esi, %esi
	movq	-48(%rbp), %rdi
	callq	_sqlite3_column_int
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
LBB223_3:
	movq	-48(%rbp), %rsi
	leaq	-28(%rbp), %rdi
	callq	_idxFinalize
	movl	-28(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxRemFunc
_idxRemFunc:                            ## @idxRemFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_sqlite3_user_data
	movq	%rax, -32(%rbp)
	cmpl	$2, -12(%rbp)
	sete	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %esi
	movslq	%esi, %rax
	cmpq	$0, %rax
	je	LBB224_2
## %bb.1:
	leaq	L___func__.idxRemFunc(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.204(%rip), %rcx
	movl	$10715, %edx            ## imm = 0x29DB
	callq	___assert_rtn
LBB224_2:
	jmp	LBB224_3
LBB224_3:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_int
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	setle	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %eax
	movslq	%eax, %rcx
	cmpq	$0, %rcx
	je	LBB224_5
## %bb.4:
	leaq	L___func__.idxRemFunc(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.205(%rip), %rcx
	movl	$10718, %edx            ## imm = 0x29DE
	callq	___assert_rtn
LBB224_5:
	jmp	LBB224_6
LBB224_6:
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	leaq	(%rcx,%rcx,4), %rcx
	leaq	8(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %edx
	decl	%edx
	movl	%edx, %eax
	subl	$4, %edx
	movq	%rax, -72(%rbp)         ## 8-byte Spill
	ja	LBB224_12
## %bb.27:
	leaq	LJTI224_0(%rip), %rax
	movq	-72(%rbp), %rcx         ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB224_7:
	jmp	LBB224_12
LBB224_8:
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	8(%rax), %rsi
	callq	_sqlite3_result_int64
	jmp	LBB224_12
LBB224_9:
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rax
	movsd	16(%rax), %xmm0         ## xmm0 = mem[0],zero
	callq	_sqlite3_result_double
	jmp	LBB224_12
LBB224_10:
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-40(%rbp), %rax
	movl	28(%rax), %edx
	movq	$-1, %rcx
	callq	_sqlite3_result_blob
	jmp	LBB224_12
LBB224_11:
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-40(%rbp), %rax
	movl	28(%rax), %edx
	movq	$-1, %rcx
	callq	_sqlite3_result_text
LBB224_12:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_type
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-40(%rbp), %rcx
	movl	(%rcx), %eax
	decl	%eax
	movl	%eax, %ecx
	subl	$4, %eax
	movq	%rcx, -80(%rbp)         ## 8-byte Spill
	ja	LBB224_26
## %bb.28:
	leaq	LJTI224_1(%rip), %rax
	movq	-80(%rbp), %rcx         ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB224_13:
	jmp	LBB224_26
LBB224_14:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_int64
	movq	-40(%rbp), %rcx
	movq	%rax, 8(%rcx)
	jmp	LBB224_26
LBB224_15:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_double
	movq	-40(%rbp), %rax
	movsd	%xmm0, 16(%rax)
	jmp	LBB224_26
LBB224_16:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_bytes
	movl	%eax, -48(%rbp)
	movq	$0, -56(%rbp)
	movl	-48(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jle	LBB224_20
## %bb.17:
	movq	-40(%rbp), %rax
	movq	32(%rax), %rdi
	movl	-48(%rbp), %ecx
	shll	$1, %ecx
	movl	%ecx, %esi
	callq	_sqlite3_realloc
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	jne	LBB224_19
## %bb.18:
	movq	-8(%rbp), %rdi
	callq	_sqlite3_result_error_nomem
	jmp	LBB224_26
LBB224_19:
	movl	-48(%rbp), %eax
	shll	$1, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-64(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	%rcx, 32(%rdx)
LBB224_20:
	movl	-48(%rbp), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-40(%rbp), %rcx
	cmpl	$4, (%rcx)
	jne	LBB224_24
## %bb.21:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_blob
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	je	LBB224_23
## %bb.22:
	movq	$-1, %rcx
	movq	-40(%rbp), %rax
	movq	32(%rax), %rdi
	movq	-56(%rbp), %rsi
	movslq	-48(%rbp), %rdx
	callq	___memcpy_chk
LBB224_23:
	jmp	LBB224_25
LBB224_24:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_text
	movq	$-1, %rcx
	movq	%rax, -56(%rbp)
	movq	-40(%rbp), %rax
	movq	32(%rax), %rdi
	movq	-56(%rbp), %rsi
	movslq	-48(%rbp), %rdx
	callq	___memcpy_chk
LBB224_25:
	jmp	LBB224_26
LBB224_26:
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L224_0_set_8, LBB224_8-LJTI224_0
.set L224_0_set_9, LBB224_9-LJTI224_0
.set L224_0_set_11, LBB224_11-LJTI224_0
.set L224_0_set_10, LBB224_10-LJTI224_0
.set L224_0_set_7, LBB224_7-LJTI224_0
LJTI224_0:
	.long	L224_0_set_8
	.long	L224_0_set_9
	.long	L224_0_set_11
	.long	L224_0_set_10
	.long	L224_0_set_7
.set L224_1_set_14, LBB224_14-LJTI224_1
.set L224_1_set_15, LBB224_15-LJTI224_1
.set L224_1_set_16, LBB224_16-LJTI224_1
.set L224_1_set_13, LBB224_13-LJTI224_1
LJTI224_1:
	.long	L224_1_set_14
	.long	L224_1_set_15
	.long	L224_1_set_16
	.long	L224_1_set_16
	.long	L224_1_set_13
	.end_data_region
                                        ## -- End function
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3               ## -- Begin function idxSampleFunc
LCPI225_0:
	.quad	4607182418800017408     ## double 1
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
_idxSampleFunc:                         ## @idxSampleFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_sqlite3_user_data
	movq	%rax, -32(%rbp)
	cmpl	$0, -12(%rbp)
	sete	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %esi
	movslq	%esi, %rax
	cmpq	$0, %rax
	je	LBB225_2
## %bb.1:
	leaq	L___func__.idxSampleFunc(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.206(%rip), %rcx
	movl	$10675, %edx            ## imm = 0x29B3
	callq	___assert_rtn
LBB225_2:
	jmp	LBB225_3
LBB225_3:
	movq	-32(%rbp), %rax
	movsd	16(%rax), %xmm0         ## xmm0 = mem[0],zero
	xorps	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jne	LBB225_5
	jp	LBB225_5
## %bb.4:
	movl	$1, -36(%rbp)
	jmp	LBB225_8
LBB225_5:
	movq	-32(%rbp), %rax
	movsd	24(%rax), %xmm0         ## xmm0 = mem[0],zero
	movq	-32(%rbp), %rax
	divsd	16(%rax), %xmm0
	movq	-32(%rbp), %rax
	movsd	8(%rax), %xmm1          ## xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	setae	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jne	LBB225_7
## %bb.6:
	leaq	-38(%rbp), %rax
	movl	$2, %edi
	movq	%rax, %rsi
	callq	_sqlite3_randomness
	movzwl	-38(%rbp), %eax
	cltd
	movl	$100, %ecx
	idivl	%ecx
	movq	-32(%rbp), %rsi
	cmpl	(%rsi), %edx
	setle	%r8b
	andb	$1, %r8b
	movzbl	%r8b, %ecx
	movl	%ecx, -36(%rbp)
LBB225_7:
	jmp	LBB225_8
LBB225_8:
	movq	-8(%rbp), %rdi
	movl	-36(%rbp), %esi
	callq	_sqlite3_result_int
	movsd	LCPI225_0(%rip), %xmm0  ## xmm0 = mem[0],zero
	movq	-32(%rbp), %rax
	addsd	16(%rax), %xmm0
	movsd	%xmm0, 16(%rax)
	cvtsi2sdl	-36(%rbp), %xmm0
	movq	-32(%rbp), %rax
	addsd	24(%rax), %xmm0
	movsd	%xmm0, 24(%rax)
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxBuildSampleTable
_idxBuildSampleTable:                   ## @idxBuildSampleTable
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	24(%rdx), %rdi
	leaq	L_.str.201(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -48(%rbp)         ## 8-byte Spill
	movq	-48(%rbp), %r8          ## 8-byte Reload
	callq	_sqlite3_exec
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	je	LBB226_2
## %bb.1:
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	LBB226_5
LBB226_2:
	movq	-24(%rbp), %rsi
	leaq	L_.str.207(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	LBB226_4
## %bb.3:
	movl	$7, -4(%rbp)
	jmp	LBB226_5
LBB226_4:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movq	24(%rdx), %rdi
	movq	-40(%rbp), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -56(%rbp)         ## 8-byte Spill
	movq	-56(%rbp), %r8          ## 8-byte Reload
	callq	_sqlite3_exec
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rdi
	callq	_sqlite3_free
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB226_5:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxPopulateOneStat1
_idxPopulateOneStat1:                   ## @idxPopulateOneStat1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$240, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	$0, -64(%rbp)
	movq	$0, -72(%rbp)
	movl	$0, -76(%rbp)
	movq	$0, -88(%rbp)
	movq	$0, -96(%rbp)
	movl	$0, -100(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	setg	%r10b
	xorb	$-1, %r10b
	andb	$1, %r10b
	movzbl	%r10b, %r11d
	movslq	%r11d, %rax
	cmpq	$0, %rax
	je	LBB227_2
## %bb.1:
	leaq	L___func__.idxPopulateOneStat1(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.208(%rip), %rcx
	movl	$10820, %edx            ## imm = 0x2A44
	callq	___assert_rtn
LBB227_2:
	jmp	LBB227_3
LBB227_3:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movl	$1, %esi
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_bind_text
LBB227_4:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	xorl	%ecx, %ecx
	cmpl	-100(%rbp), %ecx
	movb	%al, -157(%rbp)         ## 1-byte Spill
	jne	LBB227_6
## %bb.5:                               ##   in Loop: Header=BB227_4 Depth=1
	movq	-16(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	sete	%dl
	movb	%dl, -157(%rbp)         ## 1-byte Spill
LBB227_6:                               ##   in Loop: Header=BB227_4 Depth=1
	movb	-157(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB227_7
	jmp	LBB227_8
LBB227_7:                               ##   in Loop: Header=BB227_4 Depth=1
	xorl	%esi, %esi
	movq	-56(%rbp), %rax
	cmpq	$0, %rax
	leaq	L_.str.27(%rip), %rax
	leaq	L_.str.158(%rip), %rcx
	cmoveq	%rax, %rcx
	movq	%rcx, -112(%rbp)
	movq	-16(%rbp), %rdi
	callq	_sqlite3_column_text
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rsi
	movq	-112(%rbp), %rcx
	movq	-120(%rbp), %r8
	movl	-76(%rbp), %r9d
	movq	-120(%rbp), %rax
	movq	-128(%rbp), %rdx
	leaq	-100(%rbp), %rdi
	leaq	L_.str.209(%rip), %r10
	movq	%rdx, -168(%rbp)        ## 8-byte Spill
	movq	%r10, %rdx
	movq	%rax, (%rsp)
	movq	-168(%rbp), %rax        ## 8-byte Reload
	movq	%rax, 8(%rsp)
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -56(%rbp)
	movq	-64(%rbp), %rsi
	movq	-112(%rbp), %rcx
	movl	-76(%rbp), %r9d
	addl	$1, %r9d
	movl	%r9d, -76(%rbp)
	leaq	-100(%rbp), %rdi
	leaq	L_.str.210(%rip), %rdx
	movl	%r9d, %r8d
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -64(%rbp)
	jmp	LBB227_4
LBB227_8:
	movq	-16(%rbp), %rdi
	callq	_sqlite3_reset
	cmpl	$0, -100(%rbp)
	jne	LBB227_13
## %bb.9:
	movq	-8(%rbp), %rax
	cmpl	$100, (%rax)
	jne	LBB227_11
## %bb.10:
	movq	-56(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movq	-64(%rbp), %rcx
	leaq	L_.str.211(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -72(%rbp)
	jmp	LBB227_12
LBB227_11:
	movq	-56(%rbp), %rsi
	movq	-64(%rbp), %rdx
	leaq	L_.str.212(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -72(%rbp)
LBB227_12:
	jmp	LBB227_13
LBB227_13:
	movq	-56(%rbp), %rdi
	callq	_sqlite3_free
	movq	-64(%rbp), %rdi
	callq	_sqlite3_free
	cmpl	$0, -100(%rbp)
	jne	LBB227_18
## %bb.14:
	movq	-8(%rbp), %rax
	cmpl	$100, (%rax)
	jne	LBB227_16
## %bb.15:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)        ## 8-byte Spill
	jmp	LBB227_17
LBB227_16:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -176(%rbp)        ## 8-byte Spill
LBB227_17:
	movq	-176(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movq	-72(%rbp), %rcx
	leaq	-88(%rbp), %rsi
	callq	_idxPrepareStmt
	movl	%eax, -100(%rbp)
LBB227_18:
	movq	-72(%rbp), %rdi
	callq	_sqlite3_free
	cmpl	$0, -100(%rbp)
	jne	LBB227_20
## %bb.19:
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	shlq	$2, %rcx
                                        ## kill: def $ecx killed $ecx killed $rcx
	leaq	-100(%rbp), %rdi
	movl	%ecx, %esi
	callq	_idxMalloc
	movq	%rax, -96(%rbp)
LBB227_20:
	cmpl	$0, -100(%rbp)
	jne	LBB227_60
## %bb.21:
	movq	-88(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	jne	LBB227_60
## %bb.22:
	movq	$0, -152(%rbp)
	movl	$0, -80(%rbp)
LBB227_23:                              ## =>This Inner Loop Header: Depth=1
	movl	-80(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	LBB227_26
## %bb.24:                              ##   in Loop: Header=BB227_23 Depth=1
	movq	-96(%rbp), %rax
	movslq	-80(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
## %bb.25:                              ##   in Loop: Header=BB227_23 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	LBB227_23
LBB227_26:
	jmp	LBB227_27
LBB227_27:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB227_31 Depth 2
                                        ##     Child Loop BB227_37 Depth 2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -100(%rbp)
	movb	%al, -177(%rbp)         ## 1-byte Spill
	jne	LBB227_29
## %bb.28:                              ##   in Loop: Header=BB227_27 Depth=1
	movq	-88(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	sete	%dl
	movb	%dl, -177(%rbp)         ## 1-byte Spill
LBB227_29:                              ##   in Loop: Header=BB227_27 Depth=1
	movb	-177(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB227_30
	jmp	LBB227_41
LBB227_30:                              ##   in Loop: Header=BB227_27 Depth=1
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	$0, -80(%rbp)
LBB227_31:                              ##   Parent Loop BB227_27 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-80(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	LBB227_36
## %bb.32:                              ##   in Loop: Header=BB227_31 Depth=2
	movq	-88(%rbp), %rdi
	movl	-80(%rbp), %esi
	callq	_sqlite3_column_int
	cmpl	$0, %eax
	jne	LBB227_34
## %bb.33:                              ##   in Loop: Header=BB227_27 Depth=1
	jmp	LBB227_36
LBB227_34:                              ##   in Loop: Header=BB227_31 Depth=2
	jmp	LBB227_35
LBB227_35:                              ##   in Loop: Header=BB227_31 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	LBB227_31
LBB227_36:                              ##   in Loop: Header=BB227_27 Depth=1
	jmp	LBB227_37
LBB227_37:                              ##   Parent Loop BB227_27 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-80(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	LBB227_40
## %bb.38:                              ##   in Loop: Header=BB227_37 Depth=2
	movq	-96(%rbp), %rax
	movl	-80(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movl	(%rax,%rdx,4), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax,%rdx,4)
## %bb.39:                              ##   in Loop: Header=BB227_37 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	LBB227_37
LBB227_40:                              ##   in Loop: Header=BB227_27 Depth=1
	jmp	LBB227_27
LBB227_41:
	cmpl	$0, -100(%rbp)
	jne	LBB227_51
## %bb.42:
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -156(%rbp)
	movl	-156(%rbp), %esi
	leaq	L_.str.213(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -152(%rbp)
	cmpq	$0, -152(%rbp)
	jne	LBB227_44
## %bb.43:
	movl	$7, -100(%rbp)
LBB227_44:
	movl	$1, -80(%rbp)
LBB227_45:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -100(%rbp)
	movb	%al, -178(%rbp)         ## 1-byte Spill
	jne	LBB227_47
## %bb.46:                              ##   in Loop: Header=BB227_45 Depth=1
	movl	-80(%rbp), %eax
	cmpl	-76(%rbp), %eax
	setle	%cl
	movb	%cl, -178(%rbp)         ## 1-byte Spill
LBB227_47:                              ##   in Loop: Header=BB227_45 Depth=1
	movb	-178(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB227_48
	jmp	LBB227_50
LBB227_48:                              ##   in Loop: Header=BB227_45 Depth=1
	movq	-152(%rbp), %rsi
	movl	-156(%rbp), %eax
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movl	(%rcx,%rdx,4), %edi
	movl	%eax, -184(%rbp)        ## 4-byte Spill
	movl	%edi, %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	-184(%rbp), %edi        ## 4-byte Reload
	addl	%eax, %edi
	movq	-96(%rbp), %rcx
	movslq	-80(%rbp), %r8
	movl	%edi, %eax
	cltd
	idivl	(%rcx,%r8,4)
	leaq	-100(%rbp), %rdi
	leaq	L_.str.214(%rip), %rcx
	movq	%rcx, %rdx
	movl	%eax, %ecx
	movb	$0, %al
	callq	_idxAppendText
	movq	%rax, -152(%rbp)
## %bb.49:                              ##   in Loop: Header=BB227_45 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	LBB227_45
LBB227_50:
	jmp	LBB227_51
LBB227_51:
	cmpl	$0, -100(%rbp)
	jne	LBB227_53
## %bb.52:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rdx
	movl	$1, %esi
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_bind_text
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-24(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movl	$2, %esi
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	movl	%eax, -188(%rbp)        ## 4-byte Spill
	callq	_sqlite3_bind_text
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-24(%rbp), %rdi
	movq	-152(%rbp), %rdx
	movl	$3, %esi
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	movl	%eax, -192(%rbp)        ## 4-byte Spill
	callq	_sqlite3_bind_text
	movq	-24(%rbp), %rdi
	movl	%eax, -196(%rbp)        ## 4-byte Spill
	callq	_sqlite3_step
	movq	-24(%rbp), %rdi
	movl	%eax, -200(%rbp)        ## 4-byte Spill
	callq	_sqlite3_reset
	movl	%eax, -100(%rbp)
LBB227_53:
	movq	-8(%rbp), %rax
	addq	$88, %rax
	movq	-40(%rbp), %rsi
	movq	-40(%rbp), %rdi
	movq	%rax, -208(%rbp)        ## 8-byte Spill
	movq	%rsi, -216(%rbp)        ## 8-byte Spill
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movq	-208(%rbp), %rdi        ## 8-byte Reload
	movq	-216(%rbp), %rsi        ## 8-byte Reload
	movl	%eax, %edx
	callq	_idxHashFind
	movq	%rax, -144(%rbp)
	cmpq	$0, -144(%rbp)
	je	LBB227_58
## %bb.54:
	movq	-144(%rbp), %rax
	cmpq	$0, 16(%rax)
	sete	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movslq	%edx, %rax
	cmpq	$0, %rax
	je	LBB227_56
## %bb.55:
	leaq	L___func__.idxPopulateOneStat1(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.215(%rip), %rcx
	movl	$10891, %edx            ## imm = 0x2A8B
	callq	___assert_rtn
LBB227_56:
	jmp	LBB227_57
LBB227_57:
	movq	-152(%rbp), %rax
	movq	-144(%rbp), %rcx
	movq	%rax, 16(%rcx)
	jmp	LBB227_59
LBB227_58:
	movq	-152(%rbp), %rdi
	callq	_sqlite3_free
LBB227_59:
	jmp	LBB227_60
LBB227_60:
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	movq	-88(%rbp), %rsi
	leaq	-100(%rbp), %rdi
	callq	_idxFinalize
	movl	-100(%rbp), %eax
	addq	$240, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxHashFind
_idxHashFind:                           ## @idxHashFind
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jge	LBB228_2
## %bb.1:
	movq	-24(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -28(%rbp)
LBB228_2:
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	_idxHashString
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	setge	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movslq	%eax, %rdx
	cmpq	$0, %rdx
	je	LBB228_4
## %bb.3:
	leaq	L___func__.idxHashFind(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.194(%rip), %rcx
	movl	$9479, %edx             ## imm = 0x2507
	callq	___assert_rtn
LBB228_4:
	jmp	LBB228_5
LBB228_5:
	movq	-16(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
LBB228_6:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -40(%rbp)
	je	LBB228_12
## %bb.7:                               ##   in Loop: Header=BB228_6 Depth=1
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	cmpl	-28(%rbp), %eax
	jne	LBB228_10
## %bb.8:                               ##   in Loop: Header=BB228_6 Depth=1
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	-24(%rbp), %rsi
	movslq	-28(%rbp), %rdx
	movl	%eax, -44(%rbp)         ## 4-byte Spill
	callq	_memcmp
	movl	-44(%rbp), %r8d         ## 4-byte Reload
	cmpl	%eax, %r8d
	jne	LBB228_10
## %bb.9:
	movq	-40(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB228_13
LBB228_10:                              ##   in Loop: Header=BB228_6 Depth=1
	jmp	LBB228_11
LBB228_11:                              ##   in Loop: Header=BB228_6 Depth=1
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	LBB228_6
LBB228_12:
	movq	$0, -8(%rbp)
LBB228_13:
	movq	-8(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxHashInit
_idxHashInit:                           ## @idxHashInit
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	movl	$8192, %edx             ## imm = 0x2000
	callq	___memset_chk
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function idxHashSearch
_idxHashSearch:                         ## @idxHashSearch
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	callq	_idxHashFind
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	LBB230_2
## %bb.1:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB230_3
LBB230_2:
	movq	$0, -8(%rbp)
LBB230_3:
	movq	-8(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shellLog
_shellLog:                              ## @shellLog
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpq	$0, 1344(%rax)
	jne	LBB231_2
## %bb.1:
	jmp	LBB231_3
LBB231_2:
	movq	-32(%rbp), %rax
	movq	1344(%rax), %rdi
	movl	-12(%rbp), %edx
	movq	-24(%rbp), %rcx
	leaq	L_.str.225(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-32(%rbp), %rcx
	movq	1344(%rcx), %rdi
	movl	%eax, -36(%rbp)         ## 4-byte Spill
	callq	_fflush
LBB231_3:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shell_out_of_memory
_shell_out_of_memory:                   ## @shell_out_of_memory
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.227(%rip), %rsi
	xorl	%ecx, %ecx
                                        ## kill: def $cl killed $cl killed $ecx
	movb	%cl, %al
	callq	_fprintf
	movl	$1, %edi
	movl	%eax, -4(%rbp)          ## 4-byte Spill
	callq	_exit
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function hexDigitValue
_hexDigitValue:                         ## @hexDigitValue
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
                                        ## kill: def $dil killed $dil killed $edi
	movb	%dil, -5(%rbp)
	movsbl	-5(%rbp), %eax
	cmpl	$48, %eax
	jl	LBB233_3
## %bb.1:
	movsbl	-5(%rbp), %eax
	cmpl	$57, %eax
	jg	LBB233_3
## %bb.2:
	movsbl	-5(%rbp), %eax
	subl	$48, %eax
	movl	%eax, -4(%rbp)
	jmp	LBB233_10
LBB233_3:
	movsbl	-5(%rbp), %eax
	cmpl	$97, %eax
	jl	LBB233_6
## %bb.4:
	movsbl	-5(%rbp), %eax
	cmpl	$102, %eax
	jg	LBB233_6
## %bb.5:
	movsbl	-5(%rbp), %eax
	subl	$97, %eax
	addl	$10, %eax
	movl	%eax, -4(%rbp)
	jmp	LBB233_10
LBB233_6:
	movsbl	-5(%rbp), %eax
	cmpl	$65, %eax
	jl	LBB233_9
## %bb.7:
	movsbl	-5(%rbp), %eax
	cmpl	$70, %eax
	jg	LBB233_9
## %bb.8:
	movsbl	-5(%rbp), %eax
	subl	$65, %eax
	addl	$10, %eax
	movl	%eax, -4(%rbp)
	jmp	LBB233_10
LBB233_9:
	movl	$-1, -4(%rbp)
LBB233_10:
	movl	-4(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shellAddSchemaName
_shellAddSchemaName:                    ## @shellAddSchemaName
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -28(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rdi
	callq	_sqlite3_context_db_handle
	movq	%rax, -64(%rbp)
	cmpq	$0, -40(%rbp)
	je	LBB234_25
## %bb.1:
	movq	-40(%rbp), %rdi
	leaq	L_.str.255(%rip), %rsi
	movl	$7, %edx
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB234_25
## %bb.2:
	movl	$0, -28(%rbp)
LBB234_3:                               ## =>This Inner Loop Header: Depth=1
	cmpl	$6, -28(%rbp)
	jge	LBB234_24
## %bb.4:                               ##   in Loop: Header=BB234_3 Depth=1
	movslq	-28(%rbp), %rax
	leaq	_shellAddSchemaName.aPrefix(%rip), %rcx
	movq	(%rcx,%rax,8), %rdi
	callq	_strlen30
	movl	%eax, -68(%rbp)
	movq	-40(%rbp), %rcx
	addq	$7, %rcx
	movslq	-28(%rbp), %rdx
	leaq	_shellAddSchemaName.aPrefix(%rip), %rsi
	movq	(%rsi,%rdx,8), %rsi
	movslq	-68(%rbp), %rdx
	movq	%rcx, %rdi
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB234_22
## %bb.5:                               ##   in Loop: Header=BB234_3 Depth=1
	movq	-40(%rbp), %rax
	movl	-68(%rbp), %ecx
	addl	$7, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$32, %ecx
	jne	LBB234_22
## %bb.6:                               ##   in Loop: Header=BB234_3 Depth=1
	movq	$0, -80(%rbp)
	movq	$0, -88(%rbp)
	cmpq	$0, -48(%rbp)
	je	LBB234_12
## %bb.7:                               ##   in Loop: Header=BB234_3 Depth=1
	movq	-48(%rbp), %rdi
	callq	_quoteChar
	movb	%al, -89(%rbp)
	movsbl	-89(%rbp), %ecx
	cmpl	$0, %ecx
	je	LBB234_10
## %bb.8:                               ##   in Loop: Header=BB234_3 Depth=1
	movq	-48(%rbp), %rdi
	leaq	L_.str.256(%rip), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	je	LBB234_10
## %bb.9:                               ##   in Loop: Header=BB234_3 Depth=1
	movl	-68(%rbp), %eax
	addl	$7, %eax
	movq	-40(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rsi
	movslq	-68(%rbp), %rdi
	addq	%rdi, %rsi
	addq	$8, %rsi
	leaq	L_.str.257(%rip), %rdi
	movq	%rsi, -104(%rbp)        ## 8-byte Spill
	movl	%eax, %esi
	movq	-104(%rbp), %r8         ## 8-byte Reload
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -80(%rbp)
	jmp	LBB234_11
LBB234_10:                              ##   in Loop: Header=BB234_3 Depth=1
	movl	-68(%rbp), %eax
	addl	$7, %eax
	movq	-40(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rsi
	movslq	-68(%rbp), %rdi
	addq	%rdi, %rsi
	addq	$8, %rsi
	leaq	L_.str.258(%rip), %rdi
	movq	%rsi, -112(%rbp)        ## 8-byte Spill
	movl	%eax, %esi
	movq	-112(%rbp), %r8         ## 8-byte Reload
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -80(%rbp)
LBB234_11:                              ##   in Loop: Header=BB234_3 Depth=1
	jmp	LBB234_12
LBB234_12:                              ##   in Loop: Header=BB234_3 Depth=1
	cmpq	$0, -56(%rbp)
	je	LBB234_19
## %bb.13:                              ##   in Loop: Header=BB234_3 Depth=1
	movslq	-28(%rbp), %rax
	leaq	_shellAddSchemaName.aPrefix(%rip), %rcx
	movq	(%rcx,%rax,8), %rax
	movsbl	(%rax), %edx
	cmpl	$86, %edx
	jne	LBB234_19
## %bb.14:                              ##   in Loop: Header=BB234_3 Depth=1
	movq	-64(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movq	-56(%rbp), %rdx
	callq	_shellFakeSchema
	movq	%rax, -88(%rbp)
	cmpq	$0, %rax
	je	LBB234_19
## %bb.15:                              ##   in Loop: Header=BB234_3 Depth=1
	cmpq	$0, -80(%rbp)
	jne	LBB234_17
## %bb.16:                              ##   in Loop: Header=BB234_3 Depth=1
	movq	-40(%rbp), %rsi
	movq	-88(%rbp), %rdx
	leaq	L_.str.259(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -80(%rbp)
	jmp	LBB234_18
LBB234_17:                              ##   in Loop: Header=BB234_3 Depth=1
	movq	-80(%rbp), %rsi
	movq	-88(%rbp), %rdx
	leaq	L_.str.260(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -80(%rbp)
LBB234_18:                              ##   in Loop: Header=BB234_3 Depth=1
	movq	-88(%rbp), %rdi
	callq	_free
LBB234_19:                              ##   in Loop: Header=BB234_3 Depth=1
	cmpq	$0, -80(%rbp)
	je	LBB234_21
## %bb.20:
	movq	_sqlite3_free@GOTPCREL(%rip), %rcx
	movq	-8(%rbp), %rdi
	movq	-80(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_text
	jmp	LBB234_26
LBB234_21:                              ##   in Loop: Header=BB234_3 Depth=1
	jmp	LBB234_22
LBB234_22:                              ##   in Loop: Header=BB234_3 Depth=1
	jmp	LBB234_23
LBB234_23:                              ##   in Loop: Header=BB234_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB234_3
LBB234_24:
	jmp	LBB234_25
LBB234_25:
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	(%rax), %rsi
	callq	_sqlite3_result_value
LBB234_26:
	addq	$112, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shellModuleSchema
_shellModuleSchema:                     ## @shellModuleSchema
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	LBB235_2
## %bb.1:
	movq	-8(%rbp), %rdi
	callq	_sqlite3_context_db_handle
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	-32(%rbp), %rdx
	movq	%rax, %rdi
	callq	_shellFakeSchema
	movq	%rax, -48(%rbp)         ## 8-byte Spill
	jmp	LBB235_3
LBB235_2:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -48(%rbp)         ## 8-byte Spill
	jmp	LBB235_3
LBB235_3:
	movq	-48(%rbp), %rax         ## 8-byte Reload
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	LBB235_5
## %bb.4:
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rsi
	leaq	L_.str.264(%rip), %rax
	movq	%rdi, -56(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	_sqlite3_free@GOTPCREL(%rip), %rcx
	movq	-56(%rbp), %rdi         ## 8-byte Reload
	movq	%rax, %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_text
	movq	-40(%rbp), %rdi
	callq	_free
LBB235_5:
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shellPutsFunc
_shellPutsFunc:                         ## @shellPutsFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_sqlite3_user_data
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -40(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_value_text
	movq	-40(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.219(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rsi
	movl	%eax, -44(%rbp)         ## 4-byte Spill
	callq	_sqlite3_result_value
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shellEscapeCrnl
_shellEscapeCrnl:                       ## @shellEscapeCrnl
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -72(%rbp)
	movl	%esi, -76(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -96(%rbp)
	cmpq	$0, -96(%rbp)
	je	LBB237_39
## %bb.1:
	movq	-96(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$39, %ecx
	jne	LBB237_39
## %bb.2:
	movq	-88(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_bytes
	movl	%eax, -100(%rbp)
	movq	$0, -112(%rbp)
	movq	$0, -120(%rbp)
	movl	$0, -124(%rbp)
	movl	$0, -128(%rbp)
	movl	$0, -104(%rbp)
LBB237_3:                               ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	movslq	-104(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	LBB237_12
## %bb.4:                               ##   in Loop: Header=BB237_3 Depth=1
	cmpq	$0, -112(%rbp)
	jne	LBB237_7
## %bb.5:                               ##   in Loop: Header=BB237_3 Depth=1
	movq	-96(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$10, %edx
	jne	LBB237_7
## %bb.6:                               ##   in Loop: Header=BB237_3 Depth=1
	leaq	-32(%rbp), %rcx
	movq	-96(%rbp), %rdi
	leaq	L_.str.265(%rip), %rsi
	leaq	L_.str.266(%rip), %rdx
	callq	_unused_string
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -128(%rbp)
LBB237_7:                               ##   in Loop: Header=BB237_3 Depth=1
	cmpq	$0, -120(%rbp)
	jne	LBB237_10
## %bb.8:                               ##   in Loop: Header=BB237_3 Depth=1
	movq	-96(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$13, %edx
	jne	LBB237_10
## %bb.9:                               ##   in Loop: Header=BB237_3 Depth=1
	leaq	-64(%rbp), %rcx
	movq	-96(%rbp), %rdi
	leaq	L_.str.267(%rip), %rsi
	leaq	L_.str.268(%rip), %rdx
	callq	_unused_string
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -124(%rbp)
LBB237_10:                              ##   in Loop: Header=BB237_3 Depth=1
	jmp	LBB237_11
LBB237_11:                              ##   in Loop: Header=BB237_3 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	jmp	LBB237_3
LBB237_12:
	cmpq	$0, -112(%rbp)
	jne	LBB237_14
## %bb.13:
	cmpq	$0, -120(%rbp)
	je	LBB237_38
LBB237_14:
	movl	$0, -132(%rbp)
	movl	-128(%rbp), %eax
	cmpl	-124(%rbp), %eax
	jle	LBB237_16
## %bb.15:
	movl	-128(%rbp), %eax
	movl	%eax, -164(%rbp)        ## 4-byte Spill
	jmp	LBB237_17
LBB237_16:
	movl	-124(%rbp), %eax
	movl	%eax, -164(%rbp)        ## 4-byte Spill
LBB237_17:
	movl	-164(%rbp), %eax        ## 4-byte Reload
	movslq	%eax, %rcx
	movq	%rcx, -144(%rbp)
	movq	-144(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	imulq	%rdx, %rcx
	movq	-144(%rbp), %rdx
	addq	$64, %rdx
	shlq	$1, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -160(%rbp)
	cmpq	$0, -160(%rbp)
	jne	LBB237_19
## %bb.18:
	movq	-72(%rbp), %rdi
	callq	_sqlite3_result_error_nomem
	jmp	LBB237_40
LBB237_19:
	cmpq	$0, -112(%rbp)
	je	LBB237_22
## %bb.20:
	cmpq	$0, -120(%rbp)
	je	LBB237_22
## %bb.21:
	movq	$-1, %rcx
	movq	-160(%rbp), %rax
	movslq	-132(%rbp), %rdx
	addq	%rdx, %rax
	movq	%rax, %rdi
	leaq	L_.str.269(%rip), %rsi
	movl	$16, %edx
	callq	___memcpy_chk
	movl	-132(%rbp), %r8d
	addl	$16, %r8d
	movl	%r8d, -132(%rbp)
	jmp	LBB237_23
LBB237_22:
	movq	$-1, %rcx
	movq	-160(%rbp), %rax
	movslq	-132(%rbp), %rdx
	addq	%rdx, %rax
	movq	%rax, %rdi
	leaq	L_.str.270(%rip), %rsi
	movl	$8, %edx
	callq	___memcpy_chk
	movl	-132(%rbp), %r8d
	addl	$8, %r8d
	movl	%r8d, -132(%rbp)
LBB237_23:
	movl	$0, -104(%rbp)
LBB237_24:                              ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	movslq	-104(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	LBB237_33
## %bb.25:                              ##   in Loop: Header=BB237_24 Depth=1
	movq	-96(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$10, %edx
	jne	LBB237_27
## %bb.26:                              ##   in Loop: Header=BB237_24 Depth=1
	movq	$-1, %rcx
	movq	-160(%rbp), %rax
	movslq	-132(%rbp), %rdx
	addq	%rdx, %rax
	movq	-112(%rbp), %rsi
	movslq	-128(%rbp), %rdx
	movq	%rax, %rdi
	callq	___memcpy_chk
	movl	-128(%rbp), %r8d
	addl	-132(%rbp), %r8d
	movl	%r8d, -132(%rbp)
	jmp	LBB237_31
LBB237_27:                              ##   in Loop: Header=BB237_24 Depth=1
	movq	-96(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$13, %edx
	jne	LBB237_29
## %bb.28:                              ##   in Loop: Header=BB237_24 Depth=1
	movq	$-1, %rcx
	movq	-160(%rbp), %rax
	movslq	-132(%rbp), %rdx
	addq	%rdx, %rax
	movq	-120(%rbp), %rsi
	movslq	-124(%rbp), %rdx
	movq	%rax, %rdi
	callq	___memcpy_chk
	movl	-124(%rbp), %r8d
	addl	-132(%rbp), %r8d
	movl	%r8d, -132(%rbp)
	jmp	LBB237_30
LBB237_29:                              ##   in Loop: Header=BB237_24 Depth=1
	movq	-96(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movb	(%rax,%rcx), %dl
	movq	-160(%rbp), %rax
	movslq	-132(%rbp), %rcx
	movb	%dl, (%rax,%rcx)
	movl	-132(%rbp), %esi
	addl	$1, %esi
	movl	%esi, -132(%rbp)
LBB237_30:                              ##   in Loop: Header=BB237_24 Depth=1
	jmp	LBB237_31
LBB237_31:                              ##   in Loop: Header=BB237_24 Depth=1
	jmp	LBB237_32
LBB237_32:                              ##   in Loop: Header=BB237_24 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	jmp	LBB237_24
LBB237_33:
	cmpq	$0, -112(%rbp)
	je	LBB237_35
## %bb.34:
	movq	$-1, %rcx
	movq	-160(%rbp), %rax
	movslq	-132(%rbp), %rdx
	addq	%rdx, %rax
	movq	%rax, %rdi
	leaq	L_.str.271(%rip), %rsi
	movl	$2, %edx
	callq	___memcpy_chk
	movq	$-1, %rcx
	movl	-132(%rbp), %r8d
	addl	$2, %r8d
	movl	%r8d, -132(%rbp)
	movq	-160(%rbp), %rdx
	movslq	-132(%rbp), %rsi
	addq	%rsi, %rdx
	movq	-112(%rbp), %rsi
	movslq	-128(%rbp), %rdi
	movq	%rdi, -176(%rbp)        ## 8-byte Spill
	movq	%rdx, %rdi
	movq	-176(%rbp), %rdx        ## 8-byte Reload
	movq	%rax, -184(%rbp)        ## 8-byte Spill
	callq	___memcpy_chk
	movq	$-1, %rcx
	movl	-128(%rbp), %r8d
	addl	-132(%rbp), %r8d
	movl	%r8d, -132(%rbp)
	movq	-160(%rbp), %rdx
	movslq	-132(%rbp), %rsi
	addq	%rsi, %rdx
	movq	%rdx, %rdi
	leaq	L_.str.272(%rip), %rsi
	movl	$12, %edx
	movq	%rax, -192(%rbp)        ## 8-byte Spill
	callq	___memcpy_chk
	movl	-132(%rbp), %r8d
	addl	$12, %r8d
	movl	%r8d, -132(%rbp)
LBB237_35:
	cmpq	$0, -120(%rbp)
	je	LBB237_37
## %bb.36:
	movq	$-1, %rcx
	movq	-160(%rbp), %rax
	movslq	-132(%rbp), %rdx
	addq	%rdx, %rax
	movq	%rax, %rdi
	leaq	L_.str.271(%rip), %rsi
	movl	$2, %edx
	callq	___memcpy_chk
	movq	$-1, %rcx
	movl	-132(%rbp), %r8d
	addl	$2, %r8d
	movl	%r8d, -132(%rbp)
	movq	-160(%rbp), %rdx
	movslq	-132(%rbp), %rsi
	addq	%rsi, %rdx
	movq	-120(%rbp), %rsi
	movslq	-124(%rbp), %rdi
	movq	%rdi, -200(%rbp)        ## 8-byte Spill
	movq	%rdx, %rdi
	movq	-200(%rbp), %rdx        ## 8-byte Reload
	movq	%rax, -208(%rbp)        ## 8-byte Spill
	callq	___memcpy_chk
	movq	$-1, %rcx
	movl	-124(%rbp), %r8d
	addl	-132(%rbp), %r8d
	movl	%r8d, -132(%rbp)
	movq	-160(%rbp), %rdx
	movslq	-132(%rbp), %rsi
	addq	%rsi, %rdx
	movq	%rdx, %rdi
	leaq	L_.str.273(%rip), %rsi
	movl	$12, %edx
	movq	%rax, -216(%rbp)        ## 8-byte Spill
	callq	___memcpy_chk
	movl	-132(%rbp), %r8d
	addl	$12, %r8d
	movl	%r8d, -132(%rbp)
LBB237_37:
	movq	-72(%rbp), %rdi
	movq	-160(%rbp), %rsi
	movl	-132(%rbp), %edx
	movq	$-1, %rcx
	callq	_sqlite3_result_text
	movq	-160(%rbp), %rdi
	callq	_sqlite3_free
	jmp	LBB237_40
LBB237_38:
	jmp	LBB237_39
LBB237_39:
	movq	-72(%rbp), %rdi
	movq	-88(%rbp), %rax
	movq	(%rax), %rsi
	callq	_sqlite3_result_value
LBB237_40:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	LBB237_42
## %bb.41:
	addq	$224, %rsp
	popq	%rbp
	retq
LBB237_42:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shellInt32
_shellInt32:                            ## @shellInt32
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_bytes
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rdi
	callq	_sqlite3_value_blob
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_int
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	jl	LBB238_3
## %bb.1:
	movl	-40(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	cmpl	-36(%rbp), %eax
	jg	LBB238_3
## %bb.2:
	movq	-32(%rbp), %rax
	movl	-40(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rdx
	addq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, %eax
	shlq	$24, %rax
	movq	-48(%rbp), %rdx
	movzbl	1(%rdx), %ecx
	movl	%ecx, %edx
	shlq	$16, %rdx
	addq	%rdx, %rax
	movq	-48(%rbp), %rdx
	movzbl	2(%rdx), %ecx
	movl	%ecx, %edx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movq	-48(%rbp), %rdx
	movzbl	3(%rdx), %ecx
	movl	%ecx, %edx
	shlq	$0, %rdx
	addq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	_sqlite3_result_int64
LBB238_3:
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shellIdQuote
_shellIdQuote:                          ## @shellIdQuote
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	LBB239_2
## %bb.1:
	movq	-32(%rbp), %rsi
	leaq	L_.str.275(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	_sqlite3_free@GOTPCREL(%rip), %rcx
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_text
LBB239_2:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shellUSleepFunc
_shellUSleepFunc:                       ## @shellUSleepFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_int
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$1000, %ecx             ## imm = 0x3E8
	idivl	%ecx
	movl	%eax, %edi
	callq	_sqlite3_sleep
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	%eax, -32(%rbp)         ## 4-byte Spill
	callq	_sqlite3_result_int
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function editFunc
_editFunc:                              ## @editFunc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -68(%rbp)
	movq	$0, -80(%rbp)
	movq	$0, -104(%rbp)
	cmpl	$2, -12(%rbp)
	jne	LBB241_2
## %bb.1:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -32(%rbp)
	jmp	LBB241_3
LBB241_2:
	leaq	L_.str.276(%rip), %rdi
	callq	_getenv
	movq	%rax, -32(%rbp)
LBB241_3:
	cmpq	$0, -32(%rbp)
	jne	LBB241_5
## %bb.4:
	movq	-8(%rbp), %rdi
	leaq	L_.str.277(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_error
	jmp	LBB241_48
LBB241_5:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_type
	cmpl	$5, %eax
	jne	LBB241_7
## %bb.6:
	movq	-8(%rbp), %rdi
	leaq	L_.str.278(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_error
	jmp	LBB241_48
LBB241_7:
	movq	-8(%rbp), %rdi
	callq	_sqlite3_context_db_handle
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	-48(%rbp), %rdi
	leaq	-40(%rbp), %rax
	movl	$16, %edx
	movq	%rax, %rcx
	callq	_sqlite3_file_control
	cmpq	$0, -40(%rbp)
	jne	LBB241_11
## %bb.8:
	movq	$0, -112(%rbp)
	leaq	-112(%rbp), %rax
	movl	$8, %edi
	movq	%rax, %rsi
	callq	_sqlite3_randomness
	movq	-112(%rbp), %rsi
	leaq	L_.str.279(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	LBB241_10
## %bb.9:
	movq	-8(%rbp), %rdi
	callq	_sqlite3_result_error_nomem
	jmp	LBB241_48
LBB241_10:
	jmp	LBB241_11
LBB241_11:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_type
	cmpl	$4, %eax
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -60(%rbp)
	movq	-40(%rbp), %rdi
	movl	-60(%rbp), %eax
	cmpl	$0, %eax
	leaq	L_.str.115(%rip), %rdx
	leaq	L_.str.280(%rip), %rsi
	cmovneq	%rdx, %rsi
	callq	_fopen
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	jne	LBB241_13
## %bb.12:
	movq	-8(%rbp), %rdi
	leaq	L_.str.281(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_error
	jmp	LBB241_45
LBB241_13:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_bytes
	movslq	%eax, %rcx
	movq	%rcx, -88(%rbp)
	cmpl	$0, -60(%rbp)
	je	LBB241_15
## %bb.14:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_blob
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	%rax, %rdi
	movl	$1, %esi
	callq	_fwrite
	movq	%rax, -96(%rbp)
	jmp	LBB241_19
LBB241_15:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -120(%rbp)
	cmpq	$0, -120(%rbp)
	je	LBB241_18
## %bb.16:
	movq	-120(%rbp), %rdi
	leaq	L_.str.282(%rip), %rsi
	callq	_strstr
	cmpq	$0, %rax
	je	LBB241_18
## %bb.17:
	movl	$1, -68(%rbp)
LBB241_18:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_text
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	%rax, %rdi
	movl	$1, %esi
	callq	_fwrite
	movq	%rax, -96(%rbp)
LBB241_19:
	movq	-80(%rbp), %rdi
	callq	_fclose
	movq	$0, -80(%rbp)
	movq	-96(%rbp), %rcx
	cmpq	-88(%rbp), %rcx
	je	LBB241_21
## %bb.20:
	movq	-8(%rbp), %rdi
	leaq	L_.str.283(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_error
	jmp	LBB241_45
LBB241_21:
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdx
	leaq	L_.str.284(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	LBB241_23
## %bb.22:
	movq	-8(%rbp), %rdi
	callq	_sqlite3_result_error_nomem
	jmp	LBB241_45
LBB241_23:
	movq	-56(%rbp), %rdi
	callq	_system
	movl	%eax, -64(%rbp)
	movq	-56(%rbp), %rdi
	callq	_sqlite3_free
	cmpl	$0, -64(%rbp)
	je	LBB241_25
## %bb.24:
	movq	-8(%rbp), %rdi
	leaq	L_.str.285(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_error
	jmp	LBB241_45
LBB241_25:
	movq	-40(%rbp), %rdi
	leaq	L_.str.28(%rip), %rsi
	callq	_fopen
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	jne	LBB241_27
## %bb.26:
	movq	-8(%rbp), %rdi
	leaq	L_.str.286(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_error
	jmp	LBB241_45
LBB241_27:
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-80(%rbp), %rdi
	movl	$2, %edx
	callq	_fseek
	movq	-80(%rbp), %rdi
	movl	%eax, -140(%rbp)        ## 4-byte Spill
	callq	_ftell
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rdi
	callq	_rewind
	movq	-88(%rbp), %rax
	addq	$1, %rax
	movq	%rax, %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -104(%rbp)
	cmpq	$0, -104(%rbp)
	jne	LBB241_29
## %bb.28:
	movq	-8(%rbp), %rdi
	callq	_sqlite3_result_error_nomem
	jmp	LBB241_45
LBB241_29:
	movq	-104(%rbp), %rdi
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movl	$1, %esi
	callq	_fread
	movq	%rax, -96(%rbp)
	movq	-80(%rbp), %rdi
	callq	_fclose
	movq	$0, -80(%rbp)
	movq	-96(%rbp), %rcx
	cmpq	-88(%rbp), %rcx
	je	LBB241_31
## %bb.30:
	movq	-8(%rbp), %rdi
	leaq	L_.str.287(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_error
	jmp	LBB241_45
LBB241_31:
	cmpl	$0, -60(%rbp)
	je	LBB241_33
## %bb.32:
	movq	_sqlite3_free@GOTPCREL(%rip), %rcx
	movq	-8(%rbp), %rdi
	movq	-104(%rbp), %rsi
	movq	-88(%rbp), %rdx
	callq	_sqlite3_result_blob64
	jmp	LBB241_44
LBB241_33:
	cmpl	$0, -68(%rbp)
	je	LBB241_35
## %bb.34:
	jmp	LBB241_43
LBB241_35:
	movq	$0, -136(%rbp)
	movq	$0, -128(%rbp)
LBB241_36:                              ## =>This Inner Loop Header: Depth=1
	movq	-128(%rbp), %rax
	cmpq	-88(%rbp), %rax
	jge	LBB241_42
## %bb.37:                              ##   in Loop: Header=BB241_36 Depth=1
	movq	-104(%rbp), %rax
	movq	-128(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$13, %edx
	jne	LBB241_40
## %bb.38:                              ##   in Loop: Header=BB241_36 Depth=1
	movq	-104(%rbp), %rax
	movq	-128(%rbp), %rcx
	movzbl	1(%rax,%rcx), %edx
	cmpl	$10, %edx
	jne	LBB241_40
## %bb.39:                              ##   in Loop: Header=BB241_36 Depth=1
	movq	-128(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -128(%rbp)
LBB241_40:                              ##   in Loop: Header=BB241_36 Depth=1
	movq	-104(%rbp), %rax
	movq	-128(%rbp), %rcx
	movb	(%rax,%rcx), %dl
	movq	-104(%rbp), %rax
	movq	-136(%rbp), %rcx
	movq	%rcx, %rsi
	addq	$1, %rsi
	movq	%rsi, -136(%rbp)
	movb	%dl, (%rax,%rcx)
## %bb.41:                              ##   in Loop: Header=BB241_36 Depth=1
	movq	-128(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -128(%rbp)
	jmp	LBB241_36
LBB241_42:
	movq	-136(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-104(%rbp), %rax
	movq	-88(%rbp), %rcx
	movb	$0, (%rax,%rcx)
LBB241_43:
	movq	_sqlite3_free@GOTPCREL(%rip), %rcx
	movq	-8(%rbp), %rdi
	movq	-104(%rbp), %rsi
	movq	-88(%rbp), %rdx
	movl	$1, %r8d
	callq	_sqlite3_result_text64
LBB241_44:
	movq	$0, -104(%rbp)
LBB241_45:
	cmpq	$0, -80(%rbp)
	je	LBB241_47
## %bb.46:
	movq	-80(%rbp), %rdi
	callq	_fclose
LBB241_47:
	movq	-40(%rbp), %rdi
	callq	_unlink
	movq	-40(%rbp), %rdi
	movl	%eax, -144(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
	movq	-104(%rbp), %rdi
	callq	_sqlite3_free
LBB241_48:
	addq	$144, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function readFile
_readFile:                              ## @readFile
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rdi
	leaq	L_.str.28(%rip), %rsi
	callq	_fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	LBB242_2
## %bb.1:
	movq	$0, -8(%rbp)
	jmp	LBB242_9
LBB242_2:
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	movl	$2, %edx
	callq	_fseek
	movq	-32(%rbp), %rdi
	movl	%eax, -60(%rbp)         ## 4-byte Spill
	callq	_ftell
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	_rewind
	movq	-40(%rbp), %rax
	addq	$1, %rax
	movq	%rax, %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	LBB242_4
## %bb.3:
	movq	-32(%rbp), %rdi
	callq	_fclose
	movq	$0, -8(%rbp)
	jmp	LBB242_9
LBB242_4:
	movq	-56(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rcx
	movl	$1, %edx
	callq	_fread
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rdi
	callq	_fclose
	cmpq	$1, -48(%rbp)
	je	LBB242_6
## %bb.5:
	movq	-56(%rbp), %rdi
	callq	_sqlite3_free
	movq	$0, -8(%rbp)
	jmp	LBB242_9
LBB242_6:
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	cmpq	$0, -24(%rbp)
	je	LBB242_8
## %bb.7:
	movq	-40(%rbp), %rax
                                        ## kill: def $eax killed $eax killed $rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
LBB242_8:
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
LBB242_9:
	movq	-8(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function readHexDb
_readHexDb:                             ## @readHexDb
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1352, %rsp             ## imm = 0x548
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	%rdi, -1136(%rbp)
	movq	%rsi, -1144(%rbp)
	movq	$0, -1152(%rbp)
	movl	$0, -1160(%rbp)
	movl	$0, -1164(%rbp)
	movl	$0, -1168(%rbp)
	movq	-1136(%rbp), %rax
	movq	1472(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -1200(%rbp)
	cmpq	$0, -1200(%rbp)
	je	LBB243_4
## %bb.1:
	movq	-1200(%rbp), %rdi
	leaq	L_.str.288(%rip), %rsi
	callq	_fopen
	movq	%rax, -1192(%rbp)
	cmpq	$0, -1192(%rbp)
	jne	LBB243_3
## %bb.2:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-1200(%rbp), %rdx
	leaq	L_.str.289(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	$0, -1128(%rbp)
	jmp	LBB243_54
LBB243_3:
	movl	$0, -1156(%rbp)
	jmp	LBB243_7
LBB243_4:
	movq	-1136(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -1192(%rbp)
	movq	-1136(%rbp), %rax
	movl	48(%rax), %ecx
	movl	%ecx, -1156(%rbp)
	cmpq	$0, -1192(%rbp)
	jne	LBB243_6
## %bb.5:
	movq	___stdinp@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -1192(%rbp)
LBB243_6:
	jmp	LBB243_7
LBB243_7:
	leaq	-1120(%rbp), %rdi
	movq	-1144(%rbp), %rax
	movl	$0, (%rax)
	movl	-1156(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -1156(%rbp)
	movq	-1192(%rbp), %rdx
	movl	$1000, %esi             ## imm = 0x3E8
	callq	_fgets
	cmpq	$0, %rax
	jne	LBB243_9
## %bb.8:
	jmp	LBB243_45
LBB243_9:
	leaq	-1120(%rbp), %rdi
	leaq	L_.str.290(%rip), %rsi
	leaq	-1160(%rbp), %rdx
	leaq	-1164(%rbp), %rcx
	movb	$0, %al
	callq	_sscanf
	movl	%eax, -1180(%rbp)
	cmpl	$2, -1180(%rbp)
	je	LBB243_11
## %bb.10:
	jmp	LBB243_45
LBB243_11:
	cmpl	$0, -1160(%rbp)
	jge	LBB243_13
## %bb.12:
	jmp	LBB243_45
LBB243_13:
	cmpl	$512, -1164(%rbp)       ## imm = 0x200
	jl	LBB243_16
## %bb.14:
	cmpl	$65536, -1164(%rbp)     ## imm = 0x10000
	jg	LBB243_16
## %bb.15:
	movl	-1164(%rbp), %eax
	movl	-1164(%rbp), %ecx
	subl	$1, %ecx
	andl	%ecx, %eax
	cmpl	$0, %eax
	je	LBB243_17
LBB243_16:
	jmp	LBB243_45
LBB243_17:
	movl	-1160(%rbp), %eax
	addl	-1164(%rbp), %eax
	subl	$1, %eax
	movl	-1164(%rbp), %ecx
	subl	$1, %ecx
	xorl	$-1, %ecx
	andl	%ecx, %eax
	movl	%eax, -1160(%rbp)
	cmpl	$0, -1160(%rbp)
	je	LBB243_19
## %bb.18:
	movl	-1160(%rbp), %eax
	movl	%eax, -1208(%rbp)       ## 4-byte Spill
	jmp	LBB243_20
LBB243_19:
	movl	$1, %eax
	movl	%eax, -1208(%rbp)       ## 4-byte Spill
	jmp	LBB243_20
LBB243_20:
	movl	-1208(%rbp), %eax       ## 4-byte Reload
	movl	%eax, %edi
	callq	_sqlite3_malloc
	movq	%rax, -1152(%rbp)
	movq	-1152(%rbp), %rdi
	callq	_shell_check_oom
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-1152(%rbp), %rdi
	movslq	-1160(%rbp), %rdx
	callq	___memset_chk
	cmpl	$512, -1164(%rbp)       ## imm = 0x200
	jl	LBB243_23
## %bb.21:
	cmpl	$65536, -1164(%rbp)     ## imm = 0x10000
	jg	LBB243_23
## %bb.22:
	movl	-1164(%rbp), %eax
	movl	-1164(%rbp), %ecx
	subl	$1, %ecx
	andl	%ecx, %eax
	cmpl	$0, %eax
	je	LBB243_24
LBB243_23:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.291(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB243_45
LBB243_24:
	movl	-1156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1156(%rbp)
LBB243_25:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB243_34 Depth 2
	leaq	-1120(%rbp), %rdi
	movq	-1192(%rbp), %rdx
	movl	$1000, %esi             ## imm = 0x3E8
	callq	_fgets
	cmpq	$0, %rax
	je	LBB243_41
## %bb.26:                              ##   in Loop: Header=BB243_25 Depth=1
	leaq	-1120(%rbp), %rdi
	leaq	L_.str.292(%rip), %rsi
	leaq	-1172(%rbp), %rdx
	leaq	-1176(%rbp), %rcx
	movb	$0, %al
	callq	_sscanf
	movl	%eax, -1180(%rbp)
	cmpl	$2, -1180(%rbp)
	jne	LBB243_28
## %bb.27:                              ##   in Loop: Header=BB243_25 Depth=1
	movl	-1176(%rbp), %eax
	movl	%eax, -1168(%rbp)
	jmp	LBB243_40
LBB243_28:                              ##   in Loop: Header=BB243_25 Depth=1
	leaq	-1120(%rbp), %rdi
	leaq	L_.str.293(%rip), %rsi
	movl	$6, %edx
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB243_30
## %bb.29:
	jmp	LBB243_41
LBB243_30:                              ##   in Loop: Header=BB243_25 Depth=1
	leaq	-112(%rbp), %rax
	leaq	-1120(%rbp), %rdi
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rax, %rdx
	addq	$8, %rdx
	movq	%rax, %rsi
	addq	$12, %rsi
	movq	%rax, %r8
	addq	$16, %r8
	movq	%rax, %r9
	addq	$20, %r9
	movq	%rax, %r10
	addq	$24, %r10
	movq	%rax, %r11
	addq	$28, %r11
	movq	%rax, %rbx
	addq	$32, %rbx
	movq	%rax, %r14
	addq	$36, %r14
	movq	%rax, %r15
	addq	$40, %r15
	movq	%rax, %r12
	addq	$44, %r12
	movq	%rax, %r13
	addq	$48, %r13
	movq	%rax, -1216(%rbp)       ## 8-byte Spill
	addq	$52, %rax
	movq	%rax, -1224(%rbp)       ## 8-byte Spill
	movq	-1216(%rbp), %rax       ## 8-byte Reload
	addq	$56, %rax
	movq	%rax, -1232(%rbp)       ## 8-byte Spill
	movq	-1216(%rbp), %rax       ## 8-byte Reload
	addq	$60, %rax
	movq	%rsi, -1240(%rbp)       ## 8-byte Spill
	leaq	L_.str.294(%rip), %rsi
	movq	%rdx, -1248(%rbp)       ## 8-byte Spill
	leaq	-1172(%rbp), %rdx
	movq	%rcx, -1256(%rbp)       ## 8-byte Spill
	movq	-1216(%rbp), %rcx       ## 8-byte Reload
	movq	%r8, -1264(%rbp)        ## 8-byte Spill
	movq	-1256(%rbp), %r8        ## 8-byte Reload
	movq	%r9, -1272(%rbp)        ## 8-byte Spill
	movq	-1248(%rbp), %r9        ## 8-byte Reload
	movq	%rax, -1280(%rbp)       ## 8-byte Spill
	movq	-1240(%rbp), %rax       ## 8-byte Reload
	movq	%rax, (%rsp)
	movq	-1264(%rbp), %rax       ## 8-byte Reload
	movq	%rax, 8(%rsp)
	movq	-1272(%rbp), %rax       ## 8-byte Reload
	movq	%rax, 16(%rsp)
	movq	%r10, 24(%rsp)
	movq	%r11, 32(%rsp)
	movq	%rbx, 40(%rsp)
	movq	%r14, 48(%rsp)
	movq	%r15, 56(%rsp)
	movq	%r12, 64(%rsp)
	movq	%r13, 72(%rsp)
	movq	-1224(%rbp), %rax       ## 8-byte Reload
	movq	%rax, 80(%rsp)
	movq	-1232(%rbp), %rax       ## 8-byte Reload
	movq	%rax, 88(%rsp)
	movq	-1280(%rbp), %rax       ## 8-byte Reload
	movq	%rax, 96(%rsp)
	movb	$0, %al
	callq	_sscanf
	movl	%eax, -1180(%rbp)
	cmpl	$17, -1180(%rbp)
	jne	LBB243_39
## %bb.31:                              ##   in Loop: Header=BB243_25 Depth=1
	movl	-1168(%rbp), %eax
	addl	-1172(%rbp), %eax
	movl	%eax, -1176(%rbp)
	movl	-1176(%rbp), %eax
	addl	$16, %eax
	cmpl	-1160(%rbp), %eax
	jg	LBB243_38
## %bb.32:                              ##   in Loop: Header=BB243_25 Depth=1
	cmpl	$0, -1176(%rbp)
	jl	LBB243_38
## %bb.33:                              ##   in Loop: Header=BB243_25 Depth=1
	movl	$0, -1204(%rbp)
LBB243_34:                              ##   Parent Loop BB243_25 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpl	$16, -1204(%rbp)
	jge	LBB243_37
## %bb.35:                              ##   in Loop: Header=BB243_34 Depth=2
	movslq	-1204(%rbp), %rax
	movl	-112(%rbp,%rax,4), %ecx
	andl	$255, %ecx
                                        ## kill: def $cl killed $cl killed $ecx
	movq	-1152(%rbp), %rax
	movl	-1176(%rbp), %edx
	addl	-1204(%rbp), %edx
	movslq	%edx, %rsi
	movb	%cl, (%rax,%rsi)
## %bb.36:                              ##   in Loop: Header=BB243_34 Depth=2
	movl	-1204(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1204(%rbp)
	jmp	LBB243_34
LBB243_37:                              ##   in Loop: Header=BB243_25 Depth=1
	jmp	LBB243_38
LBB243_38:                              ##   in Loop: Header=BB243_25 Depth=1
	jmp	LBB243_39
LBB243_39:                              ##   in Loop: Header=BB243_25 Depth=1
	jmp	LBB243_40
LBB243_40:                              ##   in Loop: Header=BB243_25 Depth=1
	movl	-1156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1156(%rbp)
	jmp	LBB243_25
LBB243_41:
	movl	-1160(%rbp), %eax
	movq	-1144(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-1192(%rbp), %rcx
	movq	-1136(%rbp), %rdx
	cmpq	56(%rdx), %rcx
	je	LBB243_43
## %bb.42:
	movq	-1192(%rbp), %rdi
	callq	_fclose
	jmp	LBB243_44
LBB243_43:
	movl	-1156(%rbp), %eax
	movq	-1136(%rbp), %rcx
	movl	%eax, 48(%rcx)
LBB243_44:
	movq	-1152(%rbp), %rax
	movq	%rax, -1128(%rbp)
	jmp	LBB243_54
LBB243_45:
	movq	-1192(%rbp), %rax
	movq	-1136(%rbp), %rcx
	cmpq	56(%rcx), %rax
	je	LBB243_47
## %bb.46:
	movq	-1192(%rbp), %rdi
	callq	_fclose
	jmp	LBB243_53
LBB243_47:
	jmp	LBB243_48
LBB243_48:                              ## =>This Inner Loop Header: Depth=1
	leaq	-1120(%rbp), %rdi
	movq	-1136(%rbp), %rax
	movq	56(%rax), %rdx
	movl	$1000, %esi             ## imm = 0x3E8
	callq	_fgets
	cmpq	$0, %rax
	je	LBB243_52
## %bb.49:                              ##   in Loop: Header=BB243_48 Depth=1
	leaq	-1120(%rbp), %rdi
	movl	-1156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1156(%rbp)
	leaq	L_.str.293(%rip), %rsi
	movl	$6, %edx
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB243_51
## %bb.50:
	jmp	LBB243_52
LBB243_51:                              ##   in Loop: Header=BB243_48 Depth=1
	jmp	LBB243_48
LBB243_52:
	movl	-1156(%rbp), %eax
	movq	-1136(%rbp), %rcx
	movl	%eax, 48(%rcx)
LBB243_53:
	movq	-1152(%rbp), %rdi
	callq	_sqlite3_free
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movl	-1156(%rbp), %edx
	leaq	L_.str.295(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	$0, -1128(%rbp)
LBB243_54:
	movq	-1128(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-48(%rbp), %rdx
	cmpq	%rdx, %rcx
	movq	%rax, -1288(%rbp)       ## 8-byte Spill
	jne	LBB243_56
## %bb.55:
	movq	-1288(%rbp), %rax       ## 8-byte Reload
	addq	$1352, %rsp             ## imm = 0x548
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB243_56:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function safeModeAuth
_safeModeAuth:                          ## @safeModeAuth
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -56(%rbp)
	movl	-12(%rbp), %esi
	movl	%esi, %r10d
	subl	$24, %r10d
	movl	%esi, -64(%rbp)         ## 4-byte Spill
	je	LBB244_1
	jmp	LBB244_10
LBB244_10:
	movl	-64(%rbp), %eax         ## 4-byte Reload
	subl	$31, %eax
	je	LBB244_2
	jmp	LBB244_9
LBB244_1:
	movq	-56(%rbp), %rdi
	leaq	L_.str.300(%rip), %rsi
	movb	$0, %al
	callq	_failIfSafeMode
	jmp	LBB244_9
LBB244_2:
	movl	$0, -60(%rbp)
LBB244_3:                               ## =>This Inner Loop Header: Depth=1
	cmpl	$7, -60(%rbp)
	jge	LBB244_8
## %bb.4:                               ##   in Loop: Header=BB244_3 Depth=1
	movq	-24(%rbp), %rdi
	movslq	-60(%rbp), %rax
	leaq	_safeModeAuth.azProhibitedFunctions(%rip), %rcx
	movq	(%rcx,%rax,8), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	jne	LBB244_6
## %bb.5:                               ##   in Loop: Header=BB244_3 Depth=1
	movq	-56(%rbp), %rdi
	movslq	-60(%rbp), %rax
	leaq	_safeModeAuth.azProhibitedFunctions(%rip), %rcx
	movq	(%rcx,%rax,8), %rdx
	leaq	L_.str.301(%rip), %rsi
	movb	$0, %al
	callq	_failIfSafeMode
LBB244_6:                               ##   in Loop: Header=BB244_3 Depth=1
	jmp	LBB244_7
LBB244_7:                               ##   in Loop: Header=BB244_3 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	LBB244_3
LBB244_8:
	jmp	LBB244_9
LBB244_9:
	xorl	%eax, %eax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function quoteChar
_quoteChar:                             ## @quoteChar
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isalpha
	cmpl	$0, %eax
	jne	LBB245_3
## %bb.1:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$95, %ecx
	je	LBB245_3
## %bb.2:
	movb	$34, -1(%rbp)
	jmp	LBB245_11
LBB245_3:
	movl	$0, -20(%rbp)
LBB245_4:                               ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	LBB245_10
## %bb.5:                               ##   in Loop: Header=BB245_4 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %edi
	callq	_isalnum
	cmpl	$0, %eax
	jne	LBB245_8
## %bb.6:                               ##   in Loop: Header=BB245_4 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$95, %edx
	je	LBB245_8
## %bb.7:
	movb	$34, -1(%rbp)
	jmp	LBB245_11
LBB245_8:                               ##   in Loop: Header=BB245_4 Depth=1
	jmp	LBB245_9
LBB245_9:                               ##   in Loop: Header=BB245_4 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB245_4
LBB245_10:
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	_sqlite3_keyword_check
	xorl	%ecx, %ecx
	cmpl	$0, %eax
	movl	$34, %eax
	cmovnel	%eax, %ecx
                                        ## kill: def $cl killed $cl killed $ecx
	movb	%cl, -1(%rbp)
LBB245_11:
	movsbl	-1(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shellFakeSchema
_shellFakeSchema:                       ## @shellFakeSchema
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	$0, -32(%rbp)
	leaq	L_.str.261(%rip), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -76(%rbp)
	cmpq	$0, -16(%rbp)
	je	LBB246_2
## %bb.1:
	movq	-16(%rbp), %rax
	movq	%rax, -96(%rbp)         ## 8-byte Spill
	jmp	LBB246_3
LBB246_2:
	leaq	L___func__.main(%rip), %rax
	movq	%rax, -96(%rbp)         ## 8-byte Spill
	jmp	LBB246_3
LBB246_3:
	movq	-96(%rbp), %rax         ## 8-byte Reload
	movq	-24(%rbp), %rdx
	leaq	L_.str.262(%rip), %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	_shell_check_oom
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-32(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movq	-40(%rbp), %rdi
	movl	%eax, -100(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
	leaq	-56(%rbp), %rdi
	callq	_initText
	cmpq	$0, -16(%rbp)
	je	LBB246_8
## %bb.4:
	movq	-16(%rbp), %rdi
	callq	_quoteChar
	movb	%al, -57(%rbp)
	movsbl	-57(%rbp), %ecx
	cmpl	$0, %ecx
	je	LBB246_7
## %bb.5:
	movq	-16(%rbp), %rdi
	leaq	L_.str.256(%rip), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	jne	LBB246_7
## %bb.6:
	movb	$0, -57(%rbp)
LBB246_7:
	movq	-16(%rbp), %rsi
	leaq	-56(%rbp), %rdi
	movsbl	-57(%rbp), %edx
	callq	_appendText
	xorl	%edx, %edx
	leaq	-56(%rbp), %rdi
	leaq	L_.str.263(%rip), %rsi
	callq	_appendText
LBB246_8:
	movq	-24(%rbp), %rdi
	callq	_quoteChar
	movb	%al, -57(%rbp)
	movq	-24(%rbp), %rsi
	leaq	-56(%rbp), %rdi
	movsbl	-57(%rbp), %edx
	callq	_appendText
LBB246_9:                               ## =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB246_13
## %bb.10:                              ##   in Loop: Header=BB246_9 Depth=1
	movq	-32(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	xorl	%edx, %edx
	movq	%rax, -88(%rbp)
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -76(%rbp)
	movq	-72(%rbp), %rsi
	leaq	-56(%rbp), %rdi
	callq	_appendText
	leaq	L_.str.65(%rip), %rax
	movq	%rax, -72(%rbp)
	cmpq	$0, -88(%rbp)
	jne	LBB246_12
## %bb.11:                              ##   in Loop: Header=BB246_9 Depth=1
	leaq	L_.str.27(%rip), %rax
	movq	%rax, -88(%rbp)
LBB246_12:                              ##   in Loop: Header=BB246_9 Depth=1
	movq	-88(%rbp), %rdi
	callq	_quoteChar
	movb	%al, -57(%rbp)
	movq	-88(%rbp), %rsi
	leaq	-56(%rbp), %rdi
	movsbl	-57(%rbp), %edx
	callq	_appendText
	jmp	LBB246_9
LBB246_13:
	xorl	%edx, %edx
	leaq	-56(%rbp), %rdi
	leaq	L_.str.159(%rip), %rsi
	callq	_appendText
	movq	-32(%rbp), %rdi
	callq	_sqlite3_finalize
	cmpl	$0, -76(%rbp)
	jne	LBB246_15
## %bb.14:
	leaq	-56(%rbp), %rdi
	callq	_freeText
	movq	$0, -56(%rbp)
LBB246_15:
	movq	-56(%rbp), %rax
	addq	$112, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function initText
_initText:                              ## @initText
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	movl	$16, %edx
	callq	___memset_chk
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function appendText
_appendText:                            ## @appendText
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
                                        ## kill: def $dl killed $dl killed $edx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movb	%dl, -17(%rbp)
	movq	-16(%rbp), %rdi
	callq	_strlen30
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	8(%rcx), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	cmpb	$0, -17(%rbp)
	je	LBB248_8
## %bb.1:
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -24(%rbp)
	movl	$0, -28(%rbp)
LBB248_2:                               ## =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	LBB248_7
## %bb.3:                               ##   in Loop: Header=BB248_2 Depth=1
	movq	-16(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	movsbl	-17(%rbp), %esi
	cmpl	%esi, %edx
	jne	LBB248_5
## %bb.4:                               ##   in Loop: Header=BB248_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
LBB248_5:                               ##   in Loop: Header=BB248_2 Depth=1
	jmp	LBB248_6
LBB248_6:                               ##   in Loop: Header=BB248_2 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB248_2
LBB248_7:
	jmp	LBB248_8
LBB248_8:
	movq	-8(%rbp), %rax
	cmpq	$0, (%rax)
	je	LBB248_10
## %bb.9:
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	addl	-24(%rbp), %ecx
	movq	-8(%rbp), %rax
	cmpl	12(%rax), %ecx
	jl	LBB248_11
LBB248_10:
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	addl	$20, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 12(%rax)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movslq	12(%rax), %rsi
	callq	_realloc
	movq	-8(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	_shell_check_oom
LBB248_11:
	cmpb	$0, -17(%rbp)
	je	LBB248_19
## %bb.12:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	8(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movb	-17(%rbp), %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	%dl, (%rax)
	movl	$0, -28(%rbp)
LBB248_13:                              ## =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	LBB248_18
## %bb.14:                              ##   in Loop: Header=BB248_13 Depth=1
	movq	-16(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movb	(%rax,%rcx), %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	%dl, (%rax)
	movq	-16(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movsbl	(%rax,%rcx), %esi
	movsbl	-17(%rbp), %edi
	cmpl	%edi, %esi
	jne	LBB248_16
## %bb.15:                              ##   in Loop: Header=BB248_13 Depth=1
	movb	-17(%rbp), %al
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -40(%rbp)
	movb	%al, (%rcx)
LBB248_16:                              ##   in Loop: Header=BB248_13 Depth=1
	jmp	LBB248_17
LBB248_17:                              ##   in Loop: Header=BB248_13 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB248_13
LBB248_18:
	movb	-17(%rbp), %al
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -40(%rbp)
	movb	%al, (%rcx)
	movq	-40(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdx
	subq	%rdx, %rcx
                                        ## kill: def $ecx killed $ecx killed $rcx
	movq	-8(%rbp), %rdx
	movl	%ecx, 8(%rdx)
	movq	-40(%rbp), %rdx
	movb	$0, (%rdx)
	jmp	LBB248_20
LBB248_19:
	movq	$-1, %rcx
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx
	movslq	8(%rdx), %rdx
	addq	%rdx, %rax
	movq	-16(%rbp), %rsi
	movslq	-32(%rbp), %rdx
	movq	%rax, %rdi
	callq	___memcpy_chk
	movl	-32(%rbp), %r8d
	movq	-8(%rbp), %rcx
	addl	8(%rcx), %r8d
	movl	%r8d, 8(%rcx)
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movslq	8(%rdx), %rdx
	movb	$0, (%rcx,%rdx)
LBB248_20:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function freeText
_freeText:                              ## @freeText
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	_free
	movq	-8(%rbp), %rdi
	callq	_initText
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function unused_string
_unused_string:                         ## @unused_string
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movl	$0, -44(%rbp)
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	_strstr
	cmpq	$0, %rax
	jne	LBB250_2
## %bb.1:
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB250_8
LBB250_2:
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	_strstr
	cmpq	$0, %rax
	jne	LBB250_4
## %bb.3:
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	LBB250_8
LBB250_4:
	jmp	LBB250_5
LBB250_5:                               ## =>This Inner Loop Header: Depth=1
	movq	-40(%rbp), %rsi
	movq	-24(%rbp), %rcx
	movl	-44(%rbp), %eax
	movl	%eax, %edx
	addl	$1, %edx
	movl	%edx, -44(%rbp)
	movl	$20, %edi
	leaq	L_.str.274(%rip), %rdx
	movl	%eax, %r8d
	movb	$0, %al
	callq	_sqlite3_snprintf
## %bb.6:                               ##   in Loop: Header=BB250_5 Depth=1
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	_strstr
	cmpq	$0, %rax
	jne	LBB250_5
## %bb.7:
	movq	-40(%rbp), %rax
	movq	%rax, -8(%rbp)
LBB250_8:
	movq	-8(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function failIfSafeMode
_failIfSafeMode:                        ## @failIfSafeMode
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$448, %rsp              ## imm = 0x1C0
	testb	%al, %al
	movaps	%xmm7, -256(%rbp)       ## 16-byte Spill
	movaps	%xmm6, -272(%rbp)       ## 16-byte Spill
	movaps	%xmm5, -288(%rbp)       ## 16-byte Spill
	movaps	%xmm4, -304(%rbp)       ## 16-byte Spill
	movaps	%xmm3, -320(%rbp)       ## 16-byte Spill
	movaps	%xmm2, -336(%rbp)       ## 16-byte Spill
	movaps	%xmm1, -352(%rbp)       ## 16-byte Spill
	movaps	%xmm0, -368(%rbp)       ## 16-byte Spill
	movq	%r9, -376(%rbp)         ## 8-byte Spill
	movq	%r8, -384(%rbp)         ## 8-byte Spill
	movq	%rcx, -392(%rbp)        ## 8-byte Spill
	movq	%rdx, -400(%rbp)        ## 8-byte Spill
	movq	%rsi, -408(%rbp)        ## 8-byte Spill
	movq	%rdi, -416(%rbp)        ## 8-byte Spill
	je	LBB251_6
## %bb.5:
	movaps	-368(%rbp), %xmm0       ## 16-byte Reload
	movaps	%xmm0, -192(%rbp)
	movaps	-352(%rbp), %xmm1       ## 16-byte Reload
	movaps	%xmm1, -176(%rbp)
	movaps	-336(%rbp), %xmm2       ## 16-byte Reload
	movaps	%xmm2, -160(%rbp)
	movaps	-320(%rbp), %xmm3       ## 16-byte Reload
	movaps	%xmm3, -144(%rbp)
	movaps	-304(%rbp), %xmm4       ## 16-byte Reload
	movaps	%xmm4, -128(%rbp)
	movaps	-288(%rbp), %xmm5       ## 16-byte Reload
	movaps	%xmm5, -112(%rbp)
	movaps	-272(%rbp), %xmm6       ## 16-byte Reload
	movaps	%xmm6, -96(%rbp)
	movaps	-256(%rbp), %xmm7       ## 16-byte Reload
	movaps	%xmm7, -80(%rbp)
LBB251_6:
	movq	-376(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -200(%rbp)
	movq	-384(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -208(%rbp)
	movq	-392(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -216(%rbp)
	movq	-400(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -224(%rbp)
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, -8(%rbp)
	movq	-416(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -40(%rbp)
	movq	-408(%rbp), %r8         ## 8-byte Reload
	movq	%r8, -48(%rbp)
	movq	-40(%rbp), %r9
	cmpb	$0, 17(%r9)
	je	LBB251_2
## %bb.1:
	leaq	-240(%rbp), %rax
	movq	%rax, -16(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$48, -28(%rbp)
	movl	$16, -32(%rbp)
	movq	-48(%rbp), %rdi
	leaq	-32(%rbp), %rsi
	callq	_sqlite3_vmprintf
	movq	%rax, -56(%rbp)
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rcx
	movl	48(%rcx), %edx
	leaq	L_.str.302(%rip), %rsi
	xorl	%r8d, %r8d
                                        ## kill: def $r8b killed $r8b killed $r8d
	movq	%rax, -424(%rbp)        ## 8-byte Spill
	movb	%r8b, %al
	movb	%r8b, -425(%rbp)        ## 1-byte Spill
	callq	_fprintf
	movq	-424(%rbp), %rcx        ## 8-byte Reload
	movq	(%rcx), %rdi
	movq	-56(%rbp), %rdx
	leaq	L_.str.219(%rip), %rsi
	movb	-425(%rbp), %r8b        ## 1-byte Reload
	movl	%eax, -432(%rbp)        ## 4-byte Spill
	movb	%r8b, %al
	callq	_fprintf
	movl	$1, %edi
	movl	%eax, -436(%rbp)        ## 4-byte Spill
	callq	_exit
LBB251_2:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	LBB251_4
## %bb.3:
	addq	$448, %rsp              ## imm = 0x1C0
	popq	%rbp
	retq
LBB251_4:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function expertFinish
_expertFinish:                          ## @expertFinish
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -28(%rbp)
	movq	-8(%rbp), %rax
	movq	1624(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %esi
	movslq	%esi, %rax
	cmpq	$0, %rax
	je	LBB252_2
## %bb.1:
	leaq	L___func__.expertFinish(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.771(%rip), %rcx
	movl	$14742, %edx            ## imm = 0x3996
	callq	___assert_rtn
LBB252_2:
	jmp	LBB252_3
LBB252_3:
	cmpl	$0, -12(%rbp)
	movb	$1, %al
	movb	%al, -97(%rbp)          ## 1-byte Spill
	jne	LBB252_6
## %bb.4:
	cmpq	$0, -24(%rbp)
	movb	$1, %al
	movb	%al, -97(%rbp)          ## 1-byte Spill
	je	LBB252_6
## %bb.5:
	movq	-24(%rbp), %rax
	cmpq	$0, (%rax)
	sete	%cl
	movb	%cl, -97(%rbp)          ## 1-byte Spill
LBB252_6:
	movb	-97(%rbp), %al          ## 1-byte Reload
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movslq	%ecx, %rdx
	cmpq	$0, %rdx
	je	LBB252_8
## %bb.7:
	leaq	L___func__.expertFinish(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.772(%rip), %rcx
	movl	$14743, %edx            ## imm = 0x3997
	callq	___assert_rtn
LBB252_8:
	jmp	LBB252_9
LBB252_9:
	cmpl	$0, -12(%rbp)
	jne	LBB252_23
## %bb.10:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movl	1632(%rax), %ecx
	movl	%ecx, -52(%rbp)
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	_sqlite3_expert_analyze
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jne	LBB252_22
## %bb.11:
	movq	-40(%rbp), %rdi
	callq	_sqlite3_expert_count
	movl	%eax, -56(%rbp)
	cmpl	$0, -52(%rbp)
	je	LBB252_13
## %bb.12:
	xorl	%esi, %esi
	movq	-40(%rbp), %rdi
	movl	$4, %edx
	callq	_sqlite3_expert_report
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rdi
	leaq	L_.str.773(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-48(%rbp), %rdi
	movq	-72(%rbp), %rdx
	leaq	L_.str.219(%rip), %rsi
	movl	%eax, -104(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
LBB252_13:
	movl	$0, -60(%rbp)
LBB252_14:                              ## =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	LBB252_21
## %bb.15:                              ##   in Loop: Header=BB252_14 Depth=1
	movq	-40(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	$1, %edx
	callq	_sqlite3_expert_report
	movq	%rax, -80(%rbp)
	movq	-40(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	$2, %edx
	callq	_sqlite3_expert_report
	movq	%rax, -88(%rbp)
	movq	-40(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	$3, %edx
	callq	_sqlite3_expert_report
	movq	%rax, -96(%rbp)
	cmpq	$0, -88(%rbp)
	jne	LBB252_17
## %bb.16:                              ##   in Loop: Header=BB252_14 Depth=1
	leaq	L_.str.774(%rip), %rax
	movq	%rax, -88(%rbp)
LBB252_17:                              ##   in Loop: Header=BB252_14 Depth=1
	cmpl	$0, -52(%rbp)
	je	LBB252_19
## %bb.18:                              ##   in Loop: Header=BB252_14 Depth=1
	movq	-48(%rbp), %rdi
	movl	-60(%rbp), %eax
	addl	$1, %eax
	leaq	L_.str.775(%rip), %rsi
	movl	%eax, %edx
	movb	$0, %al
	callq	_fprintf
	movq	-48(%rbp), %rdi
	movq	-80(%rbp), %rdx
	leaq	L_.str.776(%rip), %rsi
	movl	%eax, -108(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
LBB252_19:                              ##   in Loop: Header=BB252_14 Depth=1
	movq	-48(%rbp), %rdi
	movq	-88(%rbp), %rdx
	leaq	L_.str.219(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-48(%rbp), %rdi
	movq	-96(%rbp), %rdx
	leaq	L_.str.219(%rip), %rsi
	movl	%eax, -112(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
## %bb.20:                              ##   in Loop: Header=BB252_14 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	LBB252_14
LBB252_21:
	jmp	LBB252_22
LBB252_22:
	jmp	LBB252_23
LBB252_23:
	movq	-40(%rbp), %rdi
	callq	_sqlite3_expert_destroy
	movq	-8(%rbp), %rax
	movq	$0, 1624(%rax)
	movl	-28(%rbp), %eax
	addq	$112, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function resolve_backslashes
_resolve_backslashes:                   ## @resolve_backslashes
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
LBB253_1:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-8(%rbp), %rcx
	movsbl	(%rcx), %edx
	cmpl	$0, %edx
	movb	%al, -18(%rbp)          ## 1-byte Spill
	je	LBB253_3
## %bb.2:                               ##   in Loop: Header=BB253_1 Depth=1
	movq	-8(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$92, %ecx
	setne	%dl
	movb	%dl, -18(%rbp)          ## 1-byte Spill
LBB253_3:                               ##   in Loop: Header=BB253_1 Depth=1
	movb	-18(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB253_4
	jmp	LBB253_5
LBB253_4:                               ##   in Loop: Header=BB253_1 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	LBB253_1
LBB253_5:
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
LBB253_6:                               ## =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movb	(%rax,%rcx), %dl
	movb	%dl, -17(%rbp)
	movsbl	%dl, %esi
	cmpl	$0, %esi
	je	LBB253_51
## %bb.7:                               ##   in Loop: Header=BB253_6 Depth=1
	movsbl	-17(%rbp), %eax
	cmpl	$92, %eax
	jne	LBB253_49
## %bb.8:                               ##   in Loop: Header=BB253_6 Depth=1
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$0, %ecx
	je	LBB253_49
## %bb.9:                               ##   in Loop: Header=BB253_6 Depth=1
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
	movslq	%ecx, %rdx
	movb	(%rax,%rdx), %sil
	movb	%sil, -17(%rbp)
	movsbl	-17(%rbp), %ecx
	cmpl	$97, %ecx
	jne	LBB253_11
## %bb.10:                              ##   in Loop: Header=BB253_6 Depth=1
	movb	$7, -17(%rbp)
	jmp	LBB253_48
LBB253_11:                              ##   in Loop: Header=BB253_6 Depth=1
	movsbl	-17(%rbp), %eax
	cmpl	$98, %eax
	jne	LBB253_13
## %bb.12:                              ##   in Loop: Header=BB253_6 Depth=1
	movb	$8, -17(%rbp)
	jmp	LBB253_47
LBB253_13:                              ##   in Loop: Header=BB253_6 Depth=1
	movsbl	-17(%rbp), %eax
	cmpl	$116, %eax
	jne	LBB253_15
## %bb.14:                              ##   in Loop: Header=BB253_6 Depth=1
	movb	$9, -17(%rbp)
	jmp	LBB253_46
LBB253_15:                              ##   in Loop: Header=BB253_6 Depth=1
	movsbl	-17(%rbp), %eax
	cmpl	$110, %eax
	jne	LBB253_17
## %bb.16:                              ##   in Loop: Header=BB253_6 Depth=1
	movb	$10, -17(%rbp)
	jmp	LBB253_45
LBB253_17:                              ##   in Loop: Header=BB253_6 Depth=1
	movsbl	-17(%rbp), %eax
	cmpl	$118, %eax
	jne	LBB253_19
## %bb.18:                              ##   in Loop: Header=BB253_6 Depth=1
	movb	$11, -17(%rbp)
	jmp	LBB253_44
LBB253_19:                              ##   in Loop: Header=BB253_6 Depth=1
	movsbl	-17(%rbp), %eax
	cmpl	$102, %eax
	jne	LBB253_21
## %bb.20:                              ##   in Loop: Header=BB253_6 Depth=1
	movb	$12, -17(%rbp)
	jmp	LBB253_43
LBB253_21:                              ##   in Loop: Header=BB253_6 Depth=1
	movsbl	-17(%rbp), %eax
	cmpl	$114, %eax
	jne	LBB253_23
## %bb.22:                              ##   in Loop: Header=BB253_6 Depth=1
	movb	$13, -17(%rbp)
	jmp	LBB253_42
LBB253_23:                              ##   in Loop: Header=BB253_6 Depth=1
	movsbl	-17(%rbp), %eax
	cmpl	$34, %eax
	jne	LBB253_25
## %bb.24:                              ##   in Loop: Header=BB253_6 Depth=1
	movb	$34, -17(%rbp)
	jmp	LBB253_41
LBB253_25:                              ##   in Loop: Header=BB253_6 Depth=1
	movsbl	-17(%rbp), %eax
	cmpl	$39, %eax
	jne	LBB253_27
## %bb.26:                              ##   in Loop: Header=BB253_6 Depth=1
	movb	$39, -17(%rbp)
	jmp	LBB253_40
LBB253_27:                              ##   in Loop: Header=BB253_6 Depth=1
	movsbl	-17(%rbp), %eax
	cmpl	$92, %eax
	jne	LBB253_29
## %bb.28:                              ##   in Loop: Header=BB253_6 Depth=1
	movb	$92, -17(%rbp)
	jmp	LBB253_39
LBB253_29:                              ##   in Loop: Header=BB253_6 Depth=1
	movsbl	-17(%rbp), %eax
	cmpl	$48, %eax
	jl	LBB253_38
## %bb.30:                              ##   in Loop: Header=BB253_6 Depth=1
	movsbl	-17(%rbp), %eax
	cmpl	$55, %eax
	jg	LBB253_38
## %bb.31:                              ##   in Loop: Header=BB253_6 Depth=1
	movsbl	-17(%rbp), %eax
	subl	$48, %eax
                                        ## kill: def $al killed $al killed $eax
	movb	%al, -17(%rbp)
	movq	-8(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rsi
	movsbl	(%rcx,%rsi), %edx
	cmpl	$48, %edx
	jl	LBB253_37
## %bb.32:                              ##   in Loop: Header=BB253_6 Depth=1
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$55, %ecx
	jg	LBB253_37
## %bb.33:                              ##   in Loop: Header=BB253_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movsbl	-17(%rbp), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	addl	%esi, %eax
	subl	$48, %eax
                                        ## kill: def $al killed $al killed $eax
	movb	%al, -17(%rbp)
	movq	-8(%rbp), %rcx
	movl	-12(%rbp), %esi
	addl	$1, %esi
	movslq	%esi, %rdx
	movsbl	(%rcx,%rdx), %esi
	cmpl	$48, %esi
	jl	LBB253_36
## %bb.34:                              ##   in Loop: Header=BB253_6 Depth=1
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$55, %ecx
	jg	LBB253_36
## %bb.35:                              ##   in Loop: Header=BB253_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movsbl	-17(%rbp), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	addl	%esi, %eax
	subl	$48, %eax
                                        ## kill: def $al killed $al killed $eax
	movb	%al, -17(%rbp)
LBB253_36:                              ##   in Loop: Header=BB253_6 Depth=1
	jmp	LBB253_37
LBB253_37:                              ##   in Loop: Header=BB253_6 Depth=1
	jmp	LBB253_38
LBB253_38:                              ##   in Loop: Header=BB253_6 Depth=1
	jmp	LBB253_39
LBB253_39:                              ##   in Loop: Header=BB253_6 Depth=1
	jmp	LBB253_40
LBB253_40:                              ##   in Loop: Header=BB253_6 Depth=1
	jmp	LBB253_41
LBB253_41:                              ##   in Loop: Header=BB253_6 Depth=1
	jmp	LBB253_42
LBB253_42:                              ##   in Loop: Header=BB253_6 Depth=1
	jmp	LBB253_43
LBB253_43:                              ##   in Loop: Header=BB253_6 Depth=1
	jmp	LBB253_44
LBB253_44:                              ##   in Loop: Header=BB253_6 Depth=1
	jmp	LBB253_45
LBB253_45:                              ##   in Loop: Header=BB253_6 Depth=1
	jmp	LBB253_46
LBB253_46:                              ##   in Loop: Header=BB253_6 Depth=1
	jmp	LBB253_47
LBB253_47:                              ##   in Loop: Header=BB253_6 Depth=1
	jmp	LBB253_48
LBB253_48:                              ##   in Loop: Header=BB253_6 Depth=1
	jmp	LBB253_49
LBB253_49:                              ##   in Loop: Header=BB253_6 Depth=1
	movb	-17(%rbp), %al
	movq	-8(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
## %bb.50:                              ##   in Loop: Header=BB253_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	LBB253_6
LBB253_51:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	LBB253_53
## %bb.52:
	movq	-8(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movb	$0, (%rax,%rcx)
LBB253_53:
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function booleanValue
_booleanValue:                          ## @booleanValue
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$48, %ecx
	jne	LBB254_7
## %bb.1:
	movq	-16(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$120, %ecx
	jne	LBB254_7
## %bb.2:
	movl	$2, -20(%rbp)
LBB254_3:                               ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edi
	callq	_hexDigitValue
	cmpl	$0, %eax
	jl	LBB254_6
## %bb.4:                               ##   in Loop: Header=BB254_3 Depth=1
	jmp	LBB254_5
LBB254_5:                               ##   in Loop: Header=BB254_3 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB254_3
LBB254_6:
	jmp	LBB254_14
LBB254_7:
	movl	$0, -20(%rbp)
LBB254_8:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	cmpl	$48, %esi
	movb	%al, -21(%rbp)          ## 1-byte Spill
	jl	LBB254_10
## %bb.9:                               ##   in Loop: Header=BB254_8 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$57, %edx
	setle	%sil
	movb	%sil, -21(%rbp)         ## 1-byte Spill
LBB254_10:                              ##   in Loop: Header=BB254_8 Depth=1
	movb	-21(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB254_11
	jmp	LBB254_13
LBB254_11:                              ##   in Loop: Header=BB254_8 Depth=1
	jmp	LBB254_12
LBB254_12:                              ##   in Loop: Header=BB254_8 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB254_8
LBB254_13:
	jmp	LBB254_14
LBB254_14:
	cmpl	$0, -20(%rbp)
	jle	LBB254_17
## %bb.15:
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$0, %edx
	jne	LBB254_17
## %bb.16:
	movq	-16(%rbp), %rdi
	callq	_integerValue
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	andq	%rcx, %rax
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -4(%rbp)
	jmp	LBB254_24
LBB254_17:
	movq	-16(%rbp), %rdi
	leaq	L_.str.372(%rip), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	je	LBB254_19
## %bb.18:
	movq	-16(%rbp), %rdi
	leaq	L_.str.777(%rip), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	jne	LBB254_20
LBB254_19:
	movl	$1, -4(%rbp)
	jmp	LBB254_24
LBB254_20:
	movq	-16(%rbp), %rdi
	leaq	L_.str.373(%rip), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	je	LBB254_22
## %bb.21:
	movq	-16(%rbp), %rdi
	leaq	L_.str.526(%rip), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	jne	LBB254_23
LBB254_22:
	movl	$0, -4(%rbp)
	jmp	LBB254_24
LBB254_23:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	leaq	L_.str.778(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$0, -4(%rbp)
LBB254_24:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shellAuth
_shellAuth:                             ## @shellAuth
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -56(%rbp)
	movl	%esi, -60(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movq	%r9, -96(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -104(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-104(%rbp), %rax
	movq	64(%rax), %rdi
	movslq	-60(%rbp), %rax
	leaq	_shellAuth.azAction(%rip), %rcx
	movq	(%rcx,%rax,8), %rdx
	leaq	L_.str.812(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$0, -108(%rbp)
LBB255_1:                               ## =>This Inner Loop Header: Depth=1
	cmpl	$4, -108(%rbp)
	jge	LBB255_7
## %bb.2:                               ##   in Loop: Header=BB255_1 Depth=1
	movq	-104(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.533(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movslq	-108(%rbp), %rcx
	cmpq	$0, -48(%rbp,%rcx,8)
	je	LBB255_4
## %bb.3:                               ##   in Loop: Header=BB255_1 Depth=1
	movq	-104(%rbp), %rax
	movq	64(%rax), %rdi
	movslq	-108(%rbp), %rax
	movq	-48(%rbp,%rax,8), %rsi
	callq	_output_c_string
	jmp	LBB255_5
LBB255_4:                               ##   in Loop: Header=BB255_1 Depth=1
	movq	-104(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.616(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB255_5:                               ##   in Loop: Header=BB255_1 Depth=1
	jmp	LBB255_6
LBB255_6:                               ##   in Loop: Header=BB255_1 Depth=1
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	LBB255_1
LBB255_7:
	movq	-104(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.66(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-104(%rbp), %rcx
	cmpb	$0, 17(%rcx)
	je	LBB255_9
## %bb.8:
	movq	-56(%rbp), %rdi
	movl	-60(%rbp), %esi
	movq	-72(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	-88(%rbp), %r8
	movq	-96(%rbp), %r9
	callq	_safeModeAuth
LBB255_9:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	LBB255_11
## %bb.10:
	xorl	%eax, %eax
	addq	$112, %rsp
	popq	%rbp
	retq
LBB255_11:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function test_breakpoint
_test_breakpoint:                       ## @test_breakpoint
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	_test_breakpoint.nCall(%rip), %eax
	addl	$1, %eax
	movl	%eax, _test_breakpoint.nCall(%rip)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function setOrClearFlag
_setOrClearFlag:                        ## @setOrClearFlag
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	_booleanValue
	cmpl	$0, %eax
	je	LBB257_2
## %bb.1:
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	orl	124(%rcx), %eax
	movl	%eax, 124(%rcx)
	jmp	LBB257_3
LBB257_2:
	movl	-12(%rbp), %eax
	xorl	$-1, %eax
	movq	-8(%rbp), %rcx
	andl	124(%rcx), %eax
	movl	%eax, 124(%rcx)
LBB257_3:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function testcase_glob
_testcase_glob:                         ## @testcase_glob
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
LBB258_1:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB258_6 Depth 2
                                        ##     Child Loop BB258_9 Depth 2
                                        ##     Child Loop BB258_56 Depth 2
                                        ##     Child Loop BB258_83 Depth 2
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movsbl	(%rax), %edx
	movl	%edx, -28(%rbp)
	cmpl	$0, %edx
	je	LBB258_94
## %bb.2:                               ##   in Loop: Header=BB258_1 Depth=1
	movl	-28(%rbp), %eax
                                        ## kill: def $al killed $al killed $eax
	movzbl	%al, %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB258_12
## %bb.3:                               ##   in Loop: Header=BB258_1 Depth=1
	movq	-24(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isspace
	cmpl	$0, %eax
	jne	LBB258_5
## %bb.4:
	movl	$0, -4(%rbp)
	jmp	LBB258_98
LBB258_5:                               ##   in Loop: Header=BB258_1 Depth=1
	jmp	LBB258_6
LBB258_6:                               ##   Parent Loop BB258_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB258_8
## %bb.7:                               ##   in Loop: Header=BB258_6 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	LBB258_6
LBB258_8:                               ##   in Loop: Header=BB258_1 Depth=1
	jmp	LBB258_9
LBB258_9:                               ##   Parent Loop BB258_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB258_11
## %bb.10:                              ##   in Loop: Header=BB258_9 Depth=2
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	LBB258_9
LBB258_11:                              ##   in Loop: Header=BB258_1 Depth=1
	jmp	LBB258_93
LBB258_12:                              ##   in Loop: Header=BB258_1 Depth=1
	cmpl	$42, -28(%rbp)
	jne	LBB258_42
## %bb.13:
	jmp	LBB258_14
LBB258_14:                              ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movsbl	(%rax), %edx
	movl	%edx, -28(%rbp)
	cmpl	$42, %edx
	movb	$1, %sil
	movb	%sil, -45(%rbp)         ## 1-byte Spill
	je	LBB258_16
## %bb.15:                              ##   in Loop: Header=BB258_14 Depth=1
	cmpl	$63, -28(%rbp)
	sete	%al
	movb	%al, -45(%rbp)          ## 1-byte Spill
LBB258_16:                              ##   in Loop: Header=BB258_14 Depth=1
	movb	-45(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB258_17
	jmp	LBB258_21
LBB258_17:                              ##   in Loop: Header=BB258_14 Depth=1
	cmpl	$63, -28(%rbp)
	jne	LBB258_20
## %bb.18:                              ##   in Loop: Header=BB258_14 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movsbl	(%rax), %edx
	cmpl	$0, %edx
	jne	LBB258_20
## %bb.19:
	movl	$0, -4(%rbp)
	jmp	LBB258_98
LBB258_20:                              ##   in Loop: Header=BB258_14 Depth=1
	jmp	LBB258_14
LBB258_21:
	cmpl	$0, -28(%rbp)
	jne	LBB258_23
## %bb.22:
	movl	$1, -4(%rbp)
	jmp	LBB258_98
LBB258_23:
	cmpl	$91, -28(%rbp)
	jne	LBB258_30
## %bb.24:
	jmp	LBB258_25
LBB258_25:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-24(%rbp), %rcx
	movsbl	(%rcx), %edx
	cmpl	$0, %edx
	movb	%al, -46(%rbp)          ## 1-byte Spill
	je	LBB258_27
## %bb.26:                              ##   in Loop: Header=BB258_25 Depth=1
	movq	-16(%rbp), %rax
	addq	$-1, %rax
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	_testcase_glob
	cmpl	$0, %eax
	sete	%cl
	movb	%cl, -46(%rbp)          ## 1-byte Spill
LBB258_27:                              ##   in Loop: Header=BB258_25 Depth=1
	movb	-46(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB258_28
	jmp	LBB258_29
LBB258_28:                              ##   in Loop: Header=BB258_25 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	LBB258_25
LBB258_29:
	movq	-24(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$0, %ecx
	setne	%dl
	andb	$1, %dl
	movzbl	%dl, %ecx
	movl	%ecx, -4(%rbp)
	jmp	LBB258_98
LBB258_30:
	jmp	LBB258_31
LBB258_31:
	jmp	LBB258_32
LBB258_32:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB258_34 Depth 2
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movsbl	(%rax), %edx
	movl	%edx, -32(%rbp)
	cmpl	$0, %edx
	je	LBB258_41
## %bb.33:                              ##   in Loop: Header=BB258_32 Depth=1
	jmp	LBB258_34
LBB258_34:                              ##   Parent Loop BB258_32 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	je	LBB258_38
## %bb.35:                              ##   in Loop: Header=BB258_34 Depth=2
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movsbl	(%rax), %edx
	movl	%edx, -32(%rbp)
	cmpl	$0, -32(%rbp)
	jne	LBB258_37
## %bb.36:
	movl	$0, -4(%rbp)
	jmp	LBB258_98
LBB258_37:                              ##   in Loop: Header=BB258_34 Depth=2
	jmp	LBB258_34
LBB258_38:                              ##   in Loop: Header=BB258_32 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	_testcase_glob
	cmpl	$0, %eax
	je	LBB258_40
## %bb.39:
	movl	$1, -4(%rbp)
	jmp	LBB258_98
LBB258_40:                              ##   in Loop: Header=BB258_32 Depth=1
	jmp	LBB258_32
LBB258_41:
	movl	$0, -4(%rbp)
	jmp	LBB258_98
LBB258_42:                              ##   in Loop: Header=BB258_1 Depth=1
	cmpl	$63, -28(%rbp)
	jne	LBB258_46
## %bb.43:                              ##   in Loop: Header=BB258_1 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movsbl	(%rax), %edx
	cmpl	$0, %edx
	jne	LBB258_45
## %bb.44:
	movl	$0, -4(%rbp)
	jmp	LBB258_98
LBB258_45:                              ##   in Loop: Header=BB258_1 Depth=1
	jmp	LBB258_91
LBB258_46:                              ##   in Loop: Header=BB258_1 Depth=1
	cmpl	$91, -28(%rbp)
	jne	LBB258_75
## %bb.47:                              ##   in Loop: Header=BB258_1 Depth=1
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movsbl	(%rax), %edx
	movl	%edx, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jne	LBB258_49
## %bb.48:
	movl	$0, -4(%rbp)
	jmp	LBB258_98
LBB258_49:                              ##   in Loop: Header=BB258_1 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movsbl	(%rax), %edx
	movl	%edx, -32(%rbp)
	cmpl	$94, -32(%rbp)
	jne	LBB258_51
## %bb.50:                              ##   in Loop: Header=BB258_1 Depth=1
	movl	$1, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movsbl	(%rax), %edx
	movl	%edx, -32(%rbp)
LBB258_51:                              ##   in Loop: Header=BB258_1 Depth=1
	cmpl	$93, -32(%rbp)
	jne	LBB258_55
## %bb.52:                              ##   in Loop: Header=BB258_1 Depth=1
	cmpl	$93, -28(%rbp)
	jne	LBB258_54
## %bb.53:                              ##   in Loop: Header=BB258_1 Depth=1
	movl	$1, -40(%rbp)
LBB258_54:                              ##   in Loop: Header=BB258_1 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movsbl	(%rax), %edx
	movl	%edx, -32(%rbp)
LBB258_55:                              ##   in Loop: Header=BB258_1 Depth=1
	jmp	LBB258_56
LBB258_56:                              ##   Parent Loop BB258_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -32(%rbp)
	movb	%al, -47(%rbp)          ## 1-byte Spill
	je	LBB258_58
## %bb.57:                              ##   in Loop: Header=BB258_56 Depth=2
	cmpl	$93, -32(%rbp)
	setne	%al
	movb	%al, -47(%rbp)          ## 1-byte Spill
LBB258_58:                              ##   in Loop: Header=BB258_56 Depth=2
	movb	-47(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB258_59
	jmp	LBB258_71
LBB258_59:                              ##   in Loop: Header=BB258_56 Depth=2
	cmpl	$45, -32(%rbp)
	jne	LBB258_67
## %bb.60:                              ##   in Loop: Header=BB258_56 Depth=2
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$93, %ecx
	je	LBB258_67
## %bb.61:                              ##   in Loop: Header=BB258_56 Depth=2
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB258_67
## %bb.62:                              ##   in Loop: Header=BB258_56 Depth=2
	cmpl	$0, -44(%rbp)
	jle	LBB258_67
## %bb.63:                              ##   in Loop: Header=BB258_56 Depth=2
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movsbl	(%rax), %edx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %edx
	cmpl	-44(%rbp), %edx
	jl	LBB258_66
## %bb.64:                              ##   in Loop: Header=BB258_56 Depth=2
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jg	LBB258_66
## %bb.65:                              ##   in Loop: Header=BB258_56 Depth=2
	movl	$1, -40(%rbp)
LBB258_66:                              ##   in Loop: Header=BB258_56 Depth=2
	movl	$0, -44(%rbp)
	jmp	LBB258_70
LBB258_67:                              ##   in Loop: Header=BB258_56 Depth=2
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	LBB258_69
## %bb.68:                              ##   in Loop: Header=BB258_56 Depth=2
	movl	$1, -40(%rbp)
LBB258_69:                              ##   in Loop: Header=BB258_56 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, -44(%rbp)
LBB258_70:                              ##   in Loop: Header=BB258_56 Depth=2
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movsbl	(%rax), %edx
	movl	%edx, -32(%rbp)
	jmp	LBB258_56
LBB258_71:                              ##   in Loop: Header=BB258_1 Depth=1
	cmpl	$0, -32(%rbp)
	je	LBB258_73
## %bb.72:                              ##   in Loop: Header=BB258_1 Depth=1
	movl	-40(%rbp), %eax
	xorl	-36(%rbp), %eax
	cmpl	$0, %eax
	jne	LBB258_74
LBB258_73:
	movl	$0, -4(%rbp)
	jmp	LBB258_98
LBB258_74:                              ##   in Loop: Header=BB258_1 Depth=1
	jmp	LBB258_90
LBB258_75:                              ##   in Loop: Header=BB258_1 Depth=1
	cmpl	$35, -28(%rbp)
	jne	LBB258_86
## %bb.76:                              ##   in Loop: Header=BB258_1 Depth=1
	movq	-24(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	je	LBB258_78
## %bb.77:                              ##   in Loop: Header=BB258_1 Depth=1
	movq	-24(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$43, %ecx
	jne	LBB258_80
LBB258_78:                              ##   in Loop: Header=BB258_1 Depth=1
	movq	-24(%rbp), %rax
	movzbl	1(%rax), %edi
	callq	_isdigit
	cmpl	$0, %eax
	je	LBB258_80
## %bb.79:                              ##   in Loop: Header=BB258_1 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
LBB258_80:                              ##   in Loop: Header=BB258_1 Depth=1
	movq	-24(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isdigit
	cmpl	$0, %eax
	jne	LBB258_82
## %bb.81:
	movl	$0, -4(%rbp)
	jmp	LBB258_98
LBB258_82:                              ##   in Loop: Header=BB258_1 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
LBB258_83:                              ##   Parent Loop BB258_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isdigit
	cmpl	$0, %eax
	je	LBB258_85
## %bb.84:                              ##   in Loop: Header=BB258_83 Depth=2
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	LBB258_83
LBB258_85:                              ##   in Loop: Header=BB258_1 Depth=1
	jmp	LBB258_89
LBB258_86:                              ##   in Loop: Header=BB258_1 Depth=1
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movsbl	(%rcx), %esi
	cmpl	%esi, %eax
	je	LBB258_88
## %bb.87:
	movl	$0, -4(%rbp)
	jmp	LBB258_98
LBB258_88:                              ##   in Loop: Header=BB258_1 Depth=1
	jmp	LBB258_89
LBB258_89:                              ##   in Loop: Header=BB258_1 Depth=1
	jmp	LBB258_90
LBB258_90:                              ##   in Loop: Header=BB258_1 Depth=1
	jmp	LBB258_91
LBB258_91:                              ##   in Loop: Header=BB258_1 Depth=1
	jmp	LBB258_92
LBB258_92:                              ##   in Loop: Header=BB258_1 Depth=1
	jmp	LBB258_93
LBB258_93:                              ##   in Loop: Header=BB258_1 Depth=1
	jmp	LBB258_1
LBB258_94:
	jmp	LBB258_95
LBB258_95:                              ## =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB258_97
## %bb.96:                              ##   in Loop: Header=BB258_95 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	LBB258_95
LBB258_97:
	movq	-24(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$0, %ecx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %ecx
	movl	%ecx, -4(%rbp)
LBB258_98:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function tryToClone
_tryToClone:                            ## @tryToClone
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	%eax, %esi
	callq	_access
	cmpl	$0, %eax
	jne	LBB259_2
## %bb.1:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	leaq	L_.str.813(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB259_6
LBB259_2:
	movq	-16(%rbp), %rdi
	leaq	-32(%rbp), %rsi
	callq	_sqlite3_open
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	LBB259_4
## %bb.3:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rax
	movq	%rdi, -40(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-40(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.814(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB259_5
LBB259_4:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.815(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -48(%rbp)         ## 8-byte Spill
	movq	-48(%rbp), %r8          ## 8-byte Reload
	callq	_sqlite3_exec
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movq	-32(%rbp), %rdi
	leaq	L_.str.816(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -56(%rbp)         ## 8-byte Spill
	movq	-56(%rbp), %r8          ## 8-byte Reload
	movl	%eax, -60(%rbp)         ## 4-byte Spill
	callq	_sqlite3_exec
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	leaq	L_.str.817(%rip), %rdx
	leaq	_tryToCloneData(%rip), %rcx
	movl	%eax, -64(%rbp)         ## 4-byte Spill
	callq	_tryToCloneSchema
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	leaq	L_.str.818(%rip), %rdx
	callq	_tryToCloneSchema
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-32(%rbp), %rdi
	leaq	L_.str.819(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -72(%rbp)         ## 8-byte Spill
	movq	-72(%rbp), %r8          ## 8-byte Reload
	callq	_sqlite3_exec
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.392(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -80(%rbp)         ## 8-byte Spill
	movq	-80(%rbp), %r8          ## 8-byte Reload
	movl	%eax, -84(%rbp)         ## 4-byte Spill
	callq	_sqlite3_exec
LBB259_5:
	movq	-32(%rbp), %rdi
	callq	_close_db
LBB259_6:
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shell_dbinfo_command
_shell_dbinfo_command:                  ## @shell_dbinfo_command
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              ## imm = 0x110
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -128(%rbp)
	movl	%esi, -132(%rbp)
	movq	%rdx, -144(%rbp)
	cmpl	$2, -132(%rbp)
	jl	LBB260_2
## %bb.1:
	movq	-144(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -216(%rbp)        ## 8-byte Spill
	jmp	LBB260_3
LBB260_2:
	leaq	L___func__.main(%rip), %rax
	movq	%rax, -216(%rbp)        ## 8-byte Spill
	jmp	LBB260_3
LBB260_3:
	movq	-216(%rbp), %rax        ## 8-byte Reload
	xorl	%esi, %esi
	movq	%rax, -176(%rbp)
	movq	$0, -184(%rbp)
	movq	-128(%rbp), %rdi
	callq	_open_db
	movq	-128(%rbp), %rax
	cmpq	$0, (%rax)
	jne	LBB260_5
## %bb.4:
	movl	$1, -116(%rbp)
	jmp	LBB260_36
LBB260_5:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-128(%rbp), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.858(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-184(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -152(%rbp)
	cmpl	$0, -152(%rbp)
	je	LBB260_7
## %bb.6:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -224(%rbp)        ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-224(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.859(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	movq	-184(%rbp), %rdi
	movl	%eax, -228(%rbp)        ## 4-byte Spill
	callq	_sqlite3_finalize
	movl	$1, -116(%rbp)
	jmp	LBB260_36
LBB260_7:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-184(%rbp), %rdi
	movq	-176(%rbp), %rdx
	movl	$1, %esi
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_bind_text
	movq	-184(%rbp), %rdi
	movl	%eax, -232(%rbp)        ## 4-byte Spill
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB260_10
## %bb.8:
	xorl	%esi, %esi
	movq	-184(%rbp), %rdi
	callq	_sqlite3_column_bytes
	cmpl	$100, %eax
	jle	LBB260_10
## %bb.9:
	xorl	%esi, %esi
	leaq	-112(%rbp), %rdi
	movq	-184(%rbp), %rax
	movq	%rdi, -240(%rbp)        ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_column_blob
	movq	-240(%rbp), %rdi        ## 8-byte Reload
	movq	%rax, %rsi
	movl	$100, %edx
	callq	_memcpy
	movq	-184(%rbp), %rdi
	callq	_sqlite3_finalize
	jmp	LBB260_11
LBB260_10:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.860(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-184(%rbp), %rdi
	movl	%eax, -244(%rbp)        ## 4-byte Spill
	callq	_sqlite3_finalize
	movl	$1, -116(%rbp)
	jmp	LBB260_36
LBB260_11:
	leaq	-112(%rbp), %rax
	addq	$16, %rax
	movq	%rax, %rdi
	callq	_get2byteInt
	movl	%eax, -148(%rbp)
	cmpl	$1, -148(%rbp)
	jne	LBB260_13
## %bb.12:
	movl	$65536, -148(%rbp)      ## imm = 0x10000
LBB260_13:
	movq	-128(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-148(%rbp), %ecx
	leaq	L_.str.861(%rip), %rsi
	leaq	L_.str.862(%rip), %rdx
	movb	$0, %al
	callq	_fprintf
	movq	-128(%rbp), %rdx
	movq	64(%rdx), %rdi
	movzbl	-94(%rbp), %ecx
	leaq	L_.str.861(%rip), %rsi
	leaq	L_.str.863(%rip), %rdx
	movl	%eax, -248(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movq	-128(%rbp), %rdx
	movq	64(%rdx), %rdi
	movzbl	-93(%rbp), %ecx
	leaq	L_.str.861(%rip), %rsi
	leaq	L_.str.864(%rip), %rdx
	movl	%eax, -252(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movq	-128(%rbp), %rdx
	movq	64(%rdx), %rdi
	movzbl	-92(%rbp), %ecx
	leaq	L_.str.861(%rip), %rsi
	leaq	L_.str.865(%rip), %rdx
	movl	%eax, -256(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movl	$0, -148(%rbp)
LBB260_14:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$12, -148(%rbp)
	jge	LBB260_25
## %bb.15:                              ##   in Loop: Header=BB260_14 Depth=1
	movslq	-148(%rbp), %rax
	shlq	$4, %rax
	leaq	_shell_dbinfo_command.aField(%rip), %rcx
	movl	8(%rax,%rcx), %edx
	movl	%edx, -188(%rbp)
	movslq	-188(%rbp), %rax
	leaq	-112(%rbp,%rax), %rdi
	movq	%rcx, -264(%rbp)        ## 8-byte Spill
	callq	_get4byteInt
	movl	%eax, -192(%rbp)
	movq	-128(%rbp), %rcx
	movq	64(%rcx), %rdi
	movslq	-148(%rbp), %rcx
	shlq	$4, %rcx
	movq	-264(%rbp), %rsi        ## 8-byte Reload
	movq	(%rcx,%rsi), %rdx
	movl	-192(%rbp), %ecx
	leaq	L_.str.866(%rip), %rsi
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	callq	_fprintf
	movl	-188(%rbp), %ecx
	subl	$56, %ecx
	jne	LBB260_23
	jmp	LBB260_16
LBB260_16:                              ##   in Loop: Header=BB260_14 Depth=1
	cmpl	$1, -192(%rbp)
	jne	LBB260_18
## %bb.17:                              ##   in Loop: Header=BB260_14 Depth=1
	movq	-128(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.867(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB260_18:                              ##   in Loop: Header=BB260_14 Depth=1
	cmpl	$2, -192(%rbp)
	jne	LBB260_20
## %bb.19:                              ##   in Loop: Header=BB260_14 Depth=1
	movq	-128(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.868(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB260_20:                              ##   in Loop: Header=BB260_14 Depth=1
	cmpl	$3, -192(%rbp)
	jne	LBB260_22
## %bb.21:                              ##   in Loop: Header=BB260_14 Depth=1
	movq	-128(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.869(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB260_22:                              ##   in Loop: Header=BB260_14 Depth=1
	jmp	LBB260_23
LBB260_23:                              ##   in Loop: Header=BB260_14 Depth=1
	movq	-128(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.66(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
## %bb.24:                              ##   in Loop: Header=BB260_14 Depth=1
	movl	-148(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -148(%rbp)
	jmp	LBB260_14
LBB260_25:
	cmpq	$0, -176(%rbp)
	jne	LBB260_27
## %bb.26:
	leaq	L_.str.870(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -168(%rbp)
	jmp	LBB260_31
LBB260_27:
	movq	-176(%rbp), %rdi
	leaq	L_.str.256(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB260_29
## %bb.28:
	leaq	L_.str.79(%rip), %rdi
	leaq	L_.str.609(%rip), %rsi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -168(%rbp)
	jmp	LBB260_30
LBB260_29:
	movq	-176(%rbp), %rsi
	leaq	L_.str.871(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -168(%rbp)
LBB260_30:
	jmp	LBB260_31
LBB260_31:
	movl	$0, -148(%rbp)
LBB260_32:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$5, -148(%rbp)
	jge	LBB260_35
## %bb.33:                              ##   in Loop: Header=BB260_32 Depth=1
	movslq	-148(%rbp), %rax
	shlq	$4, %rax
	leaq	_shell_dbinfo_command.aQuery(%rip), %rcx
	addq	%rax, %rcx
	movq	8(%rcx), %rdi
	movq	-168(%rbp), %rsi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -200(%rbp)
	movq	-128(%rbp), %rax
	movq	(%rax), %rdi
	movq	-200(%rbp), %rsi
	callq	_db_int
	movl	%eax, -204(%rbp)
	movq	-200(%rbp), %rdi
	callq	_sqlite3_free
	movq	-128(%rbp), %rcx
	movq	64(%rcx), %rdi
	movslq	-148(%rbp), %rcx
	shlq	$4, %rcx
	leaq	_shell_dbinfo_command.aQuery(%rip), %rdx
	addq	%rcx, %rdx
	movq	(%rdx), %rdx
	movl	-204(%rbp), %ecx
	leaq	L_.str.861(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
## %bb.34:                              ##   in Loop: Header=BB260_32 Depth=1
	movl	-148(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -148(%rbp)
	jmp	LBB260_32
LBB260_35:
	movq	-168(%rbp), %rdi
	callq	_sqlite3_free
	movq	-128(%rbp), %rax
	movq	(%rax), %rdi
	movq	-176(%rbp), %rsi
	leaq	-156(%rbp), %rax
	movl	$35, %edx
	movq	%rax, %rcx
	callq	_sqlite3_file_control
	movq	-128(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-156(%rbp), %ecx
	leaq	L_.str.872(%rip), %rsi
	leaq	L_.str.873(%rip), %rdx
	movl	%eax, -268(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movl	$0, -116(%rbp)
LBB260_36:
	movl	-116(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movl	%eax, -272(%rbp)        ## 4-byte Spill
	jne	LBB260_38
## %bb.37:
	movl	-272(%rbp), %eax        ## 4-byte Reload
	addq	$272, %rsp              ## imm = 0x110
	popq	%rbp
	retq
LBB260_38:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function run_schema_dump_query
_run_schema_dump_query:                 ## @run_schema_dump_query
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movq	-16(%rbp), %rax
	leaq	_dump_callback(%rip), %rdx
	movq	%rax, %rcx
	leaq	-40(%rbp), %r8
	callq	_sqlite3_exec
	movl	%eax, -28(%rbp)
	cmpl	$11, -28(%rbp)
	jne	LBB261_9
## %bb.1:
	movq	-24(%rbp), %rdi
	callq	_strlen30
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.874(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	cmpq	$0, -40(%rbp)
	je	LBB261_3
## %bb.2:
	movq	-16(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-40(%rbp), %rdx
	leaq	L_.str.875(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-40(%rbp), %rdi
	movl	%eax, -56(%rbp)         ## 4-byte Spill
	callq	_sqlite3_free
	movq	$0, -40(%rbp)
LBB261_3:
	movl	-52(%rbp), %eax
	addl	$100, %eax
	movslq	%eax, %rdi
	callq	_malloc
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	jne	LBB261_5
## %bb.4:
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	LBB261_10
LBB261_5:
	movl	-52(%rbp), %eax
	addl	$100, %eax
	movq	-48(%rbp), %rsi
	movq	-24(%rbp), %rcx
	movl	%eax, %edi
	leaq	L_.str.876(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	-48(%rbp), %rsi
	movq	-16(%rbp), %rcx
	leaq	_dump_callback(%rip), %rdx
	leaq	-40(%rbp), %r8
	movq	%rax, -64(%rbp)         ## 8-byte Spill
	callq	_sqlite3_exec
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	je	LBB261_7
## %bb.6:
	movq	-16(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-40(%rbp), %rdx
	leaq	L_.str.877(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB261_8
LBB261_7:
	movl	$11, -28(%rbp)
LBB261_8:
	movq	-40(%rbp), %rdi
	callq	_sqlite3_free
	movq	-48(%rbp), %rdi
	callq	_free
LBB261_9:
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB261_10:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function run_table_dump_query
_run_table_dump_query:                  ## @run_table_dump_query
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	-24(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-32(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jne	LBB262_2
## %bb.1:
	cmpq	$0, -32(%rbp)
	jne	LBB262_5
LBB262_2:
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rsi
	callq	_shell_error_context
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-36(%rbp), %edx
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -72(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	movl	%edx, -76(%rbp)         ## 4-byte Spill
	callq	_sqlite3_errmsg
	movq	-64(%rbp), %r8
	movq	-72(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.896(%rip), %rsi
	movl	-76(%rbp), %edx         ## 4-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
	movq	-64(%rbp), %rdi
	movl	%eax, -80(%rbp)         ## 4-byte Spill
	callq	_sqlite3_free
	movl	-36(%rbp), %eax
	andl	$255, %eax
	cmpl	$11, %eax
	je	LBB262_4
## %bb.3:
	movq	-16(%rbp), %rax
	movl	80(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 80(%rax)
LBB262_4:
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	LBB262_29
LBB262_5:
	movq	-32(%rbp), %rdi
	callq	_sqlite3_step
	movl	%eax, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	_sqlite3_column_count
	movl	%eax, -40(%rbp)
LBB262_6:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB262_8 Depth 2
                                        ##     Child Loop BB262_14 Depth 2
	cmpl	$100, -36(%rbp)
	jne	LBB262_24
## %bb.7:                               ##   in Loop: Header=BB262_6 Depth=1
	xorl	%esi, %esi
	movq	-32(%rbp), %rdi
	callq	_sqlite3_column_text
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-56(%rbp), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -44(%rbp)
LBB262_8:                               ##   Parent Loop BB262_6 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	LBB262_11
## %bb.9:                               ##   in Loop: Header=BB262_8 Depth=2
	movq	-16(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-32(%rbp), %rax
	movl	-44(%rbp), %esi
	movq	%rdi, -88(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_column_text
	movq	-88(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.897(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
## %bb.10:                              ##   in Loop: Header=BB262_8 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	LBB262_8
LBB262_11:                              ##   in Loop: Header=BB262_6 Depth=1
	cmpq	$0, -56(%rbp)
	jne	LBB262_13
## %bb.12:                              ##   in Loop: Header=BB262_6 Depth=1
	leaq	L_.str.27(%rip), %rax
	movq	%rax, -56(%rbp)
LBB262_13:                              ##   in Loop: Header=BB262_6 Depth=1
	jmp	LBB262_14
LBB262_14:                              ##   Parent Loop BB262_6 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-56(%rbp), %rcx
	movsbl	(%rcx), %edx
	cmpl	$0, %edx
	movb	%al, -89(%rbp)          ## 1-byte Spill
	je	LBB262_18
## %bb.15:                              ##   in Loop: Header=BB262_14 Depth=2
	movq	-56(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	movb	$1, %dl
	movb	%dl, -90(%rbp)          ## 1-byte Spill
	jne	LBB262_17
## %bb.16:                              ##   in Loop: Header=BB262_14 Depth=2
	movq	-56(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$45, %ecx
	setne	%dl
	movb	%dl, -90(%rbp)          ## 1-byte Spill
LBB262_17:                              ##   in Loop: Header=BB262_14 Depth=2
	movb	-90(%rbp), %al          ## 1-byte Reload
	movb	%al, -89(%rbp)          ## 1-byte Spill
LBB262_18:                              ##   in Loop: Header=BB262_14 Depth=2
	movb	-89(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB262_19
	jmp	LBB262_20
LBB262_19:                              ##   in Loop: Header=BB262_14 Depth=2
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	jmp	LBB262_14
LBB262_20:                              ##   in Loop: Header=BB262_6 Depth=1
	movq	-56(%rbp), %rax
	cmpb	$0, (%rax)
	je	LBB262_22
## %bb.21:                              ##   in Loop: Header=BB262_6 Depth=1
	movq	-16(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.898(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB262_23
LBB262_22:                              ##   in Loop: Header=BB262_6 Depth=1
	movq	-16(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.883(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB262_23:                              ##   in Loop: Header=BB262_6 Depth=1
	movq	-32(%rbp), %rdi
	callq	_sqlite3_step
	movl	%eax, -36(%rbp)
	jmp	LBB262_6
LBB262_24:
	movq	-32(%rbp), %rdi
	callq	_sqlite3_finalize
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	LBB262_28
## %bb.25:
	movq	-16(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-36(%rbp), %edx
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -104(%rbp)        ## 8-byte Spill
	movq	%rax, %rdi
	movl	%edx, -108(%rbp)        ## 4-byte Spill
	callq	_sqlite3_errmsg
	movq	-104(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.899(%rip), %rsi
	movl	-108(%rbp), %edx        ## 4-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
	movl	-36(%rbp), %edx
	andl	$255, %edx
	cmpl	$11, %edx
	je	LBB262_27
## %bb.26:
	movq	-16(%rbp), %rax
	movl	80(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 80(%rax)
LBB262_27:
	jmp	LBB262_28
LBB262_28:
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB262_29:
	movl	-4(%rbp), %eax
	addq	$112, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function expertDotCommand
_expertDotCommand:                      ## @expertDotCommand
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 1624(%rax)
	sete	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movslq	%edx, %rax
	cmpq	$0, %rax
	je	LBB263_2
## %bb.1:
	leaq	L___func__.expertDotCommand(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.902(%rip), %rcx
	movl	$14790, %edx            ## imm = 0x39C6
	callq	___assert_rtn
LBB263_2:
	jmp	LBB263_3
LBB263_3:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-8(%rbp), %rax
	addq	$1624, %rax             ## imm = 0x658
	movq	%rax, %rdi
	movl	$16, %edx
	callq	___memset_chk
	movl	$1, -36(%rbp)
LBB263_4:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -24(%rbp)
	movb	%al, -53(%rbp)          ## 1-byte Spill
	jne	LBB263_6
## %bb.5:                               ##   in Loop: Header=BB263_4 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-20(%rbp), %eax
	setl	%cl
	movb	%cl, -53(%rbp)          ## 1-byte Spill
LBB263_6:                               ##   in Loop: Header=BB263_4 Depth=1
	movb	-53(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB263_7
	jmp	LBB263_26
LBB263_7:                               ##   in Loop: Header=BB263_4 Depth=1
	movq	-16(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movsbl	(%rax), %edx
	cmpl	$45, %edx
	jne	LBB263_10
## %bb.8:                               ##   in Loop: Header=BB263_4 Depth=1
	movq	-48(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB263_10
## %bb.9:                               ##   in Loop: Header=BB263_4 Depth=1
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
LBB263_10:                              ##   in Loop: Header=BB263_4 Depth=1
	movq	-48(%rbp), %rdi
	callq	_strlen30
	movl	%eax, -52(%rbp)
	cmpl	$2, -52(%rbp)
	jl	LBB263_13
## %bb.11:                              ##   in Loop: Header=BB263_4 Depth=1
	movq	-48(%rbp), %rdi
	movslq	-52(%rbp), %rdx
	leaq	L_.str.903(%rip), %rsi
	callq	_strncmp
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jne	LBB263_13
## %bb.12:                              ##   in Loop: Header=BB263_4 Depth=1
	movq	-8(%rbp), %rax
	movl	$1, 1632(%rax)
	jmp	LBB263_24
LBB263_13:                              ##   in Loop: Header=BB263_4 Depth=1
	cmpl	$2, -52(%rbp)
	jl	LBB263_22
## %bb.14:                              ##   in Loop: Header=BB263_4 Depth=1
	movq	-48(%rbp), %rdi
	movslq	-52(%rbp), %rdx
	leaq	L_.str.904(%rip), %rsi
	callq	_strncmp
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jne	LBB263_22
## %bb.15:                              ##   in Loop: Header=BB263_4 Depth=1
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jne	LBB263_17
## %bb.16:                              ##   in Loop: Header=BB263_4 Depth=1
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-48(%rbp), %rdx
	leaq	L_.str.905(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -24(%rbp)
	jmp	LBB263_21
LBB263_17:                              ##   in Loop: Header=BB263_4 Depth=1
	movq	-16(%rbp), %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -36(%rbp)
	movslq	%ecx, %rdx
	movq	(%rax,%rdx,8), %rdi
	callq	_integerValue
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	jl	LBB263_19
## %bb.18:                              ##   in Loop: Header=BB263_4 Depth=1
	cmpl	$100, -40(%rbp)
	jle	LBB263_20
LBB263_19:                              ##   in Loop: Header=BB263_4 Depth=1
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	leaq	L_.str.906(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -24(%rbp)
LBB263_20:                              ##   in Loop: Header=BB263_4 Depth=1
	jmp	LBB263_21
LBB263_21:                              ##   in Loop: Header=BB263_4 Depth=1
	jmp	LBB263_23
LBB263_22:                              ##   in Loop: Header=BB263_4 Depth=1
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-48(%rbp), %rdx
	leaq	L_.str.316(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -24(%rbp)
LBB263_23:                              ##   in Loop: Header=BB263_4 Depth=1
	jmp	LBB263_24
LBB263_24:                              ##   in Loop: Header=BB263_4 Depth=1
	jmp	LBB263_25
LBB263_25:                              ##   in Loop: Header=BB263_4 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	LBB263_4
LBB263_26:
	cmpl	$0, -24(%rbp)
	jne	LBB263_34
## %bb.27:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	leaq	-32(%rbp), %rsi
	callq	_sqlite3_expert_new
	movq	-8(%rbp), %rcx
	movq	%rax, 1624(%rcx)
	movq	-8(%rbp), %rax
	cmpq	$0, 1624(%rax)
	jne	LBB263_32
## %bb.28:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	cmpq	$0, -32(%rbp)
	movq	%rdi, -64(%rbp)         ## 8-byte Spill
	je	LBB263_30
## %bb.29:
	movq	-32(%rbp), %rax
	movq	%rax, -72(%rbp)         ## 8-byte Spill
	jmp	LBB263_31
LBB263_30:
	leaq	L_.str.140(%rip), %rax
	movq	%rax, -72(%rbp)         ## 8-byte Spill
	jmp	LBB263_31
LBB263_31:
	movq	-72(%rbp), %rax         ## 8-byte Reload
	movq	-64(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.907(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	movl	$1, -24(%rbp)
	jmp	LBB263_33
LBB263_32:
	movq	-8(%rbp), %rax
	movq	1624(%rax), %rdi
	movl	-40(%rbp), %edx
	movl	$1, %esi
	movb	$0, %al
	callq	_sqlite3_expert_config
LBB263_33:
	jmp	LBB263_34
LBB263_34:
	movq	-32(%rbp), %rdi
	callq	_sqlite3_free
	movl	-24(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function optionMatch
_optionMatch:                           ## @optionMatch
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	je	LBB264_2
## %bb.1:
	movl	$0, -4(%rbp)
	jmp	LBB264_5
LBB264_2:
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB264_4
## %bb.3:
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
LBB264_4:
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -4(%rbp)
LBB264_5:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function callback
_callback:                              ## @callback
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	_shell_callback
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function showHelp
_showHelp:                              ## @showHelp
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
	cmpq	$0, -24(%rbp)
	je	LBB266_5
## %bb.1:
	movq	-24(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$48, %ecx
	je	LBB266_5
## %bb.2:
	movq	-24(%rbp), %rdi
	leaq	L_.str.945(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB266_5
## %bb.3:
	movq	-24(%rbp), %rdi
	leaq	L_.str.946(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB266_5
## %bb.4:
	movq	-24(%rbp), %rdi
	leaq	L_.str.947(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB266_15
LBB266_5:
	cmpq	$0, -24(%rbp)
	jne	LBB266_7
## %bb.6:
	leaq	L_.str.27(%rip), %rax
	movq	%rax, -24(%rbp)
LBB266_7:
	movl	$0, -28(%rbp)
LBB266_8:                               ## =>This Inner Loop Header: Depth=1
	cmpl	$176, -28(%rbp)
	jge	LBB266_14
## %bb.9:                               ##   in Loop: Header=BB266_8 Depth=1
	movslq	-28(%rbp), %rax
	leaq	_azHelp(%rip), %rcx
	movq	(%rcx,%rax,8), %rax
	movsbl	(%rax), %edx
	cmpl	$46, %edx
	je	LBB266_11
## %bb.10:                              ##   in Loop: Header=BB266_8 Depth=1
	movq	-24(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$0, %ecx
	je	LBB266_12
LBB266_11:                              ##   in Loop: Header=BB266_8 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-28(%rbp), %rax
	leaq	_azHelp(%rip), %rcx
	movq	(%rcx,%rax,8), %rdx
	leaq	L_.str.219(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	-36(%rbp), %r8d
	addl	$1, %r8d
	movl	%r8d, -36(%rbp)
LBB266_12:                              ##   in Loop: Header=BB266_8 Depth=1
	jmp	LBB266_13
LBB266_13:                              ##   in Loop: Header=BB266_8 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB266_8
LBB266_14:
	jmp	LBB266_44
LBB266_15:
	movq	-24(%rbp), %rsi
	leaq	L_.str.948(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	_shell_check_oom
	movl	$0, -28(%rbp)
LBB266_16:                              ## =>This Inner Loop Header: Depth=1
	cmpl	$176, -28(%rbp)
	jge	LBB266_21
## %bb.17:                              ##   in Loop: Header=BB266_16 Depth=1
	movq	-48(%rbp), %rdi
	movslq	-28(%rbp), %rax
	leaq	_azHelp(%rip), %rcx
	movq	(%rcx,%rax,8), %rsi
	callq	_sqlite3_strglob
	cmpl	$0, %eax
	jne	LBB266_19
## %bb.18:                              ##   in Loop: Header=BB266_16 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-28(%rbp), %rax
	leaq	_azHelp(%rip), %rcx
	movq	(%rcx,%rax,8), %rdx
	leaq	L_.str.219(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	-28(%rbp), %r8d
	addl	$1, %r8d
	movl	%r8d, -32(%rbp)
	movl	-36(%rbp), %r8d
	addl	$1, %r8d
	movl	%r8d, -36(%rbp)
LBB266_19:                              ##   in Loop: Header=BB266_16 Depth=1
	jmp	LBB266_20
LBB266_20:                              ##   in Loop: Header=BB266_16 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB266_16
LBB266_21:
	movq	-48(%rbp), %rdi
	callq	_sqlite3_free
	cmpl	$0, -36(%rbp)
	je	LBB266_30
## %bb.22:
	cmpl	$1, -36(%rbp)
	jne	LBB266_29
## %bb.23:
	jmp	LBB266_24
LBB266_24:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$175, -32(%rbp)
	movb	%al, -49(%rbp)          ## 1-byte Spill
	jge	LBB266_26
## %bb.25:                              ##   in Loop: Header=BB266_24 Depth=1
	movslq	-32(%rbp), %rax
	leaq	_azHelp(%rip), %rcx
	movq	(%rcx,%rax,8), %rax
	movsbl	(%rax), %edx
	cmpl	$46, %edx
	setne	%sil
	movb	%sil, -49(%rbp)         ## 1-byte Spill
LBB266_26:                              ##   in Loop: Header=BB266_24 Depth=1
	movb	-49(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB266_27
	jmp	LBB266_28
LBB266_27:                              ##   in Loop: Header=BB266_24 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-32(%rbp), %rax
	leaq	_azHelp(%rip), %rcx
	movq	(%rcx,%rax,8), %rdx
	leaq	L_.str.219(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	-32(%rbp), %r8d
	addl	$1, %r8d
	movl	%r8d, -32(%rbp)
	jmp	LBB266_24
LBB266_28:
	jmp	LBB266_29
LBB266_29:
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	LBB266_45
LBB266_30:
	movq	-24(%rbp), %rsi
	leaq	L_.str.949(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	_shell_check_oom
	movl	$0, -28(%rbp)
LBB266_31:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB266_36 Depth 2
	cmpl	$176, -28(%rbp)
	jge	LBB266_43
## %bb.32:                              ##   in Loop: Header=BB266_31 Depth=1
	movslq	-28(%rbp), %rax
	leaq	_azHelp(%rip), %rcx
	movq	(%rcx,%rax,8), %rax
	movsbl	(%rax), %edx
	cmpl	$46, %edx
	jne	LBB266_34
## %bb.33:                              ##   in Loop: Header=BB266_31 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
LBB266_34:                              ##   in Loop: Header=BB266_31 Depth=1
	xorl	%edx, %edx
	movq	-48(%rbp), %rdi
	movslq	-28(%rbp), %rax
	leaq	_azHelp(%rip), %rcx
	movq	(%rcx,%rax,8), %rsi
	callq	_sqlite3_strlike
	cmpl	$0, %eax
	jne	LBB266_41
## %bb.35:                              ##   in Loop: Header=BB266_31 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-32(%rbp), %rax
	leaq	_azHelp(%rip), %rcx
	movq	(%rcx,%rax,8), %rdx
	leaq	L_.str.219(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB266_36:                              ##   Parent Loop BB266_31 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$175, -32(%rbp)
	movb	%al, -50(%rbp)          ## 1-byte Spill
	jge	LBB266_38
## %bb.37:                              ##   in Loop: Header=BB266_36 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	leaq	_azHelp(%rip), %rdx
	movq	(%rdx,%rcx,8), %rcx
	movsbl	(%rcx), %eax
	cmpl	$46, %eax
	setne	%sil
	movb	%sil, -50(%rbp)         ## 1-byte Spill
LBB266_38:                              ##   in Loop: Header=BB266_36 Depth=2
	movb	-50(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB266_39
	jmp	LBB266_40
LBB266_39:                              ##   in Loop: Header=BB266_36 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movslq	-32(%rbp), %rcx
	leaq	_azHelp(%rip), %rdx
	movq	(%rdx,%rcx,8), %rdx
	leaq	L_.str.219(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB266_36
LBB266_40:                              ##   in Loop: Header=BB266_31 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
LBB266_41:                              ##   in Loop: Header=BB266_31 Depth=1
	jmp	LBB266_42
LBB266_42:                              ##   in Loop: Header=BB266_31 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB266_31
LBB266_43:
	movq	-48(%rbp), %rdi
	callq	_sqlite3_free
LBB266_44:
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB266_45:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function import_cleanup
_import_cleanup:                        ## @import_cleanup
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	LBB267_3
## %bb.1:
	movq	-8(%rbp), %rax
	cmpq	$0, 16(%rax)
	je	LBB267_3
## %bb.2:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rdi
	callq	*%rax
	movq	-8(%rbp), %rcx
	movq	$0, 8(%rcx)
LBB267_3:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	_sqlite3_free
	movq	-8(%rbp), %rax
	movq	$0, 24(%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function ascii_read_one_field
_ascii_read_one_field:                  ## @ascii_read_one_field
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_fgetc
	movl	%eax, -20(%rbp)
	cmpl	$-1, -20(%rbp)
	je	LBB268_2
## %bb.1:
	movl	_seenInterrupt(%rip), %eax
	cmpl	$0, %eax
	je	LBB268_3
LBB268_2:
	movq	-16(%rbp), %rax
	movl	$-1, 56(%rax)
	movq	$0, -8(%rbp)
	jmp	LBB268_14
LBB268_3:
	jmp	LBB268_4
LBB268_4:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$-1, -20(%rbp)
	movb	%al, -29(%rbp)          ## 1-byte Spill
	je	LBB268_7
## %bb.5:                               ##   in Loop: Header=BB268_4 Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-20(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	movb	%al, -29(%rbp)          ## 1-byte Spill
	je	LBB268_7
## %bb.6:                               ##   in Loop: Header=BB268_4 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	setne	%cl
	movb	%cl, -29(%rbp)          ## 1-byte Spill
LBB268_7:                               ##   in Loop: Header=BB268_4 Depth=1
	movb	-29(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB268_8
	jmp	LBB268_9
LBB268_8:                               ##   in Loop: Header=BB268_4 Depth=1
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	_import_append_char
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_fgetc
	movl	%eax, -20(%rbp)
	jmp	LBB268_4
LBB268_9:
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	LBB268_11
## %bb.10:
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
LBB268_11:
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-16(%rbp), %rcx
	cmpq	$0, 24(%rcx)
	je	LBB268_13
## %bb.12:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	32(%rcx), %rcx
	movb	$0, (%rax,%rcx)
LBB268_13:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -8(%rbp)
LBB268_14:
	movq	-8(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function csv_read_one_field
_csv_read_one_field:                    ## @csv_read_one_field
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_fgetc
	movl	%eax, -20(%rbp)
	cmpl	$-1, -20(%rbp)
	je	LBB269_2
## %bb.1:
	movl	_seenInterrupt(%rip), %eax
	cmpl	$0, %eax
	je	LBB269_3
LBB269_2:
	movq	-16(%rbp), %rax
	movl	$-1, 56(%rax)
	movq	$0, -8(%rbp)
	jmp	LBB269_53
LBB269_3:
	cmpl	$34, -20(%rbp)
	jne	LBB269_31
## %bb.4:
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	movl	%ecx, -40(%rbp)
	movl	-20(%rbp), %ecx
	movl	%ecx, -44(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
LBB269_5:                               ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_fgetc
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	LBB269_7
## %bb.6:                               ##   in Loop: Header=BB269_5 Depth=1
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
LBB269_7:                               ##   in Loop: Header=BB269_5 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	LBB269_11
## %bb.8:                               ##   in Loop: Header=BB269_5 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	LBB269_10
## %bb.9:                               ##   in Loop: Header=BB269_5 Depth=1
	movl	$0, -32(%rbp)
	jmp	LBB269_5
LBB269_10:                              ##   in Loop: Header=BB269_5 Depth=1
	jmp	LBB269_11
LBB269_11:                              ##   in Loop: Header=BB269_5 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	LBB269_13
## %bb.12:                              ##   in Loop: Header=BB269_5 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	LBB269_20
LBB269_13:                              ##   in Loop: Header=BB269_5 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	LBB269_15
## %bb.14:                              ##   in Loop: Header=BB269_5 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	LBB269_20
LBB269_15:                              ##   in Loop: Header=BB269_5 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	LBB269_18
## %bb.16:                              ##   in Loop: Header=BB269_5 Depth=1
	cmpl	$13, -32(%rbp)
	jne	LBB269_18
## %bb.17:                              ##   in Loop: Header=BB269_5 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	LBB269_20
LBB269_18:                              ##   in Loop: Header=BB269_5 Depth=1
	cmpl	$-1, -20(%rbp)
	jne	LBB269_24
## %bb.19:                              ##   in Loop: Header=BB269_5 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	LBB269_24
LBB269_20:
	jmp	LBB269_21
LBB269_21:                              ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
## %bb.22:                              ##   in Loop: Header=BB269_21 Depth=1
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	32(%rcx), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	-44(%rbp), %edx
	jne	LBB269_21
## %bb.23:
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
	jmp	LBB269_30
LBB269_24:                              ##   in Loop: Header=BB269_5 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	LBB269_27
## %bb.25:                              ##   in Loop: Header=BB269_5 Depth=1
	cmpl	$13, -20(%rbp)
	je	LBB269_27
## %bb.26:                              ##   in Loop: Header=BB269_5 Depth=1
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	movl	-44(%rbp), %r8d
	leaq	L_.str.1120(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB269_27:                              ##   in Loop: Header=BB269_5 Depth=1
	cmpl	$-1, -20(%rbp)
	jne	LBB269_29
## %bb.28:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	(%rax), %rdx
	movl	-40(%rbp), %ecx
	movl	-44(%rbp), %r8d
	leaq	L_.str.1121(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 56(%rdx)
	jmp	LBB269_30
LBB269_29:                              ##   in Loop: Header=BB269_5 Depth=1
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	_import_append_char
	movl	-32(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	LBB269_5
LBB269_30:
	jmp	LBB269_50
LBB269_31:
	movl	-20(%rbp), %eax
	andl	$255, %eax
	cmpl	$239, %eax
	jne	LBB269_38
## %bb.32:
	movq	-16(%rbp), %rax
	cmpl	$0, 52(%rax)
	jne	LBB269_38
## %bb.33:
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	_import_append_char
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_fgetc
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	andl	$255, %eax
	cmpl	$187, %eax
	jne	LBB269_37
## %bb.34:
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	_import_append_char
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_fgetc
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	andl	$255, %eax
	cmpl	$191, %eax
	jne	LBB269_36
## %bb.35:
	movq	-16(%rbp), %rax
	movl	$1, 52(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-16(%rbp), %rdi
	callq	_csv_read_one_field
	movq	%rax, -8(%rbp)
	jmp	LBB269_53
LBB269_36:
	jmp	LBB269_37
LBB269_37:
	jmp	LBB269_38
LBB269_38:
	jmp	LBB269_39
LBB269_39:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$-1, -20(%rbp)
	movb	%al, -45(%rbp)          ## 1-byte Spill
	je	LBB269_42
## %bb.40:                              ##   in Loop: Header=BB269_39 Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-20(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	movb	%al, -45(%rbp)          ## 1-byte Spill
	je	LBB269_42
## %bb.41:                              ##   in Loop: Header=BB269_39 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	setne	%cl
	movb	%cl, -45(%rbp)          ## 1-byte Spill
LBB269_42:                              ##   in Loop: Header=BB269_39 Depth=1
	movb	-45(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB269_43
	jmp	LBB269_44
LBB269_43:                              ##   in Loop: Header=BB269_39 Depth=1
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	_import_append_char
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_fgetc
	movl	%eax, -20(%rbp)
	jmp	LBB269_39
LBB269_44:
	movl	-20(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	LBB269_49
## %bb.45:
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 32(%rax)
	jle	LBB269_48
## %bb.46:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	32(%rcx), %edx
	subl	$1, %edx
	movslq	%edx, %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$13, %edx
	jne	LBB269_48
## %bb.47:
	movq	-16(%rbp), %rax
	movl	32(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 32(%rax)
LBB269_48:
	jmp	LBB269_49
LBB269_49:
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 56(%rcx)
LBB269_50:
	movq	-16(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	LBB269_52
## %bb.51:
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	32(%rcx), %rcx
	movb	$0, (%rax,%rcx)
LBB269_52:
	movq	-16(%rbp), %rax
	movl	$1, 52(%rax)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -8(%rbp)
LBB269_53:
	movq	-8(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function output_c_string
_output_c_string:                       ## @output_c_string
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movl	$34, %edi
	callq	_fputc
LBB270_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movsbl	(%rax), %edx
	movl	%edx, -20(%rbp)
	cmpl	$0, %edx
	je	LBB270_21
## %bb.2:                               ##   in Loop: Header=BB270_1 Depth=1
	cmpl	$92, -20(%rbp)
	jne	LBB270_4
## %bb.3:                               ##   in Loop: Header=BB270_1 Depth=1
	movl	-20(%rbp), %edi
	movq	-8(%rbp), %rsi
	callq	_fputc
	movl	-20(%rbp), %edi
	movq	-8(%rbp), %rsi
	movl	%eax, -24(%rbp)         ## 4-byte Spill
	callq	_fputc
	jmp	LBB270_20
LBB270_4:                               ##   in Loop: Header=BB270_1 Depth=1
	cmpl	$34, -20(%rbp)
	jne	LBB270_6
## %bb.5:                               ##   in Loop: Header=BB270_1 Depth=1
	movq	-8(%rbp), %rsi
	movl	$92, %edi
	callq	_fputc
	movq	-8(%rbp), %rsi
	movl	$34, %edi
	movl	%eax, -28(%rbp)         ## 4-byte Spill
	callq	_fputc
	jmp	LBB270_19
LBB270_6:                               ##   in Loop: Header=BB270_1 Depth=1
	cmpl	$9, -20(%rbp)
	jne	LBB270_8
## %bb.7:                               ##   in Loop: Header=BB270_1 Depth=1
	movq	-8(%rbp), %rsi
	movl	$92, %edi
	callq	_fputc
	movq	-8(%rbp), %rsi
	movl	$116, %edi
	movl	%eax, -32(%rbp)         ## 4-byte Spill
	callq	_fputc
	jmp	LBB270_18
LBB270_8:                               ##   in Loop: Header=BB270_1 Depth=1
	cmpl	$10, -20(%rbp)
	jne	LBB270_10
## %bb.9:                               ##   in Loop: Header=BB270_1 Depth=1
	movq	-8(%rbp), %rsi
	movl	$92, %edi
	callq	_fputc
	movq	-8(%rbp), %rsi
	movl	$110, %edi
	movl	%eax, -36(%rbp)         ## 4-byte Spill
	callq	_fputc
	jmp	LBB270_17
LBB270_10:                              ##   in Loop: Header=BB270_1 Depth=1
	cmpl	$13, -20(%rbp)
	jne	LBB270_12
## %bb.11:                              ##   in Loop: Header=BB270_1 Depth=1
	movq	-8(%rbp), %rsi
	movl	$92, %edi
	callq	_fputc
	movq	-8(%rbp), %rsi
	movl	$114, %edi
	movl	%eax, -40(%rbp)         ## 4-byte Spill
	callq	_fputc
	jmp	LBB270_16
LBB270_12:                              ##   in Loop: Header=BB270_1 Depth=1
	movl	-20(%rbp), %eax
	andl	$255, %eax
	movl	%eax, %edi
	callq	_isprint
	cmpl	$0, %eax
	jne	LBB270_14
## %bb.13:                              ##   in Loop: Header=BB270_1 Depth=1
	movq	-8(%rbp), %rdi
	movl	-20(%rbp), %eax
	andl	$255, %eax
	leaq	L_.str.1122(%rip), %rsi
	movl	%eax, %edx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB270_15
LBB270_14:                              ##   in Loop: Header=BB270_1 Depth=1
	movl	-20(%rbp), %edi
	movq	-8(%rbp), %rsi
	callq	_fputc
LBB270_15:                              ##   in Loop: Header=BB270_1 Depth=1
	jmp	LBB270_16
LBB270_16:                              ##   in Loop: Header=BB270_1 Depth=1
	jmp	LBB270_17
LBB270_17:                              ##   in Loop: Header=BB270_1 Depth=1
	jmp	LBB270_18
LBB270_18:                              ##   in Loop: Header=BB270_1 Depth=1
	jmp	LBB270_19
LBB270_19:                              ##   in Loop: Header=BB270_1 Depth=1
	jmp	LBB270_20
LBB270_20:                              ##   in Loop: Header=BB270_1 Depth=1
	jmp	LBB270_1
LBB270_21:
	movq	-8(%rbp), %rsi
	movl	$34, %edi
	callq	_fputc
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function import_append_char
_import_append_char:                    ## @import_append_char
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	32(%rax), %ecx
	addl	$1, %ecx
	movq	-8(%rbp), %rax
	cmpl	36(%rax), %ecx
	jl	LBB271_2
## %bb.1:
	movq	-8(%rbp), %rax
	movl	36(%rax), %ecx
	addl	$100, %ecx
	movq	-8(%rbp), %rax
	addl	36(%rax), %ecx
	movl	%ecx, 36(%rax)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	movq	-8(%rbp), %rax
	movslq	36(%rax), %rsi
	callq	_sqlite3_realloc64
	movq	-8(%rbp), %rdx
	movq	%rax, 24(%rdx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	callq	_shell_check_oom
LBB271_2:
	movl	-12(%rbp), %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-8(%rbp), %rcx
	movq	24(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movl	32(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, 32(%rdx)
	movslq	%esi, %rdx
	movb	%al, (%rcx,%rdx)
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function zAutoColumn
_zAutoColumn:                           ## @zAutoColumn
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	$0, -48(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movslq	%ecx, %rdx
	cmpq	$0, %rdx
	je	LBB272_2
## %bb.1:
	leaq	L___func__.zAutoColumn(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.1130(%rip), %rcx
	movl	$19049, %edx            ## imm = 0x4A69
	callq	___assert_rtn
LBB272_2:
	jmp	LBB272_3
LBB272_3:
	cmpq	$0, -16(%rbp)
	je	LBB272_12
## %bb.4:
	movq	-24(%rbp), %rax
	cmpq	$0, (%rax)
	jne	LBB272_8
## %bb.5:
	movq	_zCOL_DB(%rip), %rdi
	movq	-24(%rbp), %rsi
	callq	_sqlite3_open
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	je	LBB272_7
## %bb.6:
	movq	$0, -8(%rbp)
	jmp	LBB272_35
LBB272_7:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-24(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.1123(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -72(%rbp)         ## 8-byte Spill
	movq	-72(%rbp), %r8          ## 8-byte Reload
	callq	_sqlite3_exec
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %edi
	callq	_rc_err_oom_die
LBB272_8:
	movq	-24(%rbp), %rax
	cmpq	$0, (%rax)
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movslq	%edx, %rax
	cmpq	$0, %rax
	je	LBB272_10
## %bb.9:
	leaq	L___func__.zAutoColumn(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.1131(%rip), %rcx
	movl	$19062, %edx            ## imm = 0x4A76
	callq	___assert_rtn
LBB272_10:
	jmp	LBB272_11
LBB272_11:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.1124(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-48(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %edi
	callq	_rc_err_oom_die
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movl	$1, %esi
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_bind_text
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %edi
	callq	_rc_err_oom_die
	movq	-48(%rbp), %rdi
	callq	_sqlite3_step
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %edi
	callq	_rc_err_oom_die
	movq	-48(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	$0, -8(%rbp)
	jmp	LBB272_35
LBB272_12:
	movq	-24(%rbp), %rax
	cmpq	$0, (%rax)
	jne	LBB272_14
## %bb.13:
	movq	$0, -8(%rbp)
	jmp	LBB272_35
LBB272_14:
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	leaq	L_.str.1125(%rip), %rsi
	callq	_db_int
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	LBB272_19
## %bb.15:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-24(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.1126(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -80(%rbp)         ## 8-byte Spill
	movq	-80(%rbp), %r8          ## 8-byte Reload
	callq	_sqlite3_exec
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %edi
	callq	_rc_err_oom_die
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.1127(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-48(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %edi
	callq	_rc_err_oom_die
	movq	-48(%rbp), %rdi
	movl	$1, %esi
	movl	$2, %edx
	callq	_sqlite3_bind_int
	movq	-48(%rbp), %rdi
	movl	%eax, -84(%rbp)         ## 4-byte Spill
	callq	_sqlite3_step
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rdi
	callq	_sqlite3_finalize
	cmpl	$101, -36(%rbp)
	sete	%r9b
	xorb	$-1, %r9b
	andb	$1, %r9b
	movzbl	%r9b, %edx
	movslq	%edx, %rcx
	cmpq	$0, %rcx
	je	LBB272_17
## %bb.16:
	leaq	L___func__.zAutoColumn(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.1132(%rip), %rcx
	movl	$19094, %edx            ## imm = 0x4A96
	callq	___assert_rtn
LBB272_17:
	jmp	LBB272_18
LBB272_18:
	jmp	LBB272_19
LBB272_19:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	leaq	L_.str.1125(%rip), %rsi
	callq	_db_int
	cmpl	$0, %eax
	sete	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movslq	%eax, %rdx
	cmpq	$0, %rdx
	je	LBB272_21
## %bb.20:
	leaq	L___func__.zAutoColumn(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.1133(%rip), %rcx
	movl	$19096, %edx            ## imm = 0x4A98
	callq	___assert_rtn
LBB272_21:
	jmp	LBB272_22
LBB272_22:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.1128(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-48(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %edi
	callq	_rc_err_oom_die
	movq	-48(%rbp), %rdi
	callq	_sqlite3_step
	movl	%eax, -36(%rbp)
	cmpl	$100, -36(%rbp)
	jne	LBB272_24
## %bb.23:
	xorl	%esi, %esi
	movq	-48(%rbp), %rdi
	callq	_sqlite3_column_text
	leaq	L_.str.79(%rip), %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -56(%rbp)
	jmp	LBB272_25
LBB272_24:
	movq	$0, -56(%rbp)
LBB272_25:
	cmpq	$0, -32(%rbp)
	je	LBB272_34
## %bb.26:
	cmpl	$0, -60(%rbp)
	jne	LBB272_28
## %bb.27:
	movq	-32(%rbp), %rax
	movq	$0, (%rax)
	jmp	LBB272_33
LBB272_28:
	movq	-48(%rbp), %rdi
	callq	_sqlite3_finalize
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-24(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.1129(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-48(%rbp), %rcx
	movl	%eax, -88(%rbp)         ## 4-byte Spill
	callq	_sqlite3_prepare_v2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jne	LBB272_31
## %bb.29:
	movq	-48(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	jne	LBB272_31
## %bb.30:
	xorl	%esi, %esi
	movq	-48(%rbp), %rdi
	callq	_sqlite3_column_text
	leaq	L_.str.79(%rip), %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	LBB272_32
LBB272_31:
	movq	-32(%rbp), %rax
	movq	$0, (%rax)
LBB272_32:
	jmp	LBB272_33
LBB272_33:
	jmp	LBB272_34
LBB272_34:
	movq	-48(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rdi
	movl	%eax, -92(%rbp)         ## 4-byte Spill
	callq	_sqlite3_close
	movq	-24(%rbp), %rcx
	movq	$0, (%rcx)
	movq	-56(%rbp), %rcx
	movq	%rcx, -8(%rbp)
LBB272_35:
	movq	-8(%rbp), %rax
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function lintDotCommand
_lintDotCommand:                        ## @lintDotCommand
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	cmpl	$2, -28(%rbp)
	jl	LBB273_2
## %bb.1:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_strlen30
	movl	%eax, -36(%rbp)         ## 4-byte Spill
	jmp	LBB273_3
LBB273_2:
	xorl	%eax, %eax
	movl	%eax, -36(%rbp)         ## 4-byte Spill
	jmp	LBB273_3
LBB273_3:
	movl	-36(%rbp), %eax         ## 4-byte Reload
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jl	LBB273_5
## %bb.4:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	movl	-32(%rbp), %edx
	leaq	L_.str.1135(%rip), %rsi
	callq	_sqlite3_strnicmp
	cmpl	$0, %eax
	je	LBB273_6
LBB273_5:
	jmp	LBB273_7
LBB273_6:
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	callq	_lintFkeyIndexes
	movl	%eax, -4(%rbp)
	jmp	LBB273_8
LBB273_7:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rax
	movq	(%rax), %rdx
	leaq	L_.str.1136(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	___stderrp@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.1137(%rip), %rsi
	movl	%eax, -40(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movq	___stderrp@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.1138(%rip), %rsi
	movl	%eax, -44(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movl	$1, -4(%rbp)
LBB273_8:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function output_file_close
_output_file_close:                     ## @output_file_close
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	LBB274_4
## %bb.1:
	movq	___stdoutp@GOTPCREL(%rip), %rax
	movq	-8(%rbp), %rcx
	cmpq	(%rax), %rcx
	je	LBB274_4
## %bb.2:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	-8(%rbp), %rcx
	cmpq	(%rax), %rcx
	je	LBB274_4
## %bb.3:
	movq	-8(%rbp), %rdi
	callq	_fclose
LBB274_4:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function output_file_open
_output_file_open:                      ## @output_file_open
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	leaq	L_.str.565(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB275_2
## %bb.1:
	movq	___stdoutp@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	LBB275_11
LBB275_2:
	movq	-8(%rbp), %rdi
	leaq	L_.str.1150(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB275_4
## %bb.3:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	LBB275_10
LBB275_4:
	movq	-8(%rbp), %rdi
	leaq	L_.str.373(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB275_6
## %bb.5:
	movq	$0, -24(%rbp)
	jmp	LBB275_9
LBB275_6:
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %eax
	cmpl	$0, %eax
	leaq	L_.str.280(%rip), %rcx
	leaq	L_.str.115(%rip), %rdx
	cmovneq	%rcx, %rdx
	movq	%rdx, %rsi
	callq	_fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	LBB275_8
## %bb.7:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rdx
	leaq	L_.str.319(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB275_8:
	jmp	LBB275_9
LBB275_9:
	jmp	LBB275_10
LBB275_10:
	jmp	LBB275_11
LBB275_11:
	movq	-24(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function outputModePush
_outputModePush:                        ## @outputModePush
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	$-1, %rcx
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	84(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 88(%rax)
	movq	-8(%rbp), %rax
	movl	124(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 128(%rax)
	movq	-8(%rbp), %rax
	addq	$230, %rax
	movq	-8(%rbp), %rsi
	addq	$190, %rsi
	movq	%rax, %rdi
	movl	$20, %edx
	callq	___memcpy_chk
	movq	$-1, %rcx
	movq	-8(%rbp), %rdx
	addq	$250, %rdx
	movq	-8(%rbp), %rsi
	addq	$210, %rsi
	movq	%rdx, %rdi
	movl	$20, %edx
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	callq	___memcpy_chk
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function newTempFile
_newTempFile:                           ## @newTempFile
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	_clearTempFile
	movq	-8(%rbp), %rax
	movq	152(%rax), %rdi
	callq	_sqlite3_free
	movq	-8(%rbp), %rax
	movq	$0, 152(%rax)
	movq	-8(%rbp), %rax
	cmpq	$0, (%rax)
	je	LBB277_2
## %bb.1:
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	-8(%rbp), %rcx
	addq	$152, %rcx
	movl	$16, %edx
	callq	_sqlite3_file_control
LBB277_2:
	movq	-8(%rbp), %rax
	cmpq	$0, 152(%rax)
	jne	LBB277_8
## %bb.3:
	leaq	-32(%rbp), %rax
	movl	$8, %edi
	movq	%rax, %rsi
	callq	_sqlite3_randomness
	leaq	L_.str.1154(%rip), %rdi
	callq	_getenv
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	LBB277_5
## %bb.4:
	leaq	L_.str.1155(%rip), %rdi
	callq	_getenv
	movq	%rax, -24(%rbp)
LBB277_5:
	cmpq	$0, -24(%rbp)
	jne	LBB277_7
## %bb.6:
	leaq	L_.str.1156(%rip), %rax
	movq	%rax, -24(%rbp)
LBB277_7:
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %rcx
	leaq	L_.str.1157(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-8(%rbp), %rcx
	movq	%rax, 152(%rcx)
	jmp	LBB277_9
LBB277_8:
	movq	-8(%rbp), %rax
	movq	152(%rax), %rsi
	movq	-16(%rbp), %rdx
	leaq	L_.str.1158(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-8(%rbp), %rcx
	movq	%rax, 152(%rcx)
LBB277_9:
	movq	-8(%rbp), %rax
	movq	152(%rax), %rdi
	callq	_shell_check_oom
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function bind_table_init
_bind_table_init:                       ## @bind_table_init
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movl	$1010, %esi             ## imm = 0x3F2
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-16(%rbp), %rcx
	movb	$0, %al
	callq	_sqlite3_db_config
	xorl	%edx, %edx
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rdi
	movl	$1010, %esi             ## imm = 0x3F2
	movl	%edx, -20(%rbp)         ## 4-byte Spill
	movl	-20(%rbp), %ecx         ## 4-byte Reload
	movl	%eax, -24(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_db_config
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rdi
	movl	$1011, %esi             ## imm = 0x3F3
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-12(%rbp), %rcx
	movl	%eax, -28(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_db_config
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rdi
	movl	$1011, %esi             ## imm = 0x3F3
	movl	$1, %edx
	movl	%eax, -32(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_db_config
	xorl	%ecx, %ecx
	movl	%ecx, %edi
	movq	-8(%rbp), %r8
	movq	(%r8), %r8
	movq	%rdi, -40(%rbp)         ## 8-byte Spill
	movq	%r8, %rdi
	leaq	L_.str.1159(%rip), %rsi
	movq	-40(%rbp), %rdx         ## 8-byte Reload
	movq	-40(%rbp), %rcx         ## 8-byte Reload
	movq	-40(%rbp), %r8          ## 8-byte Reload
	movl	%eax, -44(%rbp)         ## 4-byte Spill
	callq	_sqlite3_exec
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdi
	movl	-12(%rbp), %edx
	movl	$1011, %esi             ## imm = 0x3F3
	movl	%eax, -48(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_db_config
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rdi
	movl	-16(%rbp), %edx
	movl	$1010, %esi             ## imm = 0x3F2
	movl	%eax, -52(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_db_config
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function progress_handler
_progress_handler:                      ## @progress_handler
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	112(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 112(%rax)
	movq	-24(%rbp), %rax
	movl	112(%rax), %ecx
	movq	-24(%rbp), %rax
	cmpl	116(%rax), %ecx
	jb	LBB279_7
## %bb.1:
	movq	-24(%rbp), %rax
	cmpl	$0, 116(%rax)
	jbe	LBB279_7
## %bb.2:
	movq	-24(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-24(%rbp), %rax
	movl	112(%rax), %edx
	leaq	L_.str.1160(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-24(%rbp), %rcx
	movl	120(%rcx), %edx
	andl	$2, %edx
	cmpl	$0, %edx
	je	LBB279_4
## %bb.3:
	movq	-24(%rbp), %rax
	movl	$0, 112(%rax)
LBB279_4:
	movq	-24(%rbp), %rax
	movl	120(%rax), %ecx
	andl	$4, %ecx
	cmpl	$0, %ecx
	je	LBB279_6
## %bb.5:
	movq	-24(%rbp), %rax
	movl	$0, 116(%rax)
LBB279_6:
	movl	$1, -4(%rbp)
	jmp	LBB279_10
LBB279_7:
	movq	-24(%rbp), %rax
	movl	120(%rax), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	jne	LBB279_9
## %bb.8:
	movq	-24(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-24(%rbp), %rax
	movl	112(%rax), %edx
	leaq	L_.str.1161(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB279_9:
	movl	$0, -4(%rbp)
LBB279_10:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function openChrSource
_openChrSource:                         ## @openChrSource
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	xorl	%esi, %esi
	movq	%rdi, -16(%rbp)
	leaq	-160(%rbp), %rax
	movq	%rax, %rcx
	movq	%rcx, %rdi
	movl	$144, %edx
	movq	%rax, -176(%rbp)        ## 8-byte Spill
	callq	_memset
	movq	-16(%rbp), %rdi
	movq	-176(%rbp), %rsi        ## 8-byte Reload
	callq	_stat$INODE64
	movl	%eax, -164(%rbp)
	cmpl	$0, -164(%rbp)
	je	LBB280_2
## %bb.1:
	movq	$0, -8(%rbp)
	jmp	LBB280_7
LBB280_2:
	movzwl	-156(%rbp), %eax
	andl	$61440, %eax            ## imm = 0xF000
	cmpl	$32768, %eax            ## imm = 0x8000
	je	LBB280_5
## %bb.3:
	movzwl	-156(%rbp), %eax
	andl	$61440, %eax            ## imm = 0xF000
	cmpl	$4096, %eax             ## imm = 0x1000
	je	LBB280_5
## %bb.4:
	movzwl	-156(%rbp), %eax
	andl	$61440, %eax            ## imm = 0xF000
	cmpl	$8192, %eax             ## imm = 0x2000
	jne	LBB280_6
LBB280_5:
	movq	-16(%rbp), %rdi
	leaq	L_.str.28(%rip), %rsi
	callq	_fopen
	movq	%rax, -8(%rbp)
	jmp	LBB280_7
LBB280_6:
	movq	$0, -8(%rbp)
LBB280_7:
	movq	-8(%rbp), %rax
	addq	$176, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function createSelftestTable
_createSelftestTable:                   ## @createSelftestTable
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rdi, -8(%rbp)
	movq	$0, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.1162(%rip), %rsi
	movq	%rcx, %rdx
	leaq	-16(%rbp), %r8
	callq	_sqlite3_exec
	cmpq	$0, -16(%rbp)
	je	LBB281_2
## %bb.1:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rdx
	leaq	L_.str.1163(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-16(%rbp), %rdi
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	callq	_sqlite3_free
LBB281_2:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.1164(%rip), %rsi
	movq	%rcx, %rdx
	movq	%rcx, -32(%rbp)         ## 8-byte Spill
	movq	-32(%rbp), %r8          ## 8-byte Reload
	callq	_sqlite3_exec
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function captureOutputCallback
_captureOutputCallback:                 ## @captureOutputCallback
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
	cmpq	$0, -32(%rbp)
	jne	LBB282_2
## %bb.1:
	movl	$0, -4(%rbp)
	jmp	LBB282_13
LBB282_2:
	movq	-48(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	LBB282_4
## %bb.3:
	xorl	%edx, %edx
	movq	-48(%rbp), %rdi
	leaq	L_.str.222(%rip), %rsi
	callq	_appendText
LBB282_4:
	movl	$0, -52(%rbp)
LBB282_5:                               ## =>This Inner Loop Header: Depth=1
	movl	-52(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	LBB282_12
## %bb.6:                               ##   in Loop: Header=BB282_5 Depth=1
	cmpl	$0, -52(%rbp)
	je	LBB282_8
## %bb.7:                               ##   in Loop: Header=BB282_5 Depth=1
	xorl	%edx, %edx
	movq	-48(%rbp), %rdi
	leaq	L_.str.65(%rip), %rsi
	callq	_appendText
LBB282_8:                               ##   in Loop: Header=BB282_5 Depth=1
	movq	-32(%rbp), %rax
	movslq	-52(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	LBB282_10
## %bb.9:                               ##   in Loop: Header=BB282_5 Depth=1
	xorl	%edx, %edx
	movq	-48(%rbp), %rdi
	movq	-32(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	_appendText
LBB282_10:                              ##   in Loop: Header=BB282_5 Depth=1
	jmp	LBB282_11
LBB282_11:                              ##   in Loop: Header=BB282_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	LBB282_5
LBB282_12:
	movl	$0, -4(%rbp)
LBB282_13:
	movl	-4(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function display_stats
_display_stats:                         ## @display_stats
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$368, %rsp              ## imm = 0x170
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -128(%rbp)
	movq	%rsi, -136(%rbp)
	movl	%edx, -140(%rbp)
	cmpq	$0, -136(%rbp)
	je	LBB283_2
## %bb.1:
	movq	-136(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	LBB283_3
LBB283_2:
	movl	$0, -116(%rbp)
	jmp	LBB283_26
LBB283_3:
	movq	-136(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-136(%rbp), %rax
	cmpq	$0, 1336(%rax)
	je	LBB283_10
## %bb.4:
	movq	-136(%rbp), %rax
	cmpl	$2, 28(%rax)
	jne	LBB283_10
## %bb.5:
	movq	-136(%rbp), %rax
	movq	1336(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rdi
	callq	_sqlite3_column_count
	movl	%eax, -164(%rbp)
	movq	-160(%rbp), %rdi
	movl	-164(%rbp), %ecx
	leaq	L_.str.1165(%rip), %rsi
	leaq	L_.str.1166(%rip), %rdx
	movb	$0, %al
	callq	_fprintf
	movl	$0, -168(%rbp)
LBB283_6:                               ## =>This Inner Loop Header: Depth=1
	movl	-168(%rbp), %eax
	cmpl	-164(%rbp), %eax
	jge	LBB283_9
## %bb.7:                               ##   in Loop: Header=BB283_6 Depth=1
	leaq	-112(%rbp), %rsi
	movl	-168(%rbp), %ecx
	movl	$100, %edi
	leaq	L_.str.1167(%rip), %rdx
	leaq	-172(%rbp), %r8
	movb	$0, %al
	callq	_sqlite3_snprintf
	leaq	-112(%rbp), %rdx
	movq	-160(%rbp), %rdi
	movq	-184(%rbp), %rsi
	movl	-168(%rbp), %ecx
	movq	%rdi, -200(%rbp)        ## 8-byte Spill
	movq	%rsi, %rdi
	movl	%ecx, %esi
	movq	%rax, -208(%rbp)        ## 8-byte Spill
	movq	%rdx, -216(%rbp)        ## 8-byte Spill
	callq	_sqlite3_column_name
	movq	-200(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.1168(%rip), %rsi
	movq	-216(%rbp), %rdx        ## 8-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
	leaq	-112(%rbp), %rcx
	movslq	-172(%rbp), %rdx
	addq	%rdx, %rcx
	movl	$30, %edi
	movq	%rcx, %rsi
	leaq	L_.str.1169(%rip), %rdx
	movl	%eax, -220(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_snprintf
	leaq	-112(%rbp), %rdx
	movq	-160(%rbp), %rdi
	movq	-184(%rbp), %rcx
	movl	-168(%rbp), %esi
	movq	%rdi, -232(%rbp)        ## 8-byte Spill
	movq	%rcx, %rdi
	movq	%rax, -240(%rbp)        ## 8-byte Spill
	movq	%rdx, -248(%rbp)        ## 8-byte Spill
	callq	_sqlite3_column_decltype
	movq	-232(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.1168(%rip), %rsi
	movq	-248(%rbp), %rdx        ## 8-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
## %bb.8:                               ##   in Loop: Header=BB283_6 Depth=1
	movl	-168(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -168(%rbp)
	jmp	LBB283_6
LBB283_9:
	jmp	LBB283_10
LBB283_10:
	movq	-136(%rbp), %rax
	cmpl	$3, 28(%rax)
	jne	LBB283_14
## %bb.11:
	movq	-136(%rbp), %rax
	cmpq	$0, 1336(%rax)
	je	LBB283_13
## %bb.12:
	movq	-136(%rbp), %rax
	movq	1336(%rax), %rdi
	movl	-140(%rbp), %edx
	movl	$4, %esi
	callq	_sqlite3_stmt_status
	movl	%eax, -144(%rbp)
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1170(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB283_13:
	movl	$0, -116(%rbp)
	jmp	LBB283_26
LBB283_14:
	xorl	%ecx, %ecx
	movq	-136(%rbp), %rdi
	movl	-140(%rbp), %r8d
	leaq	L_.str.1171(%rip), %rsi
	leaq	L_.str.1172(%rip), %rdx
	callq	_displayStatLine
	movq	-136(%rbp), %rdi
	movl	-140(%rbp), %r8d
	leaq	L_.str.1173(%rip), %rsi
	leaq	L_.str.1174(%rip), %rdx
	movl	$9, %ecx
	callq	_displayStatLine
	movq	-136(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	LBB283_16
## %bb.15:
	movq	-136(%rbp), %rdi
	movl	-140(%rbp), %r8d
	leaq	L_.str.1175(%rip), %rsi
	leaq	L_.str.1176(%rip), %rdx
	movl	$1, %ecx
	callq	_displayStatLine
LBB283_16:
	movq	-136(%rbp), %rdi
	movl	-140(%rbp), %r8d
	leaq	L_.str.1177(%rip), %rsi
	leaq	L_.str.1172(%rip), %rdx
	movl	$2, %ecx
	callq	_displayStatLine
	movq	-136(%rbp), %rdi
	movl	-140(%rbp), %r8d
	leaq	L_.str.1178(%rip), %rsi
	leaq	L_.str.1179(%rip), %rdx
	movl	$5, %ecx
	callq	_displayStatLine
	movq	-136(%rbp), %rdi
	movl	-140(%rbp), %r8d
	leaq	L_.str.1180(%rip), %rsi
	leaq	L_.str.1179(%rip), %rdx
	movl	$7, %ecx
	callq	_displayStatLine
	cmpq	$0, -128(%rbp)
	je	LBB283_20
## %bb.17:
	movq	-136(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	LBB283_19
## %bb.18:
	xorl	%esi, %esi
	movl	$-1, -144(%rbp)
	movl	$-1, -148(%rbp)
	movq	-128(%rbp), %rdi
	movl	-140(%rbp), %r8d
	leaq	-144(%rbp), %rdx
	leaq	-148(%rbp), %rcx
	callq	_sqlite3_db_status
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	movl	-148(%rbp), %ecx
	leaq	L_.str.1181(%rip), %rsi
	movl	%eax, -252(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movq	-128(%rbp), %rdi
	movl	-140(%rbp), %r8d
	movl	$4, %esi
	leaq	-144(%rbp), %rdx
	leaq	-148(%rbp), %rcx
	movl	%eax, -256(%rbp)        ## 4-byte Spill
	callq	_sqlite3_db_status
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-148(%rbp), %edx
	leaq	L_.str.1182(%rip), %rsi
	movl	%eax, -260(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movq	-128(%rbp), %rdi
	movl	-140(%rbp), %r8d
	movl	$5, %esi
	leaq	-144(%rbp), %rdx
	leaq	-148(%rbp), %rcx
	movl	%eax, -264(%rbp)        ## 4-byte Spill
	callq	_sqlite3_db_status
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-148(%rbp), %edx
	leaq	L_.str.1183(%rip), %rsi
	movl	%eax, -268(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movq	-128(%rbp), %rdi
	movl	-140(%rbp), %r8d
	movl	$6, %esi
	leaq	-144(%rbp), %rdx
	leaq	-148(%rbp), %rcx
	movl	%eax, -272(%rbp)        ## 4-byte Spill
	callq	_sqlite3_db_status
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-148(%rbp), %edx
	leaq	L_.str.1184(%rip), %rsi
	movl	%eax, -276(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
LBB283_19:
	movl	$-1, -144(%rbp)
	movl	$-1, -148(%rbp)
	movq	-128(%rbp), %rdi
	movl	-140(%rbp), %r8d
	movl	$1, %esi
	leaq	-144(%rbp), %rdx
	leaq	-148(%rbp), %rcx
	callq	_sqlite3_db_status
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1185(%rip), %rsi
	movl	%eax, -280(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movl	$-1, -144(%rbp)
	movl	$-1, -148(%rbp)
	movq	-128(%rbp), %rdi
	movl	$7, %esi
	leaq	-144(%rbp), %rdx
	leaq	-148(%rbp), %rcx
	movl	$1, %r8d
	movl	%eax, -284(%rbp)        ## 4-byte Spill
	callq	_sqlite3_db_status
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1186(%rip), %rsi
	movl	%eax, -288(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movl	$-1, -144(%rbp)
	movl	$-1, -148(%rbp)
	movq	-128(%rbp), %rdi
	movl	$8, %esi
	leaq	-144(%rbp), %rdx
	leaq	-148(%rbp), %rcx
	movl	$1, %r8d
	movl	%eax, -292(%rbp)        ## 4-byte Spill
	callq	_sqlite3_db_status
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1187(%rip), %rsi
	movl	%eax, -296(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movl	$-1, -144(%rbp)
	movl	$-1, -148(%rbp)
	movq	-128(%rbp), %rdi
	movl	$9, %esi
	leaq	-144(%rbp), %rdx
	leaq	-148(%rbp), %rcx
	movl	$1, %r8d
	movl	%eax, -300(%rbp)        ## 4-byte Spill
	callq	_sqlite3_db_status
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1188(%rip), %rsi
	movl	%eax, -304(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movl	$-1, -144(%rbp)
	movl	$-1, -148(%rbp)
	movq	-128(%rbp), %rdi
	movl	$12, %esi
	leaq	-144(%rbp), %rdx
	leaq	-148(%rbp), %rcx
	movl	$1, %r8d
	movl	%eax, -308(%rbp)        ## 4-byte Spill
	callq	_sqlite3_db_status
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1189(%rip), %rsi
	movl	%eax, -312(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movl	$-1, -144(%rbp)
	movl	$-1, -148(%rbp)
	movq	-128(%rbp), %rdi
	movl	-140(%rbp), %r8d
	movl	$2, %esi
	leaq	-144(%rbp), %rdx
	leaq	-148(%rbp), %rcx
	movl	%eax, -316(%rbp)        ## 4-byte Spill
	callq	_sqlite3_db_status
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1190(%rip), %rsi
	movl	%eax, -320(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
	movl	$-1, -144(%rbp)
	movl	$-1, -148(%rbp)
	movq	-128(%rbp), %rdi
	movl	-140(%rbp), %r8d
	movl	$3, %esi
	leaq	-144(%rbp), %rdx
	leaq	-148(%rbp), %rcx
	movl	%eax, -324(%rbp)        ## 4-byte Spill
	callq	_sqlite3_db_status
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1191(%rip), %rsi
	movl	%eax, -328(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_fprintf
LBB283_20:
	movq	-136(%rbp), %rax
	cmpq	$0, 1336(%rax)
	je	LBB283_25
## %bb.21:
	movq	-136(%rbp), %rax
	movq	1336(%rax), %rdi
	movl	-140(%rbp), %edx
	movl	$1, %esi
	callq	_sqlite3_stmt_status
	movl	%eax, -144(%rbp)
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1192(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-136(%rbp), %rcx
	movq	1336(%rcx), %rdi
	movl	-140(%rbp), %edx
	movl	$2, %esi
	movl	%eax, -332(%rbp)        ## 4-byte Spill
	callq	_sqlite3_stmt_status
	movl	%eax, -144(%rbp)
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1193(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-136(%rbp), %rcx
	movq	1336(%rcx), %rdi
	movl	-140(%rbp), %edx
	movl	$3, %esi
	movl	%eax, -336(%rbp)        ## 4-byte Spill
	callq	_sqlite3_stmt_status
	movl	%eax, -144(%rbp)
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1194(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-136(%rbp), %rcx
	movq	1336(%rcx), %rdi
	movl	-140(%rbp), %edx
	movl	$8, %esi
	movl	%eax, -340(%rbp)        ## 4-byte Spill
	callq	_sqlite3_stmt_status
	movl	%eax, -188(%rbp)
	movq	-136(%rbp), %rcx
	movq	1336(%rcx), %rdi
	movl	-140(%rbp), %edx
	movl	$7, %esi
	callq	_sqlite3_stmt_status
	movl	%eax, -192(%rbp)
	cmpl	$0, -188(%rbp)
	jne	LBB283_23
## %bb.22:
	cmpl	$0, -192(%rbp)
	je	LBB283_24
LBB283_23:
	movq	-136(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-188(%rbp), %edx
	movl	-188(%rbp), %ecx
	addl	-192(%rbp), %ecx
	leaq	L_.str.1195(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB283_24:
	movq	-136(%rbp), %rax
	movq	1336(%rax), %rdi
	movl	-140(%rbp), %edx
	movl	$4, %esi
	callq	_sqlite3_stmt_status
	movl	%eax, -144(%rbp)
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1196(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-136(%rbp), %rcx
	movq	1336(%rcx), %rdi
	movl	-140(%rbp), %edx
	movl	$5, %esi
	movl	%eax, -344(%rbp)        ## 4-byte Spill
	callq	_sqlite3_stmt_status
	movl	%eax, -144(%rbp)
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1197(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-136(%rbp), %rcx
	movq	1336(%rcx), %rdi
	movl	-140(%rbp), %edx
	movl	$6, %esi
	movl	%eax, -348(%rbp)        ## 4-byte Spill
	callq	_sqlite3_stmt_status
	movl	%eax, -144(%rbp)
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1198(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-136(%rbp), %rcx
	movq	1336(%rcx), %rdi
	movl	-140(%rbp), %edx
	movl	$99, %esi
	movl	%eax, -352(%rbp)        ## 4-byte Spill
	callq	_sqlite3_stmt_status
	movl	%eax, -144(%rbp)
	movq	-136(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-144(%rbp), %edx
	leaq	L_.str.1199(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB283_25:
	movl	$0, -116(%rbp)
LBB283_26:
	movl	-116(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movl	%eax, -356(%rbp)        ## 4-byte Spill
	jne	LBB283_28
## %bb.27:
	movl	-356(%rbp), %eax        ## 4-byte Reload
	addq	$368, %rsp              ## imm = 0x170
	popq	%rbp
	retq
LBB283_28:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shellDatabaseError
_shellDatabaseError:                    ## @shellDatabaseError
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	_sqlite3_errmsg
	movq	___stderrp@GOTPCREL(%rip), %rcx
	movq	%rax, -16(%rbp)
	movq	(%rcx), %rdi
	movq	-16(%rbp), %rdx
	leaq	L_.str.92(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, %r8d
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	movl	%r8d, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function sql_trace_callback
_sql_trace_callback:                    ## @sql_trace_callback
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	cmpq	$0, 72(%rax)
	jne	LBB285_2
## %bb.1:
	movl	$0, -4(%rbp)
	jmp	LBB285_22
LBB285_2:
	cmpl	$8, -8(%rbp)
	jne	LBB285_4
## %bb.3:
	movq	-40(%rbp), %rax
	movq	72(%rax), %rdi
	leaq	L_.str.1200(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$0, -4(%rbp)
	jmp	LBB285_22
LBB285_4:
	cmpl	$4, -8(%rbp)
	je	LBB285_7
## %bb.5:
	movq	-32(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB285_7
## %bb.6:
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	LBB285_11
LBB285_7:
	movq	-24(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rax
	movb	16(%rax), %cl
	subb	$1, %cl
	jne	LBB285_9
	jmp	LBB285_8
LBB285_8:
	movq	-48(%rbp), %rdi
	callq	_sqlite3_expanded_sql
	movq	%rax, -56(%rbp)
	jmp	LBB285_10
LBB285_9:
	movq	-48(%rbp), %rdi
	callq	_sqlite3_sql
	movq	%rax, -56(%rbp)
LBB285_10:
	jmp	LBB285_11
LBB285_11:
	cmpq	$0, -56(%rbp)
	jne	LBB285_13
## %bb.12:
	movl	$0, -4(%rbp)
	jmp	LBB285_22
LBB285_13:
	movq	-56(%rbp), %rdi
	callq	_strlen30
	movl	%eax, -60(%rbp)
LBB285_14:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -60(%rbp)
	movb	%al, -73(%rbp)          ## 1-byte Spill
	jle	LBB285_16
## %bb.15:                              ##   in Loop: Header=BB285_14 Depth=1
	movq	-56(%rbp), %rax
	movl	-60(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$59, %ecx
	sete	%sil
	movb	%sil, -73(%rbp)         ## 1-byte Spill
LBB285_16:                              ##   in Loop: Header=BB285_14 Depth=1
	movb	-73(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB285_17
	jmp	LBB285_18
LBB285_17:                              ##   in Loop: Header=BB285_14 Depth=1
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	LBB285_14
LBB285_18:
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	movl	%eax, -80(%rbp)         ## 4-byte Spill
	je	LBB285_19
	jmp	LBB285_23
LBB285_23:
	movl	-80(%rbp), %eax         ## 4-byte Reload
	subl	$2, %eax
	je	LBB285_20
	jmp	LBB285_24
LBB285_24:
	movl	-80(%rbp), %eax         ## 4-byte Reload
	subl	$4, %eax
	jne	LBB285_21
	jmp	LBB285_19
LBB285_19:
	movq	-40(%rbp), %rax
	movq	72(%rax), %rdi
	movl	-60(%rbp), %edx
	movq	-56(%rbp), %rcx
	leaq	L_.str.1201(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB285_21
LBB285_20:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-40(%rbp), %rax
	movq	72(%rax), %rdi
	movl	-60(%rbp), %edx
	movq	-56(%rbp), %rcx
	movq	-72(%rbp), %r8
	leaq	L_.str.1202(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB285_21:
	movl	$0, -4(%rbp)
LBB285_22:
	movl	-4(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function tryToCloneSchema
_tryToCloneSchema:                      ## @tryToCloneSchema
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -80(%rbp)
	movq	-24(%rbp), %rsi
	leaq	L_.str.820(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	_shell_check_oom
	xorl	%r8d, %r8d
                                        ## kill: def $r8 killed $r8d
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-48(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-40(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -52(%rbp)
	cmpl	$0, -52(%rbp)
	je	LBB286_2
## %bb.1:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -88(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_extended_errcode
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rdi
	movl	%eax, -92(%rbp)         ## 4-byte Spill
	callq	_sqlite3_errmsg
	movq	-48(%rbp), %r8
	movq	-88(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.821(%rip), %rsi
	movl	-92(%rbp), %edx         ## 4-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB286_27
LBB286_2:
	jmp	LBB286_3
LBB286_3:                               ## =>This Inner Loop Header: Depth=1
	movq	-40(%rbp), %rdi
	callq	_sqlite3_step
	movl	%eax, -52(%rbp)
	cmpl	$100, %eax
	jne	LBB286_12
## %bb.4:                               ##   in Loop: Header=BB286_3 Depth=1
	xorl	%esi, %esi
	movq	-40(%rbp), %rdi
	callq	_sqlite3_column_text
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -72(%rbp)
	cmpq	$0, -64(%rbp)
	je	LBB286_6
## %bb.5:                               ##   in Loop: Header=BB286_3 Depth=1
	cmpq	$0, -72(%rbp)
	jne	LBB286_7
LBB286_6:                               ##   in Loop: Header=BB286_3 Depth=1
	jmp	LBB286_3
LBB286_7:                               ##   in Loop: Header=BB286_3 Depth=1
	movq	-64(%rbp), %rsi
	leaq	L_.str.822(%rip), %rdi
	movb	$0, %al
	callq	_printf
	movq	___stdoutp@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rdi
	movl	%eax, -96(%rbp)         ## 4-byte Spill
	callq	_fflush
	xorl	%edx, %edx
	movl	%edx, %ecx
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	%rcx, %rdx
	leaq	-80(%rbp), %r8
	movl	%eax, -100(%rbp)        ## 4-byte Spill
	callq	_sqlite3_exec
	cmpq	$0, -80(%rbp)
	je	LBB286_9
## %bb.8:                               ##   in Loop: Header=BB286_3 Depth=1
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rcx
	leaq	L_.str.823(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-80(%rbp), %rdi
	movl	%eax, -104(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
	movq	$0, -80(%rbp)
LBB286_9:                               ##   in Loop: Header=BB286_3 Depth=1
	cmpq	$0, -32(%rbp)
	je	LBB286_11
## %bb.10:                              ##   in Loop: Header=BB286_3 Depth=1
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-64(%rbp), %rdx
	callq	*%rax
LBB286_11:                              ##   in Loop: Header=BB286_3 Depth=1
	leaq	L_.str.824(%rip), %rdi
	movb	$0, %al
	callq	_printf
	jmp	LBB286_3
LBB286_12:
	cmpl	$101, -52(%rbp)
	je	LBB286_26
## %bb.13:
	movq	-40(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	-48(%rbp), %rdi
	movl	%eax, -108(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
	movq	-24(%rbp), %rsi
	leaq	L_.str.825(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	_shell_check_oom
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-48(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-40(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -52(%rbp)
	cmpl	$0, -52(%rbp)
	je	LBB286_15
## %bb.14:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -120(%rbp)        ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_extended_errcode
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rdi
	movl	%eax, -124(%rbp)        ## 4-byte Spill
	callq	_sqlite3_errmsg
	movq	-48(%rbp), %r8
	movq	-120(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.821(%rip), %rsi
	movl	-124(%rbp), %edx        ## 4-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB286_27
LBB286_15:
	jmp	LBB286_16
LBB286_16:                              ## =>This Inner Loop Header: Depth=1
	movq	-40(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB286_25
## %bb.17:                              ##   in Loop: Header=BB286_16 Depth=1
	xorl	%esi, %esi
	movq	-40(%rbp), %rdi
	callq	_sqlite3_column_text
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -72(%rbp)
	cmpq	$0, -64(%rbp)
	je	LBB286_19
## %bb.18:                              ##   in Loop: Header=BB286_16 Depth=1
	cmpq	$0, -72(%rbp)
	jne	LBB286_20
LBB286_19:                              ##   in Loop: Header=BB286_16 Depth=1
	jmp	LBB286_16
LBB286_20:                              ##   in Loop: Header=BB286_16 Depth=1
	movq	-64(%rbp), %rsi
	leaq	L_.str.822(%rip), %rdi
	movb	$0, %al
	callq	_printf
	movq	___stdoutp@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rdi
	movl	%eax, -128(%rbp)        ## 4-byte Spill
	callq	_fflush
	xorl	%edx, %edx
	movl	%edx, %ecx
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	%rcx, %rdx
	leaq	-80(%rbp), %r8
	movl	%eax, -132(%rbp)        ## 4-byte Spill
	callq	_sqlite3_exec
	cmpq	$0, -80(%rbp)
	je	LBB286_22
## %bb.21:                              ##   in Loop: Header=BB286_16 Depth=1
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rcx
	leaq	L_.str.823(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-80(%rbp), %rdi
	movl	%eax, -136(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
	movq	$0, -80(%rbp)
LBB286_22:                              ##   in Loop: Header=BB286_16 Depth=1
	cmpq	$0, -32(%rbp)
	je	LBB286_24
## %bb.23:                              ##   in Loop: Header=BB286_16 Depth=1
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-64(%rbp), %rdx
	callq	*%rax
LBB286_24:                              ##   in Loop: Header=BB286_16 Depth=1
	leaq	L_.str.824(%rip), %rdi
	movb	$0, %al
	callq	_printf
	jmp	LBB286_16
LBB286_25:
	jmp	LBB286_26
LBB286_26:
	jmp	LBB286_27
LBB286_27:
	movq	-40(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	-48(%rbp), %rdi
	movl	%eax, -140(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
	addq	$144, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function tryToCloneData
_tryToCloneData:                        ## @tryToCloneData
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              ## imm = 0x100
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	_strlen30
	movl	%eax, -76(%rbp)
	movl	$0, -80(%rbp)
	movl	$0, -84(%rbp)
	movl	$10000, -88(%rbp)       ## imm = 0x2710
	movq	-24(%rbp), %rsi
	leaq	L_.str.826(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	_shell_check_oom
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-48(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-32(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	LBB287_2
## %bb.1:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -96(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_extended_errcode
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rdi
	movl	%eax, -100(%rbp)        ## 4-byte Spill
	callq	_sqlite3_errmsg
	movq	-48(%rbp), %r8
	movq	-96(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.827(%rip), %rsi
	movl	-100(%rbp), %edx        ## 4-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB287_36
LBB287_2:
	movq	-32(%rbp), %rdi
	callq	_sqlite3_column_count
	movl	%eax, -72(%rbp)
	movl	-76(%rbp), %eax
	addl	$200, %eax
	imull	$3, -72(%rbp), %ecx
	addl	%ecx, %eax
	movslq	%eax, %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	_shell_check_oom
	movl	-76(%rbp), %ecx
	addl	$200, %ecx
	movq	-56(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	%ecx, %edi
	leaq	L_.str.828(%rip), %rdx
	movq	%rax, %rcx
	movb	$0, %al
	callq	_sqlite3_snprintf
	movq	-56(%rbp), %rdi
	movq	%rax, -112(%rbp)        ## 8-byte Spill
	callq	_strlen30
	movl	%eax, -64(%rbp)
	movl	$1, -68(%rbp)
LBB287_3:                               ## =>This Inner Loop Header: Depth=1
	movl	-68(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	LBB287_6
## %bb.4:                               ##   in Loop: Header=BB287_3 Depth=1
	movq	$-1, %rcx
	movq	-56(%rbp), %rax
	movslq	-64(%rbp), %rdx
	addq	%rdx, %rax
	movq	%rax, %rdi
	leaq	L_.str.829(%rip), %rsi
	movl	$2, %edx
	callq	___memcpy_chk
	movl	-64(%rbp), %r8d
	addl	$2, %r8d
	movl	%r8d, -64(%rbp)
## %bb.5:                               ##   in Loop: Header=BB287_3 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	LBB287_3
LBB287_6:
	movq	$-1, %rcx
	movq	-56(%rbp), %rax
	movslq	-64(%rbp), %rdx
	addq	%rdx, %rax
	movq	%rax, %rdi
	leaq	L_.str.830(%rip), %rsi
	movl	$3, %edx
	callq	___memcpy_chk
	xorl	%r8d, %r8d
                                        ## kill: def $r8 killed $r8d
	movq	-16(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-40(%rbp), %rcx
	movq	%rax, -120(%rbp)        ## 8-byte Spill
	callq	_sqlite3_prepare_v2
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	LBB287_8
## %bb.7:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	%rdi, -128(%rbp)        ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_extended_errcode
	movq	-16(%rbp), %rdi
	movl	%eax, -132(%rbp)        ## 4-byte Spill
	callq	_sqlite3_errmsg
	movq	-48(%rbp), %r8
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.827(%rip), %rsi
	movl	-132(%rbp), %edx        ## 4-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB287_36
LBB287_8:
	movl	$0, -80(%rbp)
LBB287_9:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB287_11 Depth 2
                                        ##       Child Loop BB287_13 Depth 3
	cmpl	$2, -80(%rbp)
	jge	LBB287_35
## %bb.10:                              ##   in Loop: Header=BB287_9 Depth=1
	jmp	LBB287_11
LBB287_11:                              ##   Parent Loop BB287_9 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB287_13 Depth 3
	movq	-32(%rbp), %rdi
	callq	_sqlite3_step
	movl	%eax, -60(%rbp)
	cmpl	$100, %eax
	jne	LBB287_29
## %bb.12:                              ##   in Loop: Header=BB287_11 Depth=2
	movl	$0, -64(%rbp)
LBB287_13:                              ##   Parent Loop BB287_9 Depth=1
                                        ##     Parent Loop BB287_11 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movl	-64(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	LBB287_22
## %bb.14:                              ##   in Loop: Header=BB287_13 Depth=3
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	callq	_sqlite3_column_type
	decl	%eax
	movl	%eax, %ecx
	subl	$4, %eax
	movq	%rcx, -144(%rbp)        ## 8-byte Spill
	ja	LBB287_20
## %bb.37:                              ##   in Loop: Header=BB287_13 Depth=3
	leaq	LJTI287_0(%rip), %rax
	movq	-144(%rbp), %rcx        ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB287_15:                              ##   in Loop: Header=BB287_13 Depth=3
	movq	-40(%rbp), %rdi
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %esi
	callq	_sqlite3_bind_null
	jmp	LBB287_20
LBB287_16:                              ##   in Loop: Header=BB287_13 Depth=3
	movq	-40(%rbp), %rdi
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movq	-32(%rbp), %rcx
	movl	-64(%rbp), %esi
	movq	%rdi, -152(%rbp)        ## 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -156(%rbp)        ## 4-byte Spill
	callq	_sqlite3_column_int64
	movq	-152(%rbp), %rdi        ## 8-byte Reload
	movl	-156(%rbp), %esi        ## 4-byte Reload
	movq	%rax, %rdx
	callq	_sqlite3_bind_int64
	jmp	LBB287_20
LBB287_17:                              ##   in Loop: Header=BB287_13 Depth=3
	movq	-40(%rbp), %rdi
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movq	-32(%rbp), %rcx
	movl	-64(%rbp), %esi
	movq	%rdi, -168(%rbp)        ## 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -172(%rbp)        ## 4-byte Spill
	callq	_sqlite3_column_double
	movq	-168(%rbp), %rdi        ## 8-byte Reload
	movl	-172(%rbp), %esi        ## 4-byte Reload
	callq	_sqlite3_bind_double
	jmp	LBB287_20
LBB287_18:                              ##   in Loop: Header=BB287_13 Depth=3
	movq	-40(%rbp), %rdi
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movq	-32(%rbp), %rcx
	movl	-64(%rbp), %esi
	movq	%rdi, -184(%rbp)        ## 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -188(%rbp)        ## 4-byte Spill
	callq	_sqlite3_column_text
	xorl	%edx, %edx
	movl	%edx, %r8d
	movq	-184(%rbp), %rdi        ## 8-byte Reload
	movl	-188(%rbp), %esi        ## 4-byte Reload
	movq	%rax, %rdx
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_bind_text
	jmp	LBB287_20
LBB287_19:                              ##   in Loop: Header=BB287_13 Depth=3
	movq	-40(%rbp), %rdi
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movq	-32(%rbp), %rcx
	movl	-64(%rbp), %esi
	movq	%rdi, -200(%rbp)        ## 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -204(%rbp)        ## 4-byte Spill
	callq	_sqlite3_column_blob
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movq	%rax, -216(%rbp)        ## 8-byte Spill
	callq	_sqlite3_column_bytes
	xorl	%edx, %edx
	movl	%edx, %r8d
	movq	-200(%rbp), %rdi        ## 8-byte Reload
	movl	-204(%rbp), %esi        ## 4-byte Reload
	movq	-216(%rbp), %rdx        ## 8-byte Reload
	movl	%eax, %ecx
	callq	_sqlite3_bind_blob
LBB287_20:                              ##   in Loop: Header=BB287_13 Depth=3
	jmp	LBB287_21
LBB287_21:                              ##   in Loop: Header=BB287_13 Depth=3
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	LBB287_13
LBB287_22:                              ##   in Loop: Header=BB287_11 Depth=2
	movq	-40(%rbp), %rdi
	callq	_sqlite3_step
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	LBB287_26
## %bb.23:                              ##   in Loop: Header=BB287_11 Depth=2
	cmpl	$100, -60(%rbp)
	je	LBB287_26
## %bb.24:                              ##   in Loop: Header=BB287_11 Depth=2
	cmpl	$101, -60(%rbp)
	je	LBB287_26
## %bb.25:                              ##   in Loop: Header=BB287_11 Depth=2
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	%rdi, -224(%rbp)        ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_extended_errcode
	movq	-16(%rbp), %rdi
	movl	%eax, -228(%rbp)        ## 4-byte Spill
	callq	_sqlite3_errmsg
	movq	-224(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.831(%rip), %rsi
	movl	-228(%rbp), %edx        ## 4-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
LBB287_26:                              ##   in Loop: Header=BB287_11 Depth=2
	movq	-40(%rbp), %rdi
	callq	_sqlite3_reset
	movl	-84(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -84(%rbp)
	movl	-84(%rbp), %ecx
	movl	%eax, -232(%rbp)        ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	$10000, %ecx            ## imm = 0x2710
	idivl	%ecx
	cmpl	$0, %edx
	jne	LBB287_28
## %bb.27:                              ##   in Loop: Header=BB287_11 Depth=2
	movl	-84(%rbp), %eax
	cltd
	movl	$10000, %ecx            ## imm = 0x2710
	idivl	%ecx
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rsi
	leaq	L_.str.833(%rip), %rdi
	movsbl	(%rdi,%rsi), %esi
	leaq	L_.str.832(%rip), %rdi
	movb	$0, %al
	callq	_printf
	movq	___stdoutp@GOTPCREL(%rip), %rdi
	movq	(%rdi), %rdi
	movl	%eax, -236(%rbp)        ## 4-byte Spill
	callq	_fflush
LBB287_28:                              ##   in Loop: Header=BB287_11 Depth=2
	jmp	LBB287_11
LBB287_29:                              ##   in Loop: Header=BB287_9 Depth=1
	cmpl	$101, -60(%rbp)
	jne	LBB287_31
## %bb.30:
	jmp	LBB287_35
LBB287_31:                              ##   in Loop: Header=BB287_9 Depth=1
	movq	-32(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	-48(%rbp), %rdi
	movl	%eax, -240(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
	movq	-24(%rbp), %rsi
	leaq	L_.str.834(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	_shell_check_oom
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	movq	-48(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-32(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	LBB287_33
## %bb.32:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rdx
	leaq	L_.str.835(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB287_35
LBB287_33:                              ##   in Loop: Header=BB287_9 Depth=1
	jmp	LBB287_34
LBB287_34:                              ##   in Loop: Header=BB287_9 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	LBB287_9
LBB287_35:
	jmp	LBB287_36
LBB287_36:
	movq	-32(%rbp), %rdi
	callq	_sqlite3_finalize
	movq	-40(%rbp), %rdi
	movl	%eax, -244(%rbp)        ## 4-byte Spill
	callq	_sqlite3_finalize
	movq	-48(%rbp), %rdi
	movl	%eax, -248(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
	movq	-56(%rbp), %rdi
	callq	_sqlite3_free
	addq	$256, %rsp              ## imm = 0x100
	popq	%rbp
	retq
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L287_0_set_16, LBB287_16-LJTI287_0
.set L287_0_set_17, LBB287_17-LJTI287_0
.set L287_0_set_18, LBB287_18-LJTI287_0
.set L287_0_set_19, LBB287_19-LJTI287_0
.set L287_0_set_15, LBB287_15-LJTI287_0
LJTI287_0:
	.long	L287_0_set_16
	.long	L287_0_set_17
	.long	L287_0_set_18
	.long	L287_0_set_19
	.long	L287_0_set_15
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function get2byteInt
_get2byteInt:                           ## @get2byteInt
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	(%rax), %ecx
	shll	$8, %ecx
	movq	-8(%rbp), %rax
	movzbl	1(%rax), %edx
	addl	%edx, %ecx
	movl	%ecx, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function get4byteInt
_get4byteInt:                           ## @get4byteInt
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	(%rax), %ecx
	shll	$24, %ecx
	movq	-8(%rbp), %rax
	movzbl	1(%rax), %edx
	shll	$16, %edx
	addl	%edx, %ecx
	movq	-8(%rbp), %rax
	movzbl	2(%rax), %edx
	shll	$8, %edx
	addl	%edx, %ecx
	movq	-8(%rbp), %rax
	movzbl	3(%rax), %edx
	addl	%edx, %ecx
	movl	%ecx, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function db_int
_db_int:                                ## @db_int
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, -28(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-24(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	cmpq	$0, -24(%rbp)
	je	LBB290_3
## %bb.1:
	movq	-24(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB290_3
## %bb.2:
	xorl	%esi, %esi
	movq	-24(%rbp), %rdi
	callq	_sqlite3_column_int
	movl	%eax, -28(%rbp)
LBB290_3:
	movq	-24(%rbp), %rdi
	callq	_sqlite3_finalize
	movl	-28(%rbp), %ecx
	movl	%eax, -32(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function dump_callback
_dump_callback:                         ## @dump_callback
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -80(%rbp)
	cmpl	$3, -20(%rbp)
	jne	LBB291_2
## %bb.1:
	cmpq	$0, -32(%rbp)
	jne	LBB291_3
LBB291_2:
	movl	$0, -4(%rbp)
	jmp	LBB291_49
LBB291_3:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-80(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$256, %ecx              ## imm = 0x100
	cmpl	$0, %ecx
	setne	%dl
	andb	$1, %dl
	movzbl	%dl, %ecx
	movl	%ecx, -84(%rbp)
	movq	-80(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$512, %ecx              ## imm = 0x200
	cmpl	$0, %ecx
	setne	%dl
	andb	$1, %dl
	movzbl	%dl, %ecx
	movl	%ecx, -88(%rbp)
	movq	-56(%rbp), %rdi
	leaq	L_.str.667(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB291_8
## %bb.4:
	cmpl	$0, -88(%rbp)
	jne	LBB291_8
## %bb.5:
	cmpl	$0, -84(%rbp)
	jne	LBB291_7
## %bb.6:
	movq	-80(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.878(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB291_7:
	jmp	LBB291_26
LBB291_8:
	movq	-56(%rbp), %rsi
	leaq	L_.str.879(%rip), %rdi
	callq	_sqlite3_strglob
	cmpl	$0, %eax
	jne	LBB291_13
## %bb.9:
	cmpl	$0, -88(%rbp)
	jne	LBB291_13
## %bb.10:
	cmpl	$0, -84(%rbp)
	jne	LBB291_12
## %bb.11:
	movq	-80(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.438(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB291_12:
	jmp	LBB291_25
LBB291_13:
	movq	-56(%rbp), %rdi
	leaq	L_.str.663(%rip), %rsi
	movl	$7, %edx
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB291_15
## %bb.14:
	movl	$0, -4(%rbp)
	jmp	LBB291_49
LBB291_15:
	cmpl	$0, -84(%rbp)
	je	LBB291_17
## %bb.16:
	jmp	LBB291_23
LBB291_17:
	movq	-72(%rbp), %rdi
	leaq	L_.str.880(%rip), %rsi
	movl	$20, %edx
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB291_21
## %bb.18:
	movq	-80(%rbp), %rax
	cmpl	$0, 100(%rax)
	jne	LBB291_20
## %bb.19:
	movq	-80(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.881(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-80(%rbp), %rcx
	movl	$1, 100(%rcx)
LBB291_20:
	movq	-56(%rbp), %rsi
	movq	-56(%rbp), %rdx
	movq	-72(%rbp), %rcx
	leaq	L_.str.882(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rdi
	callq	_shell_check_oom
	movq	-80(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-96(%rbp), %rdx
	leaq	L_.str.219(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-96(%rbp), %rdi
	movl	%eax, -160(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
	movl	$0, -4(%rbp)
	jmp	LBB291_49
LBB291_21:
	movq	-80(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-72(%rbp), %rsi
	leaq	L_.str.883(%rip), %rdx
	callq	_printSchemaLine
## %bb.22:
	jmp	LBB291_23
LBB291_23:
	jmp	LBB291_24
LBB291_24:
	jmp	LBB291_25
LBB291_25:
	jmp	LBB291_26
LBB291_26:
	movq	-64(%rbp), %rdi
	leaq	L_.str.488(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB291_48
## %bb.27:
	movq	-80(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	_tableColumnList
	movq	%rax, -136(%rbp)
	cmpq	$0, -136(%rbp)
	jne	LBB291_29
## %bb.28:
	movq	-80(%rbp), %rax
	movl	80(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 80(%rax)
	movl	$0, -4(%rbp)
	jmp	LBB291_49
LBB291_29:
	leaq	-128(%rbp), %rdi
	callq	_initText
	movq	-56(%rbp), %rsi
	movq	-56(%rbp), %rdi
	movq	%rsi, -168(%rbp)        ## 8-byte Spill
	callq	_quoteChar
	leaq	-128(%rbp), %rdi
	movq	-168(%rbp), %rsi        ## 8-byte Reload
	movsbl	%al, %edx
	callq	_appendText
	movq	-136(%rbp), %rcx
	cmpq	$0, (%rcx)
	je	LBB291_35
## %bb.30:
	xorl	%edx, %edx
	leaq	-128(%rbp), %rdi
	leaq	L_.str.261(%rip), %rsi
	callq	_appendText
	xorl	%edx, %edx
	movq	-136(%rbp), %rax
	movq	(%rax), %rsi
	leaq	-128(%rbp), %rdi
	callq	_appendText
	movl	$1, -140(%rbp)
LBB291_31:                              ## =>This Inner Loop Header: Depth=1
	movq	-136(%rbp), %rax
	movslq	-140(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	LBB291_34
## %bb.32:                              ##   in Loop: Header=BB291_31 Depth=1
	xorl	%edx, %edx
	leaq	-128(%rbp), %rdi
	leaq	L_.str.65(%rip), %rsi
	callq	_appendText
	movq	-136(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-136(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	%rsi, -176(%rbp)        ## 8-byte Spill
	callq	_quoteChar
	leaq	-128(%rbp), %rdi
	movq	-176(%rbp), %rsi        ## 8-byte Reload
	movsbl	%al, %edx
	callq	_appendText
## %bb.33:                              ##   in Loop: Header=BB291_31 Depth=1
	movl	-140(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -140(%rbp)
	jmp	LBB291_31
LBB291_34:
	xorl	%edx, %edx
	leaq	-128(%rbp), %rdi
	leaq	L_.str.159(%rip), %rsi
	callq	_appendText
LBB291_35:
	leaq	-112(%rbp), %rdi
	callq	_initText
	xorl	%edx, %edx
	leaq	-112(%rbp), %rdi
	leaq	L_.str.699(%rip), %rsi
	callq	_appendText
	movq	-136(%rbp), %rax
	cmpq	$0, (%rax)
	je	LBB291_37
## %bb.36:
	xorl	%edx, %edx
	movq	-136(%rbp), %rax
	movq	(%rax), %rsi
	leaq	-112(%rbp), %rdi
	callq	_appendText
	xorl	%edx, %edx
	leaq	-112(%rbp), %rdi
	leaq	L_.str.65(%rip), %rsi
	callq	_appendText
LBB291_37:
	movl	$1, -140(%rbp)
LBB291_38:                              ## =>This Inner Loop Header: Depth=1
	movq	-136(%rbp), %rax
	movslq	-140(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	LBB291_43
## %bb.39:                              ##   in Loop: Header=BB291_38 Depth=1
	movq	-136(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-136(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	%rsi, -184(%rbp)        ## 8-byte Spill
	callq	_quoteChar
	leaq	-112(%rbp), %rdi
	movq	-184(%rbp), %rsi        ## 8-byte Reload
	movsbl	%al, %edx
	callq	_appendText
	movq	-136(%rbp), %rcx
	movl	-140(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rsi
	cmpq	$0, (%rcx,%rsi,8)
	je	LBB291_41
## %bb.40:                              ##   in Loop: Header=BB291_38 Depth=1
	xorl	%edx, %edx
	leaq	-112(%rbp), %rdi
	leaq	L_.str.65(%rip), %rsi
	callq	_appendText
LBB291_41:                              ##   in Loop: Header=BB291_38 Depth=1
	jmp	LBB291_42
LBB291_42:                              ##   in Loop: Header=BB291_38 Depth=1
	movl	-140(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -140(%rbp)
	jmp	LBB291_38
LBB291_43:
	movq	-136(%rbp), %rdi
	callq	_freeColumnList
	xorl	%edx, %edx
	leaq	-112(%rbp), %rdi
	leaq	L_.str.884(%rip), %rsi
	callq	_appendText
	movq	-56(%rbp), %rsi
	movq	-56(%rbp), %rdi
	movq	%rsi, -192(%rbp)        ## 8-byte Spill
	callq	_quoteChar
	leaq	-112(%rbp), %rdi
	movq	-192(%rbp), %rsi        ## 8-byte Reload
	movsbl	%al, %edx
	callq	_appendText
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-80(%rbp), %rsi
	movq	144(%rsi), %rsi
	movq	%rsi, -152(%rbp)
	movq	-80(%rbp), %rsi
	movl	84(%rsi), %ecx
	movl	%ecx, -156(%rbp)
	movq	-128(%rbp), %rsi
	movq	-80(%rbp), %rdi
	movq	%rsi, 144(%rdi)
	movq	-80(%rbp), %rsi
	movl	$5, 92(%rsi)
	movq	-80(%rbp), %rsi
	movl	$5, 84(%rsi)
	movq	-80(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	_shell_exec
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	andl	$255, %eax
	cmpl	$11, %eax
	jne	LBB291_45
## %bb.44:
	movq	-80(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.874(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-80(%rbp), %rcx
	movq	(%rcx), %rdi
	movl	%eax, -196(%rbp)        ## 4-byte Spill
	callq	_toggleSelectOrder
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-80(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	_shell_exec
	movq	-80(%rbp), %rcx
	movq	(%rcx), %rdi
	movl	%eax, -200(%rbp)        ## 4-byte Spill
	callq	_toggleSelectOrder
LBB291_45:
	movq	-152(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, 144(%rcx)
	movl	-156(%rbp), %edx
	movq	-80(%rbp), %rax
	movl	%edx, 84(%rax)
	leaq	-128(%rbp), %rdi
	callq	_freeText
	leaq	-112(%rbp), %rdi
	callq	_freeText
	cmpl	$0, -44(%rbp)
	je	LBB291_47
## %bb.46:
	movq	-80(%rbp), %rax
	movl	80(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 80(%rax)
LBB291_47:
	jmp	LBB291_48
LBB291_48:
	movl	$0, -4(%rbp)
LBB291_49:
	movl	-4(%rbp), %eax
	addq	$208, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function printSchemaLine
_printSchemaLine:                       ## @printSchemaLine
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	cmpq	$0, -16(%rbp)
	jne	LBB292_2
## %bb.1:
	jmp	LBB292_7
LBB292_2:
	cmpq	$0, -24(%rbp)
	jne	LBB292_4
## %bb.3:
	jmp	LBB292_7
LBB292_4:
	movq	-16(%rbp), %rsi
	leaq	L_.str.885(%rip), %rdi
	callq	_sqlite3_strglob
	cmpl	$0, %eax
	jne	LBB292_6
## %bb.5:
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rax
	addq	$13, %rax
	movq	-24(%rbp), %rcx
	leaq	L_.str.886(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB292_7
LBB292_6:
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rcx
	leaq	L_.str.887(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB292_7:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function tableColumnList
_tableColumnList:                       ## @tableColumnList
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	setne	%dl
	andb	$1, %dl
	movzbl	%dl, %ecx
	movl	%ecx, -68(%rbp)
	movq	-24(%rbp), %rsi
	leaq	L_.str.888(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	_shell_check_oom
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movq	-48(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-40(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -72(%rbp)
	movq	-48(%rbp), %rdi
	callq	_sqlite3_free
	cmpl	$0, -72(%rbp)
	je	LBB293_2
## %bb.1:
	movq	$0, -8(%rbp)
	jmp	LBB293_37
LBB293_2:
	jmp	LBB293_3
LBB293_3:                               ## =>This Inner Loop Header: Depth=1
	movq	-40(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB293_13
## %bb.4:                               ##   in Loop: Header=BB293_3 Depth=1
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jl	LBB293_6
## %bb.5:                               ##   in Loop: Header=BB293_3 Depth=1
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	-52(%rbp), %eax
	addl	$10, %eax
	movl	%eax, -56(%rbp)
	movq	-32(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	shlq	$3, %rdx
                                        ## kill: def $edx killed $edx killed $rdx
	movq	%rcx, %rdi
	movl	%edx, %esi
	callq	_sqlite3_realloc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	callq	_shell_check_oom
LBB293_6:                               ##   in Loop: Header=BB293_3 Depth=1
	movq	-40(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	leaq	L_.str.79(%rip), %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	-32(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	$1, %edx
	movl	%edx, -52(%rbp)
	movslq	%edx, %rsi
	movq	%rax, (%rcx,%rsi,8)
	movq	-32(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_shell_check_oom
	movq	-40(%rbp), %rdi
	movl	$5, %esi
	callq	_sqlite3_column_int
	cmpl	$0, %eax
	je	LBB293_12
## %bb.7:                               ##   in Loop: Header=BB293_3 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$1, -60(%rbp)
	jne	LBB293_10
## %bb.8:                               ##   in Loop: Header=BB293_3 Depth=1
	movq	-40(%rbp), %rdi
	movl	$2, %esi
	callq	_sqlite3_column_text
	movq	%rax, %rdi
	leaq	L_.str.889(%rip), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	jne	LBB293_10
## %bb.9:                               ##   in Loop: Header=BB293_3 Depth=1
	movl	$1, -64(%rbp)
	jmp	LBB293_11
LBB293_10:                              ##   in Loop: Header=BB293_3 Depth=1
	movl	$0, -64(%rbp)
LBB293_11:                              ##   in Loop: Header=BB293_3 Depth=1
	jmp	LBB293_12
LBB293_12:                              ##   in Loop: Header=BB293_3 Depth=1
	jmp	LBB293_3
LBB293_13:
	movq	-40(%rbp), %rdi
	callq	_sqlite3_finalize
	cmpq	$0, -32(%rbp)
	jne	LBB293_15
## %bb.14:
	movq	$0, -8(%rbp)
	jmp	LBB293_37
LBB293_15:
	movq	-32(%rbp), %rax
	movq	$0, (%rax)
	movq	-32(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movq	$0, (%rax,%rdx,8)
	cmpl	$0, -68(%rbp)
	je	LBB293_20
## %bb.16:
	cmpl	$0, -64(%rbp)
	je	LBB293_20
## %bb.17:
	movq	-24(%rbp), %rsi
	leaq	L_.str.890(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	_shell_check_oom
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-16(%rbp), %rax
	movq	(%rax), %rdi
	movq	-48(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-40(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -72(%rbp)
	movq	-48(%rbp), %rdi
	callq	_sqlite3_free
	cmpl	$0, -72(%rbp)
	je	LBB293_19
## %bb.18:
	movq	-32(%rbp), %rdi
	callq	_freeColumnList
	movq	$0, -8(%rbp)
	jmp	LBB293_37
LBB293_19:
	movq	-40(%rbp), %rdi
	callq	_sqlite3_step
	movl	%eax, -72(%rbp)
	movq	-40(%rbp), %rdi
	callq	_sqlite3_finalize
	cmpl	$100, -72(%rbp)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, -68(%rbp)
LBB293_20:
	cmpl	$0, -68(%rbp)
	je	LBB293_36
## %bb.21:
	movl	$0, -80(%rbp)
LBB293_22:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB293_24 Depth 2
	cmpl	$3, -80(%rbp)
	jge	LBB293_35
## %bb.23:                              ##   in Loop: Header=BB293_22 Depth=1
	movl	$1, -76(%rbp)
LBB293_24:                              ##   Parent Loop BB293_22 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-76(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jg	LBB293_29
## %bb.25:                              ##   in Loop: Header=BB293_24 Depth=2
	movslq	-80(%rbp), %rax
	leaq	_tableColumnList.azRowid(%rip), %rcx
	movq	(%rcx,%rax,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	jne	LBB293_27
## %bb.26:                              ##   in Loop: Header=BB293_22 Depth=1
	jmp	LBB293_29
LBB293_27:                              ##   in Loop: Header=BB293_24 Depth=2
	jmp	LBB293_28
LBB293_28:                              ##   in Loop: Header=BB293_24 Depth=2
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	LBB293_24
LBB293_29:                              ##   in Loop: Header=BB293_22 Depth=1
	movl	-76(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jle	LBB293_33
## %bb.30:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movq	(%rdx), %rdi
	movq	-24(%rbp), %rdx
	movslq	-80(%rbp), %rsi
	leaq	_tableColumnList.azRowid(%rip), %r8
	movq	(%r8,%rsi,8), %rsi
	movq	%rsi, -88(%rbp)         ## 8-byte Spill
	movq	%rcx, %rsi
	movq	-88(%rbp), %r8          ## 8-byte Reload
	movq	%rcx, -96(%rbp)         ## 8-byte Spill
	movq	%r8, %rcx
	movq	-96(%rbp), %r8          ## 8-byte Reload
	movq	-96(%rbp), %r9          ## 8-byte Reload
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movq	$0, 16(%rsp)
	callq	_sqlite3_table_column_metadata
	movl	%eax, -72(%rbp)
	cmpl	$0, -72(%rbp)
	jne	LBB293_32
## %bb.31:
	movslq	-80(%rbp), %rax
	leaq	_tableColumnList.azRowid(%rip), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
LBB293_32:
	jmp	LBB293_35
LBB293_33:                              ##   in Loop: Header=BB293_22 Depth=1
	jmp	LBB293_34
LBB293_34:                              ##   in Loop: Header=BB293_22 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	LBB293_22
LBB293_35:
	jmp	LBB293_36
LBB293_36:
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
LBB293_37:
	movq	-8(%rbp), %rax
	addq	$128, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function freeColumnList
_freeColumnList:                        ## @freeColumnList
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	$1, -12(%rbp)
LBB294_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	LBB294_4
## %bb.2:                               ##   in Loop: Header=BB294_1 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_sqlite3_free
## %bb.3:                               ##   in Loop: Header=BB294_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	LBB294_1
LBB294_4:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function toggleSelectOrder
_toggleSelectOrder:                     ## @toggleSelectOrder
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -8(%rbp)
	movq	%rdi, -120(%rbp)
	movq	$0, -128(%rbp)
	movl	$0, -132(%rbp)
	movq	-120(%rbp), %rdi
	leaq	L_.str.894(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-128(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movq	-128(%rbp), %rdi
	movl	%eax, -136(%rbp)        ## 4-byte Spill
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB295_2
## %bb.1:
	xorl	%esi, %esi
	movq	-128(%rbp), %rdi
	callq	_sqlite3_column_int
	movl	%eax, -132(%rbp)
LBB295_2:
	movq	-128(%rbp), %rdi
	callq	_sqlite3_finalize
	leaq	-112(%rbp), %rsi
	cmpl	$0, -132(%rbp)
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	$100, %edi
	leaq	L_.str.895(%rip), %rdx
	movl	%eax, -140(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_snprintf
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	leaq	-112(%rbp), %rsi
	movq	-120(%rbp), %rdi
	movq	%rdx, -152(%rbp)        ## 8-byte Spill
	movq	-152(%rbp), %rcx        ## 8-byte Reload
	movq	-152(%rbp), %r8         ## 8-byte Reload
	movq	%rax, -160(%rbp)        ## 8-byte Spill
	callq	_sqlite3_exec
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	jne	LBB295_4
## %bb.3:
	addq	$160, %rsp
	popq	%rbp
	retq
LBB295_4:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shell_error_context
_shell_error_context:                   ## @shell_error_context
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	LBB296_3
## %bb.1:
	cmpq	$0, -16(%rbp)
	je	LBB296_3
## %bb.2:
	movq	-24(%rbp), %rdi
	callq	_sqlite3_error_offset
	movl	%eax, -28(%rbp)
	cmpl	$0, %eax
	jge	LBB296_4
LBB296_3:
	leaq	L_.str.27(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -8(%rbp)
	jmp	LBB296_25
LBB296_4:
	jmp	LBB296_5
LBB296_5:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB296_7 Depth 2
	cmpl	$50, -28(%rbp)
	jle	LBB296_10
## %bb.6:                               ##   in Loop: Header=BB296_5 Depth=1
	movl	-28(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
LBB296_7:                               ##   Parent Loop BB296_5 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	jne	LBB296_9
## %bb.8:                               ##   in Loop: Header=BB296_7 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	movl	-28(%rbp), %ecx
	addl	$-1, %ecx
	movl	%ecx, -28(%rbp)
	jmp	LBB296_7
LBB296_9:                               ##   in Loop: Header=BB296_5 Depth=1
	jmp	LBB296_5
LBB296_10:
	movq	-16(%rbp), %rdi
	callq	_strlen
	movq	%rax, -40(%rbp)
	cmpq	$78, -40(%rbp)
	jbe	LBB296_15
## %bb.11:
	movq	$78, -40(%rbp)
LBB296_12:                              ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	-40(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	andl	$192, %edx
	cmpl	$128, %edx
	jne	LBB296_14
## %bb.13:                              ##   in Loop: Header=BB296_12 Depth=1
	movq	-40(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -40(%rbp)
	jmp	LBB296_12
LBB296_14:
	jmp	LBB296_15
LBB296_15:
	movq	-40(%rbp), %rsi
	movq	-16(%rbp), %rdx
	leaq	L_.str.125(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -48(%rbp)
	movl	$0, -60(%rbp)
LBB296_16:                              ## =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax
	movslq	-60(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	LBB296_21
## %bb.17:                              ##   in Loop: Header=BB296_16 Depth=1
	movq	-16(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB296_19
## %bb.18:                              ##   in Loop: Header=BB296_16 Depth=1
	movq	-48(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movb	$32, (%rax,%rcx)
LBB296_19:                              ##   in Loop: Header=BB296_16 Depth=1
	jmp	LBB296_20
LBB296_20:                              ##   in Loop: Header=BB296_16 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	LBB296_16
LBB296_21:
	cmpl	$25, -28(%rbp)
	jge	LBB296_23
## %bb.22:
	movq	-48(%rbp), %rsi
	movl	-28(%rbp), %edx
	leaq	L_.str.900(%rip), %rdi
	leaq	L_.str.27(%rip), %rcx
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -56(%rbp)
	jmp	LBB296_24
LBB296_23:
	movq	-48(%rbp), %rsi
	movl	-28(%rbp), %eax
	subl	$14, %eax
	leaq	L_.str.901(%rip), %rdi
	movl	%eax, %edx
	leaq	L_.str.27(%rip), %rcx
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -56(%rbp)
LBB296_24:
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
LBB296_25:
	movq	-8(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shell_callback
_shell_callback:                        ## @shell_callback
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$672, %rsp              ## imm = 0x2A0
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -208(%rbp)
	movl	%esi, -212(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -232(%rbp)
	movq	%r8, -240(%rbp)
	movq	-208(%rbp), %rax
	movq	%rax, -256(%rbp)
	cmpq	$0, -224(%rbp)
	jne	LBB297_2
## %bb.1:
	movl	$0, -196(%rbp)
	jmp	LBB297_379
LBB297_2:
	movq	-256(%rbp), %rax
	movl	92(%rax), %ecx
	movl	%ecx, %eax
	movq	%rax, %rdx
	subq	$18, %rdx
	movq	%rax, -424(%rbp)        ## 8-byte Spill
	ja	LBB297_378
## %bb.382:
	leaq	LJTI297_0(%rip), %rax
	movq	-424(%rbp), %rcx        ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB297_3:
	jmp	LBB297_378
LBB297_4:
	movl	$5, -260(%rbp)
	cmpq	$0, -224(%rbp)
	jne	LBB297_6
## %bb.5:
	jmp	LBB297_378
LBB297_6:
	movl	$0, -244(%rbp)
LBB297_7:                               ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_15
## %bb.8:                               ##   in Loop: Header=BB297_7 Depth=1
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	LBB297_10
## %bb.9:                               ##   in Loop: Header=BB297_7 Depth=1
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -432(%rbp)        ## 8-byte Spill
	jmp	LBB297_11
LBB297_10:                              ##   in Loop: Header=BB297_7 Depth=1
	leaq	L_.str.27(%rip), %rax
	movq	%rax, -432(%rbp)        ## 8-byte Spill
	jmp	LBB297_11
LBB297_11:                              ##   in Loop: Header=BB297_7 Depth=1
	movq	-432(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	callq	_strlen30
	movl	%eax, -264(%rbp)
	movl	-264(%rbp), %eax
	cmpl	-260(%rbp), %eax
	jle	LBB297_13
## %bb.12:                              ##   in Loop: Header=BB297_7 Depth=1
	movl	-264(%rbp), %eax
	movl	%eax, -260(%rbp)
LBB297_13:                              ##   in Loop: Header=BB297_7 Depth=1
	jmp	LBB297_14
LBB297_14:                              ##   in Loop: Header=BB297_7 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_7
LBB297_15:
	movq	-256(%rbp), %rax
	movl	44(%rax), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, 44(%rax)
	cmpl	$0, %ecx
	jle	LBB297_17
## %bb.16:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	addq	$210, %rax
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB297_17:
	movl	$0, -244(%rbp)
LBB297_18:                              ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_24
## %bb.19:                              ##   in Loop: Header=BB297_18 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-260(%rbp), %edx
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rsi
	cmpq	$0, (%rax,%rsi,8)
	movq	%rdi, -440(%rbp)        ## 8-byte Spill
	movl	%edx, -444(%rbp)        ## 4-byte Spill
	movq	%rcx, -456(%rbp)        ## 8-byte Spill
	je	LBB297_21
## %bb.20:                              ##   in Loop: Header=BB297_18 Depth=1
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -464(%rbp)        ## 8-byte Spill
	jmp	LBB297_22
LBB297_21:                              ##   in Loop: Header=BB297_18 Depth=1
	movq	-256(%rbp), %rax
	addq	$292, %rax              ## imm = 0x124
	movq	%rax, -464(%rbp)        ## 8-byte Spill
LBB297_22:                              ##   in Loop: Header=BB297_18 Depth=1
	movq	-464(%rbp), %rax        ## 8-byte Reload
	movq	-256(%rbp), %rcx
	addq	$210, %rcx
	movq	-440(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.908(%rip), %rsi
	movl	-444(%rbp), %edx        ## 4-byte Reload
	movq	-456(%rbp), %r8         ## 8-byte Reload
	movq	%rcx, -472(%rbp)        ## 8-byte Spill
	movq	%r8, %rcx
	movq	%rax, %r8
	movq	-472(%rbp), %r9         ## 8-byte Reload
	movb	$0, %al
	callq	_fprintf
## %bb.23:                              ##   in Loop: Header=BB297_18 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_18
LBB297_24:
	jmp	LBB297_378
LBB297_25:
	cmpl	$8, -212(%rbp)
	jle	LBB297_27
## %bb.26:
	movl	$8, -212(%rbp)
LBB297_27:
	movq	-256(%rbp), %rax
	movl	44(%rax), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, 44(%rax)
	cmpl	$0, %ecx
	jne	LBB297_37
## %bb.28:
	movl	$0, -244(%rbp)
LBB297_29:                              ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_32
## %bb.30:                              ##   in Loop: Header=BB297_29 Depth=1
	movslq	-244(%rbp), %rax
	leaq	_shell_callback.aExplainWidth(%rip), %rcx
	movl	(%rcx,%rax,4), %edx
	movl	%edx, -268(%rbp)
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-268(%rbp), %esi
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	_utf8_width_print
	movl	-244(%rbp), %esi
	movl	-212(%rbp), %r8d
	subl	$1, %r8d
	cmpl	%r8d, %esi
	leaq	L_.str.66(%rip), %rax
	leaq	L_.str.706(%rip), %rcx
	cmoveq	%rax, %rcx
	movq	-256(%rbp), %rax
	movq	64(%rax), %rsi
	movq	%rcx, %rdi
	callq	_fputs
## %bb.31:                              ##   in Loop: Header=BB297_29 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_29
LBB297_32:
	movl	$0, -244(%rbp)
LBB297_33:                              ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_36
## %bb.34:                              ##   in Loop: Header=BB297_33 Depth=1
	movslq	-244(%rbp), %rax
	leaq	_shell_callback.aExplainWidth(%rip), %rcx
	movl	(%rcx,%rax,4), %edx
	movl	%edx, -272(%rbp)
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-272(%rbp), %esi
	callq	_print_dashes
	movl	-244(%rbp), %edx
	movl	-212(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edx
	leaq	L_.str.66(%rip), %rax
	leaq	L_.str.706(%rip), %rcx
	cmoveq	%rax, %rcx
	movq	-256(%rbp), %rax
	movq	64(%rax), %rsi
	movq	%rcx, %rdi
	callq	_fputs
## %bb.35:                              ##   in Loop: Header=BB297_33 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_33
LBB297_36:
	jmp	LBB297_37
LBB297_37:
	cmpq	$0, -224(%rbp)
	jne	LBB297_39
## %bb.38:
	jmp	LBB297_378
LBB297_39:
	movl	$0, -244(%rbp)
LBB297_40:                              ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_57
## %bb.41:                              ##   in Loop: Header=BB297_40 Depth=1
	movslq	-244(%rbp), %rax
	leaq	_shell_callback.aExplainWidth(%rip), %rcx
	movl	(%rcx,%rax,4), %edx
	movl	%edx, -276(%rbp)
	movl	-244(%rbp), %edx
	movl	-212(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edx
	jne	LBB297_43
## %bb.42:                              ##   in Loop: Header=BB297_40 Depth=1
	movl	$0, -276(%rbp)
LBB297_43:                              ##   in Loop: Header=BB297_40 Depth=1
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	LBB297_46
## %bb.44:                              ##   in Loop: Header=BB297_40 Depth=1
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_strlenChar
	cmpl	-276(%rbp), %eax
	jle	LBB297_46
## %bb.45:                              ##   in Loop: Header=BB297_40 Depth=1
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_strlenChar
	movl	%eax, -276(%rbp)
LBB297_46:                              ##   in Loop: Header=BB297_40 Depth=1
	cmpl	$1, -244(%rbp)
	jne	LBB297_52
## %bb.47:                              ##   in Loop: Header=BB297_40 Depth=1
	movq	-256(%rbp), %rax
	cmpq	$0, 1480(%rax)
	je	LBB297_52
## %bb.48:                              ##   in Loop: Header=BB297_40 Depth=1
	movq	-256(%rbp), %rax
	cmpq	$0, 1336(%rax)
	je	LBB297_52
## %bb.49:                              ##   in Loop: Header=BB297_40 Depth=1
	movq	-256(%rbp), %rax
	movl	1492(%rax), %ecx
	movq	-256(%rbp), %rax
	cmpl	1488(%rax), %ecx
	jge	LBB297_51
## %bb.50:                              ##   in Loop: Header=BB297_40 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	movq	1480(%rax), %rax
	movq	-256(%rbp), %rcx
	movslq	1492(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	L_.str.909(%rip), %rsi
	leaq	L_.str.27(%rip), %rcx
	movb	$0, %al
	callq	_fprintf
LBB297_51:                              ##   in Loop: Header=BB297_40 Depth=1
	movq	-256(%rbp), %rax
	movl	1492(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 1492(%rax)
LBB297_52:                              ##   in Loop: Header=BB297_40 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-276(%rbp), %esi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	movq	%rdi, -480(%rbp)        ## 8-byte Spill
	movl	%esi, -484(%rbp)        ## 4-byte Spill
	je	LBB297_54
## %bb.53:                              ##   in Loop: Header=BB297_40 Depth=1
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -496(%rbp)        ## 8-byte Spill
	jmp	LBB297_55
LBB297_54:                              ##   in Loop: Header=BB297_40 Depth=1
	movq	-256(%rbp), %rax
	addq	$292, %rax              ## imm = 0x124
	movq	%rax, -496(%rbp)        ## 8-byte Spill
LBB297_55:                              ##   in Loop: Header=BB297_40 Depth=1
	movq	-496(%rbp), %rax        ## 8-byte Reload
	movq	-480(%rbp), %rdi        ## 8-byte Reload
	movl	-484(%rbp), %esi        ## 4-byte Reload
	movq	%rax, %rdx
	callq	_utf8_width_print
	movl	-244(%rbp), %ecx
	movl	-212(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %ecx
	leaq	L_.str.66(%rip), %rax
	leaq	L_.str.706(%rip), %rdx
	cmoveq	%rax, %rdx
	movq	-256(%rbp), %rax
	movq	64(%rax), %rsi
	movq	%rdx, %rdi
	callq	_fputs
## %bb.56:                              ##   in Loop: Header=BB297_40 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_40
LBB297_57:
	jmp	LBB297_378
LBB297_58:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movq	(%rax), %rsi
	leaq	L_.str.883(%rip), %rdx
	callq	_printSchemaLine
	jmp	LBB297_378
LBB297_59:
	movl	$0, -296(%rbp)
	movb	$0, -297(%rbp)
	movl	$0, -304(%rbp)
	cmpl	$1, -212(%rbp)
	sete	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movslq	%ecx, %rdx
	cmpq	$0, %rdx
	je	LBB297_61
## %bb.60:
	leaq	L___func__.shell_callback(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.910(%rip), %rcx
	movl	$13220, %edx            ## imm = 0x33A4
	callq	___assert_rtn
LBB297_61:
	jmp	LBB297_62
LBB297_62:
	movq	-224(%rbp), %rax
	cmpq	$0, (%rax)
	jne	LBB297_64
## %bb.63:
	jmp	LBB297_378
LBB297_64:
	xorl	%edx, %edx
	movq	-224(%rbp), %rax
	movq	(%rax), %rsi
	leaq	L_.str.911(%rip), %rdi
	callq	_sqlite3_strlike
	cmpl	$0, %eax
	je	LBB297_66
## %bb.65:
	xorl	%edx, %edx
	movq	-224(%rbp), %rax
	movq	(%rax), %rsi
	leaq	L_.str.912(%rip), %rdi
	callq	_sqlite3_strlike
	cmpl	$0, %eax
	jne	LBB297_67
LBB297_66:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movq	(%rax), %rdx
	leaq	L_.str.220(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_378
LBB297_67:
	movq	-224(%rbp), %rax
	movq	(%rax), %rsi
	leaq	L_.str.79(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -288(%rbp)
	movq	-288(%rbp), %rdi
	callq	_shell_check_oom
	movl	$0, -292(%rbp)
	movl	$0, -244(%rbp)
LBB297_68:                              ## =>This Inner Loop Header: Depth=1
	movq	-288(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movzbl	(%rax,%rcx), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB297_71
## %bb.69:                              ##   in Loop: Header=BB297_68 Depth=1
	jmp	LBB297_70
LBB297_70:                              ##   in Loop: Header=BB297_68 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_68
LBB297_71:
	jmp	LBB297_72
LBB297_72:                              ## =>This Inner Loop Header: Depth=1
	movq	-288(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movb	(%rax,%rcx), %dl
	movb	%dl, -298(%rbp)
	movsbl	%dl, %esi
	cmpl	$0, %esi
	je	LBB297_88
## %bb.73:                              ##   in Loop: Header=BB297_72 Depth=1
	movzbl	-298(%rbp), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB297_80
## %bb.74:                              ##   in Loop: Header=BB297_72 Depth=1
	movq	-288(%rbp), %rax
	movl	-292(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$13, %ecx
	jne	LBB297_76
## %bb.75:                              ##   in Loop: Header=BB297_72 Depth=1
	movq	-288(%rbp), %rax
	movl	-292(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movb	$10, (%rax,%rdx)
LBB297_76:                              ##   in Loop: Header=BB297_72 Depth=1
	movq	-288(%rbp), %rax
	movl	-292(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movzbl	(%rax,%rdx), %edi
	callq	_isspace
	cmpl	$0, %eax
	jne	LBB297_78
## %bb.77:                              ##   in Loop: Header=BB297_72 Depth=1
	movq	-288(%rbp), %rax
	movl	-292(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$40, %ecx
	jne	LBB297_79
LBB297_78:                              ##   in Loop: Header=BB297_72 Depth=1
	jmp	LBB297_87
LBB297_79:                              ##   in Loop: Header=BB297_72 Depth=1
	jmp	LBB297_86
LBB297_80:                              ##   in Loop: Header=BB297_72 Depth=1
	movsbl	-298(%rbp), %eax
	cmpl	$40, %eax
	je	LBB297_82
## %bb.81:                              ##   in Loop: Header=BB297_72 Depth=1
	movsbl	-298(%rbp), %eax
	cmpl	$41, %eax
	jne	LBB297_85
LBB297_82:                              ##   in Loop: Header=BB297_72 Depth=1
	cmpl	$0, -292(%rbp)
	jle	LBB297_85
## %bb.83:                              ##   in Loop: Header=BB297_72 Depth=1
	movq	-288(%rbp), %rax
	movl	-292(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movzbl	(%rax,%rdx), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB297_85
## %bb.84:                              ##   in Loop: Header=BB297_72 Depth=1
	movl	-292(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -292(%rbp)
LBB297_85:                              ##   in Loop: Header=BB297_72 Depth=1
	jmp	LBB297_86
LBB297_86:                              ##   in Loop: Header=BB297_72 Depth=1
	movb	-298(%rbp), %al
	movq	-288(%rbp), %rcx
	movl	-292(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -292(%rbp)
	movslq	%edx, %rdi
	movb	%al, (%rcx,%rdi)
LBB297_87:                              ##   in Loop: Header=BB297_72 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_72
LBB297_88:
	jmp	LBB297_89
LBB297_89:                              ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpl	$0, -292(%rbp)
	movb	%al, -497(%rbp)         ## 1-byte Spill
	jle	LBB297_91
## %bb.90:                              ##   in Loop: Header=BB297_89 Depth=1
	movq	-288(%rbp), %rax
	movl	-292(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movzbl	(%rax,%rdx), %edi
	callq	_isspace
	cmpl	$0, %eax
	setne	%sil
	movb	%sil, -497(%rbp)        ## 1-byte Spill
LBB297_91:                              ##   in Loop: Header=BB297_89 Depth=1
	movb	-497(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB297_92
	jmp	LBB297_93
LBB297_92:                              ##   in Loop: Header=BB297_89 Depth=1
	movl	-292(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -292(%rbp)
	jmp	LBB297_89
LBB297_93:
	movq	-288(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-288(%rbp), %rdi
	callq	_strlen30
	cmpl	$79, %eax
	jl	LBB297_135
## %bb.94:
	movl	$0, -292(%rbp)
	movl	$0, -244(%rbp)
LBB297_95:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB297_129 Depth 2
	movq	-288(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movb	(%rax,%rcx), %dl
	movb	%dl, -298(%rbp)
	movsbl	%dl, %esi
	cmpl	$0, %esi
	je	LBB297_134
## %bb.96:                              ##   in Loop: Header=BB297_95 Depth=1
	movsbl	-298(%rbp), %eax
	movsbl	-297(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	LBB297_98
## %bb.97:                              ##   in Loop: Header=BB297_95 Depth=1
	movb	$0, -297(%rbp)
	jmp	LBB297_120
LBB297_98:                              ##   in Loop: Header=BB297_95 Depth=1
	movsbl	-298(%rbp), %eax
	cmpl	$34, %eax
	je	LBB297_101
## %bb.99:                              ##   in Loop: Header=BB297_95 Depth=1
	movsbl	-298(%rbp), %eax
	cmpl	$39, %eax
	je	LBB297_101
## %bb.100:                             ##   in Loop: Header=BB297_95 Depth=1
	movsbl	-298(%rbp), %eax
	cmpl	$96, %eax
	jne	LBB297_102
LBB297_101:                             ##   in Loop: Header=BB297_95 Depth=1
	movb	-298(%rbp), %al
	movb	%al, -297(%rbp)
	jmp	LBB297_119
LBB297_102:                             ##   in Loop: Header=BB297_95 Depth=1
	movsbl	-298(%rbp), %eax
	cmpl	$91, %eax
	jne	LBB297_104
## %bb.103:                             ##   in Loop: Header=BB297_95 Depth=1
	movb	$93, -297(%rbp)
	jmp	LBB297_118
LBB297_104:                             ##   in Loop: Header=BB297_95 Depth=1
	movsbl	-298(%rbp), %eax
	cmpl	$45, %eax
	jne	LBB297_107
## %bb.105:                             ##   in Loop: Header=BB297_95 Depth=1
	movq	-288(%rbp), %rax
	movl	-244(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$45, %ecx
	jne	LBB297_107
## %bb.106:                             ##   in Loop: Header=BB297_95 Depth=1
	movb	$10, -297(%rbp)
	jmp	LBB297_117
LBB297_107:                             ##   in Loop: Header=BB297_95 Depth=1
	movsbl	-298(%rbp), %eax
	cmpl	$40, %eax
	jne	LBB297_109
## %bb.108:                             ##   in Loop: Header=BB297_95 Depth=1
	movl	-296(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -296(%rbp)
	jmp	LBB297_116
LBB297_109:                             ##   in Loop: Header=BB297_95 Depth=1
	movsbl	-298(%rbp), %eax
	cmpl	$41, %eax
	jne	LBB297_115
## %bb.110:                             ##   in Loop: Header=BB297_95 Depth=1
	movl	-296(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -296(%rbp)
	cmpl	$0, -304(%rbp)
	jle	LBB297_114
## %bb.111:                             ##   in Loop: Header=BB297_95 Depth=1
	cmpl	$0, -296(%rbp)
	jne	LBB297_114
## %bb.112:                             ##   in Loop: Header=BB297_95 Depth=1
	cmpl	$0, -292(%rbp)
	jle	LBB297_114
## %bb.113:                             ##   in Loop: Header=BB297_95 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-288(%rbp), %rsi
	movl	-292(%rbp), %edx
	leaq	L_.str.66(%rip), %rcx
	callq	_printSchemaLineN
	movl	$0, -292(%rbp)
LBB297_114:                             ##   in Loop: Header=BB297_95 Depth=1
	jmp	LBB297_115
LBB297_115:                             ##   in Loop: Header=BB297_95 Depth=1
	jmp	LBB297_116
LBB297_116:                             ##   in Loop: Header=BB297_95 Depth=1
	jmp	LBB297_117
LBB297_117:                             ##   in Loop: Header=BB297_95 Depth=1
	jmp	LBB297_118
LBB297_118:                             ##   in Loop: Header=BB297_95 Depth=1
	jmp	LBB297_119
LBB297_119:                             ##   in Loop: Header=BB297_95 Depth=1
	jmp	LBB297_120
LBB297_120:                             ##   in Loop: Header=BB297_95 Depth=1
	movb	-298(%rbp), %al
	movq	-288(%rbp), %rcx
	movl	-292(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -292(%rbp)
	movslq	%edx, %rdi
	movb	%al, (%rcx,%rdi)
	cmpl	$1, -296(%rbp)
	jne	LBB297_132
## %bb.121:                             ##   in Loop: Header=BB297_95 Depth=1
	movsbl	-297(%rbp), %eax
	cmpl	$0, %eax
	jne	LBB297_132
## %bb.122:                             ##   in Loop: Header=BB297_95 Depth=1
	movsbl	-298(%rbp), %eax
	cmpl	$40, %eax
	je	LBB297_126
## %bb.123:                             ##   in Loop: Header=BB297_95 Depth=1
	movsbl	-298(%rbp), %eax
	cmpl	$10, %eax
	je	LBB297_126
## %bb.124:                             ##   in Loop: Header=BB297_95 Depth=1
	movsbl	-298(%rbp), %eax
	cmpl	$44, %eax
	jne	LBB297_132
## %bb.125:                             ##   in Loop: Header=BB297_95 Depth=1
	movq	-288(%rbp), %rax
	movslq	-244(%rbp), %rcx
	addq	%rcx, %rax
	addq	$1, %rax
	movq	%rax, %rdi
	callq	_wsToEol
	cmpl	$0, %eax
	jne	LBB297_132
LBB297_126:                             ##   in Loop: Header=BB297_95 Depth=1
	movsbl	-298(%rbp), %eax
	cmpl	$10, %eax
	jne	LBB297_128
## %bb.127:                             ##   in Loop: Header=BB297_95 Depth=1
	movl	-292(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -292(%rbp)
LBB297_128:                             ##   in Loop: Header=BB297_95 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-288(%rbp), %rsi
	movl	-292(%rbp), %edx
	leaq	L_.str.913(%rip), %rcx
	callq	_printSchemaLineN
	movl	$0, -292(%rbp)
	movl	-304(%rbp), %edx
	addl	$1, %edx
	movl	%edx, -304(%rbp)
LBB297_129:                             ##   Parent Loop BB297_95 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-288(%rbp), %rax
	movl	-244(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movzbl	(%rax,%rdx), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB297_131
## %bb.130:                             ##   in Loop: Header=BB297_129 Depth=2
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_129
LBB297_131:                             ##   in Loop: Header=BB297_95 Depth=1
	jmp	LBB297_132
LBB297_132:                             ##   in Loop: Header=BB297_95 Depth=1
	jmp	LBB297_133
LBB297_133:                             ##   in Loop: Header=BB297_95 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_95
LBB297_134:
	movq	-288(%rbp), %rax
	movslq	-292(%rbp), %rcx
	movb	$0, (%rax,%rcx)
LBB297_135:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-288(%rbp), %rsi
	leaq	L_.str.883(%rip), %rdx
	callq	_printSchemaLine
	movq	-288(%rbp), %rdi
	callq	_sqlite3_free
	jmp	LBB297_378
LBB297_136:
	movq	-256(%rbp), %rax
	movl	44(%rax), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, 44(%rax)
	cmpl	$0, %ecx
	jne	LBB297_146
## %bb.137:
	movq	-256(%rbp), %rax
	cmpl	$0, 104(%rax)
	je	LBB297_146
## %bb.138:
	movl	$0, -244(%rbp)
LBB297_139:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_145
## %bb.140:                             ##   in Loop: Header=BB297_139 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	movl	-244(%rbp), %esi
	movl	-212(%rbp), %r8d
	subl	$1, %r8d
	cmpl	%r8d, %esi
	movq	%rdi, -512(%rbp)        ## 8-byte Spill
	movq	%rdx, -520(%rbp)        ## 8-byte Spill
	jne	LBB297_142
## %bb.141:                             ##   in Loop: Header=BB297_139 Depth=1
	movq	-256(%rbp), %rax
	addq	$210, %rax
	movq	%rax, -528(%rbp)        ## 8-byte Spill
	jmp	LBB297_143
LBB297_142:                             ##   in Loop: Header=BB297_139 Depth=1
	movq	-256(%rbp), %rax
	addq	$190, %rax
	movq	%rax, -528(%rbp)        ## 8-byte Spill
LBB297_143:                             ##   in Loop: Header=BB297_139 Depth=1
	movq	-528(%rbp), %rax        ## 8-byte Reload
	movq	-512(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.887(%rip), %rsi
	movq	-520(%rbp), %rdx        ## 8-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_fprintf
## %bb.144:                             ##   in Loop: Header=BB297_139 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_139
LBB297_145:
	jmp	LBB297_146
LBB297_146:
	cmpq	$0, -224(%rbp)
	jne	LBB297_148
## %bb.147:
	jmp	LBB297_378
LBB297_148:
	movl	$0, -244(%rbp)
LBB297_149:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_157
## %bb.150:                             ##   in Loop: Header=BB297_149 Depth=1
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -312(%rbp)
	cmpq	$0, -312(%rbp)
	jne	LBB297_152
## %bb.151:                             ##   in Loop: Header=BB297_149 Depth=1
	movq	-256(%rbp), %rax
	addq	$292, %rax              ## imm = 0x124
	movq	%rax, -312(%rbp)
LBB297_152:                             ##   in Loop: Header=BB297_149 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-312(%rbp), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	-244(%rbp), %ecx
	movl	-212(%rbp), %r8d
	subl	$1, %r8d
	cmpl	%r8d, %ecx
	jge	LBB297_154
## %bb.153:                             ##   in Loop: Header=BB297_149 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	addq	$190, %rax
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_155
LBB297_154:                             ##   in Loop: Header=BB297_149 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	addq	$210, %rax
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB297_155:                             ##   in Loop: Header=BB297_149 Depth=1
	jmp	LBB297_156
LBB297_156:                             ##   in Loop: Header=BB297_149 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_149
LBB297_157:
	jmp	LBB297_378
LBB297_158:
	movq	-256(%rbp), %rax
	movl	44(%rax), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, 44(%rax)
	cmpl	$0, %ecx
	jne	LBB297_165
## %bb.159:
	movq	-256(%rbp), %rax
	cmpl	$0, 104(%rax)
	je	LBB297_165
## %bb.160:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.914(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$0, -244(%rbp)
LBB297_161:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_164
## %bb.162:                             ##   in Loop: Header=BB297_161 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.915(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-256(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-232(%rbp), %rcx
	movslq	-244(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rsi
	movl	%eax, -532(%rbp)        ## 4-byte Spill
	callq	_output_html_string
	movq	-256(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.916(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
## %bb.163:                             ##   in Loop: Header=BB297_161 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_161
LBB297_164:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.917(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB297_165:
	cmpq	$0, -224(%rbp)
	jne	LBB297_167
## %bb.166:
	jmp	LBB297_378
LBB297_167:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.914(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$0, -244(%rbp)
LBB297_168:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_174
## %bb.169:                             ##   in Loop: Header=BB297_168 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.918(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-256(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-224(%rbp), %rcx
	movslq	-244(%rbp), %rdx
	cmpq	$0, (%rcx,%rdx,8)
	movq	%rdi, -544(%rbp)        ## 8-byte Spill
	je	LBB297_171
## %bb.170:                             ##   in Loop: Header=BB297_168 Depth=1
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -552(%rbp)        ## 8-byte Spill
	jmp	LBB297_172
LBB297_171:                             ##   in Loop: Header=BB297_168 Depth=1
	movq	-256(%rbp), %rax
	addq	$292, %rax              ## imm = 0x124
	movq	%rax, -552(%rbp)        ## 8-byte Spill
LBB297_172:                             ##   in Loop: Header=BB297_168 Depth=1
	movq	-552(%rbp), %rax        ## 8-byte Reload
	movq	-544(%rbp), %rdi        ## 8-byte Reload
	movq	%rax, %rsi
	callq	_output_html_string
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.919(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
## %bb.173:                             ##   in Loop: Header=BB297_168 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_168
LBB297_174:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.917(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_378
LBB297_175:
	movq	-256(%rbp), %rax
	movl	44(%rax), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, 44(%rax)
	cmpl	$0, %ecx
	jne	LBB297_187
## %bb.176:
	movq	-256(%rbp), %rax
	cmpl	$0, 104(%rax)
	je	LBB297_187
## %bb.177:
	movl	$0, -244(%rbp)
LBB297_178:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_186
## %bb.179:                             ##   in Loop: Header=BB297_178 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	movq	%rdi, -560(%rbp)        ## 8-byte Spill
	je	LBB297_181
## %bb.180:                             ##   in Loop: Header=BB297_178 Depth=1
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -568(%rbp)        ## 8-byte Spill
	jmp	LBB297_182
LBB297_181:                             ##   in Loop: Header=BB297_178 Depth=1
	leaq	L_.str.27(%rip), %rax
	movq	%rax, -568(%rbp)        ## 8-byte Spill
	jmp	LBB297_182
LBB297_182:                             ##   in Loop: Header=BB297_178 Depth=1
	movq	-568(%rbp), %rax        ## 8-byte Reload
	movq	-560(%rbp), %rdi        ## 8-byte Reload
	movq	%rax, %rsi
	callq	_output_c_string
	movl	-244(%rbp), %ecx
	movl	-212(%rbp), %edx
	subl	$1, %edx
	cmpl	%edx, %ecx
	jge	LBB297_184
## %bb.183:                             ##   in Loop: Header=BB297_178 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	addq	$190, %rax
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB297_184:                             ##   in Loop: Header=BB297_178 Depth=1
	jmp	LBB297_185
LBB297_185:                             ##   in Loop: Header=BB297_178 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_178
LBB297_186:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	addq	$210, %rax
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB297_187:
	cmpq	$0, -224(%rbp)
	jne	LBB297_189
## %bb.188:
	jmp	LBB297_378
LBB297_189:
	movl	$0, -244(%rbp)
LBB297_190:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_198
## %bb.191:                             ##   in Loop: Header=BB297_190 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	movq	%rdi, -576(%rbp)        ## 8-byte Spill
	je	LBB297_193
## %bb.192:                             ##   in Loop: Header=BB297_190 Depth=1
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -584(%rbp)        ## 8-byte Spill
	jmp	LBB297_194
LBB297_193:                             ##   in Loop: Header=BB297_190 Depth=1
	movq	-256(%rbp), %rax
	addq	$292, %rax              ## imm = 0x124
	movq	%rax, -584(%rbp)        ## 8-byte Spill
LBB297_194:                             ##   in Loop: Header=BB297_190 Depth=1
	movq	-584(%rbp), %rax        ## 8-byte Reload
	movq	-576(%rbp), %rdi        ## 8-byte Reload
	movq	%rax, %rsi
	callq	_output_c_string
	movl	-244(%rbp), %ecx
	movl	-212(%rbp), %edx
	subl	$1, %edx
	cmpl	%edx, %ecx
	jge	LBB297_196
## %bb.195:                             ##   in Loop: Header=BB297_190 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	addq	$190, %rax
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB297_196:                             ##   in Loop: Header=BB297_190 Depth=1
	jmp	LBB297_197
LBB297_197:                             ##   in Loop: Header=BB297_190 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_190
LBB297_198:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	addq	$210, %rax
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_378
LBB297_199:
	movq	-256(%rbp), %rax
	movl	44(%rax), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, 44(%rax)
	cmpl	$0, %ecx
	jne	LBB297_209
## %bb.200:
	movq	-256(%rbp), %rax
	cmpl	$0, 104(%rax)
	je	LBB297_209
## %bb.201:
	movl	$0, -244(%rbp)
LBB297_202:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_208
## %bb.203:                             ##   in Loop: Header=BB297_202 Depth=1
	movq	-256(%rbp), %rdi
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	movq	%rdi, -592(%rbp)        ## 8-byte Spill
	je	LBB297_205
## %bb.204:                             ##   in Loop: Header=BB297_202 Depth=1
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -600(%rbp)        ## 8-byte Spill
	jmp	LBB297_206
LBB297_205:                             ##   in Loop: Header=BB297_202 Depth=1
	leaq	L_.str.27(%rip), %rax
	movq	%rax, -600(%rbp)        ## 8-byte Spill
	jmp	LBB297_206
LBB297_206:                             ##   in Loop: Header=BB297_202 Depth=1
	movq	-600(%rbp), %rax        ## 8-byte Reload
	movl	-244(%rbp), %ecx
	movl	-212(%rbp), %edx
	subl	$1, %edx
	cmpl	%edx, %ecx
	setl	%sil
	andb	$1, %sil
	movzbl	%sil, %edx
	movq	-592(%rbp), %rdi        ## 8-byte Reload
	movq	%rax, %rsi
	callq	_output_csv
## %bb.207:                             ##   in Loop: Header=BB297_202 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_202
LBB297_208:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	addq	$210, %rax
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB297_209:
	cmpl	$0, -212(%rbp)
	jle	LBB297_215
## %bb.210:
	movl	$0, -244(%rbp)
LBB297_211:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_214
## %bb.212:                             ##   in Loop: Header=BB297_211 Depth=1
	movq	-256(%rbp), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-244(%rbp), %edx
	movl	-212(%rbp), %r8d
	subl	$1, %r8d
	cmpl	%r8d, %edx
	setl	%r9b
	andb	$1, %r9b
	movzbl	%r9b, %edx
	callq	_output_csv
## %bb.213:                             ##   in Loop: Header=BB297_211 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_211
LBB297_214:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	addq	$210, %rax
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB297_215:
	jmp	LBB297_378
LBB297_216:
	cmpq	$0, -224(%rbp)
	jne	LBB297_218
## %bb.217:
	jmp	LBB297_378
LBB297_218:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	movq	144(%rax), %rdx
	leaq	L_.str.920(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-256(%rbp), %rcx
	cmpl	$0, 104(%rcx)
	je	LBB297_229
## %bb.219:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.261(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$0, -244(%rbp)
LBB297_220:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_228
## %bb.221:                             ##   in Loop: Header=BB297_220 Depth=1
	cmpl	$0, -244(%rbp)
	jle	LBB297_223
## %bb.222:                             ##   in Loop: Header=BB297_220 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.65(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB297_223:                             ##   in Loop: Header=BB297_220 Depth=1
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_quoteChar
	cmpb	$0, %al
	je	LBB297_225
## %bb.224:                             ##   in Loop: Header=BB297_220 Depth=1
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	leaq	L_.str.275(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -320(%rbp)
	movq	-320(%rbp), %rdi
	callq	_shell_check_oom
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-320(%rbp), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-320(%rbp), %rdi
	movl	%eax, -604(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
	jmp	LBB297_226
LBB297_225:                             ##   in Loop: Header=BB297_220 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB297_226:                             ##   in Loop: Header=BB297_220 Depth=1
	jmp	LBB297_227
LBB297_227:                             ##   in Loop: Header=BB297_220 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_220
LBB297_228:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.159(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB297_229:
	movq	-256(%rbp), %rax
	movl	44(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 44(%rax)
	movl	$0, -244(%rbp)
LBB297_230:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_273
## %bb.231:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-244(%rbp), %ecx
	cmpl	$0, %ecx
	leaq	L_.str.65(%rip), %rax
	leaq	L_.str.921(%rip), %rdx
	cmovgq	%rax, %rdx
	movq	%rdx, %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-224(%rbp), %rdx
	movslq	-244(%rbp), %rsi
	cmpq	$0, (%rdx,%rsi,8)
	je	LBB297_234
## %bb.232:                             ##   in Loop: Header=BB297_230 Depth=1
	cmpq	$0, -240(%rbp)
	je	LBB297_235
## %bb.233:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-240(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpl	$5, (%rax,%rcx,4)
	jne	LBB297_235
LBB297_234:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.616(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_271
LBB297_235:                             ##   in Loop: Header=BB297_230 Depth=1
	cmpq	$0, -240(%rbp)
	je	LBB297_241
## %bb.236:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-240(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jne	LBB297_241
## %bb.237:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	je	LBB297_239
## %bb.238:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	_output_quoted_string
	jmp	LBB297_240
LBB297_239:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	_output_quoted_escaped_string
LBB297_240:                             ##   in Loop: Header=BB297_230 Depth=1
	jmp	LBB297_270
LBB297_241:                             ##   in Loop: Header=BB297_230 Depth=1
	cmpq	$0, -240(%rbp)
	je	LBB297_244
## %bb.242:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-240(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpl	$1, (%rax,%rcx,4)
	jne	LBB297_244
## %bb.243:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_269
LBB297_244:                             ##   in Loop: Header=BB297_230 Depth=1
	cmpq	$0, -240(%rbp)
	je	LBB297_256
## %bb.245:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-240(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jne	LBB297_256
## %bb.246:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	movq	1336(%rax), %rdi
	movl	-244(%rbp), %esi
	callq	_sqlite3_column_double
	movsd	%xmm0, -328(%rbp)
	movq	-328(%rbp), %rax
	movq	%rax, -336(%rbp)
	movabsq	$9218868437227405312, %rax ## imm = 0x7FF0000000000000
	cmpq	%rax, -336(%rbp)
	jne	LBB297_248
## %bb.247:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.922(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_255
LBB297_248:                             ##   in Loop: Header=BB297_230 Depth=1
	movabsq	$-4503599627370496, %rax ## imm = 0xFFF0000000000000
	cmpq	%rax, -336(%rbp)
	jne	LBB297_250
## %bb.249:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.923(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_254
LBB297_250:                             ##   in Loop: Header=BB297_230 Depth=1
	cvttsd2si	-328(%rbp), %rax
	movq	%rax, -344(%rbp)
	movsd	-328(%rbp), %xmm0       ## xmm0 = mem[0],zero
	cvtsi2sdq	-344(%rbp), %xmm1
	ucomisd	%xmm1, %xmm0
	jne	LBB297_252
	jp	LBB297_252
## %bb.251:                             ##   in Loop: Header=BB297_230 Depth=1
	leaq	-64(%rbp), %rsi
	movq	-344(%rbp), %rcx
	movl	$50, %edi
	leaq	L_.str.924(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB297_253
LBB297_252:                             ##   in Loop: Header=BB297_230 Depth=1
	leaq	-64(%rbp), %rsi
	movsd	-328(%rbp), %xmm0       ## xmm0 = mem[0],zero
	movl	$50, %edi
	leaq	L_.str.925(%rip), %rdx
	movb	$1, %al
	callq	_sqlite3_snprintf
LBB297_253:                             ##   in Loop: Header=BB297_230 Depth=1
	leaq	-64(%rbp), %rdx
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB297_254:                             ##   in Loop: Header=BB297_230 Depth=1
	jmp	LBB297_255
LBB297_255:                             ##   in Loop: Header=BB297_230 Depth=1
	jmp	LBB297_268
LBB297_256:                             ##   in Loop: Header=BB297_230 Depth=1
	cmpq	$0, -240(%rbp)
	je	LBB297_260
## %bb.257:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-240(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpl	$4, (%rax,%rcx,4)
	jne	LBB297_260
## %bb.258:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	cmpq	$0, 1336(%rax)
	je	LBB297_260
## %bb.259:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	movq	1336(%rax), %rdi
	movl	-244(%rbp), %esi
	callq	_sqlite3_column_blob
	movq	%rax, -352(%rbp)
	movq	-256(%rbp), %rax
	movq	1336(%rax), %rdi
	movl	-244(%rbp), %esi
	callq	_sqlite3_column_bytes
	movl	%eax, -356(%rbp)
	movq	-256(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-352(%rbp), %rsi
	movl	-356(%rbp), %edx
	callq	_output_hex_blob
	jmp	LBB297_267
LBB297_260:                             ##   in Loop: Header=BB297_230 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-224(%rbp), %rcx
	movslq	-244(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	callq	_isNumber
	cmpl	$0, %eax
	je	LBB297_262
## %bb.261:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_266
LBB297_262:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	je	LBB297_264
## %bb.263:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	_output_quoted_string
	jmp	LBB297_265
LBB297_264:                             ##   in Loop: Header=BB297_230 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	_output_quoted_escaped_string
LBB297_265:                             ##   in Loop: Header=BB297_230 Depth=1
	jmp	LBB297_266
LBB297_266:                             ##   in Loop: Header=BB297_230 Depth=1
	jmp	LBB297_267
LBB297_267:                             ##   in Loop: Header=BB297_230 Depth=1
	jmp	LBB297_268
LBB297_268:                             ##   in Loop: Header=BB297_230 Depth=1
	jmp	LBB297_269
LBB297_269:                             ##   in Loop: Header=BB297_230 Depth=1
	jmp	LBB297_270
LBB297_270:                             ##   in Loop: Header=BB297_230 Depth=1
	jmp	LBB297_271
LBB297_271:                             ##   in Loop: Header=BB297_230 Depth=1
	jmp	LBB297_272
LBB297_272:                             ##   in Loop: Header=BB297_230 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_230
LBB297_273:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.926(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_378
LBB297_274:
	cmpq	$0, -224(%rbp)
	jne	LBB297_276
## %bb.275:
	jmp	LBB297_378
LBB297_276:
	movq	-256(%rbp), %rax
	cmpl	$0, 44(%rax)
	jne	LBB297_278
## %bb.277:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rsi
	leaq	L_.str.927(%rip), %rdi
	callq	_fputs
	jmp	LBB297_279
LBB297_278:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rsi
	leaq	L_.str.928(%rip), %rdi
	callq	_fputs
LBB297_279:
	movq	-256(%rbp), %rax
	movl	44(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 44(%rax)
	movl	$0, -244(%rbp)
LBB297_280:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_309
## %bb.281:                             ##   in Loop: Header=BB297_280 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_output_json_string
	movq	-256(%rbp), %rax
	movq	64(%rax), %rsi
	movl	$58, %edi
	callq	_putc
	movq	-224(%rbp), %rcx
	movslq	-244(%rbp), %rsi
	cmpq	$0, (%rcx,%rsi,8)
	je	LBB297_284
## %bb.282:                             ##   in Loop: Header=BB297_280 Depth=1
	cmpq	$0, -240(%rbp)
	je	LBB297_285
## %bb.283:                             ##   in Loop: Header=BB297_280 Depth=1
	movq	-240(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpl	$5, (%rax,%rcx,4)
	jne	LBB297_285
LBB297_284:                             ##   in Loop: Header=BB297_280 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rsi
	leaq	L_.str.929(%rip), %rdi
	callq	_fputs
	jmp	LBB297_305
LBB297_285:                             ##   in Loop: Header=BB297_280 Depth=1
	cmpq	$0, -240(%rbp)
	je	LBB297_294
## %bb.286:                             ##   in Loop: Header=BB297_280 Depth=1
	movq	-240(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jne	LBB297_294
## %bb.287:                             ##   in Loop: Header=BB297_280 Depth=1
	movq	-256(%rbp), %rax
	movq	1336(%rax), %rdi
	movl	-244(%rbp), %esi
	callq	_sqlite3_column_double
	movsd	%xmm0, -368(%rbp)
	movq	-368(%rbp), %rax
	movq	%rax, -376(%rbp)
	movabsq	$9218868437227405312, %rax ## imm = 0x7FF0000000000000
	cmpq	%rax, -376(%rbp)
	jne	LBB297_289
## %bb.288:                             ##   in Loop: Header=BB297_280 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.922(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_293
LBB297_289:                             ##   in Loop: Header=BB297_280 Depth=1
	movabsq	$-4503599627370496, %rax ## imm = 0xFFF0000000000000
	cmpq	%rax, -376(%rbp)
	jne	LBB297_291
## %bb.290:                             ##   in Loop: Header=BB297_280 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.923(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_292
LBB297_291:                             ##   in Loop: Header=BB297_280 Depth=1
	leaq	-128(%rbp), %rsi
	movsd	-368(%rbp), %xmm0       ## xmm0 = mem[0],zero
	movl	$50, %edi
	leaq	L_.str.925(%rip), %rdx
	movb	$1, %al
	callq	_sqlite3_snprintf
	leaq	-128(%rbp), %rdx
	movq	-256(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, -616(%rbp)        ## 8-byte Spill
	movb	$0, %al
	callq	_fprintf
LBB297_292:                             ##   in Loop: Header=BB297_280 Depth=1
	jmp	LBB297_293
LBB297_293:                             ##   in Loop: Header=BB297_280 Depth=1
	jmp	LBB297_304
LBB297_294:                             ##   in Loop: Header=BB297_280 Depth=1
	cmpq	$0, -240(%rbp)
	je	LBB297_298
## %bb.295:                             ##   in Loop: Header=BB297_280 Depth=1
	movq	-240(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpl	$4, (%rax,%rcx,4)
	jne	LBB297_298
## %bb.296:                             ##   in Loop: Header=BB297_280 Depth=1
	movq	-256(%rbp), %rax
	cmpq	$0, 1336(%rax)
	je	LBB297_298
## %bb.297:                             ##   in Loop: Header=BB297_280 Depth=1
	movq	-256(%rbp), %rax
	movq	1336(%rax), %rdi
	movl	-244(%rbp), %esi
	callq	_sqlite3_column_blob
	movq	%rax, -384(%rbp)
	movq	-256(%rbp), %rax
	movq	1336(%rax), %rdi
	movl	-244(%rbp), %esi
	callq	_sqlite3_column_bytes
	movl	%eax, -388(%rbp)
	movq	-256(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-384(%rbp), %rsi
	movl	-388(%rbp), %edx
	callq	_output_json_string
	jmp	LBB297_303
LBB297_298:                             ##   in Loop: Header=BB297_280 Depth=1
	cmpq	$0, -240(%rbp)
	je	LBB297_301
## %bb.299:                             ##   in Loop: Header=BB297_280 Depth=1
	movq	-240(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jne	LBB297_301
## %bb.300:                             ##   in Loop: Header=BB297_280 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_output_json_string
	jmp	LBB297_302
LBB297_301:                             ##   in Loop: Header=BB297_280 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB297_302:                             ##   in Loop: Header=BB297_280 Depth=1
	jmp	LBB297_303
LBB297_303:                             ##   in Loop: Header=BB297_280 Depth=1
	jmp	LBB297_304
LBB297_304:                             ##   in Loop: Header=BB297_280 Depth=1
	jmp	LBB297_305
LBB297_305:                             ##   in Loop: Header=BB297_280 Depth=1
	movl	-244(%rbp), %eax
	movl	-212(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	LBB297_307
## %bb.306:                             ##   in Loop: Header=BB297_280 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rsi
	movl	$44, %edi
	callq	_putc
LBB297_307:                             ##   in Loop: Header=BB297_280 Depth=1
	jmp	LBB297_308
LBB297_308:                             ##   in Loop: Header=BB297_280 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_280
LBB297_309:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rsi
	movl	$125, %edi
	callq	_putc
	jmp	LBB297_378
LBB297_310:
	cmpq	$0, -224(%rbp)
	jne	LBB297_312
## %bb.311:
	jmp	LBB297_378
LBB297_312:
	movq	-256(%rbp), %rax
	cmpl	$0, 44(%rax)
	jne	LBB297_321
## %bb.313:
	movq	-256(%rbp), %rax
	cmpl	$0, 104(%rax)
	je	LBB297_321
## %bb.314:
	movl	$0, -244(%rbp)
LBB297_315:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_320
## %bb.316:                             ##   in Loop: Header=BB297_315 Depth=1
	cmpl	$0, -244(%rbp)
	jle	LBB297_318
## %bb.317:                             ##   in Loop: Header=BB297_315 Depth=1
	movq	-256(%rbp), %rax
	addq	$190, %rax
	movq	-256(%rbp), %rcx
	movq	64(%rcx), %rsi
	movq	%rax, %rdi
	callq	_fputs
LBB297_318:                             ##   in Loop: Header=BB297_315 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	_output_quoted_string
## %bb.319:                             ##   in Loop: Header=BB297_315 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_315
LBB297_320:
	movq	-256(%rbp), %rax
	addq	$210, %rax
	movq	-256(%rbp), %rcx
	movq	64(%rcx), %rsi
	movq	%rax, %rdi
	callq	_fputs
LBB297_321:
	movq	-256(%rbp), %rax
	movl	44(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 44(%rax)
	movl	$0, -244(%rbp)
LBB297_322:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_352
## %bb.323:                             ##   in Loop: Header=BB297_322 Depth=1
	cmpl	$0, -244(%rbp)
	jle	LBB297_325
## %bb.324:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-256(%rbp), %rax
	addq	$190, %rax
	movq	-256(%rbp), %rcx
	movq	64(%rcx), %rsi
	movq	%rax, %rdi
	callq	_fputs
LBB297_325:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	LBB297_328
## %bb.326:                             ##   in Loop: Header=BB297_322 Depth=1
	cmpq	$0, -240(%rbp)
	je	LBB297_329
## %bb.327:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-240(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpl	$5, (%rax,%rcx,4)
	jne	LBB297_329
LBB297_328:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.616(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_350
LBB297_329:                             ##   in Loop: Header=BB297_322 Depth=1
	cmpq	$0, -240(%rbp)
	je	LBB297_332
## %bb.330:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-240(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jne	LBB297_332
## %bb.331:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	_output_quoted_string
	jmp	LBB297_349
LBB297_332:                             ##   in Loop: Header=BB297_322 Depth=1
	cmpq	$0, -240(%rbp)
	je	LBB297_335
## %bb.333:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-240(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpl	$1, (%rax,%rcx,4)
	jne	LBB297_335
## %bb.334:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_348
LBB297_335:                             ##   in Loop: Header=BB297_322 Depth=1
	cmpq	$0, -240(%rbp)
	je	LBB297_338
## %bb.336:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-240(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jne	LBB297_338
## %bb.337:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-256(%rbp), %rax
	movq	1336(%rax), %rdi
	movl	-244(%rbp), %esi
	callq	_sqlite3_column_double
	leaq	-192(%rbp), %rsi
	movsd	%xmm0, -400(%rbp)
	movsd	-400(%rbp), %xmm0       ## xmm0 = mem[0],zero
	movl	$50, %edi
	leaq	L_.str.925(%rip), %rdx
	movb	$1, %al
	callq	_sqlite3_snprintf
	leaq	-192(%rbp), %rdx
	movq	-256(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, -624(%rbp)        ## 8-byte Spill
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_347
LBB297_338:                             ##   in Loop: Header=BB297_322 Depth=1
	cmpq	$0, -240(%rbp)
	je	LBB297_342
## %bb.339:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-240(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpl	$4, (%rax,%rcx,4)
	jne	LBB297_342
## %bb.340:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-256(%rbp), %rax
	cmpq	$0, 1336(%rax)
	je	LBB297_342
## %bb.341:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-256(%rbp), %rax
	movq	1336(%rax), %rdi
	movl	-244(%rbp), %esi
	callq	_sqlite3_column_blob
	movq	%rax, -408(%rbp)
	movq	-256(%rbp), %rax
	movq	1336(%rax), %rdi
	movl	-244(%rbp), %esi
	callq	_sqlite3_column_bytes
	movl	%eax, -412(%rbp)
	movq	-256(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-408(%rbp), %rsi
	movl	-412(%rbp), %edx
	callq	_output_hex_blob
	jmp	LBB297_346
LBB297_342:                             ##   in Loop: Header=BB297_322 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-224(%rbp), %rcx
	movslq	-244(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	callq	_isNumber
	cmpl	$0, %eax
	je	LBB297_344
## %bb.343:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_345
LBB297_344:                             ##   in Loop: Header=BB297_322 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	_output_quoted_string
LBB297_345:                             ##   in Loop: Header=BB297_322 Depth=1
	jmp	LBB297_346
LBB297_346:                             ##   in Loop: Header=BB297_322 Depth=1
	jmp	LBB297_347
LBB297_347:                             ##   in Loop: Header=BB297_322 Depth=1
	jmp	LBB297_348
LBB297_348:                             ##   in Loop: Header=BB297_322 Depth=1
	jmp	LBB297_349
LBB297_349:                             ##   in Loop: Header=BB297_322 Depth=1
	jmp	LBB297_350
LBB297_350:                             ##   in Loop: Header=BB297_322 Depth=1
	jmp	LBB297_351
LBB297_351:                             ##   in Loop: Header=BB297_322 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_322
LBB297_352:
	movq	-256(%rbp), %rax
	addq	$210, %rax
	movq	-256(%rbp), %rcx
	movq	64(%rcx), %rsi
	movq	%rax, %rdi
	callq	_fputs
	jmp	LBB297_378
LBB297_353:
	movq	-256(%rbp), %rax
	movl	44(%rax), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, 44(%rax)
	cmpl	$0, %ecx
	jne	LBB297_365
## %bb.354:
	movq	-256(%rbp), %rax
	cmpl	$0, 104(%rax)
	je	LBB297_365
## %bb.355:
	movl	$0, -244(%rbp)
LBB297_356:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_364
## %bb.357:                             ##   in Loop: Header=BB297_356 Depth=1
	cmpl	$0, -244(%rbp)
	jle	LBB297_359
## %bb.358:                             ##   in Loop: Header=BB297_356 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	addq	$190, %rax
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB297_359:                             ##   in Loop: Header=BB297_356 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	movq	%rdi, -632(%rbp)        ## 8-byte Spill
	je	LBB297_361
## %bb.360:                             ##   in Loop: Header=BB297_356 Depth=1
	movq	-232(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -640(%rbp)        ## 8-byte Spill
	jmp	LBB297_362
LBB297_361:                             ##   in Loop: Header=BB297_356 Depth=1
	leaq	L_.str.27(%rip), %rax
	movq	%rax, -640(%rbp)        ## 8-byte Spill
	jmp	LBB297_362
LBB297_362:                             ##   in Loop: Header=BB297_356 Depth=1
	movq	-640(%rbp), %rax        ## 8-byte Reload
	movq	-632(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
## %bb.363:                             ##   in Loop: Header=BB297_356 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_356
LBB297_364:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	addq	$210, %rax
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB297_365:
	cmpq	$0, -224(%rbp)
	jne	LBB297_367
## %bb.366:
	jmp	LBB297_378
LBB297_367:
	movl	$0, -244(%rbp)
LBB297_368:                             ## =>This Inner Loop Header: Depth=1
	movl	-244(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jge	LBB297_376
## %bb.369:                             ##   in Loop: Header=BB297_368 Depth=1
	cmpl	$0, -244(%rbp)
	jle	LBB297_371
## %bb.370:                             ##   in Loop: Header=BB297_368 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	addq	$190, %rax
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB297_371:                             ##   in Loop: Header=BB297_368 Depth=1
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	movq	%rdi, -648(%rbp)        ## 8-byte Spill
	je	LBB297_373
## %bb.372:                             ##   in Loop: Header=BB297_368 Depth=1
	movq	-224(%rbp), %rax
	movslq	-244(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -656(%rbp)        ## 8-byte Spill
	jmp	LBB297_374
LBB297_373:                             ##   in Loop: Header=BB297_368 Depth=1
	movq	-256(%rbp), %rax
	addq	$292, %rax              ## imm = 0x124
	movq	%rax, -656(%rbp)        ## 8-byte Spill
LBB297_374:                             ##   in Loop: Header=BB297_368 Depth=1
	movq	-656(%rbp), %rax        ## 8-byte Reload
	movq	-648(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
## %bb.375:                             ##   in Loop: Header=BB297_368 Depth=1
	movl	-244(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -244(%rbp)
	jmp	LBB297_368
LBB297_376:
	movq	-256(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-256(%rbp), %rax
	addq	$210, %rax
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB297_378
LBB297_377:
	movq	-256(%rbp), %rdi
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -664(%rbp)        ## 8-byte Spill
	movq	%rax, %rdi
	callq	_atoi
	movq	-224(%rbp), %rcx
	movq	8(%rcx), %rdi
	movl	%eax, -668(%rbp)        ## 4-byte Spill
	callq	_atoi
	movq	-224(%rbp), %rcx
	movq	24(%rcx), %rcx
	movq	-664(%rbp), %rdi        ## 8-byte Reload
	movl	-668(%rbp), %esi        ## 4-byte Reload
	movl	%eax, %edx
	callq	_eqp_append
LBB297_378:
	movl	$0, -196(%rbp)
LBB297_379:
	movl	-196(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movl	%eax, -672(%rbp)        ## 4-byte Spill
	jne	LBB297_381
## %bb.380:
	movl	-672(%rbp), %eax        ## 4-byte Reload
	addq	$672, %rsp              ## imm = 0x2A0
	popq	%rbp
	retq
LBB297_381:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L297_0_set_4, LBB297_4-LJTI297_0
.set L297_0_set_378, LBB297_378-LJTI297_0
.set L297_0_set_136, LBB297_136-LJTI297_0
.set L297_0_set_58, LBB297_58-LJTI297_0
.set L297_0_set_158, LBB297_158-LJTI297_0
.set L297_0_set_216, LBB297_216-LJTI297_0
.set L297_0_set_310, LBB297_310-LJTI297_0
.set L297_0_set_175, LBB297_175-LJTI297_0
.set L297_0_set_199, LBB297_199-LJTI297_0
.set L297_0_set_25, LBB297_25-LJTI297_0
.set L297_0_set_353, LBB297_353-LJTI297_0
.set L297_0_set_59, LBB297_59-LJTI297_0
.set L297_0_set_377, LBB297_377-LJTI297_0
.set L297_0_set_274, LBB297_274-LJTI297_0
.set L297_0_set_3, LBB297_3-LJTI297_0
LJTI297_0:
	.long	L297_0_set_4
	.long	L297_0_set_378
	.long	L297_0_set_136
	.long	L297_0_set_58
	.long	L297_0_set_158
	.long	L297_0_set_216
	.long	L297_0_set_310
	.long	L297_0_set_175
	.long	L297_0_set_199
	.long	L297_0_set_25
	.long	L297_0_set_353
	.long	L297_0_set_59
	.long	L297_0_set_377
	.long	L297_0_set_274
	.long	L297_0_set_378
	.long	L297_0_set_378
	.long	L297_0_set_378
	.long	L297_0_set_3
	.long	L297_0_set_3
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function utf8_width_print
_utf8_width_print:                      ## @utf8_width_print
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	cmpl	$0, -12(%rbp)
	jge	LBB298_2
## %bb.1:
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -40(%rbp)         ## 4-byte Spill
	jmp	LBB298_3
LBB298_2:
	movl	-12(%rbp), %eax
	movl	%eax, -40(%rbp)         ## 4-byte Spill
LBB298_3:
	movl	-40(%rbp), %eax         ## 4-byte Reload
	movl	%eax, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -28(%rbp)
LBB298_4:                               ## =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	LBB298_14
## %bb.5:                               ##   in Loop: Header=BB298_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	andl	$192, %edx
	cmpl	$128, %edx
	je	LBB298_12
## %bb.6:                               ##   in Loop: Header=BB298_4 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	LBB298_11
## %bb.7:
	jmp	LBB298_8
LBB298_8:                               ## =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
## %bb.9:                               ##   in Loop: Header=BB298_8 Depth=1
	movq	-24(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	andl	$192, %edx
	cmpl	$128, %edx
	je	LBB298_8
## %bb.10:
	jmp	LBB298_14
LBB298_11:                              ##   in Loop: Header=BB298_4 Depth=1
	jmp	LBB298_12
LBB298_12:                              ##   in Loop: Header=BB298_4 Depth=1
	jmp	LBB298_13
LBB298_13:                              ##   in Loop: Header=BB298_4 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB298_4
LBB298_14:
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	LBB298_16
## %bb.15:
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rcx
	leaq	L_.str.125(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB298_20
LBB298_16:
	cmpl	$0, -12(%rbp)
	jge	LBB298_18
## %bb.17:
	movq	-8(%rbp), %rdi
	movl	-36(%rbp), %eax
	subl	-32(%rbp), %eax
	movq	-24(%rbp), %r8
	leaq	L_.str.930(%rip), %rsi
	movl	%eax, %edx
	leaq	L_.str.27(%rip), %rcx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB298_19
LBB298_18:
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rdx
	movl	-36(%rbp), %eax
	subl	-32(%rbp), %eax
	leaq	L_.str.931(%rip), %rsi
	movl	%eax, %ecx
	leaq	L_.str.27(%rip), %r8
	movb	$0, %al
	callq	_fprintf
LBB298_19:
	jmp	LBB298_20
LBB298_20:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function print_dashes
_print_dashes:                          ## @print_dashes
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -72(%rbp)
	movl	%esi, -76(%rbp)
	leaq	-64(%rbp), %rax
	movq	%rax, %rdi
	leaq	L___const.print_dashes.zDash(%rip), %rsi
	movl	$51, %edx
	callq	_memcpy
	movl	$50, -80(%rbp)
LBB299_1:                               ## =>This Inner Loop Header: Depth=1
	cmpl	$50, -76(%rbp)
	jle	LBB299_3
## %bb.2:                               ##   in Loop: Header=BB299_1 Depth=1
	leaq	-64(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	_fputs
	movl	-76(%rbp), %ecx
	subl	$50, %ecx
	movl	%ecx, -76(%rbp)
	jmp	LBB299_1
LBB299_3:
	leaq	-64(%rbp), %rcx
	movq	-72(%rbp), %rdi
	movl	-76(%rbp), %edx
	leaq	L_.str.125(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rsi
	cmpq	%rsi, %rcx
	jne	LBB299_5
## %bb.4:
	addq	$80, %rsp
	popq	%rbp
	retq
LBB299_5:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function strlenChar
_strlenChar:                            ## @strlenChar
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movl	$0, -12(%rbp)
LBB300_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	cmpb	$0, (%rax)
	je	LBB300_5
## %bb.2:                               ##   in Loop: Header=BB300_1 Depth=1
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -8(%rbp)
	movsbl	(%rax), %edx
	andl	$192, %edx
	cmpl	$128, %edx
	je	LBB300_4
## %bb.3:                               ##   in Loop: Header=BB300_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
LBB300_4:                               ##   in Loop: Header=BB300_1 Depth=1
	jmp	LBB300_1
LBB300_5:
	movl	-12(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function printSchemaLineN
_printSchemaLineN:                      ## @printSchemaLineN
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %r8b
	movb	%r8b, -33(%rbp)
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-32(%rbp), %rdx
	callq	_printSchemaLine
	movb	-33(%rbp), %r8b
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	%r8b, (%rax,%rcx)
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function wsToEol
_wsToEol:                               ## @wsToEol
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	$0, -20(%rbp)
LBB302_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	LBB302_11
## %bb.2:                               ##   in Loop: Header=BB302_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$10, %edx
	jne	LBB302_4
## %bb.3:
	movl	$1, -4(%rbp)
	jmp	LBB302_12
LBB302_4:                               ##   in Loop: Header=BB302_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB302_6
## %bb.5:                               ##   in Loop: Header=BB302_1 Depth=1
	jmp	LBB302_10
LBB302_6:
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$45, %edx
	jne	LBB302_9
## %bb.7:
	movq	-16(%rbp), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$45, %ecx
	jne	LBB302_9
## %bb.8:
	movl	$1, -4(%rbp)
	jmp	LBB302_12
LBB302_9:
	movl	$0, -4(%rbp)
	jmp	LBB302_12
LBB302_10:                              ##   in Loop: Header=BB302_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB302_1
LBB302_11:
	movl	$1, -4(%rbp)
LBB302_12:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function output_html_string
_output_html_string:                    ## @output_html_string
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	LBB303_2
## %bb.1:
	leaq	L_.str.27(%rip), %rax
	movq	%rax, -16(%rbp)
LBB303_2:
	jmp	LBB303_3
LBB303_3:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB303_5 Depth 2
	movq	-16(%rbp), %rax
	cmpb	$0, (%rax)
	je	LBB303_32
## %bb.4:                               ##   in Loop: Header=BB303_3 Depth=1
	movl	$0, -20(%rbp)
LBB303_5:                               ##   Parent Loop BB303_3 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	cmpl	$0, %esi
	movb	%al, -21(%rbp)          ## 1-byte Spill
	je	LBB303_11
## %bb.6:                               ##   in Loop: Header=BB303_5 Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	cmpl	$60, %esi
	movb	%al, -21(%rbp)          ## 1-byte Spill
	je	LBB303_11
## %bb.7:                               ##   in Loop: Header=BB303_5 Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	cmpl	$38, %esi
	movb	%al, -21(%rbp)          ## 1-byte Spill
	je	LBB303_11
## %bb.8:                               ##   in Loop: Header=BB303_5 Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	cmpl	$62, %esi
	movb	%al, -21(%rbp)          ## 1-byte Spill
	je	LBB303_11
## %bb.9:                               ##   in Loop: Header=BB303_5 Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movsbl	(%rcx,%rdx), %esi
	cmpl	$34, %esi
	movb	%al, -21(%rbp)          ## 1-byte Spill
	je	LBB303_11
## %bb.10:                              ##   in Loop: Header=BB303_5 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$39, %edx
	setne	%sil
	movb	%sil, -21(%rbp)         ## 1-byte Spill
LBB303_11:                              ##   in Loop: Header=BB303_5 Depth=2
	movb	-21(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB303_12
	jmp	LBB303_14
LBB303_12:                              ##   in Loop: Header=BB303_5 Depth=2
	jmp	LBB303_13
LBB303_13:                              ##   in Loop: Header=BB303_5 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB303_5
LBB303_14:                              ##   in Loop: Header=BB303_3 Depth=1
	cmpl	$0, -20(%rbp)
	jle	LBB303_16
## %bb.15:                              ##   in Loop: Header=BB303_3 Depth=1
	movq	-8(%rbp), %rdi
	movl	-20(%rbp), %edx
	movq	-16(%rbp), %rcx
	leaq	L_.str.125(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB303_16:                              ##   in Loop: Header=BB303_3 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$60, %edx
	jne	LBB303_18
## %bb.17:                              ##   in Loop: Header=BB303_3 Depth=1
	movq	-8(%rbp), %rdi
	leaq	L_.str.932(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB303_31
LBB303_18:                              ##   in Loop: Header=BB303_3 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$38, %edx
	jne	LBB303_20
## %bb.19:                              ##   in Loop: Header=BB303_3 Depth=1
	movq	-8(%rbp), %rdi
	leaq	L_.str.933(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB303_30
LBB303_20:                              ##   in Loop: Header=BB303_3 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$62, %edx
	jne	LBB303_22
## %bb.21:                              ##   in Loop: Header=BB303_3 Depth=1
	movq	-8(%rbp), %rdi
	leaq	L_.str.934(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB303_29
LBB303_22:                              ##   in Loop: Header=BB303_3 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$34, %edx
	jne	LBB303_24
## %bb.23:                              ##   in Loop: Header=BB303_3 Depth=1
	movq	-8(%rbp), %rdi
	leaq	L_.str.935(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB303_28
LBB303_24:                              ##   in Loop: Header=BB303_3 Depth=1
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$39, %edx
	jne	LBB303_26
## %bb.25:                              ##   in Loop: Header=BB303_3 Depth=1
	movq	-8(%rbp), %rdi
	leaq	L_.str.936(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB303_27
LBB303_26:
	jmp	LBB303_32
LBB303_27:                              ##   in Loop: Header=BB303_3 Depth=1
	jmp	LBB303_28
LBB303_28:                              ##   in Loop: Header=BB303_3 Depth=1
	jmp	LBB303_29
LBB303_29:                              ##   in Loop: Header=BB303_3 Depth=1
	jmp	LBB303_30
LBB303_30:                              ##   in Loop: Header=BB303_3 Depth=1
	jmp	LBB303_31
LBB303_31:                              ##   in Loop: Header=BB303_3 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movslq	%eax, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -16(%rbp)
	jmp	LBB303_3
LBB303_32:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function output_csv
_output_csv:                            ## @output_csv
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -16(%rbp)
	jne	LBB304_2
## %bb.1:
	movq	-32(%rbp), %rdi
	movq	-8(%rbp), %rax
	addq	$292, %rax              ## imm = 0x124
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	jmp	LBB304_13
LBB304_2:
	movl	$0, -36(%rbp)
LBB304_3:                               ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	-36(%rbp), %ecx
	movl	%ecx, %edx
	cmpb	$0, (%rax,%rdx)
	je	LBB304_8
## %bb.4:                               ##   in Loop: Header=BB304_3 Depth=1
	movq	-16(%rbp), %rax
	movl	-36(%rbp), %ecx
	movl	%ecx, %edx
	movzbl	(%rax,%rdx), %ecx
	movl	%ecx, %eax
	leaq	_needCsvQuote(%rip), %rdx
	cmpb	$0, (%rdx,%rax)
	je	LBB304_6
## %bb.5:
	movl	$0, -36(%rbp)
	jmp	LBB304_8
LBB304_6:                               ##   in Loop: Header=BB304_3 Depth=1
	jmp	LBB304_7
LBB304_7:                               ##   in Loop: Header=BB304_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	LBB304_3
LBB304_8:
	cmpl	$0, -36(%rbp)
	je	LBB304_10
## %bb.9:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	addq	$190, %rax
	movq	%rax, %rsi
	callq	_strstr
	cmpq	$0, %rax
	je	LBB304_11
LBB304_10:
	movq	-16(%rbp), %rsi
	leaq	L_.str.275(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	_shell_check_oom
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-48(%rbp), %rdi
	movl	%eax, -52(%rbp)         ## 4-byte Spill
	callq	_sqlite3_free
	jmp	LBB304_12
LBB304_11:
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB304_12:
	jmp	LBB304_13
LBB304_13:
	cmpl	$0, -20(%rbp)
	je	LBB304_15
## %bb.14:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-8(%rbp), %rax
	addq	$190, %rax
	leaq	L_.str.79(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB304_15:
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function output_quoted_string
_output_quoted_string:                  ## @output_quoted_string
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, -20(%rbp)
LBB305_1:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movb	(%rcx,%rdx), %sil
	movb	%sil, -21(%rbp)
	movsbl	%sil, %edi
	cmpl	$0, %edi
	movb	%al, -22(%rbp)          ## 1-byte Spill
	je	LBB305_3
## %bb.2:                               ##   in Loop: Header=BB305_1 Depth=1
	movsbl	-21(%rbp), %eax
	cmpl	$39, %eax
	setne	%cl
	movb	%cl, -22(%rbp)          ## 1-byte Spill
LBB305_3:                               ##   in Loop: Header=BB305_1 Depth=1
	movb	-22(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB305_4
	jmp	LBB305_6
LBB305_4:                               ##   in Loop: Header=BB305_1 Depth=1
	jmp	LBB305_5
LBB305_5:                               ##   in Loop: Header=BB305_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB305_1
LBB305_6:
	movsbl	-21(%rbp), %eax
	cmpl	$0, %eax
	jne	LBB305_8
## %bb.7:
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	leaq	L_.str.937(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB305_26
LBB305_8:
	movq	-8(%rbp), %rdi
	leaq	L_.str.938(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB305_9:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB305_11 Depth 2
	movq	-16(%rbp), %rax
	cmpb	$0, (%rax)
	je	LBB305_25
## %bb.10:                              ##   in Loop: Header=BB305_9 Depth=1
	movl	$0, -20(%rbp)
LBB305_11:                              ##   Parent Loop BB305_9 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movb	(%rcx,%rdx), %sil
	movb	%sil, -21(%rbp)
	movsbl	%sil, %edi
	cmpl	$0, %edi
	movb	%al, -23(%rbp)          ## 1-byte Spill
	je	LBB305_13
## %bb.12:                              ##   in Loop: Header=BB305_11 Depth=2
	movsbl	-21(%rbp), %eax
	cmpl	$39, %eax
	setne	%cl
	movb	%cl, -23(%rbp)          ## 1-byte Spill
LBB305_13:                              ##   in Loop: Header=BB305_11 Depth=2
	movb	-23(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB305_14
	jmp	LBB305_16
LBB305_14:                              ##   in Loop: Header=BB305_11 Depth=2
	jmp	LBB305_15
LBB305_15:                              ##   in Loop: Header=BB305_11 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB305_11
LBB305_16:                              ##   in Loop: Header=BB305_9 Depth=1
	movsbl	-21(%rbp), %eax
	cmpl	$39, %eax
	jne	LBB305_18
## %bb.17:                              ##   in Loop: Header=BB305_9 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
LBB305_18:                              ##   in Loop: Header=BB305_9 Depth=1
	cmpl	$0, -20(%rbp)
	je	LBB305_20
## %bb.19:                              ##   in Loop: Header=BB305_9 Depth=1
	movq	-8(%rbp), %rdi
	movl	-20(%rbp), %edx
	movq	-16(%rbp), %rcx
	leaq	L_.str.125(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	-20(%rbp), %edx
	movq	-16(%rbp), %rcx
	movslq	%edx, %rsi
	addq	%rsi, %rcx
	movq	%rcx, -16(%rbp)
LBB305_20:                              ##   in Loop: Header=BB305_9 Depth=1
	movsbl	-21(%rbp), %eax
	cmpl	$39, %eax
	jne	LBB305_22
## %bb.21:                              ##   in Loop: Header=BB305_9 Depth=1
	movq	-8(%rbp), %rdi
	leaq	L_.str.938(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB305_9
LBB305_22:                              ##   in Loop: Header=BB305_9 Depth=1
	movsbl	-21(%rbp), %eax
	cmpl	$0, %eax
	jne	LBB305_24
## %bb.23:
	jmp	LBB305_25
LBB305_24:                              ##   in Loop: Header=BB305_9 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	LBB305_9
LBB305_25:
	movq	-8(%rbp), %rdi
	leaq	L_.str.938(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB305_26:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function output_quoted_escaped_string
_output_quoted_escaped_string:          ## @output_quoted_escaped_string
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	$0, -84(%rbp)
LBB306_1:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-80(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movb	(%rcx,%rdx), %sil
	movb	%sil, -85(%rbp)
	movsbl	%sil, %edi
	cmpl	$0, %edi
	movb	%al, -113(%rbp)         ## 1-byte Spill
	je	LBB306_5
## %bb.2:                               ##   in Loop: Header=BB306_1 Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movsbl	-85(%rbp), %ecx
	cmpl	$39, %ecx
	movb	%al, -113(%rbp)         ## 1-byte Spill
	je	LBB306_5
## %bb.3:                               ##   in Loop: Header=BB306_1 Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movsbl	-85(%rbp), %ecx
	cmpl	$10, %ecx
	movb	%al, -113(%rbp)         ## 1-byte Spill
	je	LBB306_5
## %bb.4:                               ##   in Loop: Header=BB306_1 Depth=1
	movsbl	-85(%rbp), %eax
	cmpl	$13, %eax
	setne	%cl
	movb	%cl, -113(%rbp)         ## 1-byte Spill
LBB306_5:                               ##   in Loop: Header=BB306_1 Depth=1
	movb	-113(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB306_6
	jmp	LBB306_8
LBB306_6:                               ##   in Loop: Header=BB306_1 Depth=1
	jmp	LBB306_7
LBB306_7:                               ##   in Loop: Header=BB306_1 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	LBB306_1
LBB306_8:
	movsbl	-85(%rbp), %eax
	cmpl	$0, %eax
	jne	LBB306_10
## %bb.9:
	movq	-72(%rbp), %rdi
	movq	-80(%rbp), %rdx
	leaq	L_.str.937(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB306_48
LBB306_10:
	movq	$0, -96(%rbp)
	movq	$0, -104(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -84(%rbp)
LBB306_11:                              ## =>This Inner Loop Header: Depth=1
	movq	-80(%rbp), %rax
	movslq	-84(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	LBB306_18
## %bb.12:                              ##   in Loop: Header=BB306_11 Depth=1
	movq	-80(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$10, %edx
	jne	LBB306_14
## %bb.13:                              ##   in Loop: Header=BB306_11 Depth=1
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
LBB306_14:                              ##   in Loop: Header=BB306_11 Depth=1
	movq	-80(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$13, %edx
	jne	LBB306_16
## %bb.15:                              ##   in Loop: Header=BB306_11 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
LBB306_16:                              ##   in Loop: Header=BB306_11 Depth=1
	jmp	LBB306_17
LBB306_17:                              ##   in Loop: Header=BB306_11 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	LBB306_11
LBB306_18:
	cmpl	$0, -108(%rbp)
	je	LBB306_20
## %bb.19:
	movq	-72(%rbp), %rdi
	leaq	L_.str.270(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	leaq	-32(%rbp), %rcx
	movq	-80(%rbp), %rdi
	leaq	L_.str.265(%rip), %rsi
	leaq	L_.str.266(%rip), %rdx
	movl	%eax, -120(%rbp)        ## 4-byte Spill
	callq	_unused_string
	movq	%rax, -96(%rbp)
LBB306_20:
	cmpl	$0, -112(%rbp)
	je	LBB306_22
## %bb.21:
	movq	-72(%rbp), %rdi
	leaq	L_.str.270(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	leaq	-64(%rbp), %rcx
	movq	-80(%rbp), %rdi
	leaq	L_.str.267(%rip), %rsi
	leaq	L_.str.268(%rip), %rdx
	movl	%eax, -124(%rbp)        ## 4-byte Spill
	callq	_unused_string
	movq	%rax, -104(%rbp)
LBB306_22:
	movq	-72(%rbp), %rdi
	leaq	L_.str.938(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB306_23:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB306_25 Depth 2
	movq	-80(%rbp), %rax
	cmpb	$0, (%rax)
	je	LBB306_43
## %bb.24:                              ##   in Loop: Header=BB306_23 Depth=1
	movl	$0, -84(%rbp)
LBB306_25:                              ##   Parent Loop BB306_23 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movq	-80(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movb	(%rcx,%rdx), %sil
	movb	%sil, -85(%rbp)
	movsbl	%sil, %edi
	cmpl	$0, %edi
	movb	%al, -125(%rbp)         ## 1-byte Spill
	je	LBB306_29
## %bb.26:                              ##   in Loop: Header=BB306_25 Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movsbl	-85(%rbp), %ecx
	cmpl	$10, %ecx
	movb	%al, -125(%rbp)         ## 1-byte Spill
	je	LBB306_29
## %bb.27:                              ##   in Loop: Header=BB306_25 Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movsbl	-85(%rbp), %ecx
	cmpl	$13, %ecx
	movb	%al, -125(%rbp)         ## 1-byte Spill
	je	LBB306_29
## %bb.28:                              ##   in Loop: Header=BB306_25 Depth=2
	movsbl	-85(%rbp), %eax
	cmpl	$39, %eax
	setne	%cl
	movb	%cl, -125(%rbp)         ## 1-byte Spill
LBB306_29:                              ##   in Loop: Header=BB306_25 Depth=2
	movb	-125(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB306_30
	jmp	LBB306_32
LBB306_30:                              ##   in Loop: Header=BB306_25 Depth=2
	jmp	LBB306_31
LBB306_31:                              ##   in Loop: Header=BB306_25 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	LBB306_25
LBB306_32:                              ##   in Loop: Header=BB306_23 Depth=1
	movsbl	-85(%rbp), %eax
	cmpl	$39, %eax
	jne	LBB306_34
## %bb.33:                              ##   in Loop: Header=BB306_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
LBB306_34:                              ##   in Loop: Header=BB306_23 Depth=1
	cmpl	$0, -84(%rbp)
	je	LBB306_36
## %bb.35:                              ##   in Loop: Header=BB306_23 Depth=1
	movq	-72(%rbp), %rdi
	movl	-84(%rbp), %edx
	movq	-80(%rbp), %rcx
	leaq	L_.str.125(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	-84(%rbp), %edx
	movq	-80(%rbp), %rcx
	movslq	%edx, %rsi
	addq	%rsi, %rcx
	movq	%rcx, -80(%rbp)
LBB306_36:                              ##   in Loop: Header=BB306_23 Depth=1
	movsbl	-85(%rbp), %eax
	cmpl	$39, %eax
	jne	LBB306_38
## %bb.37:                              ##   in Loop: Header=BB306_23 Depth=1
	movq	-72(%rbp), %rdi
	leaq	L_.str.938(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB306_23
LBB306_38:                              ##   in Loop: Header=BB306_23 Depth=1
	movsbl	-85(%rbp), %eax
	cmpl	$0, %eax
	jne	LBB306_40
## %bb.39:
	jmp	LBB306_43
LBB306_40:                              ##   in Loop: Header=BB306_23 Depth=1
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -80(%rbp)
	movsbl	-85(%rbp), %ecx
	cmpl	$10, %ecx
	jne	LBB306_42
## %bb.41:                              ##   in Loop: Header=BB306_23 Depth=1
	movq	-72(%rbp), %rdi
	movq	-96(%rbp), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB306_23
LBB306_42:                              ##   in Loop: Header=BB306_23 Depth=1
	movq	-72(%rbp), %rdi
	movq	-104(%rbp), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB306_23
LBB306_43:
	movq	-72(%rbp), %rdi
	leaq	L_.str.938(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	cmpl	$0, -112(%rbp)
	je	LBB306_45
## %bb.44:
	movq	-72(%rbp), %rdi
	movq	-104(%rbp), %rdx
	leaq	L_.str.939(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB306_45:
	cmpl	$0, -108(%rbp)
	je	LBB306_47
## %bb.46:
	movq	-72(%rbp), %rdi
	movq	-96(%rbp), %rdx
	leaq	L_.str.940(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB306_47:
	jmp	LBB306_48
LBB306_48:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	LBB306_50
## %bb.49:
	addq	$128, %rsp
	popq	%rbp
	retq
LBB306_50:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function output_hex_blob
_output_hex_blob:                       ## @output_hex_blob
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rdi
	leaq	L_.str.941(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$0, -24(%rbp)
LBB307_1:                               ## =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	LBB307_4
## %bb.2:                               ##   in Loop: Header=BB307_1 Depth=1
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	andl	$255, %edx
	leaq	L_.str.942(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
## %bb.3:                               ##   in Loop: Header=BB307_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	LBB307_1
LBB307_4:
	movq	-8(%rbp), %rdi
	leaq	L_.str.938(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function isNumber
_isNumber:                              ## @isNumber
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	je	LBB308_2
## %bb.1:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$43, %ecx
	jne	LBB308_3
LBB308_2:
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
LBB308_3:
	movq	-16(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isdigit
	cmpl	$0, %eax
	jne	LBB308_5
## %bb.4:
	movl	$0, -4(%rbp)
	jmp	LBB308_33
LBB308_5:
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	je	LBB308_7
## %bb.6:
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
LBB308_7:
	jmp	LBB308_8
LBB308_8:                               ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isdigit
	cmpl	$0, %eax
	je	LBB308_10
## %bb.9:                               ##   in Loop: Header=BB308_8 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	LBB308_8
LBB308_10:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$46, %ecx
	jne	LBB308_19
## %bb.11:
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isdigit
	cmpl	$0, %eax
	jne	LBB308_13
## %bb.12:
	movl	$0, -4(%rbp)
	jmp	LBB308_33
LBB308_13:
	jmp	LBB308_14
LBB308_14:                              ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isdigit
	cmpl	$0, %eax
	je	LBB308_16
## %bb.15:                              ##   in Loop: Header=BB308_14 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	LBB308_14
LBB308_16:
	cmpq	$0, -24(%rbp)
	je	LBB308_18
## %bb.17:
	movq	-24(%rbp), %rax
	movl	$1, (%rax)
LBB308_18:
	jmp	LBB308_19
LBB308_19:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$101, %ecx
	je	LBB308_21
## %bb.20:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$69, %ecx
	jne	LBB308_32
LBB308_21:
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$43, %ecx
	je	LBB308_23
## %bb.22:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB308_24
LBB308_23:
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
LBB308_24:
	movq	-16(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isdigit
	cmpl	$0, %eax
	jne	LBB308_26
## %bb.25:
	movl	$0, -4(%rbp)
	jmp	LBB308_33
LBB308_26:
	jmp	LBB308_27
LBB308_27:                              ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isdigit
	cmpl	$0, %eax
	je	LBB308_29
## %bb.28:                              ##   in Loop: Header=BB308_27 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	LBB308_27
LBB308_29:
	cmpq	$0, -24(%rbp)
	je	LBB308_31
## %bb.30:
	movq	-24(%rbp), %rax
	movl	$1, (%rax)
LBB308_31:
	jmp	LBB308_32
LBB308_32:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$0, %ecx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %ecx
	movl	%ecx, -4(%rbp)
LBB308_33:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function output_json_string
_output_json_string:                    ## @output_json_string
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jge	LBB309_2
## %bb.1:
	movq	-16(%rbp), %rdi
	callq	_strlen
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -20(%rbp)
LBB309_2:
	movq	-8(%rbp), %rsi
	movl	$34, %edi
	callq	_fputc
LBB309_3:                               ## =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -20(%rbp)
	cmpl	$0, %eax
	je	LBB309_27
## %bb.4:                               ##   in Loop: Header=BB309_3 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movsbl	(%rax), %edx
	movl	%edx, -24(%rbp)
	cmpl	$92, -24(%rbp)
	je	LBB309_6
## %bb.5:                               ##   in Loop: Header=BB309_3 Depth=1
	cmpl	$34, -24(%rbp)
	jne	LBB309_7
LBB309_6:                               ##   in Loop: Header=BB309_3 Depth=1
	movq	-8(%rbp), %rsi
	movl	$92, %edi
	callq	_fputc
	movl	-24(%rbp), %edi
	movq	-8(%rbp), %rsi
	movl	%eax, -28(%rbp)         ## 4-byte Spill
	callq	_fputc
	jmp	LBB309_26
LBB309_7:                               ##   in Loop: Header=BB309_3 Depth=1
	cmpl	$31, -24(%rbp)
	ja	LBB309_24
## %bb.8:                               ##   in Loop: Header=BB309_3 Depth=1
	movq	-8(%rbp), %rsi
	movl	$92, %edi
	callq	_fputc
	cmpl	$8, -24(%rbp)
	jne	LBB309_10
## %bb.9:                               ##   in Loop: Header=BB309_3 Depth=1
	movq	-8(%rbp), %rsi
	movl	$98, %edi
	callq	_fputc
	jmp	LBB309_23
LBB309_10:                              ##   in Loop: Header=BB309_3 Depth=1
	cmpl	$12, -24(%rbp)
	jne	LBB309_12
## %bb.11:                              ##   in Loop: Header=BB309_3 Depth=1
	movq	-8(%rbp), %rsi
	movl	$102, %edi
	callq	_fputc
	jmp	LBB309_22
LBB309_12:                              ##   in Loop: Header=BB309_3 Depth=1
	cmpl	$10, -24(%rbp)
	jne	LBB309_14
## %bb.13:                              ##   in Loop: Header=BB309_3 Depth=1
	movq	-8(%rbp), %rsi
	movl	$110, %edi
	callq	_fputc
	jmp	LBB309_21
LBB309_14:                              ##   in Loop: Header=BB309_3 Depth=1
	cmpl	$13, -24(%rbp)
	jne	LBB309_16
## %bb.15:                              ##   in Loop: Header=BB309_3 Depth=1
	movq	-8(%rbp), %rsi
	movl	$114, %edi
	callq	_fputc
	jmp	LBB309_20
LBB309_16:                              ##   in Loop: Header=BB309_3 Depth=1
	cmpl	$9, -24(%rbp)
	jne	LBB309_18
## %bb.17:                              ##   in Loop: Header=BB309_3 Depth=1
	movq	-8(%rbp), %rsi
	movl	$116, %edi
	callq	_fputc
	jmp	LBB309_19
LBB309_18:                              ##   in Loop: Header=BB309_3 Depth=1
	movq	-8(%rbp), %rdi
	movl	-24(%rbp), %edx
	leaq	L_.str.943(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB309_19:                              ##   in Loop: Header=BB309_3 Depth=1
	jmp	LBB309_20
LBB309_20:                              ##   in Loop: Header=BB309_3 Depth=1
	jmp	LBB309_21
LBB309_21:                              ##   in Loop: Header=BB309_3 Depth=1
	jmp	LBB309_22
LBB309_22:                              ##   in Loop: Header=BB309_3 Depth=1
	jmp	LBB309_23
LBB309_23:                              ##   in Loop: Header=BB309_3 Depth=1
	jmp	LBB309_25
LBB309_24:                              ##   in Loop: Header=BB309_3 Depth=1
	movl	-24(%rbp), %edi
	movq	-8(%rbp), %rsi
	callq	_fputc
LBB309_25:                              ##   in Loop: Header=BB309_3 Depth=1
	jmp	LBB309_26
LBB309_26:                              ##   in Loop: Header=BB309_3 Depth=1
	jmp	LBB309_3
LBB309_27:
	movq	-8(%rbp), %rsi
	movl	$34, %edi
	callq	_fputc
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function eqp_append
_eqp_append:                            ## @eqp_append
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	_strlen30
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rcx
	cmpb	$0, 10(%rcx)
	je	LBB310_2
## %bb.1:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movq	-24(%rbp), %r8
	leaq	L_.str.944(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB310_2:
	movslq	-36(%rbp), %rax
	addq	$24, %rax
	movq	%rax, %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	callq	_shell_check_oom
	movq	$-1, %rcx
	movl	-12(%rbp), %edx
	movq	-32(%rbp), %rax
	movl	%edx, (%rax)
	movl	-16(%rbp), %edx
	movq	-32(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, %rdi
	callq	___memcpy_chk
	movq	-32(%rbp), %rcx
	movq	$0, 8(%rcx)
	movq	-8(%rbp), %rcx
	cmpq	$0, 1512(%rcx)
	je	LBB310_4
## %bb.3:
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	1512(%rcx), %rcx
	movq	%rax, 8(%rcx)
	jmp	LBB310_5
LBB310_4:
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 1504(%rcx)
LBB310_5:
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 1512(%rcx)
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function rc_err_oom_die
_rc_err_oom_die:                        ## @rc_err_oom_die
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	cmpl	$7, -4(%rbp)
	jne	LBB311_2
## %bb.1:
	xorl	%eax, %eax
	movl	%eax, %edi
	callq	_shell_check_oom
LBB311_2:
	cmpl	$0, -4(%rbp)
	movb	$1, %al
	movb	%al, -5(%rbp)           ## 1-byte Spill
	je	LBB311_4
## %bb.3:
	cmpl	$101, -4(%rbp)
	sete	%al
	movb	%al, -5(%rbp)           ## 1-byte Spill
LBB311_4:
	movb	-5(%rbp), %al           ## 1-byte Reload
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movslq	%ecx, %rdx
	cmpq	$0, %rdx
	je	LBB311_6
## %bb.5:
	leaq	L___func__.rc_err_oom_die(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.1134(%rip), %rcx
	movl	$18930, %edx            ## imm = 0x49F2
	callq	___assert_rtn
LBB311_6:
	jmp	LBB311_7
LBB311_7:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function lintFkeyIndexes
_lintFkeyIndexes:                       ## @lintFkeyIndexes
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$240, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -56(%rbp)
	leaq	L_.str.27(%rip), %rax
	movq	%rax, -72(%rbp)
	movq	$0, -88(%rbp)
	leaq	L_.str.1139(%rip), %rax
	movq	%rax, -96(%rbp)
	leaq	L_.str.1140(%rip), %rax
	movq	%rax, -104(%rbp)
	movl	$2, -60(%rbp)
LBB312_1:                               ## =>This Inner Loop Header: Depth=1
	movl	-60(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	LBB312_12
## %bb.2:                               ##   in Loop: Header=BB312_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_strlen30
	movl	%eax, -108(%rbp)
	cmpl	$1, -108(%rbp)
	jle	LBB312_5
## %bb.3:                               ##   in Loop: Header=BB312_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-108(%rbp), %edx
	leaq	L_.str.903(%rip), %rdi
	callq	_sqlite3_strnicmp
	cmpl	$0, %eax
	jne	LBB312_5
## %bb.4:                               ##   in Loop: Header=BB312_1 Depth=1
	movl	$1, -52(%rbp)
	jmp	LBB312_10
LBB312_5:                               ##   in Loop: Header=BB312_1 Depth=1
	cmpl	$1, -108(%rbp)
	jle	LBB312_8
## %bb.6:                               ##   in Loop: Header=BB312_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-108(%rbp), %edx
	leaq	L_.str.1141(%rip), %rdi
	callq	_sqlite3_strnicmp
	cmpl	$0, %eax
	jne	LBB312_8
## %bb.7:                               ##   in Loop: Header=BB312_1 Depth=1
	movl	$1, -56(%rbp)
	leaq	L_.str.1142(%rip), %rax
	movq	%rax, -72(%rbp)
	jmp	LBB312_9
LBB312_8:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rax
	movq	(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rcx
	leaq	L_.str.1143(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movl	$1, -4(%rbp)
	jmp	LBB312_56
LBB312_9:                               ##   in Loop: Header=BB312_1 Depth=1
	jmp	LBB312_10
LBB312_10:                              ##   in Loop: Header=BB312_1 Depth=1
	jmp	LBB312_11
LBB312_11:                              ##   in Loop: Header=BB312_1 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	LBB312_1
LBB312_12:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-40(%rbp), %rdi
	leaq	L_.str.1144(%rip), %rsi
	movl	$4, %edx
	movl	$1, %ecx
	leaq	_shellFkeyCollateClause(%rip), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	callq	_sqlite3_create_function
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jne	LBB312_14
## %bb.13:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-40(%rbp), %rdi
	movq	-96(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-88(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -76(%rbp)
LBB312_14:
	cmpl	$0, -76(%rbp)
	jne	LBB312_16
## %bb.15:
	movq	-88(%rbp), %rdi
	movl	-56(%rbp), %edx
	movl	$1, %esi
	callq	_sqlite3_bind_int
LBB312_16:
	cmpl	$0, -76(%rbp)
	jne	LBB312_54
## %bb.17:
	movq	$0, -120(%rbp)
LBB312_18:                              ## =>This Inner Loop Header: Depth=1
	movq	-88(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	jne	LBB312_48
## %bb.19:                              ##   in Loop: Header=BB312_18 Depth=1
	xorl	%esi, %esi
	movl	$-1, -124(%rbp)
	movq	$0, -136(%rbp)
	movq	-88(%rbp), %rdi
	callq	_sqlite3_column_text
	movq	%rax, -144(%rbp)
	movq	-88(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -152(%rbp)
	movq	-88(%rbp), %rdi
	movl	$2, %esi
	callq	_sqlite3_column_text
	movq	%rax, -160(%rbp)
	movq	-88(%rbp), %rdi
	movl	$3, %esi
	callq	_sqlite3_column_text
	movq	%rax, -168(%rbp)
	movq	-88(%rbp), %rdi
	movl	$4, %esi
	callq	_sqlite3_column_text
	movq	%rax, -176(%rbp)
	movq	-88(%rbp), %rdi
	movl	$5, %esi
	callq	_sqlite3_column_text
	movq	%rax, -184(%rbp)
	cmpq	$0, -144(%rbp)
	jne	LBB312_21
## %bb.20:                              ##   in Loop: Header=BB312_18 Depth=1
	jmp	LBB312_18
LBB312_21:                              ##   in Loop: Header=BB312_18 Depth=1
	cmpq	$0, -152(%rbp)
	jne	LBB312_23
## %bb.22:                              ##   in Loop: Header=BB312_18 Depth=1
	jmp	LBB312_18
LBB312_23:                              ##   in Loop: Header=BB312_18 Depth=1
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-40(%rbp), %rdi
	movq	-144(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-136(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	je	LBB312_25
## %bb.24:
	jmp	LBB312_48
LBB312_25:                              ##   in Loop: Header=BB312_18 Depth=1
	movq	-136(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	jne	LBB312_31
## %bb.26:                              ##   in Loop: Header=BB312_18 Depth=1
	movq	-136(%rbp), %rdi
	movl	$3, %esi
	callq	_sqlite3_column_text
	xorl	%ecx, %ecx
                                        ## kill: def $cl killed $cl killed $ecx
	movq	%rax, -192(%rbp)
	cmpq	$0, -192(%rbp)
	movb	%cl, -193(%rbp)         ## 1-byte Spill
	je	LBB312_30
## %bb.27:                              ##   in Loop: Header=BB312_18 Depth=1
	movq	-152(%rbp), %rdi
	movq	-192(%rbp), %rsi
	callq	_sqlite3_strglob
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	movb	$1, %dl
	movb	%dl, -194(%rbp)         ## 1-byte Spill
	je	LBB312_29
## %bb.28:                              ##   in Loop: Header=BB312_18 Depth=1
	movq	-104(%rbp), %rdi
	movq	-192(%rbp), %rsi
	callq	_sqlite3_strglob
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	sete	%dl
	movb	%dl, -194(%rbp)         ## 1-byte Spill
LBB312_29:                              ##   in Loop: Header=BB312_18 Depth=1
	movb	-194(%rbp), %al         ## 1-byte Reload
	movb	%al, -193(%rbp)         ## 1-byte Spill
LBB312_30:                              ##   in Loop: Header=BB312_18 Depth=1
	movb	-193(%rbp), %al         ## 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -124(%rbp)
LBB312_31:                              ##   in Loop: Header=BB312_18 Depth=1
	movq	-136(%rbp), %rdi
	callq	_sqlite3_finalize
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	je	LBB312_33
## %bb.32:
	jmp	LBB312_48
LBB312_33:                              ##   in Loop: Header=BB312_18 Depth=1
	cmpl	$0, -124(%rbp)
	jge	LBB312_35
## %bb.34:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	leaq	L_.str.1145(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB312_48
LBB312_35:                              ##   in Loop: Header=BB312_18 Depth=1
	cmpl	$0, -56(%rbp)
	je	LBB312_41
## %bb.36:                              ##   in Loop: Header=BB312_18 Depth=1
	cmpl	$0, -52(%rbp)
	jne	LBB312_38
## %bb.37:                              ##   in Loop: Header=BB312_18 Depth=1
	cmpl	$0, -124(%rbp)
	jne	LBB312_41
LBB312_38:                              ##   in Loop: Header=BB312_18 Depth=1
	cmpq	$0, -120(%rbp)
	je	LBB312_40
## %bb.39:                              ##   in Loop: Header=BB312_18 Depth=1
	movq	-184(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	je	LBB312_41
LBB312_40:                              ##   in Loop: Header=BB312_18 Depth=1
	movq	-48(%rbp), %rdi
	movq	-184(%rbp), %rdx
	leaq	L_.str.1146(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-120(%rbp), %rdi
	movl	%eax, -200(%rbp)        ## 4-byte Spill
	callq	_sqlite3_free
	movq	-184(%rbp), %rsi
	leaq	L_.str.79(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -120(%rbp)
LBB312_41:                              ##   in Loop: Header=BB312_18 Depth=1
	cmpl	$0, -124(%rbp)
	jne	LBB312_43
## %bb.42:                              ##   in Loop: Header=BB312_18 Depth=1
	movq	-48(%rbp), %rdi
	movq	-72(%rbp), %rdx
	movq	-176(%rbp), %rcx
	movq	-168(%rbp), %r8
	leaq	L_.str.1147(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	jmp	LBB312_46
LBB312_43:                              ##   in Loop: Header=BB312_18 Depth=1
	cmpl	$0, -52(%rbp)
	je	LBB312_45
## %bb.44:                              ##   in Loop: Header=BB312_18 Depth=1
	movq	-48(%rbp), %rdi
	movq	-72(%rbp), %rdx
	movq	-160(%rbp), %rcx
	movq	-168(%rbp), %r8
	leaq	L_.str.1148(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB312_45:                              ##   in Loop: Header=BB312_18 Depth=1
	jmp	LBB312_46
LBB312_46:                              ##   in Loop: Header=BB312_18 Depth=1
	jmp	LBB312_47
LBB312_47:                              ##   in Loop: Header=BB312_18 Depth=1
	jmp	LBB312_18
LBB312_48:
	movq	-120(%rbp), %rdi
	callq	_sqlite3_free
	cmpl	$0, -76(%rbp)
	je	LBB312_50
## %bb.49:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rax
	movq	%rdi, -208(%rbp)        ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-208(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.219(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB312_50:
	movq	-88(%rbp), %rdi
	callq	_sqlite3_finalize
	movl	%eax, -112(%rbp)
	cmpl	$0, -76(%rbp)
	jne	LBB312_53
## %bb.51:
	cmpl	$0, -112(%rbp)
	je	LBB312_53
## %bb.52:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movl	-112(%rbp), %ecx
	movl	%ecx, -76(%rbp)
	movq	(%rax), %rdi
	movq	-40(%rbp), %rax
	movq	%rdi, -216(%rbp)        ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-216(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.219(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB312_53:
	jmp	LBB312_55
LBB312_54:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rax
	movq	%rdi, -224(%rbp)        ## 8-byte Spill
	movq	%rax, %rdi
	callq	_sqlite3_errmsg
	movq	-224(%rbp), %rdi        ## 8-byte Reload
	leaq	L_.str.219(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
LBB312_55:
	movl	-76(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB312_56:
	movl	-4(%rbp), %eax
	addq	$240, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function shellFkeyCollateClause
_shellFkeyCollateClause:                ## @shellFkeyCollateClause
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	_sqlite3_context_db_handle
	movq	%rax, -32(%rbp)
	movq	$0, -80(%rbp)
	cmpl	$4, -12(%rbp)
	sete	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %esi
	movslq	%esi, %rax
	cmpq	$0, %rax
	je	LBB313_2
## %bb.1:
	leaq	L___func__.shellFkeyCollateClause(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.1149(%rip), %rcx
	movl	$17164, %edx            ## imm = 0x430C
	callq	___assert_rtn
LBB313_2:
	jmp	LBB313_3
LBB313_3:
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	callq	_sqlite3_value_text
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdi
	callq	_sqlite3_value_text
	xorl	%ecx, %ecx
                                        ## kill: def $rcx killed $ecx
	movq	%rax, -72(%rbp)
	movq	-8(%rbp), %rdi
	leaq	L_.str.27(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_result_text
	xorl	%edx, %edx
	movl	%edx, %r8d
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movq	-48(%rbp), %rcx
	leaq	L___func__.main(%rip), %rsi
	leaq	-56(%rbp), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movq	$0, 16(%rsp)
	callq	_sqlite3_table_column_metadata
	movl	%eax, -84(%rbp)
	cmpl	$0, -84(%rbp)
	jne	LBB313_5
## %bb.4:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rdx
	movq	-72(%rbp), %rcx
	leaq	L___func__.main(%rip), %rsi
	leaq	-80(%rbp), %r9
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movq	$0, 16(%rsp)
	callq	_sqlite3_table_column_metadata
	movl	%eax, -84(%rbp)
LBB313_5:
	cmpl	$0, -84(%rbp)
	jne	LBB313_8
## %bb.6:
	movq	-56(%rbp), %rdi
	movq	-80(%rbp), %rsi
	callq	_sqlite3_stricmp
	cmpl	$0, %eax
	je	LBB313_8
## %bb.7:
	movq	-56(%rbp), %rsi
	leaq	L_.str.192(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -96(%rbp)
	movq	-8(%rbp), %rdi
	movq	-96(%rbp), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	movq	$-1, %rcx
	callq	_sqlite3_result_text
	movq	-96(%rbp), %rdi
	callq	_sqlite3_free
LBB313_8:
	addq	$128, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function displayStatLine
_displayStatLine:                       ## @displayStatLine
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              ## imm = 0x110
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -216(%rbp)
	movq	%rsi, -224(%rbp)
	movq	%rdx, -232(%rbp)
	movl	%ecx, -236(%rbp)
	movl	%r8d, -240(%rbp)
	movq	$-1, -248(%rbp)
	movq	$-1, -256(%rbp)
	movl	-236(%rbp), %edi
	movl	-240(%rbp), %ecx
	leaq	-248(%rbp), %rsi
	leaq	-256(%rbp), %rdx
	callq	_sqlite3_status64
	movl	$0, -260(%rbp)
	movl	$0, -264(%rbp)
LBB314_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-232(%rbp), %rax
	movslq	-260(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	LBB314_6
## %bb.2:                               ##   in Loop: Header=BB314_1 Depth=1
	movq	-232(%rbp), %rax
	movslq	-260(%rbp), %rcx
	movsbl	(%rax,%rcx), %edx
	cmpl	$37, %edx
	jne	LBB314_4
## %bb.3:                               ##   in Loop: Header=BB314_1 Depth=1
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
LBB314_4:                               ##   in Loop: Header=BB314_1 Depth=1
	jmp	LBB314_5
LBB314_5:                               ##   in Loop: Header=BB314_1 Depth=1
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
	jmp	LBB314_1
LBB314_6:
	cmpl	$1, -264(%rbp)
	jle	LBB314_8
## %bb.7:
	leaq	-208(%rbp), %rsi
	movq	-232(%rbp), %rdx
	movq	-248(%rbp), %rcx
	movq	-256(%rbp), %r8
	movl	$200, %edi
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB314_9
LBB314_8:
	leaq	-208(%rbp), %rsi
	movq	-232(%rbp), %rdx
	movq	-256(%rbp), %rcx
	movl	$200, %edi
	movb	$0, %al
	callq	_sqlite3_snprintf
LBB314_9:
	leaq	-208(%rbp), %rcx
	movq	-216(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-224(%rbp), %rdx
	leaq	L_.str.1168(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	jne	LBB314_11
## %bb.10:
	addq	$272, %rsp              ## imm = 0x110
	popq	%rbp
	retq
LBB314_11:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function expertHandleSQL
_expertHandleSQL:                       ## @expertHandleSQL
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 1624(%rax)
	setne	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %r8d
	movslq	%r8d, %rax
	cmpq	$0, %rax
	je	LBB315_2
## %bb.1:
	leaq	L___func__.expertHandleSQL(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.1206(%rip), %rcx
	movl	$14720, %edx            ## imm = 0x3980
	callq	___assert_rtn
LBB315_2:
	jmp	LBB315_3
LBB315_3:
	cmpq	$0, -24(%rbp)
	movb	$1, %al
	movb	%al, -25(%rbp)          ## 1-byte Spill
	je	LBB315_5
## %bb.4:
	movq	-24(%rbp), %rax
	cmpq	$0, (%rax)
	sete	%cl
	movb	%cl, -25(%rbp)          ## 1-byte Spill
LBB315_5:
	movb	-25(%rbp), %al          ## 1-byte Reload
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movslq	%ecx, %rdx
	cmpq	$0, %rdx
	je	LBB315_7
## %bb.6:
	leaq	L___func__.expertHandleSQL(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.1207(%rip), %rcx
	movl	$14721, %edx            ## imm = 0x3981
	callq	___assert_rtn
LBB315_7:
	jmp	LBB315_8
LBB315_8:
	movq	-8(%rbp), %rax
	movq	1624(%rax), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	_sqlite3_expert_sql
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function save_err_msg
_save_err_msg:                          ## @save_err_msg
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, %rdi
	callq	_sqlite3_str_new
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdi, -64(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	movq	%rdx, -72(%rbp)         ## 8-byte Spill
	callq	_sqlite3_errmsg
	movq	-64(%rbp), %rdi         ## 8-byte Reload
	leaq	L_.str.1208(%rip), %rsi
	movq	-72(%rbp), %rdx         ## 8-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	_sqlite3_str_appendf
	cmpl	$1, -20(%rbp)
	jle	LBB316_2
## %bb.1:
	movq	-56(%rbp), %rdi
	movl	-20(%rbp), %edx
	leaq	L_.str.1209(%rip), %rsi
	movb	$0, %al
	callq	_sqlite3_str_appendf
LBB316_2:
	movq	-32(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	_shell_error_context
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	LBB316_4
## %bb.3:
	movq	-56(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	_sqlite3_str_appendall
	movq	-48(%rbp), %rdi
	callq	_sqlite3_free
LBB316_4:
	movq	-56(%rbp), %rdi
	callq	_sqlite3_str_finish
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	_shell_check_oom
	movq	-40(%rbp), %rax
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function disable_debug_trace_modes
_disable_debug_trace_modes:             ## @disable_debug_trace_modes
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%esi, %esi
	movl	$0, -4(%rbp)
	movl	$31, %edi
	leaq	_savedSelectTrace(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	$31, %edi
	movl	$1, %esi
	leaq	-4(%rbp), %rdx
	movl	%eax, -8(%rbp)          ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	$31, %edi
	movl	$2, %esi
	leaq	_savedWhereTrace(%rip), %rdx
	movl	%eax, -12(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	$31, %edi
	movl	$3, %esi
	leaq	-4(%rbp), %rdx
	movl	%eax, -16(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_test_control
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function eqp_render
_eqp_render:                            ## @eqp_render
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	1504(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	LBB318_7
## %bb.1:
	movq	-16(%rbp), %rax
	movsbl	16(%rax), %ecx
	cmpl	$45, %ecx
	jne	LBB318_5
## %bb.2:
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	jne	LBB318_4
## %bb.3:
	movq	-8(%rbp), %rdi
	callq	_eqp_reset
	jmp	LBB318_7
LBB318_4:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-16(%rbp), %rax
	addq	$16, %rax
	addq	$3, %rax
	leaq	L_.str.219(%rip), %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	_fprintf
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 1504(%rdx)
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdi
	movl	%eax, -20(%rbp)         ## 4-byte Spill
	callq	_sqlite3_free
	jmp	LBB318_6
LBB318_5:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.1210(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB318_6:
	xorl	%esi, %esi
	movq	-8(%rbp), %rax
	movb	$0, 1520(%rax)
	movq	-8(%rbp), %rdi
	callq	_eqp_render_level
	movq	-8(%rbp), %rdi
	callq	_eqp_reset
LBB318_7:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function explain_data_prepare
_explain_data_prepare:                  ## @explain_data_prepare
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	xorl	%eax, %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -8(%rbp)
	movq	%rdi, -136(%rbp)
	movq	%rsi, -144(%rbp)
	movq	$0, -168(%rbp)
	movl	$0, -172(%rbp)
	leaq	-64(%rbp), %rcx
	movq	%rcx, %rdi
	movl	%eax, %esi
	movl	$48, %ecx
	movq	%rcx, %rdx
	movl	%eax, -208(%rbp)        ## 4-byte Spill
	movq	%rcx, -216(%rbp)        ## 8-byte Spill
	callq	_memset
	leaq	L_.str.1216(%rip), %rcx
	movq	%rcx, -64(%rbp)
	leaq	L_.str.1217(%rip), %rcx
	movq	%rcx, -56(%rbp)
	leaq	L_.str.1218(%rip), %rcx
	movq	%rcx, -48(%rbp)
	leaq	L_.str.1219(%rip), %rcx
	movq	%rcx, -40(%rbp)
	leaq	L_.str.1220(%rip), %rcx
	movq	%rcx, -32(%rbp)
	leaq	-112(%rbp), %rcx
	movq	%rcx, %rdi
	movl	-208(%rbp), %esi        ## 4-byte Reload
	movq	-216(%rbp), %rdx        ## 8-byte Reload
	callq	_memset
	leaq	L_.str.1221(%rip), %rcx
	movq	%rcx, -112(%rbp)
	leaq	L_.str.1222(%rip), %rcx
	movq	%rcx, -104(%rbp)
	leaq	L_.str.1223(%rip), %rcx
	movq	%rcx, -96(%rbp)
	leaq	L_.str.1224(%rip), %rcx
	movq	%rcx, -88(%rbp)
	leaq	L_.str.1225(%rip), %rcx
	movq	%rcx, -80(%rbp)
	movq	l___const.explain_data_prepare.azGoto(%rip), %rcx
	movq	%rcx, -128(%rbp)
	movq	l___const.explain_data_prepare.azGoto+8(%rip), %rcx
	movq	%rcx, -120(%rbp)
	movq	-144(%rbp), %rdi
	callq	_sqlite3_column_count
	cmpl	$8, %eax
	je	LBB319_2
## %bb.1:
	movq	-136(%rbp), %rax
	movl	84(%rax), %ecx
	movq	-136(%rbp), %rax
	movl	%ecx, 92(%rax)
	jmp	LBB319_45
LBB319_2:
	movq	-144(%rbp), %rdi
	callq	_sqlite3_sql
	movq	%rax, -152(%rbp)
	cmpq	$0, -152(%rbp)
	jne	LBB319_4
## %bb.3:
	jmp	LBB319_45
LBB319_4:
	movq	-152(%rbp), %rax
	movq	%rax, -160(%rbp)
LBB319_5:                               ## =>This Inner Loop Header: Depth=1
	movq	-160(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$32, %ecx
	movb	$1, %dl
	movb	%dl, -217(%rbp)         ## 1-byte Spill
	je	LBB319_10
## %bb.6:                               ##   in Loop: Header=BB319_5 Depth=1
	movq	-160(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$9, %ecx
	movb	$1, %dl
	movb	%dl, -217(%rbp)         ## 1-byte Spill
	je	LBB319_10
## %bb.7:                               ##   in Loop: Header=BB319_5 Depth=1
	movq	-160(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$10, %ecx
	movb	$1, %dl
	movb	%dl, -217(%rbp)         ## 1-byte Spill
	je	LBB319_10
## %bb.8:                               ##   in Loop: Header=BB319_5 Depth=1
	movq	-160(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$12, %ecx
	movb	$1, %dl
	movb	%dl, -217(%rbp)         ## 1-byte Spill
	je	LBB319_10
## %bb.9:                               ##   in Loop: Header=BB319_5 Depth=1
	movq	-160(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$13, %ecx
	sete	%dl
	movb	%dl, -217(%rbp)         ## 1-byte Spill
LBB319_10:                              ##   in Loop: Header=BB319_5 Depth=1
	movb	-217(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB319_11
	jmp	LBB319_13
LBB319_11:                              ##   in Loop: Header=BB319_5 Depth=1
	jmp	LBB319_12
LBB319_12:                              ##   in Loop: Header=BB319_5 Depth=1
	movq	-160(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -160(%rbp)
	jmp	LBB319_5
LBB319_13:
	movq	-160(%rbp), %rdi
	leaq	L_.str.404(%rip), %rsi
	movl	$7, %edx
	callq	_sqlite3_strnicmp
	cmpl	$0, %eax
	je	LBB319_15
## %bb.14:
	movq	-136(%rbp), %rax
	movl	84(%rax), %ecx
	movq	-136(%rbp), %rax
	movl	%ecx, 92(%rax)
	jmp	LBB319_45
LBB319_15:
	movl	$0, -176(%rbp)
LBB319_16:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB319_20 Depth 2
                                        ##     Child Loop BB319_29 Depth 2
                                        ##     Child Loop BB319_38 Depth 2
	movq	-144(%rbp), %rdi
	callq	_sqlite3_step
	movl	$100, %ecx
	cmpl	%eax, %ecx
	jne	LBB319_44
## %bb.17:                              ##   in Loop: Header=BB319_16 Depth=1
	xorl	%esi, %esi
	movq	-144(%rbp), %rdi
	callq	_sqlite3_column_int
	movl	%eax, -184(%rbp)
	movq	-144(%rbp), %rdi
	movl	$1, %esi
	callq	_sqlite3_column_text
	movq	%rax, -192(%rbp)
	movq	-144(%rbp), %rdi
	movl	$3, %esi
	callq	_sqlite3_column_int
	movl	%eax, -196(%rbp)
	movl	-196(%rbp), %eax
	movl	-176(%rbp), %ecx
	subl	-184(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -200(%rbp)
	movl	-176(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jl	LBB319_27
## %bb.18:                              ##   in Loop: Header=BB319_16 Depth=1
	cmpl	$0, -176(%rbp)
	jne	LBB319_26
## %bb.19:                              ##   in Loop: Header=BB319_16 Depth=1
	movl	$0, -204(%rbp)
LBB319_20:                              ##   Parent Loop BB319_16 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpl	$8, -204(%rbp)
	jge	LBB319_25
## %bb.21:                              ##   in Loop: Header=BB319_20 Depth=2
	movq	-144(%rbp), %rdi
	movl	-204(%rbp), %esi
	callq	_sqlite3_column_name
	movslq	-204(%rbp), %rcx
	leaq	_explain_data_prepare.explainCols(%rip), %rdx
	movq	(%rdx,%rcx,8), %rsi
	movq	%rax, %rdi
	callq	_strcmp
	cmpl	$0, %eax
	je	LBB319_23
## %bb.22:
	movq	-136(%rbp), %rax
	movl	84(%rax), %ecx
	movq	-136(%rbp), %rax
	movl	%ecx, 92(%rax)
	movq	-144(%rbp), %rdi
	callq	_sqlite3_reset
	jmp	LBB319_45
LBB319_23:                              ##   in Loop: Header=BB319_20 Depth=2
	jmp	LBB319_24
LBB319_24:                              ##   in Loop: Header=BB319_20 Depth=2
	movl	-204(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -204(%rbp)
	jmp	LBB319_20
LBB319_25:                              ##   in Loop: Header=BB319_16 Depth=1
	jmp	LBB319_26
LBB319_26:                              ##   in Loop: Header=BB319_16 Depth=1
	movl	-172(%rbp), %eax
	addl	$100, %eax
	movl	%eax, -172(%rbp)
	movq	-136(%rbp), %rcx
	movq	1480(%rcx), %rcx
	movslq	-172(%rbp), %rdx
	shlq	$2, %rdx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	callq	_sqlite3_realloc64
	movq	-136(%rbp), %rcx
	movq	%rax, 1480(%rcx)
	movq	-136(%rbp), %rax
	movq	1480(%rax), %rax
	movq	%rax, %rdi
	callq	_shell_check_oom
	movq	-168(%rbp), %rax
	movslq	-172(%rbp), %rcx
	shlq	$2, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_sqlite3_realloc64
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movq	%rax, %rdi
	callq	_shell_check_oom
LBB319_27:                              ##   in Loop: Header=BB319_16 Depth=1
	leaq	-112(%rbp), %rsi
	movq	-192(%rbp), %rdi
	callq	_str_in_array
	leaq	-64(%rbp), %rsi
	movq	-168(%rbp), %rcx
	movslq	-176(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-136(%rbp), %rcx
	movq	1480(%rcx), %rcx
	movslq	-176(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movl	-176(%rbp), %eax
	addl	$1, %eax
	movq	-136(%rbp), %rcx
	movl	%eax, 1488(%rcx)
	movq	-192(%rbp), %rdi
	callq	_str_in_array
	cmpl	$0, %eax
	je	LBB319_33
## %bb.28:                              ##   in Loop: Header=BB319_16 Depth=1
	movl	-200(%rbp), %eax
	movl	%eax, -180(%rbp)
LBB319_29:                              ##   Parent Loop BB319_16 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-180(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	LBB319_32
## %bb.30:                              ##   in Loop: Header=BB319_29 Depth=2
	movq	-136(%rbp), %rax
	movq	1480(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$2, %edx
	movl	%edx, (%rax,%rcx,4)
## %bb.31:                              ##   in Loop: Header=BB319_29 Depth=2
	movl	-180(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -180(%rbp)
	jmp	LBB319_29
LBB319_32:                              ##   in Loop: Header=BB319_16 Depth=1
	jmp	LBB319_33
LBB319_33:                              ##   in Loop: Header=BB319_16 Depth=1
	leaq	-128(%rbp), %rsi
	movq	-192(%rbp), %rdi
	callq	_str_in_array
	cmpl	$0, %eax
	je	LBB319_42
## %bb.34:                              ##   in Loop: Header=BB319_16 Depth=1
	movl	-200(%rbp), %eax
	movq	-136(%rbp), %rcx
	cmpl	1488(%rcx), %eax
	jge	LBB319_42
## %bb.35:                              ##   in Loop: Header=BB319_16 Depth=1
	movq	-168(%rbp), %rax
	movslq	-200(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	LBB319_37
## %bb.36:                              ##   in Loop: Header=BB319_16 Depth=1
	movq	-144(%rbp), %rdi
	movl	$2, %esi
	callq	_sqlite3_column_int
	cmpl	$0, %eax
	je	LBB319_42
LBB319_37:                              ##   in Loop: Header=BB319_16 Depth=1
	movl	-200(%rbp), %eax
	movl	%eax, -180(%rbp)
LBB319_38:                              ##   Parent Loop BB319_16 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-180(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	LBB319_41
## %bb.39:                              ##   in Loop: Header=BB319_38 Depth=2
	movq	-136(%rbp), %rax
	movq	1480(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$2, %edx
	movl	%edx, (%rax,%rcx,4)
## %bb.40:                              ##   in Loop: Header=BB319_38 Depth=2
	movl	-180(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -180(%rbp)
	jmp	LBB319_38
LBB319_41:                              ##   in Loop: Header=BB319_16 Depth=1
	jmp	LBB319_42
LBB319_42:                              ##   in Loop: Header=BB319_16 Depth=1
	jmp	LBB319_43
LBB319_43:                              ##   in Loop: Header=BB319_16 Depth=1
	movl	-176(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -176(%rbp)
	jmp	LBB319_16
LBB319_44:
	movq	-136(%rbp), %rax
	movl	$0, 1492(%rax)
	movq	-168(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	movq	-144(%rbp), %rdi
	callq	_sqlite3_reset
LBB319_45:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	LBB319_47
## %bb.46:
	addq	$224, %rsp
	popq	%rbp
	retq
LBB319_47:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function exec_prepared_stmt
_exec_prepared_stmt:                    ## @exec_prepared_stmt
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$304, %rsp              ## imm = 0x130
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -216(%rbp)
	movq	%rsi, -224(%rbp)
	movq	$0, -240(%rbp)
	movq	-216(%rbp), %rax
	cmpl	$1, 92(%rax)
	je	LBB320_4
## %bb.1:
	movq	-216(%rbp), %rax
	cmpl	$15, 92(%rax)
	je	LBB320_4
## %bb.2:
	movq	-216(%rbp), %rax
	cmpl	$16, 92(%rax)
	je	LBB320_4
## %bb.3:
	movq	-216(%rbp), %rax
	cmpl	$14, 92(%rax)
	jne	LBB320_5
LBB320_4:
	movq	-216(%rbp), %rdi
	movq	-224(%rbp), %rsi
	callq	_exec_prepared_stmt_columnar
	jmp	LBB320_40
LBB320_5:
	movq	-224(%rbp), %rdi
	callq	_sqlite3_step
	movl	%eax, -228(%rbp)
	movl	$100, %eax
	cmpl	-228(%rbp), %eax
	jne	LBB320_40
## %bb.6:
	movq	-224(%rbp), %rdi
	callq	_sqlite3_column_count
	movl	%eax, -244(%rbp)
	imull	$3, -244(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$3, %rcx
	addq	$1, %rcx
	movq	%rcx, %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -256(%rbp)
	cmpq	$0, -256(%rbp)
	jne	LBB320_8
## %bb.7:
	callq	_shell_out_of_memory
	jmp	LBB320_39
LBB320_8:
	movq	-256(%rbp), %rax
	movq	%rax, -264(%rbp)
	movq	-264(%rbp), %rax
	movslq	-244(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	%rax, -272(%rbp)
	movq	-272(%rbp), %rax
	movslq	-244(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	%rax, -280(%rbp)
	movl	$0, -284(%rbp)
LBB320_9:                               ## =>This Inner Loop Header: Depth=1
	movl	-284(%rbp), %eax
	cmpl	-244(%rbp), %eax
	jge	LBB320_12
## %bb.10:                              ##   in Loop: Header=BB320_9 Depth=1
	movq	-224(%rbp), %rdi
	movl	-284(%rbp), %esi
	callq	_sqlite3_column_name
	movq	-264(%rbp), %rcx
	movslq	-284(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
## %bb.11:                              ##   in Loop: Header=BB320_9 Depth=1
	movl	-284(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -284(%rbp)
	jmp	LBB320_9
LBB320_12:
	jmp	LBB320_13
LBB320_13:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB320_14 Depth 2
	movq	-240(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -240(%rbp)
	movl	$0, -284(%rbp)
LBB320_14:                              ##   Parent Loop BB320_13 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-284(%rbp), %eax
	cmpl	-244(%rbp), %eax
	jge	LBB320_26
## %bb.15:                              ##   in Loop: Header=BB320_14 Depth=2
	movq	-224(%rbp), %rdi
	movl	-284(%rbp), %esi
	callq	_sqlite3_column_type
	movl	%eax, -288(%rbp)
	movq	-280(%rbp), %rcx
	movslq	-284(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$4, -288(%rbp)
	jne	LBB320_20
## %bb.16:                              ##   in Loop: Header=BB320_14 Depth=2
	cmpq	$0, -216(%rbp)
	je	LBB320_20
## %bb.17:                              ##   in Loop: Header=BB320_14 Depth=2
	movq	-216(%rbp), %rax
	cmpl	$5, 92(%rax)
	je	LBB320_19
## %bb.18:                              ##   in Loop: Header=BB320_14 Depth=2
	movq	-216(%rbp), %rax
	cmpl	$6, 92(%rax)
	jne	LBB320_20
LBB320_19:                              ##   in Loop: Header=BB320_14 Depth=2
	movq	-272(%rbp), %rax
	movslq	-284(%rbp), %rcx
	leaq	L_.str.27(%rip), %rdx
	movq	%rdx, (%rax,%rcx,8)
	jmp	LBB320_21
LBB320_20:                              ##   in Loop: Header=BB320_14 Depth=2
	movq	-224(%rbp), %rdi
	movl	-284(%rbp), %esi
	callq	_sqlite3_column_text
	movq	-272(%rbp), %rcx
	movslq	-284(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
LBB320_21:                              ##   in Loop: Header=BB320_14 Depth=2
	movq	-272(%rbp), %rax
	movslq	-284(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	jne	LBB320_24
## %bb.22:                              ##   in Loop: Header=BB320_14 Depth=2
	movq	-280(%rbp), %rax
	movslq	-284(%rbp), %rcx
	cmpl	$5, (%rax,%rcx,4)
	je	LBB320_24
## %bb.23:                              ##   in Loop: Header=BB320_13 Depth=1
	movl	$7, -228(%rbp)
	jmp	LBB320_26
LBB320_24:                              ##   in Loop: Header=BB320_14 Depth=2
	jmp	LBB320_25
LBB320_25:                              ##   in Loop: Header=BB320_14 Depth=2
	movl	-284(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -284(%rbp)
	jmp	LBB320_14
LBB320_26:                              ##   in Loop: Header=BB320_13 Depth=1
	movl	$100, %eax
	cmpl	-228(%rbp), %eax
	jne	LBB320_31
## %bb.27:                              ##   in Loop: Header=BB320_13 Depth=1
	movq	-216(%rbp), %rax
	movl	-244(%rbp), %esi
	movq	-272(%rbp), %rdx
	movq	-264(%rbp), %rcx
	movq	-280(%rbp), %r8
	movq	%rax, %rdi
	callq	_shell_callback
	cmpl	$0, %eax
	je	LBB320_29
## %bb.28:                              ##   in Loop: Header=BB320_13 Depth=1
	movl	$4, -228(%rbp)
	jmp	LBB320_30
LBB320_29:                              ##   in Loop: Header=BB320_13 Depth=1
	movq	-224(%rbp), %rdi
	callq	_sqlite3_step
	movl	%eax, -228(%rbp)
LBB320_30:                              ##   in Loop: Header=BB320_13 Depth=1
	jmp	LBB320_31
LBB320_31:                              ##   in Loop: Header=BB320_13 Depth=1
	jmp	LBB320_32
LBB320_32:                              ##   in Loop: Header=BB320_13 Depth=1
	movl	$100, %eax
	cmpl	-228(%rbp), %eax
	je	LBB320_13
## %bb.33:
	movq	-256(%rbp), %rdi
	callq	_sqlite3_free
	movq	-216(%rbp), %rax
	cmpl	$13, 92(%rax)
	jne	LBB320_35
## %bb.34:
	movq	-216(%rbp), %rax
	movq	64(%rax), %rsi
	leaq	L_.str.1235(%rip), %rdi
	callq	_fputs
	jmp	LBB320_38
LBB320_35:
	movq	-216(%rbp), %rax
	cmpl	$17, 92(%rax)
	jne	LBB320_37
## %bb.36:
	leaq	-208(%rbp), %rsi
	movq	-240(%rbp), %rcx
	movq	-240(%rbp), %rax
	cmpq	$1, %rax
	leaq	L_.str.1237(%rip), %rax
	leaq	L_.str.27(%rip), %rdx
	cmovneq	%rax, %rdx
	movl	$200, %edi
	leaq	L_.str.1236(%rip), %rax
	movq	%rdx, -296(%rbp)        ## 8-byte Spill
	movq	%rax, %rdx
	movq	-296(%rbp), %r8         ## 8-byte Reload
	movb	$0, %al
	callq	_sqlite3_snprintf
	leaq	-208(%rbp), %rsi
	leaq	L_.str.79(%rip), %rdi
	movq	%rax, -304(%rbp)        ## 8-byte Spill
	movb	$0, %al
	callq	_printf
LBB320_37:
	jmp	LBB320_38
LBB320_38:
	jmp	LBB320_39
LBB320_39:
	jmp	LBB320_40
LBB320_40:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	LBB320_42
## %bb.41:
	addq	$304, %rsp              ## imm = 0x130
	popq	%rbp
	retq
LBB320_42:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function explain_data_delete
_explain_data_delete:                   ## @explain_data_delete
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	1480(%rax), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	movq	-8(%rbp), %rax
	movq	$0, 1480(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 1488(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 1492(%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function restore_debug_trace_modes
_restore_debug_trace_modes:             ## @restore_debug_trace_modes
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$31, %edi
	movl	$1, %esi
	leaq	_savedSelectTrace(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_test_control
	movl	$31, %edi
	movl	$3, %esi
	leaq	_savedWhereTrace(%rip), %rdx
	movl	%eax, -4(%rbp)          ## 4-byte Spill
	movb	$0, %al
	callq	_sqlite3_test_control
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function bind_prepared_stmt
_bind_prepared_stmt:                    ## @bind_prepared_stmt
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	$0, -88(%rbp)
	movq	-64(%rbp), %rdi
	callq	_sqlite3_bind_parameter_count
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	jne	LBB323_2
## %bb.1:
	jmp	LBB323_17
LBB323_2:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-56(%rbp), %rdx
	movq	(%rdx), %rdi
	leaq	L_.str.1154(%rip), %rsi
	leaq	L_.str.1258(%rip), %rdx
	leaq	L_.str.1259(%rip), %r8
	movq	%rcx, -104(%rbp)        ## 8-byte Spill
	movq	%r8, %rcx
	movq	-104(%rbp), %r8         ## 8-byte Reload
	movq	-104(%rbp), %r9         ## 8-byte Reload
	movq	$0, (%rsp)
	movq	$0, 8(%rsp)
	movq	$0, 16(%rsp)
	callq	_sqlite3_table_column_metadata
	cmpl	$0, %eax
	je	LBB323_4
## %bb.3:
	jmp	LBB323_17
LBB323_4:
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-56(%rbp), %rcx
	movq	(%rcx), %rdi
	leaq	L_.str.1260(%rip), %rsi
	movl	$4294967295, %edx       ## imm = 0xFFFFFFFF
	leaq	-88(%rbp), %rcx
	callq	_sqlite3_prepare_v2
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jne	LBB323_6
## %bb.5:
	cmpq	$0, -88(%rbp)
	jne	LBB323_7
LBB323_6:
	jmp	LBB323_17
LBB323_7:
	movl	$1, -72(%rbp)
LBB323_8:                               ## =>This Inner Loop Header: Depth=1
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	LBB323_16
## %bb.9:                               ##   in Loop: Header=BB323_8 Depth=1
	movq	-64(%rbp), %rdi
	movl	-72(%rbp), %esi
	callq	_sqlite3_bind_parameter_name
	movq	%rax, -96(%rbp)
	cmpq	$0, -96(%rbp)
	jne	LBB323_11
## %bb.10:                              ##   in Loop: Header=BB323_8 Depth=1
	leaq	-48(%rbp), %rsi
	movl	-72(%rbp), %ecx
	movl	$30, %edi
	leaq	L_.str.1261(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	leaq	-48(%rbp), %rdx
	movq	%rdx, -96(%rbp)
LBB323_11:                              ##   in Loop: Header=BB323_8 Depth=1
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-88(%rbp), %rdi
	movq	-96(%rbp), %rdx
	movl	$1, %esi
	movl	$4294967295, %ecx       ## imm = 0xFFFFFFFF
	callq	_sqlite3_bind_text
	movq	-88(%rbp), %rdi
	movl	%eax, -108(%rbp)        ## 4-byte Spill
	callq	_sqlite3_step
	cmpl	$100, %eax
	jne	LBB323_13
## %bb.12:                              ##   in Loop: Header=BB323_8 Depth=1
	xorl	%esi, %esi
	movq	-64(%rbp), %rdi
	movl	-72(%rbp), %eax
	movq	-88(%rbp), %rcx
	movq	%rdi, -120(%rbp)        ## 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, -124(%rbp)        ## 4-byte Spill
	callq	_sqlite3_column_value
	movq	-120(%rbp), %rdi        ## 8-byte Reload
	movl	-124(%rbp), %esi        ## 4-byte Reload
	movq	%rax, %rdx
	callq	_sqlite3_bind_value
	jmp	LBB323_14
LBB323_13:                              ##   in Loop: Header=BB323_8 Depth=1
	movq	-64(%rbp), %rdi
	movl	-72(%rbp), %esi
	callq	_sqlite3_bind_null
LBB323_14:                              ##   in Loop: Header=BB323_8 Depth=1
	movq	-88(%rbp), %rdi
	callq	_sqlite3_reset
## %bb.15:                              ##   in Loop: Header=BB323_8 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	LBB323_8
LBB323_16:
	movq	-88(%rbp), %rdi
	callq	_sqlite3_finalize
LBB323_17:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	LBB323_19
## %bb.18:
	addq	$160, %rsp
	popq	%rbp
	retq
LBB323_19:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function display_scanstats
_display_scanstats:                     ## @display_scanstats
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function eqp_reset
_eqp_reset:                             ## @eqp_reset
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	1504(%rax), %rax
	movq	%rax, -16(%rbp)
LBB325_1:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -16(%rbp)
	je	LBB325_4
## %bb.2:                               ##   in Loop: Header=BB325_1 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
## %bb.3:                               ##   in Loop: Header=BB325_1 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
	jmp	LBB325_1
LBB325_4:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-8(%rbp), %rax
	addq	$1504, %rax             ## imm = 0x5E0
	movq	%rax, %rdi
	movl	$120, %edx
	callq	___memset_chk
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function eqp_render_level
_eqp_render_level:                      ## @eqp_render_level
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	addq	$1504, %rax             ## imm = 0x5E0
	addq	$16, %rax
	movq	%rax, %rdi
	callq	_strlen30
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	_eqp_next_row
	movq	%rax, -24(%rbp)
LBB326_1:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	LBB326_6
## %bb.2:                               ##   in Loop: Header=BB326_1 Depth=1
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rdx
	callq	_eqp_next_row
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-8(%rbp), %rax
	addq	$1504, %rax             ## imm = 0x5E0
	addq	$16, %rax
	movq	-32(%rbp), %rcx
	cmpq	$0, %rcx
	leaq	L_.str.1212(%rip), %rcx
	leaq	L_.str.1213(%rip), %rdx
	cmovneq	%rcx, %rdx
	movq	-48(%rbp), %r8
	leaq	L_.str.1211(%rip), %rsi
	movq	%rdx, -56(%rbp)         ## 8-byte Spill
	movq	%rax, %rdx
	movq	-56(%rbp), %rcx         ## 8-byte Reload
	movb	$0, %al
	callq	_fprintf
	cmpl	$93, -36(%rbp)
	jge	LBB326_4
## %bb.3:                               ##   in Loop: Header=BB326_1 Depth=1
	movq	$-1, %rcx
	movq	-8(%rbp), %rax
	addq	$1504, %rax             ## imm = 0x5E0
	addq	$16, %rax
	movslq	-36(%rbp), %rdx
	addq	%rdx, %rax
	movq	-32(%rbp), %rdx
	cmpq	$0, %rdx
	leaq	L_.str.1214(%rip), %rdx
	leaq	L_.str.1215(%rip), %rsi
	cmovneq	%rdx, %rsi
	movq	%rax, %rdi
	movl	$4, %edx
	callq	___memcpy_chk
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	(%rcx), %esi
	movq	%rax, -64(%rbp)         ## 8-byte Spill
	callq	_eqp_render_level
	movq	-8(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	$0, 1520(%rax,%rcx)
LBB326_4:                               ##   in Loop: Header=BB326_1 Depth=1
	jmp	LBB326_5
LBB326_5:                               ##   in Loop: Header=BB326_1 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
	jmp	LBB326_1
LBB326_6:
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function eqp_next_row
_eqp_next_row:                          ## @eqp_next_row
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	LBB327_2
## %bb.1:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)         ## 8-byte Spill
	jmp	LBB327_3
LBB327_2:
	movq	-8(%rbp), %rax
	movq	1504(%rax), %rax
	movq	%rax, -40(%rbp)         ## 8-byte Spill
LBB327_3:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	movq	%rax, -32(%rbp)
LBB327_4:                               ## =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	cmpq	$0, -32(%rbp)
	movb	%al, -41(%rbp)          ## 1-byte Spill
	je	LBB327_6
## %bb.5:                               ##   in Loop: Header=BB327_4 Depth=1
	movq	-32(%rbp), %rax
	movl	4(%rax), %ecx
	cmpl	-12(%rbp), %ecx
	setne	%dl
	movb	%dl, -41(%rbp)          ## 1-byte Spill
LBB327_6:                               ##   in Loop: Header=BB327_4 Depth=1
	movb	-41(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB327_7
	jmp	LBB327_8
LBB327_7:                               ##   in Loop: Header=BB327_4 Depth=1
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	LBB327_4
LBB327_8:
	movq	-32(%rbp), %rax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function str_in_array
_str_in_array:                          ## @str_in_array
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$0, -28(%rbp)
LBB328_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	LBB328_6
## %bb.2:                               ##   in Loop: Header=BB328_1 Depth=1
	xorl	%eax, %eax
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rsi
	movl	%eax, -32(%rbp)         ## 4-byte Spill
	callq	_strcmp
	movl	-32(%rbp), %r8d         ## 4-byte Reload
	cmpl	%eax, %r8d
	jne	LBB328_4
## %bb.3:
	movl	$1, -4(%rbp)
	jmp	LBB328_7
LBB328_4:                               ##   in Loop: Header=BB328_1 Depth=1
	jmp	LBB328_5
LBB328_5:                               ##   in Loop: Header=BB328_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB328_1
LBB328_6:
	movl	$0, -4(%rbp)
LBB328_7:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function exec_prepared_stmt_columnar
_exec_prepared_stmt_columnar:           ## @exec_prepared_stmt_columnar
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              ## imm = 0x110
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -28(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	$0, -80(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movq	$0, -144(%rbp)
	movl	$0, -148(%rbp)
	movl	$0, -152(%rbp)
	movq	-8(%rbp), %rax
	movzbl	25(%rax), %ecx
	movl	%ecx, -156(%rbp)
	movq	-16(%rbp), %rdi
	callq	_sqlite3_step
	movl	%eax, -84(%rbp)
	cmpl	$100, -84(%rbp)
	je	LBB329_2
## %bb.1:
	jmp	LBB329_136
LBB329_2:
	movq	-16(%rbp), %rdi
	callq	_sqlite3_column_count
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movslq	%eax, %rcx
	movq	%rcx, -48(%rbp)
	cmpq	$0, -48(%rbp)
	jg	LBB329_4
## %bb.3:
	movq	$1, -48(%rbp)
LBB329_4:
	movq	-48(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	callq	_shell_check_oom
	movslq	-28(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, %rdi
	callq	_shell_check_oom
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-144(%rbp), %rax
	movslq	-28(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	callq	___memset_chk
	movq	-8(%rbp), %rcx
	cmpb	$0, 24(%rcx)
	je	LBB329_6
## %bb.5:
	movslq	-28(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	callq	_shell_check_oom
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-80(%rbp), %rax
	movslq	-28(%rbp), %rdx
	shlq	$3, %rdx
	movq	%rax, %rdi
	callq	___memset_chk
LBB329_6:
	movq	-48(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cqto
	idivq	%rcx
	movq	%rax, %rdi
	callq	_sqlite3_malloc64
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	_shell_check_oom
	movl	-28(%rbp), %esi
	movq	-8(%rbp), %rax
	cmpl	288(%rax), %esi
	jle	LBB329_12
## %bb.7:
	movq	-8(%rbp), %rax
	movq	272(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$2, %rdx
	movq	%rax, %rdi
	movq	%rdx, %rsi
	callq	_realloc
	movq	-8(%rbp), %rdx
	movq	%rax, 272(%rdx)
	movq	-8(%rbp), %rax
	movq	272(%rax), %rax
	movq	%rax, %rdi
	callq	_shell_check_oom
	movq	-8(%rbp), %rax
	movslq	288(%rax), %rax
	movq	%rax, -96(%rbp)
LBB329_8:                               ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	LBB329_11
## %bb.9:                               ##   in Loop: Header=BB329_8 Depth=1
	movq	-8(%rbp), %rax
	movq	272(%rax), %rax
	movq	-96(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
## %bb.10:                              ##   in Loop: Header=BB329_8 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	LBB329_8
LBB329_11:
	movl	-28(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 288(%rcx)
	movq	-8(%rbp), %rcx
	movq	272(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	shlq	$2, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 280(%rdx)
LBB329_12:
	xorl	%esi, %esi
	movq	$-1, %rcx
	movq	-8(%rbp), %rax
	movq	280(%rax), %rax
	movslq	-28(%rbp), %rdx
	shlq	$2, %rdx
	movq	%rax, %rdi
	callq	___memset_chk
	movq	$0, -96(%rbp)
LBB329_13:                              ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	LBB329_18
## %bb.14:                              ##   in Loop: Header=BB329_13 Depth=1
	movq	-8(%rbp), %rax
	movq	272(%rax), %rax
	movq	-96(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movl	%edx, -116(%rbp)
	cmpl	$0, -116(%rbp)
	jge	LBB329_16
## %bb.15:                              ##   in Loop: Header=BB329_13 Depth=1
	xorl	%eax, %eax
	subl	-116(%rbp), %eax
	movl	%eax, -116(%rbp)
LBB329_16:                              ##   in Loop: Header=BB329_13 Depth=1
	movl	-116(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	280(%rcx), %rcx
	movq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
## %bb.17:                              ##   in Loop: Header=BB329_13 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	LBB329_13
LBB329_18:
	movq	$0, -96(%rbp)
LBB329_19:                              ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	LBB329_26
## %bb.20:                              ##   in Loop: Header=BB329_19 Depth=1
	movq	-8(%rbp), %rax
	movq	272(%rax), %rax
	movq	-96(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movl	%edx, -172(%rbp)
	cmpl	$0, -172(%rbp)
	jne	LBB329_22
## %bb.21:                              ##   in Loop: Header=BB329_19 Depth=1
	movq	-8(%rbp), %rax
	movl	20(%rax), %ecx
	movl	%ecx, -172(%rbp)
LBB329_22:                              ##   in Loop: Header=BB329_19 Depth=1
	cmpl	$0, -172(%rbp)
	jge	LBB329_24
## %bb.23:                              ##   in Loop: Header=BB329_19 Depth=1
	xorl	%eax, %eax
	subl	-172(%rbp), %eax
	movl	%eax, -172(%rbp)
LBB329_24:                              ##   in Loop: Header=BB329_19 Depth=1
	movq	-16(%rbp), %rdi
	movq	-96(%rbp), %rax
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, %esi
	callq	_sqlite3_column_name
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	movl	-172(%rbp), %edx
	movl	-156(%rbp), %ecx
                                        ## kill: def $cl killed $cl killed $ecx
	leaq	-168(%rbp), %rsi
	movzbl	%cl, %ecx
	callq	_translateForDisplayAndDup
	movq	-40(%rbp), %rsi
	movq	-96(%rbp), %rdi
	movq	%rax, (%rsi,%rdi,8)
## %bb.25:                              ##   in Loop: Header=BB329_19 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	LBB329_19
LBB329_26:
	jmp	LBB329_27
LBB329_27:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB329_30 Depth 2
	movl	-148(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	$0, -148(%rbp)
	movq	-24(%rbp), %rcx
	addq	$2, %rcx
	movslq	-28(%rbp), %rdx
	imulq	%rdx, %rcx
	cmpq	-48(%rbp), %rcx
	jl	LBB329_29
## %bb.28:                              ##   in Loop: Header=BB329_27 Depth=1
	movq	-48(%rbp), %rax
	shlq	$1, %rax
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rcx
	shlq	$3, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	_sqlite3_realloc64
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	callq	_shell_check_oom
	movq	-56(%rbp), %rdi
	movq	-48(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cqto
	idivq	%rcx
	movq	%rax, %rsi
	callq	_sqlite3_realloc64
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	_shell_check_oom
LBB329_29:                              ##   in Loop: Header=BB329_27 Depth=1
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	movq	$0, -96(%rbp)
LBB329_30:                              ##   Parent Loop BB329_27 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	LBB329_45
## %bb.31:                              ##   in Loop: Header=BB329_30 Depth=2
	movq	-8(%rbp), %rax
	movq	272(%rax), %rax
	movq	-96(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movl	%edx, -180(%rbp)
	cmpl	$0, -180(%rbp)
	jne	LBB329_33
## %bb.32:                              ##   in Loop: Header=BB329_30 Depth=2
	movq	-8(%rbp), %rax
	movl	20(%rax), %ecx
	movl	%ecx, -180(%rbp)
LBB329_33:                              ##   in Loop: Header=BB329_30 Depth=2
	cmpl	$0, -180(%rbp)
	jge	LBB329_35
## %bb.34:                              ##   in Loop: Header=BB329_30 Depth=2
	xorl	%eax, %eax
	subl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
LBB329_35:                              ##   in Loop: Header=BB329_30 Depth=2
	cmpl	$0, -176(%rbp)
	je	LBB329_37
## %bb.36:                              ##   in Loop: Header=BB329_30 Depth=2
	movq	-144(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -64(%rbp)
	jmp	LBB329_41
LBB329_37:                              ##   in Loop: Header=BB329_30 Depth=2
	movq	-8(%rbp), %rax
	cmpb	$0, 24(%rax)
	je	LBB329_39
## %bb.38:                              ##   in Loop: Header=BB329_30 Depth=2
	movq	-80(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_sqlite3_free
	movq	-16(%rbp), %rdi
	movq	-96(%rbp), %rax
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, %esi
	callq	_quoted_column
	movq	-80(%rbp), %rcx
	movq	-96(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -64(%rbp)
	jmp	LBB329_40
LBB329_39:                              ##   in Loop: Header=BB329_30 Depth=2
	movq	-16(%rbp), %rdi
	movq	-96(%rbp), %rax
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, %esi
	callq	_sqlite3_column_text
	movq	%rax, -64(%rbp)
LBB329_40:                              ##   in Loop: Header=BB329_30 Depth=2
	jmp	LBB329_41
LBB329_41:                              ##   in Loop: Header=BB329_30 Depth=2
	movq	-64(%rbp), %rdi
	movq	-144(%rbp), %rax
	movq	-96(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movl	-180(%rbp), %edx
	movl	-156(%rbp), %esi
                                        ## kill: def $sil killed $sil killed $esi
	movb	%sil, -181(%rbp)        ## 1-byte Spill
	movq	%rax, %rsi
	movb	-181(%rbp), %r8b        ## 1-byte Reload
	movzbl	%r8b, %ecx
	callq	_translateForDisplayAndDup
	movq	-40(%rbp), %rsi
	movq	-24(%rbp), %rdi
	movslq	-28(%rbp), %r9
	imulq	%r9, %rdi
	addq	-96(%rbp), %rdi
	movq	%rax, (%rsi,%rdi,8)
	movq	-144(%rbp), %rax
	movq	-96(%rbp), %rsi
	cmpq	$0, (%rax,%rsi,8)
	je	LBB329_43
## %bb.42:                              ##   in Loop: Header=BB329_30 Depth=2
	movl	$1, -148(%rbp)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	$1, %rcx
	movb	$0, (%rax,%rcx)
	movl	$1, -152(%rbp)
LBB329_43:                              ##   in Loop: Header=BB329_30 Depth=2
	jmp	LBB329_44
LBB329_44:                              ##   in Loop: Header=BB329_30 Depth=2
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	LBB329_30
LBB329_45:                              ##   in Loop: Header=BB329_27 Depth=1
	jmp	LBB329_46
LBB329_46:                              ##   in Loop: Header=BB329_27 Depth=1
	cmpl	$0, -148(%rbp)
	movb	$1, %al
	movb	%al, -182(%rbp)         ## 1-byte Spill
	jne	LBB329_48
## %bb.47:                              ##   in Loop: Header=BB329_27 Depth=1
	movq	-16(%rbp), %rdi
	callq	_sqlite3_step
	cmpl	$100, %eax
	sete	%cl
	movb	%cl, -182(%rbp)         ## 1-byte Spill
LBB329_48:                              ##   in Loop: Header=BB329_27 Depth=1
	movb	-182(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB329_27
## %bb.49:
	movslq	-28(%rbp), %rax
	movq	-24(%rbp), %rcx
	addq	$1, %rcx
	imulq	%rcx, %rax
                                        ## kill: def $eax killed $eax killed $rax
	movl	%eax, -112(%rbp)
	movq	$0, -96(%rbp)
LBB329_50:                              ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	movslq	-112(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	LBB329_57
## %bb.51:                              ##   in Loop: Header=BB329_50 Depth=1
	movq	-40(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	jne	LBB329_53
## %bb.52:                              ##   in Loop: Header=BB329_50 Depth=1
	movq	-8(%rbp), %rax
	addq	$292, %rax              ## imm = 0x124
	movq	%rax, -72(%rbp)
LBB329_53:                              ##   in Loop: Header=BB329_50 Depth=1
	movq	-72(%rbp), %rdi
	callq	_strlenChar
	movl	%eax, -120(%rbp)
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cqto
	idivq	%rcx
                                        ## kill: def $edx killed $edx killed $rdx
	movl	%edx, -108(%rbp)
	movl	-120(%rbp), %edx
	movq	-8(%rbp), %rcx
	movq	280(%rcx), %rcx
	movslq	-108(%rbp), %rsi
	cmpl	(%rcx,%rsi,4), %edx
	jle	LBB329_55
## %bb.54:                              ##   in Loop: Header=BB329_50 Depth=1
	movl	-120(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	280(%rcx), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
LBB329_55:                              ##   in Loop: Header=BB329_50 Depth=1
	jmp	LBB329_56
LBB329_56:                              ##   in Loop: Header=BB329_50 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	LBB329_50
LBB329_57:
	movl	_seenInterrupt(%rip), %eax
	cmpl	$0, %eax
	je	LBB329_59
## %bb.58:
	jmp	LBB329_124
LBB329_59:
	cmpl	$0, -28(%rbp)
	jne	LBB329_61
## %bb.60:
	jmp	LBB329_124
LBB329_61:
	movq	-8(%rbp), %rax
	movl	92(%rax), %ecx
	decl	%ecx
	movl	%ecx, %eax
	subl	$15, %ecx
	movq	%rax, -192(%rbp)        ## 8-byte Spill
	ja	LBB329_90
## %bb.137:
	leaq	LJTI329_0(%rip), %rax
	movq	-192(%rbp), %rcx        ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB329_62:
	leaq	L_.str.706(%rip), %rax
	movq	%rax, -128(%rbp)
	leaq	L_.str.66(%rip), %rax
	movq	%rax, -136(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 104(%rax)
	je	LBB329_74
## %bb.63:
	movq	$0, -96(%rbp)
LBB329_64:                              ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	LBB329_69
## %bb.65:                              ##   in Loop: Header=BB329_64 Depth=1
	movq	-8(%rbp), %rax
	movq	280(%rax), %rax
	movq	-96(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movl	%edx, -116(%rbp)
	movq	-8(%rbp), %rax
	movq	272(%rax), %rax
	movq	-96(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jge	LBB329_67
## %bb.66:                              ##   in Loop: Header=BB329_64 Depth=1
	xorl	%eax, %eax
	subl	-116(%rbp), %eax
	movl	%eax, -116(%rbp)
LBB329_67:                              ##   in Loop: Header=BB329_64 Depth=1
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-116(%rbp), %esi
	movq	-40(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	_utf8_width_print
	movq	-96(%rbp), %rax
	movl	-28(%rbp), %esi
	subl	$1, %esi
	movslq	%esi, %rcx
	cmpq	%rcx, %rax
	leaq	L_.str.66(%rip), %rax
	leaq	L_.str.706(%rip), %rcx
	cmoveq	%rax, %rcx
	movq	-8(%rbp), %rax
	movq	64(%rax), %rsi
	movq	%rcx, %rdi
	callq	_fputs
## %bb.68:                              ##   in Loop: Header=BB329_64 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	LBB329_64
LBB329_69:
	movq	$0, -96(%rbp)
LBB329_70:                              ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	LBB329_73
## %bb.71:                              ##   in Loop: Header=BB329_70 Depth=1
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	280(%rax), %rax
	movq	-96(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	_print_dashes
	movq	-96(%rbp), %rax
	movl	-28(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rcx
	cmpq	%rcx, %rax
	leaq	L_.str.66(%rip), %rax
	leaq	L_.str.706(%rip), %rcx
	cmoveq	%rax, %rcx
	movq	-8(%rbp), %rax
	movq	64(%rax), %rsi
	movq	%rcx, %rdi
	callq	_fputs
## %bb.72:                              ##   in Loop: Header=BB329_70 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	LBB329_70
LBB329_73:
	jmp	LBB329_74
LBB329_74:
	jmp	LBB329_90
LBB329_75:
	leaq	L_.str.1238(%rip), %rax
	movq	%rax, -128(%rbp)
	leaq	L_.str.1239(%rip), %rax
	movq	%rax, -136(%rbp)
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %esi
	leaq	L_.str.1240(%rip), %rdx
	callq	_print_row_separator
	movq	-8(%rbp), %rax
	movq	64(%rax), %rsi
	leaq	L_.str.1241(%rip), %rdi
	callq	_fputs
	movq	$0, -96(%rbp)
LBB329_76:                              ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	LBB329_79
## %bb.77:                              ##   in Loop: Header=BB329_76 Depth=1
	movq	-8(%rbp), %rax
	movq	280(%rax), %rax
	movq	-96(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movl	%edx, -116(%rbp)
	movq	-40(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_strlenChar
	movl	%eax, -120(%rbp)
	movq	-8(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-116(%rbp), %eax
	subl	-120(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	-40(%rbp), %rcx
	movq	-96(%rbp), %r8
	movq	(%rcx,%r8,8), %r8
	movl	-116(%rbp), %r9d
	subl	-120(%rbp), %r9d
	addl	$1, %r9d
	movl	%eax, -196(%rbp)        ## 4-byte Spill
	movl	%r9d, %eax
	cltd
	idivl	%esi
	leaq	L_.str.1242(%rip), %rsi
	movl	-196(%rbp), %r9d        ## 4-byte Reload
	movl	%r9d, %edx
	leaq	L_.str.27(%rip), %rcx
	movq	%rcx, -208(%rbp)        ## 8-byte Spill
	movl	%eax, %r9d
	movq	-208(%rbp), %r10        ## 8-byte Reload
	movq	%r10, (%rsp)
	movb	$0, %al
	callq	_fprintf
	movq	-96(%rbp), %rcx
	movl	-28(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rsi
	cmpq	%rsi, %rcx
	leaq	L_.str.1239(%rip), %rcx
	leaq	L_.str.1238(%rip), %rsi
	cmoveq	%rcx, %rsi
	movq	-8(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	movl	%eax, -212(%rbp)        ## 4-byte Spill
	callq	_fputs
## %bb.78:                              ##   in Loop: Header=BB329_76 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	LBB329_76
LBB329_79:
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %esi
	leaq	L_.str.1240(%rip), %rdx
	callq	_print_row_separator
	jmp	LBB329_90
LBB329_80:
	leaq	L_.str.1238(%rip), %rax
	movq	%rax, -128(%rbp)
	leaq	L_.str.1239(%rip), %rax
	movq	%rax, -136(%rbp)
	movq	-8(%rbp), %rax
	movq	64(%rax), %rsi
	leaq	L_.str.1241(%rip), %rdi
	callq	_fputs
	movq	$0, -96(%rbp)
LBB329_81:                              ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	LBB329_84
## %bb.82:                              ##   in Loop: Header=BB329_81 Depth=1
	movq	-8(%rbp), %rax
	movq	280(%rax), %rax
	movq	-96(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movl	%edx, -116(%rbp)
	movq	-40(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_strlenChar
	movl	%eax, -120(%rbp)
	movq	-8(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-116(%rbp), %eax
	subl	-120(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	-40(%rbp), %rcx
	movq	-96(%rbp), %r8
	movq	(%rcx,%r8,8), %r8
	movl	-116(%rbp), %r9d
	subl	-120(%rbp), %r9d
	addl	$1, %r9d
	movl	%eax, -216(%rbp)        ## 4-byte Spill
	movl	%r9d, %eax
	cltd
	idivl	%esi
	leaq	L_.str.1242(%rip), %rsi
	movl	-216(%rbp), %r9d        ## 4-byte Reload
	movl	%r9d, %edx
	leaq	L_.str.27(%rip), %rcx
	movq	%rcx, -224(%rbp)        ## 8-byte Spill
	movl	%eax, %r9d
	movq	-224(%rbp), %r10        ## 8-byte Reload
	movq	%r10, (%rsp)
	movb	$0, %al
	callq	_fprintf
	movq	-96(%rbp), %rcx
	movl	-28(%rbp), %edx
	subl	$1, %edx
	movslq	%edx, %rsi
	cmpq	%rsi, %rcx
	leaq	L_.str.1239(%rip), %rcx
	leaq	L_.str.1238(%rip), %rsi
	cmoveq	%rcx, %rsi
	movq	-8(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	movl	%eax, -228(%rbp)        ## 4-byte Spill
	callq	_fputs
## %bb.83:                              ##   in Loop: Header=BB329_81 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	LBB329_81
LBB329_84:
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %esi
	leaq	L_.str.222(%rip), %rdx
	callq	_print_row_separator
	jmp	LBB329_90
LBB329_85:
	leaq	L_.str.1243(%rip), %rax
	movq	%rax, -128(%rbp)
	leaq	L_.str.1244(%rip), %rax
	movq	%rax, -136(%rbp)
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %esi
	leaq	L_.str.1245(%rip), %rdx
	leaq	L_.str.1246(%rip), %rcx
	leaq	L_.str.1247(%rip), %r8
	callq	_print_box_row_separator
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.1248(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	$0, -96(%rbp)
LBB329_86:                              ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	LBB329_89
## %bb.87:                              ##   in Loop: Header=BB329_86 Depth=1
	movq	-8(%rbp), %rax
	movq	280(%rax), %rax
	movq	-96(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movl	%edx, -116(%rbp)
	movq	-40(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_strlenChar
	movl	%eax, -120(%rbp)
	movq	-8(%rbp), %rcx
	movq	64(%rcx), %rdi
	movl	-116(%rbp), %eax
	subl	-120(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	-40(%rbp), %rcx
	movq	-96(%rbp), %r8
	movq	(%rcx,%r8,8), %r8
	movl	-116(%rbp), %r9d
	subl	-120(%rbp), %r9d
	addl	$1, %r9d
	movl	%eax, -232(%rbp)        ## 4-byte Spill
	movl	%r9d, %eax
	cltd
	idivl	%esi
	movq	-96(%rbp), %rcx
	movl	-28(%rbp), %esi
	subl	$1, %esi
	movslq	%esi, %r10
	cmpq	%r10, %rcx
	leaq	L_.str.1244(%rip), %rcx
	leaq	L_.str.1243(%rip), %r10
	cmoveq	%rcx, %r10
	leaq	L_.str.1249(%rip), %rsi
	movl	-232(%rbp), %r9d        ## 4-byte Reload
	movl	%r9d, %edx
	leaq	L_.str.27(%rip), %rcx
	movq	%rcx, -240(%rbp)        ## 8-byte Spill
	movl	%eax, %r9d
	movq	-240(%rbp), %r11        ## 8-byte Reload
	movq	%r11, (%rsp)
	movq	%r10, 8(%rsp)
	movb	$0, %al
	callq	_fprintf
## %bb.88:                              ##   in Loop: Header=BB329_86 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	LBB329_86
LBB329_89:
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %esi
	leaq	L_.str.1250(%rip), %rdx
	leaq	L_.str.1251(%rip), %rcx
	leaq	L_.str.1252(%rip), %r8
	callq	_print_box_row_separator
LBB329_90:
	movslq	-28(%rbp), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -108(%rbp)
LBB329_91:                              ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	movslq	-112(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	LBB329_118
## %bb.92:                              ##   in Loop: Header=BB329_91 Depth=1
	cmpl	$0, -108(%rbp)
	jne	LBB329_95
## %bb.93:                              ##   in Loop: Header=BB329_91 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 92(%rax)
	je	LBB329_95
## %bb.94:                              ##   in Loop: Header=BB329_91 Depth=1
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	92(%rax), %ecx
	cmpl	$16, %ecx
	leaq	L_.str.1248(%rip), %rax
	leaq	L_.str.1241(%rip), %rdx
	cmoveq	%rax, %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB329_95:                              ##   in Loop: Header=BB329_91 Depth=1
	movq	-40(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	jne	LBB329_97
## %bb.96:                              ##   in Loop: Header=BB329_91 Depth=1
	movq	-8(%rbp), %rax
	addq	$292, %rax              ## imm = 0x124
	movq	%rax, -72(%rbp)
LBB329_97:                              ##   in Loop: Header=BB329_91 Depth=1
	movq	-8(%rbp), %rax
	movq	280(%rax), %rax
	movslq	-108(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	movl	%edx, -116(%rbp)
	movq	-8(%rbp), %rax
	movq	272(%rax), %rax
	movslq	-108(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jge	LBB329_99
## %bb.98:                              ##   in Loop: Header=BB329_91 Depth=1
	xorl	%eax, %eax
	subl	-116(%rbp), %eax
	movl	%eax, -116(%rbp)
LBB329_99:                              ##   in Loop: Header=BB329_91 Depth=1
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	movl	-116(%rbp), %esi
	movq	-72(%rbp), %rdx
	callq	_utf8_width_print
	movl	-108(%rbp), %ecx
	movl	-28(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %ecx
	jne	LBB329_115
## %bb.100:                             ##   in Loop: Header=BB329_91 Depth=1
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-136(%rbp), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	cmpl	$0, -152(%rbp)
	je	LBB329_112
## %bb.101:                             ##   in Loop: Header=BB329_91 Depth=1
	movq	-56(%rbp), %rax
	movq	-96(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	%rax, -248(%rbp)        ## 8-byte Spill
	movq	%rcx, %rax
	movq	%rdx, -256(%rbp)        ## 8-byte Spill
	cqto
	movq	-256(%rbp), %rcx        ## 8-byte Reload
	idivq	%rcx
	subq	$1, %rax
	movq	-248(%rbp), %rsi        ## 8-byte Reload
	movsbl	(%rsi,%rax), %edi
	cmpl	$0, %edi
	je	LBB329_112
## %bb.102:                             ##   in Loop: Header=BB329_91 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movslq	-112(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	LBB329_112
## %bb.103:                             ##   in Loop: Header=BB329_91 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$15, 92(%rax)
	jne	LBB329_105
## %bb.104:                             ##   in Loop: Header=BB329_91 Depth=1
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %esi
	leaq	L_.str.1240(%rip), %rdx
	callq	_print_row_separator
	jmp	LBB329_111
LBB329_105:                             ##   in Loop: Header=BB329_91 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$16, 92(%rax)
	jne	LBB329_107
## %bb.106:                             ##   in Loop: Header=BB329_91 Depth=1
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %esi
	leaq	L_.str.1250(%rip), %rdx
	leaq	L_.str.1251(%rip), %rcx
	leaq	L_.str.1252(%rip), %r8
	callq	_print_box_row_separator
	jmp	LBB329_110
LBB329_107:                             ##   in Loop: Header=BB329_91 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 92(%rax)
	jne	LBB329_109
## %bb.108:                             ##   in Loop: Header=BB329_91 Depth=1
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.66(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB329_109:                             ##   in Loop: Header=BB329_91 Depth=1
	jmp	LBB329_110
LBB329_110:                             ##   in Loop: Header=BB329_91 Depth=1
	jmp	LBB329_111
LBB329_111:                             ##   in Loop: Header=BB329_91 Depth=1
	jmp	LBB329_112
LBB329_112:                             ##   in Loop: Header=BB329_91 Depth=1
	movl	$-1, -108(%rbp)
	movl	_seenInterrupt(%rip), %eax
	cmpl	$0, %eax
	je	LBB329_114
## %bb.113:
	jmp	LBB329_124
LBB329_114:                             ##   in Loop: Header=BB329_91 Depth=1
	jmp	LBB329_116
LBB329_115:                             ##   in Loop: Header=BB329_91 Depth=1
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-128(%rbp), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB329_116:                             ##   in Loop: Header=BB329_91 Depth=1
	jmp	LBB329_117
LBB329_117:                             ##   in Loop: Header=BB329_91 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	movl	-108(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -108(%rbp)
	jmp	LBB329_91
LBB329_118:
	movq	-8(%rbp), %rax
	cmpl	$15, 92(%rax)
	jne	LBB329_120
## %bb.119:
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %esi
	leaq	L_.str.1240(%rip), %rdx
	callq	_print_row_separator
	jmp	LBB329_123
LBB329_120:
	movq	-8(%rbp), %rax
	cmpl	$16, 92(%rax)
	jne	LBB329_122
## %bb.121:
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %esi
	leaq	L_.str.1253(%rip), %rdx
	leaq	L_.str.1254(%rip), %rcx
	leaq	L_.str.1255(%rip), %r8
	callq	_print_box_row_separator
LBB329_122:
	jmp	LBB329_123
LBB329_123:
	jmp	LBB329_124
LBB329_124:
	movl	_seenInterrupt(%rip), %eax
	cmpl	$0, %eax
	je	LBB329_126
## %bb.125:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	leaq	L_.str.1256(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB329_126:
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movslq	-28(%rbp), %rcx
	imulq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	$0, -96(%rbp)
LBB329_127:                             ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jge	LBB329_130
## %bb.128:                             ##   in Loop: Header=BB329_127 Depth=1
	movq	-40(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_free
## %bb.129:                             ##   in Loop: Header=BB329_127 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	LBB329_127
LBB329_130:
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	movq	-144(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
	movq	-56(%rbp), %rdi
	callq	_sqlite3_free
	cmpq	$0, -80(%rbp)
	je	LBB329_136
## %bb.131:
	movq	$0, -96(%rbp)
LBB329_132:                             ## =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	LBB329_135
## %bb.133:                             ##   in Loop: Header=BB329_132 Depth=1
	movq	-80(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	_sqlite3_free
## %bb.134:                             ##   in Loop: Header=BB329_132 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	LBB329_132
LBB329_135:
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	callq	_sqlite3_free
LBB329_136:
	addq	$272, %rsp              ## imm = 0x110
	popq	%rbp
	retq
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L329_0_set_62, LBB329_62-LJTI329_0
.set L329_0_set_90, LBB329_90-LJTI329_0
.set L329_0_set_80, LBB329_80-LJTI329_0
.set L329_0_set_75, LBB329_75-LJTI329_0
.set L329_0_set_85, LBB329_85-LJTI329_0
LJTI329_0:
	.long	L329_0_set_62
	.long	L329_0_set_90
	.long	L329_0_set_90
	.long	L329_0_set_90
	.long	L329_0_set_90
	.long	L329_0_set_90
	.long	L329_0_set_90
	.long	L329_0_set_90
	.long	L329_0_set_90
	.long	L329_0_set_90
	.long	L329_0_set_90
	.long	L329_0_set_90
	.long	L329_0_set_90
	.long	L329_0_set_80
	.long	L329_0_set_75
	.long	L329_0_set_85
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function translateForDisplayAndDup
_translateForDisplayAndDup:             ## @translateForDisplayAndDup
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
                                        ## kill: def $cl killed $cl killed $ecx
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movb	%cl, -29(%rbp)
	cmpq	$0, -16(%rbp)
	jne	LBB330_2
## %bb.1:
	movq	-24(%rbp), %rax
	movq	$0, (%rax)
	movq	$0, -8(%rbp)
	jmp	LBB330_77
LBB330_2:
	cmpl	$0, -28(%rbp)
	jge	LBB330_4
## %bb.3:
	xorl	%eax, %eax
	subl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
LBB330_4:
	cmpl	$0, -28(%rbp)
	jne	LBB330_6
## %bb.5:
	movl	$1000000, -28(%rbp)     ## imm = 0xF4240
LBB330_6:
	movl	$0, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
LBB330_7:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB330_10 Depth 2
                                        ##     Child Loop BB330_15 Depth 2
	movl	-48(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	LBB330_21
## %bb.8:                               ##   in Loop: Header=BB330_7 Depth=1
	movq	-16(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$32, %edx
	jl	LBB330_13
## %bb.9:                               ##   in Loop: Header=BB330_7 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
LBB330_10:                              ##   Parent Loop BB330_7 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
## %bb.11:                              ##   in Loop: Header=BB330_10 Depth=2
	movq	-16(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	andl	$192, %edx
	cmpl	$128, %edx
	je	LBB330_10
## %bb.12:                              ##   in Loop: Header=BB330_7 Depth=1
	jmp	LBB330_7
LBB330_13:                              ##   in Loop: Header=BB330_7 Depth=1
	movq	-16(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$9, %edx
	jne	LBB330_20
## %bb.14:                              ##   in Loop: Header=BB330_7 Depth=1
	jmp	LBB330_15
LBB330_15:                              ##   Parent Loop BB330_7 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
## %bb.16:                              ##   in Loop: Header=BB330_15 Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-48(%rbp), %ecx
	andl	$7, %ecx
	cmpl	$0, %ecx
	movb	%al, -57(%rbp)          ## 1-byte Spill
	je	LBB330_18
## %bb.17:                              ##   in Loop: Header=BB330_15 Depth=2
	movl	-48(%rbp), %eax
	cmpl	-28(%rbp), %eax
	setl	%cl
	movb	%cl, -57(%rbp)          ## 1-byte Spill
LBB330_18:                              ##   in Loop: Header=BB330_15 Depth=2
	movb	-57(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB330_15
## %bb.19:                              ##   in Loop: Header=BB330_7 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	LBB330_7
LBB330_20:
	jmp	LBB330_21
LBB330_21:
	movl	-48(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	LBB330_45
## %bb.22:
	movzbl	-29(%rbp), %eax
	cmpl	$0, %eax
	je	LBB330_45
## %bb.23:
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
LBB330_24:                              ## =>This Inner Loop Header: Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	movl	%eax, -64(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-64(%rbp), %ecx         ## 4-byte Reload
	cmpl	%eax, %ecx
	jle	LBB330_29
## %bb.25:                              ##   in Loop: Header=BB330_24 Depth=1
	movq	-16(%rbp), %rax
	movl	-44(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movzbl	(%rax,%rdx), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB330_27
## %bb.26:
	jmp	LBB330_29
LBB330_27:                              ##   in Loop: Header=BB330_24 Depth=1
	jmp	LBB330_28
LBB330_28:                              ##   in Loop: Header=BB330_24 Depth=1
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	jmp	LBB330_24
LBB330_29:
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	movl	%eax, -68(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-68(%rbp), %ecx         ## 4-byte Reload
	cmpl	%eax, %ecx
	jg	LBB330_38
## %bb.30:
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
LBB330_31:                              ## =>This Inner Loop Header: Depth=1
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	movl	%eax, -72(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-72(%rbp), %ecx         ## 4-byte Reload
	cmpl	%eax, %ecx
	jle	LBB330_37
## %bb.32:                              ##   in Loop: Header=BB330_31 Depth=1
	movq	-16(%rbp), %rax
	movl	-44(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movzbl	(%rax,%rdx), %edi
	callq	_isalnum
	movq	-16(%rbp), %rdx
	movslq	-44(%rbp), %rsi
	movzbl	(%rdx,%rsi), %edi
	movl	%eax, -76(%rbp)         ## 4-byte Spill
	callq	_isalnum
	movl	-76(%rbp), %ecx         ## 4-byte Reload
	cmpl	%eax, %ecx
	je	LBB330_35
## %bb.33:                              ##   in Loop: Header=BB330_31 Depth=1
	movq	-16(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	andl	$192, %edx
	cmpl	$128, %edx
	je	LBB330_35
## %bb.34:
	jmp	LBB330_37
LBB330_35:                              ##   in Loop: Header=BB330_31 Depth=1
	jmp	LBB330_36
LBB330_36:                              ##   in Loop: Header=BB330_31 Depth=1
	movl	-44(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -44(%rbp)
	jmp	LBB330_31
LBB330_37:
	jmp	LBB330_38
LBB330_38:
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	movl	%eax, -80(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-80(%rbp), %ecx         ## 4-byte Reload
	cmpl	%eax, %ecx
	jg	LBB330_40
## %bb.39:
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	LBB330_44
LBB330_40:
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
LBB330_41:                              ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$32, %edx
	jne	LBB330_43
## %bb.42:                              ##   in Loop: Header=BB330_41 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	LBB330_41
LBB330_43:
	jmp	LBB330_44
LBB330_44:
	jmp	LBB330_46
LBB330_45:
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
LBB330_46:
	movl	-48(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	LBB330_49
## %bb.47:
	movq	-16(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$32, %edx
	jl	LBB330_49
## %bb.48:
	movq	-16(%rbp), %rax
	movslq	-36(%rbp), %rcx
	addq	%rcx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	LBB330_61
LBB330_49:
	movq	-16(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$13, %edx
	jne	LBB330_55
## %bb.50:
	movq	-16(%rbp), %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movzbl	(%rax,%rdx), %ecx
	cmpl	$10, %ecx
	jne	LBB330_55
## %bb.51:
	movq	-16(%rbp), %rax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rdx
	movzbl	(%rax,%rdx), %ecx
	cmpl	$0, %ecx
	je	LBB330_53
## %bb.52:
	movq	-16(%rbp), %rax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rdx
	addq	%rdx, %rax
	movq	%rax, -88(%rbp)         ## 8-byte Spill
	jmp	LBB330_54
LBB330_53:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -88(%rbp)         ## 8-byte Spill
	jmp	LBB330_54
LBB330_54:
	movq	-88(%rbp), %rax         ## 8-byte Reload
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	LBB330_60
LBB330_55:
	movq	-16(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$0, %edx
	je	LBB330_57
## %bb.56:
	movq	-16(%rbp), %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movzbl	(%rax,%rdx), %ecx
	cmpl	$0, %ecx
	jne	LBB330_58
LBB330_57:
	movq	-24(%rbp), %rax
	movq	$0, (%rax)
	jmp	LBB330_59
LBB330_58:
	movq	-16(%rbp), %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	addq	%rdx, %rax
	movq	-24(%rbp), %rdx
	movq	%rax, (%rdx)
LBB330_59:
	jmp	LBB330_60
LBB330_60:
	jmp	LBB330_61
LBB330_61:
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	callq	_malloc
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	_shell_check_oom
	movl	$0, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
LBB330_62:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB330_65 Depth 2
                                        ##     Child Loop BB330_70 Depth 2
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	LBB330_76
## %bb.63:                              ##   in Loop: Header=BB330_62 Depth=1
	movq	-16(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$32, %edx
	jl	LBB330_68
## %bb.64:                              ##   in Loop: Header=BB330_62 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
LBB330_65:                              ##   Parent Loop BB330_62 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	movl	-36(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -36(%rbp)
	movslq	%ecx, %rsi
	movb	(%rax,%rsi), %dil
	movq	-56(%rbp), %rax
	movl	-40(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -40(%rbp)
	movslq	%ecx, %rsi
	movb	%dil, (%rax,%rsi)
## %bb.66:                              ##   in Loop: Header=BB330_65 Depth=2
	movq	-16(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	andl	$192, %edx
	cmpl	$128, %edx
	je	LBB330_65
## %bb.67:                              ##   in Loop: Header=BB330_62 Depth=1
	jmp	LBB330_62
LBB330_68:                              ##   in Loop: Header=BB330_62 Depth=1
	movq	-16(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	cmpl	$9, %edx
	jne	LBB330_75
## %bb.69:                              ##   in Loop: Header=BB330_62 Depth=1
	jmp	LBB330_70
LBB330_70:                              ##   Parent Loop BB330_62 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	-40(%rbp), %eax
	movl	%eax, %edx
	addl	$1, %edx
	movl	%edx, -40(%rbp)
	movslq	%eax, %rsi
	movb	$32, (%rcx,%rsi)
## %bb.71:                              ##   in Loop: Header=BB330_70 Depth=2
	xorl	%eax, %eax
                                        ## kill: def $al killed $al killed $eax
	movl	-48(%rbp), %ecx
	andl	$7, %ecx
	cmpl	$0, %ecx
	movb	%al, -89(%rbp)          ## 1-byte Spill
	je	LBB330_73
## %bb.72:                              ##   in Loop: Header=BB330_70 Depth=2
	movl	-48(%rbp), %eax
	cmpl	-28(%rbp), %eax
	setl	%cl
	movb	%cl, -89(%rbp)          ## 1-byte Spill
LBB330_73:                              ##   in Loop: Header=BB330_70 Depth=2
	movb	-89(%rbp), %al          ## 1-byte Reload
	testb	$1, %al
	jne	LBB330_70
## %bb.74:                              ##   in Loop: Header=BB330_62 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	LBB330_62
LBB330_75:
	jmp	LBB330_76
LBB330_76:
	movq	-56(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
LBB330_77:
	movq	-8(%rbp), %rax
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function quoted_column
_quoted_column:                         ## @quoted_column
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	_sqlite3_column_type
	decl	%eax
	movl	%eax, %ecx
	subl	$4, %eax
	movq	%rcx, -56(%rbp)         ## 8-byte Spill
	ja	LBB331_9
## %bb.11:
	leaq	LJTI331_0(%rip), %rax
	movq	-56(%rbp), %rcx         ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB331_1:
	leaq	L_.str.616(%rip), %rdi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -8(%rbp)
	jmp	LBB331_10
LBB331_2:
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	_sqlite3_column_text
	leaq	L_.str.79(%rip), %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -8(%rbp)
	jmp	LBB331_10
LBB331_3:
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	_sqlite3_column_text
	leaq	L_.str.190(%rip), %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	_sqlite3_mprintf
	movq	%rax, -8(%rbp)
	jmp	LBB331_10
LBB331_4:
	xorl	%eax, %eax
	movl	%eax, %edi
	callq	_sqlite3_str_new
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	_sqlite3_column_blob
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	_sqlite3_column_bytes
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	leaq	L_.str.1257(%rip), %rsi
	movl	$2, %edx
	callq	_sqlite3_str_append
	movl	$0, -24(%rbp)
LBB331_5:                               ## =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	LBB331_8
## %bb.6:                               ##   in Loop: Header=BB331_5 Depth=1
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %edx
	leaq	L_.str.942(%rip), %rsi
	movb	$0, %al
	callq	_sqlite3_str_appendf
## %bb.7:                               ##   in Loop: Header=BB331_5 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	LBB331_5
LBB331_8:
	movq	-32(%rbp), %rdi
	leaq	L_.str.938(%rip), %rsi
	movl	$1, %edx
	callq	_sqlite3_str_append
	movq	-32(%rbp), %rdi
	callq	_sqlite3_str_finish
	movq	%rax, -8(%rbp)
	jmp	LBB331_10
LBB331_9:
	movq	$0, -8(%rbp)
LBB331_10:
	movq	-8(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L331_0_set_2, LBB331_2-LJTI331_0
.set L331_0_set_3, LBB331_3-LJTI331_0
.set L331_0_set_4, LBB331_4-LJTI331_0
.set L331_0_set_1, LBB331_1-LJTI331_0
LJTI331_0:
	.long	L331_0_set_2
	.long	L331_0_set_2
	.long	L331_0_set_3
	.long	L331_0_set_4
	.long	L331_0_set_1
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function print_row_separator
_print_row_separator:                   ## @print_row_separator
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	cmpl	$0, -12(%rbp)
	jle	LBB332_6
## %bb.1:
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	64(%rax), %rsi
	callq	_fputs
	movq	-8(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-8(%rbp), %rcx
	movq	280(%rcx), %rcx
	movl	(%rcx), %edx
	addl	$2, %edx
	movl	%edx, %esi
	movl	%eax, -32(%rbp)         ## 4-byte Spill
	callq	_print_dashes
	movl	$1, -28(%rbp)
LBB332_2:                               ## =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	LBB332_5
## %bb.3:                               ##   in Loop: Header=BB332_2 Depth=1
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	64(%rax), %rsi
	callq	_fputs
	movq	-8(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-8(%rbp), %rcx
	movq	280(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movl	(%rcx,%rdx,4), %r8d
	addl	$2, %r8d
	movl	%r8d, %esi
	movl	%eax, -36(%rbp)         ## 4-byte Spill
	callq	_print_dashes
## %bb.4:                               ##   in Loop: Header=BB332_2 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	LBB332_2
LBB332_5:
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	64(%rax), %rsi
	callq	_fputs
LBB332_6:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rsi
	leaq	L_.str.66(%rip), %rdi
	callq	_fputs
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function print_box_row_separator
_print_box_row_separator:               ## @print_box_row_separator
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	cmpl	$0, -12(%rbp)
	jle	LBB333_6
## %bb.1:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-24(%rbp), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-8(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-8(%rbp), %rcx
	movq	280(%rcx), %rcx
	movl	(%rcx), %r8d
	addl	$2, %r8d
	movl	%r8d, %esi
	movl	%eax, -48(%rbp)         ## 4-byte Spill
	callq	_print_box_line
	movl	$1, -44(%rbp)
LBB333_2:                               ## =>This Inner Loop Header: Depth=1
	movl	-44(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	LBB333_5
## %bb.3:                               ##   in Loop: Header=BB333_2 Depth=1
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-32(%rbp), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-8(%rbp), %rcx
	movq	64(%rcx), %rdi
	movq	-8(%rbp), %rcx
	movq	280(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %r8d
	addl	$2, %r8d
	movl	%r8d, %esi
	movl	%eax, -52(%rbp)         ## 4-byte Spill
	callq	_print_box_line
## %bb.4:                               ##   in Loop: Header=BB333_2 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	LBB333_2
LBB333_5:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	movq	-40(%rbp), %rdx
	leaq	L_.str.79(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
LBB333_6:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rsi
	leaq	L_.str.66(%rip), %rdi
	callq	_fputs
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function print_box_line
_print_box_line:                        ## @print_box_line
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -88(%rbp)
	movl	%esi, -92(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, %rdi
	leaq	L___const.print_box_line.zDash(%rip), %rsi
	movl	$61, %edx
	callq	_memcpy
	movl	$60, -96(%rbp)
	imull	$3, -92(%rbp), %ecx
	movl	%ecx, -92(%rbp)
LBB334_1:                               ## =>This Inner Loop Header: Depth=1
	cmpl	$60, -92(%rbp)
	jle	LBB334_3
## %bb.2:                               ##   in Loop: Header=BB334_1 Depth=1
	leaq	-80(%rbp), %rsi
	movq	-88(%rbp), %rdi
	movb	$0, %al
	callq	_fprintf
	movl	-92(%rbp), %ecx
	subl	$60, %ecx
	movl	%ecx, -92(%rbp)
	jmp	LBB334_1
LBB334_3:
	leaq	-80(%rbp), %rcx
	movq	-88(%rbp), %rdi
	movl	-92(%rbp), %edx
	leaq	L_.str.125(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rsi
	cmpq	%rsi, %rcx
	jne	LBB334_5
## %bb.4:
	addq	$96, %rsp
	popq	%rbp
	retq
LBB334_5:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function one_input_line
_one_input_line:                        ## @one_input_line
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	cmpq	$0, -8(%rbp)
	je	LBB335_2
## %bb.1:
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	_local_getline
	movq	%rax, -40(%rbp)
	jmp	LBB335_3
LBB335_2:
	movl	-20(%rbp), %eax
	cmpl	$0, %eax
	leaq	_continuePrompt(%rip), %rcx
	leaq	_mainPrompt(%rip), %rdx
	cmovneq	%rcx, %rdx
	movq	%rdx, -32(%rbp)
	movq	-32(%rbp), %rsi
	leaq	L_.str.79(%rip), %rdi
	movb	$0, %al
	callq	_printf
	movq	___stdoutp@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rdi
	movl	%eax, -44(%rbp)         ## 4-byte Spill
	callq	_fflush
	movq	___stdinp@GOTPCREL(%rip), %rcx
	movq	-16(%rbp), %rdi
	movq	(%rcx), %rsi
	movl	%eax, -48(%rbp)         ## 4-byte Spill
	callq	_local_getline
	movq	%rax, -40(%rbp)
LBB335_3:
	movq	-40(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function line_is_command_terminator
_line_is_command_terminator:            ## @line_is_command_terminator
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
LBB336_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB336_3
## %bb.2:                               ##   in Loop: Header=BB336_1 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	LBB336_1
LBB336_3:
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$47, %ecx
	jne	LBB336_5
## %bb.4:
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	LBB336_10
LBB336_5:
	movq	-16(%rbp), %rax
	movzbl	(%rax), %edi
	callq	_tolower
                                        ## kill: def $al killed $al killed $eax
	movsbl	%al, %ecx
	cmpl	$103, %ecx
	jne	LBB336_8
## %bb.6:
	movq	-16(%rbp), %rax
	movzbl	1(%rax), %edi
	callq	_tolower
                                        ## kill: def $al killed $al killed $eax
	movsbl	%al, %ecx
	cmpl	$111, %ecx
	jne	LBB336_8
## %bb.7:
	movq	-16(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -16(%rbp)
	jmp	LBB336_9
LBB336_8:
	movl	$0, -4(%rbp)
	jmp	LBB336_11
LBB336_9:
	jmp	LBB336_10
LBB336_10:
	xorl	%esi, %esi
	movq	-16(%rbp), %rdi
	callq	_quickscan
	cmpl	$0, %eax
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -4(%rbp)
LBB336_11:
	movl	-4(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function line_is_complete
_line_is_complete:                      ## @line_is_complete
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	cmpq	$0, -16(%rbp)
	jne	LBB337_2
## %bb.1:
	movl	$1, -4(%rbp)
	jmp	LBB337_3
LBB337_2:
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	$59, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rdi
	callq	_sqlite3_complete
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rsi
	movb	$0, (%rcx,%rsi)
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB337_3:
	movl	-4(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function quickscan
_quickscan:                             ## @quickscan
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	-20(%rbp), %eax
                                        ## kill: def $al killed $al killed $eax
	movb	%al, -22(%rbp)
	movsbl	-22(%rbp), %ecx
	cmpl	$0, %ecx
	jne	LBB338_27
## %bb.1:
	jmp	LBB338_2
LBB338_2:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB338_6 Depth 2
                                        ##     Child Loop BB338_13 Depth 2
	movsbl	-22(%rbp), %eax
	cmpl	$0, %eax
	sete	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movslq	%eax, %rdx
	cmpq	$0, %rdx
	je	LBB338_4
## %bb.3:
	leaq	L___func__.quickscan(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.1267(%rip), %rcx
	movl	$22379, %edx            ## imm = 0x576B
	callq	___assert_rtn
LBB338_4:                               ##   in Loop: Header=BB338_2 Depth=1
	jmp	LBB338_5
LBB338_5:                               ##   in Loop: Header=BB338_2 Depth=1
	jmp	LBB338_6
LBB338_6:                               ##   Parent Loop BB338_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movb	(%rax), %dl
	movb	%dl, -21(%rbp)
	movsbl	%dl, %esi
	cmpl	$0, %esi
	je	LBB338_26
## %bb.7:                               ##   in Loop: Header=BB338_6 Depth=2
	movzbl	-21(%rbp), %edi
	callq	_isspace
	cmpl	$0, %eax
	je	LBB338_9
## %bb.8:                               ##   in Loop: Header=BB338_6 Depth=2
	jmp	LBB338_6
LBB338_9:                               ##   in Loop: Header=BB338_6 Depth=2
	movsbl	-21(%rbp), %eax
	addl	$-34, %eax
	movl	%eax, %ecx
	subl	$62, %eax
	movq	%rcx, -32(%rbp)         ## 8-byte Spill
	ja	LBB338_24
## %bb.44:                              ##   in Loop: Header=BB338_6 Depth=2
	leaq	LJTI338_0(%rip), %rax
	movq	-32(%rbp), %rcx         ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB338_10:                              ##   in Loop: Header=BB338_6 Depth=2
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$45, %ecx
	je	LBB338_12
## %bb.11:                              ##   in Loop: Header=BB338_6 Depth=2
	jmp	LBB338_25
LBB338_12:                              ##   in Loop: Header=BB338_2 Depth=1
	jmp	LBB338_13
LBB338_13:                              ##   Parent Loop BB338_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movb	1(%rax), %dl
	movb	%dl, -21(%rbp)
	movsbl	%dl, %esi
	cmpl	$0, %esi
	je	LBB338_17
## %bb.14:                              ##   in Loop: Header=BB338_13 Depth=2
	movsbl	-21(%rbp), %eax
	cmpl	$10, %eax
	jne	LBB338_16
## %bb.15:                              ##   in Loop: Header=BB338_2 Depth=1
	jmp	LBB338_2
LBB338_16:                              ##   in Loop: Header=BB338_13 Depth=2
	jmp	LBB338_13
LBB338_17:
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	LBB338_43
LBB338_18:                              ##   in Loop: Header=BB338_6 Depth=2
	movl	-20(%rbp), %eax
	orl	$512, %eax              ## imm = 0x200
	movl	%eax, -20(%rbp)
	jmp	LBB338_6
LBB338_19:                              ##   in Loop: Header=BB338_6 Depth=2
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$42, %ecx
	jne	LBB338_21
## %bb.20:
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	movb	$42, -22(%rbp)
	movsbl	-22(%rbp), %ecx
	movl	-20(%rbp), %edx
	andl	$768, %edx              ## imm = 0x300
	orl	%edx, %ecx
	movl	%ecx, -20(%rbp)
	jmp	LBB338_28
LBB338_21:                              ##   in Loop: Header=BB338_6 Depth=2
	jmp	LBB338_25
LBB338_22:
	movb	$93, -21(%rbp)
LBB338_23:
	movb	-21(%rbp), %al
	movb	%al, -22(%rbp)
	movsbl	-22(%rbp), %ecx
	orl	$256, %ecx              ## imm = 0x100
	movl	%ecx, -20(%rbp)
	jmp	LBB338_28
LBB338_24:                              ##   in Loop: Header=BB338_6 Depth=2
	jmp	LBB338_25
LBB338_25:                              ##   in Loop: Header=BB338_6 Depth=2
	movl	-20(%rbp), %eax
	andl	$-513, %eax             ## imm = 0xFDFF
	orl	$256, %eax              ## imm = 0x100
	movl	%eax, -20(%rbp)
	jmp	LBB338_6
LBB338_26:
	jmp	LBB338_42
LBB338_27:
	jmp	LBB338_28
LBB338_28:
	jmp	LBB338_29
LBB338_29:                              ## =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movb	(%rax), %dl
	movb	%dl, -21(%rbp)
	movsbl	%dl, %esi
	cmpl	$0, %esi
	je	LBB338_41
## %bb.30:                              ##   in Loop: Header=BB338_29 Depth=1
	movsbl	-21(%rbp), %eax
	movsbl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	LBB338_40
## %bb.31:                              ##   in Loop: Header=BB338_29 Depth=1
	movsbl	-22(%rbp), %eax
	movl	%eax, %ecx
	subl	$34, %ecx
	movl	%eax, -36(%rbp)         ## 4-byte Spill
	je	LBB338_35
	jmp	LBB338_45
LBB338_45:                              ##   in Loop: Header=BB338_29 Depth=1
	movl	-36(%rbp), %eax         ## 4-byte Reload
	subl	$39, %eax
	je	LBB338_35
	jmp	LBB338_46
LBB338_46:                              ##   in Loop: Header=BB338_29 Depth=1
	movl	-36(%rbp), %eax         ## 4-byte Reload
	subl	$42, %eax
	je	LBB338_32
	jmp	LBB338_47
LBB338_47:                              ##   in Loop: Header=BB338_29 Depth=1
	movl	-36(%rbp), %eax         ## 4-byte Reload
	subl	$93, %eax
	je	LBB338_38
	jmp	LBB338_48
LBB338_48:                              ##   in Loop: Header=BB338_29 Depth=1
	movl	-36(%rbp), %eax         ## 4-byte Reload
	subl	$96, %eax
	je	LBB338_35
	jmp	LBB338_39
LBB338_32:                              ##   in Loop: Header=BB338_29 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$47, %ecx
	je	LBB338_34
## %bb.33:                              ##   in Loop: Header=BB338_29 Depth=1
	jmp	LBB338_29
LBB338_34:
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	movb	$0, -22(%rbp)
	movl	-20(%rbp), %ecx
	andl	$768, %ecx              ## imm = 0x300
	orl	$0, %ecx
	movl	%ecx, -20(%rbp)
	jmp	LBB338_2
LBB338_35:                              ##   in Loop: Header=BB338_29 Depth=1
	movq	-16(%rbp), %rax
	movsbl	(%rax), %ecx
	movsbl	-22(%rbp), %edx
	cmpl	%edx, %ecx
	jne	LBB338_37
## %bb.36:                              ##   in Loop: Header=BB338_29 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	LBB338_29
LBB338_37:
	jmp	LBB338_38
LBB338_38:
	movb	$0, -22(%rbp)
	movl	-20(%rbp), %eax
	andl	$768, %eax              ## imm = 0x300
	orl	$0, %eax
	movl	%eax, -20(%rbp)
	jmp	LBB338_2
LBB338_39:
	leaq	L___func__.quickscan(%rip), %rdi
	leaq	L_.str.38(%rip), %rsi
	leaq	L_.str.171(%rip), %rcx
	movl	$22436, %edx            ## imm = 0x57A4
	callq	___assert_rtn
LBB338_40:                              ##   in Loop: Header=BB338_29 Depth=1
	jmp	LBB338_29
LBB338_41:
	jmp	LBB338_42
LBB338_42:
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
LBB338_43:
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L338_0_set_23, LBB338_23-LJTI338_0
.set L338_0_set_24, LBB338_24-LJTI338_0
.set L338_0_set_10, LBB338_10-LJTI338_0
.set L338_0_set_19, LBB338_19-LJTI338_0
.set L338_0_set_18, LBB338_18-LJTI338_0
.set L338_0_set_22, LBB338_22-LJTI338_0
LJTI338_0:
	.long	L338_0_set_23
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_23
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_10
	.long	L338_0_set_24
	.long	L338_0_set_19
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_18
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_22
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_24
	.long	L338_0_set_23
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function runOneSqlLine
_runOneSqlLine:                         ## @runOneSqlLine
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$2224, %rsp             ## imm = 0x8B0
	xorl	%eax, %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %r8
	movq	(%r8), %r8
	movq	%r8, -8(%rbp)
	movq	%rdi, -2128(%rbp)
	movq	%rsi, -2136(%rbp)
	movq	%rdx, -2144(%rbp)
	movl	%ecx, -2148(%rbp)
	movq	$0, -2160(%rbp)
	movq	-2128(%rbp), %rdi
	movl	%eax, %esi
	callq	_open_db
	movq	-2128(%rbp), %rdx
	movl	124(%rdx), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	LBB339_2
## %bb.1:
	movq	-2136(%rbp), %rdi
	callq	_resolve_backslashes
LBB339_2:
	movq	-2128(%rbp), %rax
	movl	120(%rax), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	LBB339_4
## %bb.3:
	movq	-2128(%rbp), %rax
	movl	$0, 112(%rax)
LBB339_4:
	callq	_beginTimer
	movq	-2128(%rbp), %rdi
	movq	-2136(%rbp), %rsi
	leaq	-2160(%rbp), %rdx
	callq	_shell_exec
	movl	%eax, -2152(%rbp)
	callq	_endTimer
	cmpl	$0, -2152(%rbp)
	jne	LBB339_6
## %bb.5:
	cmpq	$0, -2160(%rbp)
	je	LBB339_20
LBB339_6:
	cmpq	$0, -2160(%rbp)
	jne	LBB339_8
## %bb.7:
	leaq	L_.str.1268(%rip), %rax
	movq	%rax, -2176(%rbp)
	movq	-2128(%rbp), %rax
	movq	(%rax), %rdi
	callq	_sqlite3_errmsg
	movq	%rax, -2168(%rbp)
	jmp	LBB339_15
LBB339_8:
	movq	-2160(%rbp), %rdi
	leaq	L_.str.1269(%rip), %rsi
	movl	$12, %edx
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB339_10
## %bb.9:
	leaq	L_.str.1270(%rip), %rax
	movq	%rax, -2176(%rbp)
	movq	-2160(%rbp), %rax
	addq	$12, %rax
	movq	%rax, -2168(%rbp)
	jmp	LBB339_14
LBB339_10:
	movq	-2160(%rbp), %rdi
	leaq	L_.str.1271(%rip), %rsi
	movl	$10, %edx
	callq	_strncmp
	cmpl	$0, %eax
	jne	LBB339_12
## %bb.11:
	leaq	L_.str.1272(%rip), %rax
	movq	%rax, -2176(%rbp)
	movq	-2160(%rbp), %rax
	addq	$10, %rax
	movq	%rax, -2168(%rbp)
	jmp	LBB339_13
LBB339_12:
	leaq	L_.str.1268(%rip), %rax
	movq	%rax, -2176(%rbp)
	movq	-2160(%rbp), %rax
	movq	%rax, -2168(%rbp)
LBB339_13:
	jmp	LBB339_14
LBB339_14:
	jmp	LBB339_15
LBB339_15:
	cmpq	$0, -2144(%rbp)
	jne	LBB339_17
## %bb.16:
	cmpl	$0, _stdin_is_interactive(%rip)
	jne	LBB339_18
LBB339_17:
	leaq	-112(%rbp), %rsi
	movq	-2176(%rbp), %rcx
	movl	-2148(%rbp), %r8d
	movl	$100, %edi
	leaq	L_.str.1273(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
	jmp	LBB339_19
LBB339_18:
	leaq	-112(%rbp), %rsi
	movq	-2176(%rbp), %rcx
	movl	$100, %edi
	leaq	L_.str.1274(%rip), %rdx
	movb	$0, %al
	callq	_sqlite3_snprintf
LBB339_19:
	leaq	-112(%rbp), %rdx
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	movq	-2168(%rbp), %rcx
	leaq	L_.str.89(%rip), %rsi
	movb	$0, %al
	callq	_fprintf
	movq	-2160(%rbp), %rdi
	movl	%eax, -2180(%rbp)       ## 4-byte Spill
	callq	_sqlite3_free
	movq	$0, -2160(%rbp)
	movl	$1, -2116(%rbp)
	jmp	LBB339_24
LBB339_20:
	movq	-2128(%rbp), %rax
	movl	124(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	je	LBB339_22
## %bb.21:
	leaq	-2112(%rbp), %rsi
	movq	-2128(%rbp), %rax
	movq	(%rax), %rdi
	movq	%rsi, -2192(%rbp)       ## 8-byte Spill
	callq	_sqlite3_changes64
	movq	-2128(%rbp), %rcx
	movq	(%rcx), %rdi
	movq	%rax, -2200(%rbp)       ## 8-byte Spill
	callq	_sqlite3_total_changes64
	movl	$2000, %edi             ## imm = 0x7D0
	movq	-2192(%rbp), %rsi       ## 8-byte Reload
	leaq	L_.str.1275(%rip), %rdx
	movq	-2200(%rbp), %rcx       ## 8-byte Reload
	movq	%rax, %r8
	movb	$0, %al
	callq	_sqlite3_snprintf
	leaq	-2112(%rbp), %rdx
	movq	-2128(%rbp), %rcx
	movq	64(%rcx), %rdi
	leaq	L_.str.219(%rip), %rsi
	movq	%rax, -2208(%rbp)       ## 8-byte Spill
	movb	$0, %al
	callq	_fprintf
LBB339_22:
	jmp	LBB339_23
LBB339_23:
	movl	$0, -2116(%rbp)
LBB339_24:
	movl	-2116(%rbp), %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-8(%rbp), %rdx
	cmpq	%rdx, %rcx
	movl	%eax, -2212(%rbp)       ## 4-byte Spill
	jne	LBB339_26
## %bb.25:
	movl	-2212(%rbp), %eax       ## 4-byte Reload
	addq	$2224, %rsp             ## imm = 0x8B0
	popq	%rbp
	retq
LBB339_26:
	callq	___stack_chk_fail
	ud2
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function local_getline
_local_getline:                         ## @local_getline
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rcx
	cmpq	$0, %rcx
	movl	$100, %edx
	cmovel	%eax, %edx
	movl	%edx, -28(%rbp)
	movl	$0, -32(%rbp)
LBB340_1:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB340_8 Depth 2
	movl	-32(%rbp), %eax
	addl	$100, %eax
	cmpl	-28(%rbp), %eax
	jle	LBB340_3
## %bb.2:                               ##   in Loop: Header=BB340_1 Depth=1
	movl	-28(%rbp), %eax
	shll	$1, %eax
	addl	$100, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rdi
	movslq	-28(%rbp), %rsi
	callq	_realloc
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	_shell_check_oom
LBB340_3:                               ##   in Loop: Header=BB340_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-32(%rbp), %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %edx
	subl	-32(%rbp), %edx
	movq	-24(%rbp), %rcx
	movq	%rax, %rdi
	movl	%edx, %esi
	movq	%rcx, %rdx
	callq	_fgets
	cmpq	$0, %rax
	jne	LBB340_7
## %bb.4:
	cmpl	$0, -32(%rbp)
	jne	LBB340_6
## %bb.5:
	movq	-16(%rbp), %rdi
	callq	_free
	movq	$0, -8(%rbp)
	jmp	LBB340_18
LBB340_6:
	movq	-16(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	LBB340_17
LBB340_7:                               ##   in Loop: Header=BB340_1 Depth=1
	jmp	LBB340_8
LBB340_8:                               ##   Parent Loop BB340_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	movslq	-32(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	LBB340_10
## %bb.9:                               ##   in Loop: Header=BB340_8 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	LBB340_8
LBB340_10:                              ##   in Loop: Header=BB340_1 Depth=1
	cmpl	$0, -32(%rbp)
	jle	LBB340_16
## %bb.11:                              ##   in Loop: Header=BB340_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-32(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$10, %ecx
	jne	LBB340_16
## %bb.12:
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	jle	LBB340_15
## %bb.13:
	movq	-16(%rbp), %rax
	movl	-32(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	movsbl	(%rax,%rdx), %ecx
	cmpl	$13, %ecx
	jne	LBB340_15
## %bb.14:
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -32(%rbp)
LBB340_15:
	movq	-16(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	LBB340_17
LBB340_16:                              ##   in Loop: Header=BB340_1 Depth=1
	jmp	LBB340_1
LBB340_17:
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
LBB340_18:
	movq	-8(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function beginTimer
_beginTimer:                            ## @beginTimer
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	cmpl	$0, _enableTimer(%rip)
	je	LBB341_2
## %bb.1:
	xorl	%edi, %edi
	leaq	_sBegin(%rip), %rsi
	callq	_getrusage
	movl	%eax, -4(%rbp)          ## 4-byte Spill
	callq	_timeOfDay
	movq	%rax, _iBegin(%rip)
LBB341_2:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3               ## -- Begin function endTimer
LCPI342_0:
	.quad	4562254508917369340     ## double 0.001
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
_endTimer:                              ## @endTimer
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	cmpl	$0, _enableTimer(%rip)
	je	LBB342_2
## %bb.1:
	callq	_timeOfDay
	xorl	%edi, %edi
	movq	%rax, -8(%rbp)
	leaq	-152(%rbp), %rsi
	callq	_getrusage
	leaq	-152(%rbp), %rsi
	movsd	LCPI342_0(%rip), %xmm0  ## xmm0 = mem[0],zero
	movq	-8(%rbp), %rcx
	subq	_iBegin(%rip), %rcx
	cvtsi2sd	%rcx, %xmm1
	mulsd	%xmm0, %xmm1
	leaq	_sBegin(%rip), %rdi
	movl	%eax, -156(%rbp)        ## 4-byte Spill
	movsd	%xmm1, -168(%rbp)       ## 8-byte Spill
	callq	_timeDiff
	leaq	_sBegin(%rip), %rcx
	addq	$16, %rcx
	leaq	-152(%rbp), %rdx
	addq	$16, %rdx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	movsd	%xmm0, -176(%rbp)       ## 8-byte Spill
	callq	_timeDiff
	leaq	L_.str.1276(%rip), %rdi
	movsd	-168(%rbp), %xmm1       ## 8-byte Reload
                                        ## xmm1 = mem[0],zero
	movsd	%xmm0, -184(%rbp)       ## 8-byte Spill
	movaps	%xmm1, %xmm0
	movsd	-176(%rbp), %xmm1       ## 8-byte Reload
                                        ## xmm1 = mem[0],zero
	movsd	-184(%rbp), %xmm2       ## 8-byte Reload
                                        ## xmm2 = mem[0],zero
	movb	$3, %al
	callq	_printf
LBB342_2:
	addq	$192, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3               ## -- Begin function timeOfDay
LCPI343_0:
	.quad	4725570615333879808     ## double 8.64E+7
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
_timeOfDay:                             ## @timeOfDay
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	cmpq	$0, _timeOfDay.clockVfs(%rip)
	jne	LBB343_2
## %bb.1:
	xorl	%eax, %eax
	movl	%eax, %edi
	callq	_sqlite3_vfs_find
	movq	%rax, _timeOfDay.clockVfs(%rip)
LBB343_2:
	cmpq	$0, _timeOfDay.clockVfs(%rip)
	jne	LBB343_4
## %bb.3:
	movq	$0, -8(%rbp)
	jmp	LBB343_9
LBB343_4:
	movq	_timeOfDay.clockVfs(%rip), %rax
	cmpl	$2, (%rax)
	jl	LBB343_7
## %bb.5:
	movq	_timeOfDay.clockVfs(%rip), %rax
	cmpq	$0, 136(%rax)
	je	LBB343_7
## %bb.6:
	movq	_timeOfDay.clockVfs(%rip), %rax
	movq	136(%rax), %rax
	movq	_timeOfDay.clockVfs(%rip), %rdi
	leaq	-16(%rbp), %rsi
	callq	*%rax
	jmp	LBB343_8
LBB343_7:
	movq	_timeOfDay.clockVfs(%rip), %rax
	movq	120(%rax), %rax
	movq	_timeOfDay.clockVfs(%rip), %rdi
	leaq	-24(%rbp), %rsi
	callq	*%rax
	movsd	LCPI343_0(%rip), %xmm0  ## xmm0 = mem[0],zero
	mulsd	-24(%rbp), %xmm0
	cvttsd2si	%xmm0, %rcx
	movq	%rcx, -16(%rbp)
LBB343_8:
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
LBB343_9:
	movq	-8(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3               ## -- Begin function timeDiff
LCPI344_0:
	.quad	4517329193108106637     ## double 9.9999999999999995E-7
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
_timeDiff:                              ## @timeDiff
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movsd	LCPI344_0(%rip), %xmm0  ## xmm0 = mem[0],zero
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	movq	-8(%rbp), %rax
	subl	8(%rax), %ecx
	cvtsi2sd	%ecx, %xmm1
	mulsd	%xmm0, %xmm1
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rdx
	subq	(%rdx), %rax
	cvtsi2sd	%rax, %xmm0
	addsd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90         ## -- Begin function outputModePop
_outputModePop:                         ## @outputModePop
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	$-1, %rcx
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	88(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 84(%rax)
	movq	-8(%rbp), %rax
	movl	128(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 124(%rax)
	movq	-8(%rbp), %rax
	addq	$190, %rax
	movq	-8(%rbp), %rsi
	addq	$230, %rsi
	movq	%rax, %rdi
	movl	$20, %edx
	callq	___memcpy_chk
	movq	$-1, %rcx
	movq	-8(%rbp), %rdx
	addq	$210, %rdx
	movq	-8(%rbp), %rsi
	addq	$250, %rsi
	movq	%rdx, %rdi
	movl	$20, %edx
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	callq	___memcpy_chk
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"sha3"

L_.str.1:                               ## @.str.1
	.asciz	"sha3_query"

L_.str.2:                               ## @.str.2
	.asciz	"readfile"

L_.str.3:                               ## @.str.3
	.asciz	"writefile"

L_.str.4:                               ## @.str.4
	.asciz	"lsmode"

L_.str.5:                               ## @.str.5
	.asciz	"completion"

	.section	__DATA,__data
	.p2align	3               ## @completionModule
_completionModule:
	.long	0                       ## 0x0
	.space	4
	.quad	0
	.quad	_completionConnect
	.quad	_completionBestIndex
	.quad	_completionDisconnect
	.quad	0
	.quad	_completionOpen
	.quad	_completionClose
	.quad	_completionFilter
	.quad	_completionNext
	.quad	_completionEof
	.quad	_completionColumn
	.quad	_completionRowid
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0

	.p2align	3               ## @apnd_vfs
_apnd_vfs:
	.long	3                       ## 0x3
	.long	0                       ## 0x0
	.long	1024                    ## 0x400
	.space	4
	.quad	0
	.quad	L_.str.130
	.quad	0
	.quad	_apndOpen
	.quad	_apndDelete
	.quad	_apndAccess
	.quad	_apndFullPathname
	.quad	_apndDlOpen
	.quad	_apndDlError
	.quad	_apndDlSym
	.quad	_apndDlClose
	.quad	_apndRandomness
	.quad	_apndSleep
	.quad	_apndCurrentTime
	.quad	_apndGetLastError
	.quad	_apndCurrentTimeInt64
	.quad	_apndSetSystemCall
	.quad	_apndGetSystemCall
	.quad	_apndNextSystemCall

.zerofill __DATA,__bss,_memtraceBase,64,3 ## @memtraceBase
	.p2align	3               ## @ersaztMethods
_ersaztMethods:
	.quad	_memtraceMalloc
	.quad	_memtraceFree
	.quad	_memtraceRealloc
	.quad	_memtraceSize
	.quad	_memtraceRoundup
	.quad	_memtraceInit
	.quad	_memtraceShutdown
	.quad	0

.zerofill __DATA,__bss,_memtraceOut,8,3 ## @memtraceOut
	.section	__TEXT,__cstring,cstring_literals
L_.str.6:                               ## @.str.6
	.asciz	"uint"

	.section	__DATA,__const
	.p2align	4               ## @sqlite3_decimal_init.aFunc
_sqlite3_decimal_init.aFunc:
	.quad	L_.str.7
	.long	1                       ## 0x1
	.space	4
	.quad	_decimalFunc
	.quad	L_.str.8
	.long	2                       ## 0x2
	.space	4
	.quad	_decimalCmpFunc
	.quad	L_.str.9
	.long	2                       ## 0x2
	.space	4
	.quad	_decimalAddFunc
	.quad	L_.str.10
	.long	2                       ## 0x2
	.space	4
	.quad	_decimalSubFunc
	.quad	L_.str.11
	.long	2                       ## 0x2
	.space	4
	.quad	_decimalMulFunc

	.section	__TEXT,__cstring,cstring_literals
L_.str.7:                               ## @.str.7
	.asciz	"decimal"

L_.str.8:                               ## @.str.8
	.asciz	"decimal_cmp"

L_.str.9:                               ## @.str.9
	.asciz	"decimal_add"

L_.str.10:                              ## @.str.10
	.asciz	"decimal_sub"

L_.str.11:                              ## @.str.11
	.asciz	"decimal_mul"

L_.str.12:                              ## @.str.12
	.asciz	"decimal_sum"

	.section	__DATA,__const
	.p2align	4               ## @sqlite3_ieee_init.aFunc
_sqlite3_ieee_init.aFunc:
	.quad	L_.str.13
	.long	1                       ## 0x1
	.long	0                       ## 0x0
	.quad	_ieee754func
	.quad	L_.str.13
	.long	2                       ## 0x2
	.long	0                       ## 0x0
	.quad	_ieee754func
	.quad	L_.str.14
	.long	1                       ## 0x1
	.long	1                       ## 0x1
	.quad	_ieee754func
	.quad	L_.str.15
	.long	1                       ## 0x1
	.long	2                       ## 0x2
	.quad	_ieee754func
	.quad	L_.str.16
	.long	1                       ## 0x1
	.long	0                       ## 0x0
	.quad	_ieee754func_to_blob
	.quad	L_.str.17
	.long	1                       ## 0x1
	.long	0                       ## 0x0
	.quad	_ieee754func_from_blob

	.section	__TEXT,__cstring,cstring_literals
L_.str.13:                              ## @.str.13
	.asciz	"ieee754"

L_.str.14:                              ## @.str.14
	.asciz	"ieee754_mantissa"

L_.str.15:                              ## @.str.15
	.asciz	"ieee754_exponent"

L_.str.16:                              ## @.str.16
	.asciz	"ieee754_to_blob"

L_.str.17:                              ## @.str.17
	.asciz	"ieee754_from_blob"

L_.str.18:                              ## @.str.18
	.asciz	"generate_series() requires SQLite 3.8.12 or later"

L_.str.19:                              ## @.str.19
	.asciz	"generate_series"

	.section	__DATA,__data
	.p2align	3               ## @seriesModule
_seriesModule:
	.long	0                       ## 0x0
	.space	4
	.quad	0
	.quad	_seriesConnect
	.quad	_seriesBestIndex
	.quad	_seriesDisconnect
	.quad	0
	.quad	_seriesOpen
	.quad	_seriesClose
	.quad	_seriesFilter
	.quad	_seriesNext
	.quad	_seriesEof
	.quad	_seriesColumn
	.quad	_seriesRowid
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0

	.section	__TEXT,__cstring,cstring_literals
L_.str.20:                              ## @.str.20
	.asciz	"regexp"

L_.str.21:                              ## @.str.21
	.asciz	"regexpi"

L_.str.22:                              ## @.str.22
	.asciz	":memory:"

L_.str.23:                              ## @.str.23
	.asciz	"SELECT sql FROM sqlite_schema WHERE name NOT LIKE 'sqlite_%%' AND sql NOT LIKE 'CREATE VIRTUAL %%'"

L_.str.24:                              ## @.str.24
	.asciz	"Cannot find a unique index name to propose."

L_.str.25:                              ## @.str.25
	.asciz	"%s;%s%s\n"

L_.str.26:                              ## @.str.26
	.asciz	" -- stat1: "

L_.str.27:                              ## @.str.27
	.space	1

L_.str.28:                              ## @.str.28
	.asciz	"rb"

L_.str.29:                              ## @.str.29
	.asciz	"%.zip"

L_.str.30:                              ## @.str.30
	.asciz	"SQLite format 3"

L_.str.31:                              ## @.str.31
	.asciz	"Start-Of-SQLite3-"

L_.str.32:                              ## @.str.32
	.asciz	"Error: sqlite3_close() returns %d: %s\n"

L_.str.33:                              ## @.str.33
	.asciz	"SQL error: %s\n"

	.section	__DATA,__data
	.p2align	2               ## @stdin_is_interactive
_stdin_is_interactive:
	.long	1                       ## 0x1

	.p2align	2               ## @stdout_is_console
_stdout_is_console:
	.long	1                       ## 0x1

	.section	__TEXT,__cstring,cstring_literals
L_.str.34:                              ## @.str.34
	.asciz	"SQLITE_DEBUG_BREAK"

L_.str.35:                              ## @.str.35
	.asciz	"attach debugger to process %d and press any key to continue.\n"

L_.str.36:                              ## @.str.36
	.asciz	"2022-02-22 18:58:40 40fa792d359f84c3b9e9d6623743e1a59826274e221df1bde8f47086968a1bab"

L_.str.37:                              ## @.str.37
	.asciz	"SQLite header and source version mismatch\n%s\n%s\n"

L___func__.main:                        ## @__func__.main
	.asciz	"main"

L_.str.38:                              ## @.str.38
	.asciz	"/Users/christopherclement/asF/src/SQLite3/shell.c"

L_.str.39:                              ## @.str.39
	.asciz	"argc>=1 && argv && argv[0]"

.zerofill __DATA,__bss,_Argv0,8,3       ## @Argv0
L_.str.40:                              ## @.str.40
	.asciz	"-separator"

L_.str.41:                              ## @.str.41
	.asciz	"-nullvalue"

L_.str.42:                              ## @.str.42
	.asciz	"-newline"

L_.str.43:                              ## @.str.43
	.asciz	"-cmd"

L_.str.44:                              ## @.str.44
	.asciz	"-init"

L_.str.45:                              ## @.str.45
	.asciz	"-batch"

L_.str.46:                              ## @.str.46
	.asciz	"-heap"

L_.str.47:                              ## @.str.47
	.asciz	"-pagecache"

L_.str.48:                              ## @.str.48
	.asciz	"-lookaside"

L_.str.49:                              ## @.str.49
	.asciz	"-threadsafe"

L_.str.50:                              ## @.str.50
	.asciz	"-mmap"

L_.str.51:                              ## @.str.51
	.asciz	"-vfs"

L_.str.52:                              ## @.str.52
	.asciz	"-append"

L_.str.53:                              ## @.str.53
	.asciz	"-deserialize"

L_.str.54:                              ## @.str.54
	.asciz	"-maxsize"

L_.str.55:                              ## @.str.55
	.asciz	"-readonly"

L_.str.56:                              ## @.str.56
	.asciz	"-nofollow"

L_.str.57:                              ## @.str.57
	.asciz	"-memtrace"

L_.str.58:                              ## @.str.58
	.asciz	"-bail"

.zerofill __DATA,__bss,_bail_on_error,4,2 ## @bail_on_error
L_.str.59:                              ## @.str.59
	.asciz	"-nonce"

L_.str.60:                              ## @.str.60
	.asciz	"-safe"

L_.str.61:                              ## @.str.61
	.asciz	"no such VFS: \"%s\"\n"

L_.str.62:                              ## @.str.62
	.asciz	"-html"

L_.str.63:                              ## @.str.63
	.asciz	"-list"

L_.str.64:                              ## @.str.64
	.asciz	"-quote"

L_.str.65:                              ## @.str.65
	.asciz	","

L_.str.66:                              ## @.str.66
	.asciz	"\n"

L_.str.67:                              ## @.str.67
	.asciz	"-line"

L_.str.68:                              ## @.str.68
	.asciz	"-column"

L_.str.69:                              ## @.str.69
	.asciz	"-json"

L_.str.70:                              ## @.str.70
	.asciz	"-markdown"

L_.str.71:                              ## @.str.71
	.asciz	"-table"

L_.str.72:                              ## @.str.72
	.asciz	"-box"

L_.str.73:                              ## @.str.73
	.asciz	"-csv"

L_.str.74:                              ## @.str.74
	.asciz	"-ascii"

L_.str.75:                              ## @.str.75
	.asciz	"\037"

L_.str.76:                              ## @.str.76
	.asciz	"\036"

L_.str.77:                              ## @.str.77
	.asciz	"-tabs"

L_.str.78:                              ## @.str.78
	.asciz	"\t"

L_.str.79:                              ## @.str.79
	.asciz	"%s"

L_.str.80:                              ## @.str.80
	.asciz	"-header"

L_.str.81:                              ## @.str.81
	.asciz	"-noheader"

L_.str.82:                              ## @.str.82
	.asciz	"-echo"

L_.str.83:                              ## @.str.83
	.asciz	"-eqp"

L_.str.84:                              ## @.str.84
	.asciz	"-eqpfull"

L_.str.85:                              ## @.str.85
	.asciz	"-stats"

L_.str.86:                              ## @.str.86
	.asciz	"-scanstats"

L_.str.87:                              ## @.str.87
	.asciz	"-backslash"

L_.str.88:                              ## @.str.88
	.asciz	"-version"

L_.str.89:                              ## @.str.89
	.asciz	"%s %s\n"

L_.str.90:                              ## @.str.90
	.asciz	"-interactive"

L_.str.91:                              ## @.str.91
	.asciz	"-help"

L_.str.92:                              ## @.str.92
	.asciz	"Error: %s\n"

L_.str.93:                              ## @.str.93
	.asciz	"Error: unable to process SQL \"%s\"\n"

L_.str.94:                              ## @.str.94
	.asciz	"%s: Error: unknown option: %s\n"

L_.str.95:                              ## @.str.95
	.asciz	"Use -help for a list of options.\n"

L_.str.96:                              ## @.str.96
	.asciz	"Error: unable to process SQL: %s\n"

L_.str.97:                              ## @.str.97
	.asciz	"SQLite version %s %.19s\nEnter \".help\" for usage hints.\n"

L_.str.98:                              ## @.str.98
	.asciz	"Connected to a "

L_.str.99:                              ## @.str.99
	.asciz	"transient in-memory database"

L_.str.100:                             ## @.str.100
	.asciz	".\nUse \".open FILENAME\" to reopen on a persistent database.\n"

L_.str.101:                             ## @.str.101
	.asciz	"SQLITE_HISTORY"

L_.str.102:                             ## @.str.102
	.asciz	"%s/.sqlite_history"

L_.str.103:                             ## @.str.103
	.asciz	"SHA3 size should be one of: 224 256 384 512"

	.section	__TEXT,__const
	.p2align	4               ## @KeccakF1600Step.RC
_KeccakF1600Step.RC:
	.quad	1                       ## 0x1
	.quad	32898                   ## 0x8082
	.quad	-9223372036854742902    ## 0x800000000000808a
	.quad	-9223372034707259392    ## 0x8000000080008000
	.quad	32907                   ## 0x808b
	.quad	2147483649              ## 0x80000001
	.quad	-9223372034707259263    ## 0x8000000080008081
	.quad	-9223372036854743031    ## 0x8000000000008009
	.quad	138                     ## 0x8a
	.quad	136                     ## 0x88
	.quad	2147516425              ## 0x80008009
	.quad	2147483658              ## 0x8000000a
	.quad	2147516555              ## 0x8000808b
	.quad	-9223372036854775669    ## 0x800000000000008b
	.quad	-9223372036854742903    ## 0x8000000000008089
	.quad	-9223372036854743037    ## 0x8000000000008003
	.quad	-9223372036854743038    ## 0x8000000000008002
	.quad	-9223372036854775680    ## 0x8000000000000080
	.quad	32778                   ## 0x800a
	.quad	-9223372034707292150    ## 0x800000008000000a
	.quad	-9223372034707259263    ## 0x8000000080008081
	.quad	-9223372036854742912    ## 0x8000000000008080
	.quad	2147483649              ## 0x80000001
	.quad	-9223372034707259384    ## 0x8000000080008008

	.section	__TEXT,__cstring,cstring_literals
L_.str.104:                             ## @.str.104
	.asciz	"error SQL statement [%s]: %s"

L_.str.105:                             ## @.str.105
	.asciz	"non-query: [%s]"

L_.str.106:                             ## @.str.106
	.asciz	"S%d:"

L_.str.107:                             ## @.str.107
	.asciz	"R"

L_.str.108:                             ## @.str.108
	.asciz	"N"

L_.str.109:                             ## @.str.109
	.asciz	"T%d:"

L_.str.110:                             ## @.str.110
	.asciz	"B%d:"

L_.str.111:                             ## @.str.111
	.asciz	"wrong number of arguments to function writefile()"

L_.str.112:                             ## @.str.112
	.asciz	"failed to create symlink: %s"

L_.str.113:                             ## @.str.113
	.asciz	"failed to create directory: %s"

L_.str.114:                             ## @.str.114
	.asciz	"failed to write file: %s"

L_.str.115:                             ## @.str.115
	.asciz	"wb"

	.section	__DATA,__data
	.p2align	3               ## @fsdirRegister.fsdirModule
_fsdirRegister.fsdirModule:
	.long	0                       ## 0x0
	.space	4
	.quad	0
	.quad	_fsdirConnect
	.quad	_fsdirBestIndex
	.quad	_fsdirDisconnect
	.quad	0
	.quad	_fsdirOpen
	.quad	_fsdirClose
	.quad	_fsdirFilter
	.quad	_fsdirNext
	.quad	_fsdirEof
	.quad	_fsdirColumn
	.quad	_fsdirRowid
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0

	.section	__TEXT,__cstring,cstring_literals
L_.str.116:                             ## @.str.116
	.asciz	"fsdir"

L_.str.117:                             ## @.str.117
	.asciz	"CREATE TABLE x(name,mode,mtime,data,path HIDDEN,dir HIDDEN)"

L_.str.118:                             ## @.str.118
	.asciz	"table function fsdir requires an argument"

L___func__.fsdirFilter:                 ## @__func__.fsdirFilter
	.asciz	"fsdirFilter"

L_.str.119:                             ## @.str.119
	.asciz	"argc==idxNum && (argc==1 || argc==2)"

L_.str.120:                             ## @.str.120
	.asciz	"table function fsdir requires a non-NULL argument"

L_.str.121:                             ## @.str.121
	.asciz	"%s/%s"

L_.str.122:                             ## @.str.122
	.asciz	"cannot stat file: %s"

L_.str.123:                             ## @.str.123
	.asciz	"cannot read directory: %s"

L_.str.124:                             ## @.str.124
	.asciz	"CREATE TABLE x(  candidate TEXT,  prefix TEXT HIDDEN,  wholeline TEXT HIDDEN,  phase INT HIDDEN)"

L_.str.125:                             ## @.str.125
	.asciz	"%.*s"

L_.str.126:                             ## @.str.126
	.asciz	"PRAGMA database_list"

L_.str.127:                             ## @.str.127
	.asciz	"%z%sSELECT name FROM \"%w\".sqlite_schema"

L_.str.128:                             ## @.str.128
	.asciz	" UNION "

L_.str.129:                             ## @.str.129
	.asciz	"%z%sSELECT pti.name FROM \"%w\".sqlite_schema AS sm JOIN pragma_table_info(sm.name,%Q) AS pti WHERE sm.type='table'"

L_.str.130:                             ## @.str.130
	.asciz	"apndvfs"

	.section	__DATA,__const
	.p2align	3               ## @apnd_io_methods
_apnd_io_methods:
	.long	3                       ## 0x3
	.space	4
	.quad	_apndClose
	.quad	_apndRead
	.quad	_apndWrite
	.quad	_apndTruncate
	.quad	_apndSync
	.quad	_apndFileSize
	.quad	_apndLock
	.quad	_apndUnlock
	.quad	_apndCheckReservedLock
	.quad	_apndFileControl
	.quad	_apndSectorSize
	.quad	_apndDeviceCharacteristics
	.quad	_apndShmMap
	.quad	_apndShmLock
	.quad	_apndShmBarrier
	.quad	_apndShmUnmap
	.quad	_apndFetch
	.quad	_apndUnfetch

	.section	__TEXT,__cstring,cstring_literals
L___func__.apndWriteMark:               ## @__func__.apndWriteMark
	.asciz	"apndWriteMark"

L_.str.131:                             ## @.str.131
	.asciz	"pFile == ORIGFILE(paf)"

L_.str.132:                             ## @.str.132
	.asciz	"apnd(%lld)/%z"

	.section	__TEXT,__const
	.p2align	4               ## @apvfsSqliteHdr
_apvfsSqliteHdr:
	.asciz	"SQLite format 3"

	.section	__TEXT,__cstring,cstring_literals
L_.str.133:                             ## @.str.133
	.asciz	"MEMTRACE: allocate %d bytes\n"

L_.str.134:                             ## @.str.134
	.asciz	"MEMTRACE: free %d bytes\n"

L_.str.135:                             ## @.str.135
	.asciz	"MEMTRACE: resize %d -> %d bytes\n"

L_.str.136:                             ## @.str.136
	.asciz	"ieee754(%lld,%d)"

L_.str.137:                             ## @.str.137
	.asciz	"CREATE TABLE x(value,start hidden,stop hidden,step hidden)"

L___func__.seriesBestIndex:             ## @__func__.seriesBestIndex
	.asciz	"seriesBestIndex"

L_.str.138:                             ## @.str.138
	.asciz	"iCol>=0 && iCol<=2"

L_.str.139:                             ## @.str.139
	.asciz	"first argument to \"generate_series()\" missing or unusable"

L_.str.140:                             ## @.str.140
	.asciz	"out of memory"

L_.str.141:                             ## @.str.141
	.asciz	"unrecognized character"

L_.str.142:                             ## @.str.142
	.asciz	"unmatched '('"

L_.str.143:                             ## @.str.143
	.asciz	"'*' without operand"

L_.str.144:                             ## @.str.144
	.asciz	"'+' without operand"

L_.str.145:                             ## @.str.145
	.asciz	"'?' without operand"

L_.str.146:                             ## @.str.146
	.asciz	"'{m,n}' without operand"

L_.str.147:                             ## @.str.147
	.asciz	"unmatched '{'"

L_.str.148:                             ## @.str.148
	.asciz	"n less than m in '{m,n}'"

L_.str.149:                             ## @.str.149
	.asciz	"both m and n are zero in '{m,n}'"

L_.str.150:                             ## @.str.150
	.asciz	"POSIX character classes not supported"

L_.str.151:                             ## @.str.151
	.asciz	"unclosed '['"

	.section	__TEXT,__const
	.p2align	4               ## @re_esc_char.zEsc
_re_esc_char.zEsc:
	.asciz	"afnrtv\\()*.+?[$^{|}]"

_re_esc_char.zTrans:                    ## @re_esc_char.zTrans
	.asciz	"\007\f\n\r\t\013"

	.section	__TEXT,__cstring,cstring_literals
L_.str.152:                             ## @.str.152
	.asciz	"unknown \\ escape"

L___func__.idxMalloc:                   ## @__func__.idxMalloc
	.asciz	"idxMalloc"

L_.str.153:                             ## @.str.153
	.asciz	"*pRc==SQLITE_OK"

L_.str.154:                             ## @.str.154
	.asciz	"nByte>0"

L_.str.155:                             ## @.str.155
	.asciz	"SELECT type, name, sql, 1 FROM sqlite_schema WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%%'  UNION ALL SELECT type, name, sql, 2 FROM sqlite_schema WHERE type = 'trigger'  AND tbl_name IN(SELECT name FROM sqlite_schema WHERE type = 'view') ORDER BY 4, 1"

L_.str.156:                             ## @.str.156
	.asciz	"CREATE TABLE x("

L_.str.157:                             ## @.str.157
	.asciz	"%s%Q COLLATE %s"

L_.str.158:                             ## @.str.158
	.asciz	", "

L_.str.159:                             ## @.str.159
	.asciz	")"

L_.str.160:                             ## @.str.160
	.asciz	"CREATE VIRTUAL TABLE %Q USING expert(%Q)"

	.section	__DATA,__data
	.p2align	3               ## @idxRegisterVtab.expertModule
_idxRegisterVtab.expertModule:
	.long	2                       ## 0x2
	.space	4
	.quad	_expertConnect
	.quad	_expertConnect
	.quad	_expertBestIndex
	.quad	_expertDisconnect
	.quad	_expertDisconnect
	.quad	_expertOpen
	.quad	_expertClose
	.quad	_expertFilter
	.quad	_expertNext
	.quad	_expertEof
	.quad	_expertColumn
	.quad	_expertRowid
	.quad	_expertUpdate
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0

	.section	__TEXT,__cstring,cstring_literals
L_.str.161:                             ## @.str.161
	.asciz	"expert"

L_.str.162:                             ## @.str.162
	.asciz	"internal error!"

L___func__.expertConnect:               ## @__func__.expertConnect
	.asciz	"expertConnect"

L_.str.163:                             ## @.str.163
	.asciz	"sqlite3_stricmp(p->pTab->zName, argv[2])==0"

L___func__.expertDequote:               ## @__func__.expertDequote
	.asciz	"expertDequote"

L_.str.164:                             ## @.str.164
	.asciz	"zIn[0]=='\\''"

L_.str.165:                             ## @.str.165
	.asciz	"zIn[n-1]=='\\''"

L_.str.166:                             ## @.str.166
	.asciz	"zIn[iIn+1]=='\\''"

L___func__.idxNewConstraint:            ## @__func__.idxNewConstraint
	.asciz	"idxNewConstraint"

L_.str.167:                             ## @.str.167
	.asciz	"SELECT * FROM main.%Q WHERE sample()"

L___func__.expertNext:                  ## @__func__.expertNext
	.asciz	"expertNext"

L_.str.168:                             ## @.str.168
	.asciz	"pCsr->pData"

L_.str.169:                             ## @.str.169
	.asciz	"PRAGMA table_xinfo=%Q"

L_.str.170:                             ## @.str.170
	.asciz	"binary"

L___func__.idxGetTableInfo:             ## @__func__.idxGetTableInfo
	.asciz	"idxGetTableInfo"

L_.str.171:                             ## @.str.171
	.asciz	"0"

	.section	__DATA,__data
	.p2align	3               ## @idxProcessOneTrigger.zInt
_idxProcessOneTrigger.zInt:
	.quad	L_.str.172

	.section	__TEXT,__cstring,cstring_literals
L_.str.172:                             ## @.str.172
	.asciz	"t592690916721053953805701627921227776"

	.section	__DATA,__data
	.p2align	3               ## @idxProcessOneTrigger.zDrop
_idxProcessOneTrigger.zDrop:
	.quad	L_.str.173

	.section	__TEXT,__cstring,cstring_literals
L_.str.173:                             ## @.str.173
	.asciz	"DROP TABLE t592690916721053953805701627921227776"

L_.str.174:                             ## @.str.174
	.asciz	"SELECT 'CREATE TEMP' || substr(sql, 7) FROM sqlite_schema WHERE tbl_name = %Q AND type IN ('table', 'trigger') ORDER BY type;"

L_.str.175:                             ## @.str.175
	.asciz	"ALTER TABLE temp.%Q RENAME TO %Q"

L_.str.176:                             ## @.str.176
	.asciz	"INSERT INTO %Q VALUES("

L_.str.177:                             ## @.str.177
	.asciz	"%s?"

L_.str.178:                             ## @.str.178
	.asciz	"UPDATE %Q SET "

L_.str.179:                             ## @.str.179
	.asciz	"%s%Q=?"

L___func__.idxProcessOneTrigger:        ## @__func__.idxProcessOneTrigger
	.asciz	"idxProcessOneTrigger"

L_.str.180:                             ## @.str.180
	.asciz	"pWrite->eOp==SQLITE_DELETE"

L_.str.181:                             ## @.str.181
	.asciz	"DELETE FROM %Q"

L___func__.idxCreateFromWhere:          ## @__func__.idxCreateFromWhere
	.asciz	"idxCreateFromWhere"

L_.str.182:                             ## @.str.182
	.asciz	"pCon->pLink==0"

L_.str.183:                             ## @.str.183
	.asciz	"%s_idx_%08x"

L_.str.184:                             ## @.str.184
	.asciz	"SELECT count(*) FROM sqlite_schema WHERE name=%Q AND type in ('index','table','view')"

L___func__.idxCreateFromCons:           ## @__func__.idxCreateFromCons
	.asciz	"idxCreateFromCons"

L_.str.185:                             ## @.str.185
	.asciz	"rc==SQLITE_OK"

L_.str.186:                             ## @.str.186
	.asciz	"CREATE INDEX \"%w\" ON \"%w\"(%s)"

L_.str.187:                             ## @.str.187
	.asciz	"CREATE INDEX %s ON %s(%s)"

L_.str.188:                             ## @.str.188
	.asciz	"PRAGMA index_list=%Q"

L_.str.189:                             ## @.str.189
	.asciz	"PRAGMA index_xInfo=%Q"

L_.str.190:                             ## @.str.190
	.asciz	"%Q"

L_.str.191:                             ## @.str.191
	.asciz	" COLLATE %Q"

L_.str.192:                             ## @.str.192
	.asciz	" COLLATE %s"

L_.str.193:                             ## @.str.193
	.asciz	" DESC"

L___func__.idxHashAdd:                  ## @__func__.idxHashAdd
	.asciz	"idxHashAdd"

L_.str.194:                             ## @.str.194
	.asciz	"iHash>=0"

L_.str.195:                             ## @.str.195
	.asciz	"SELECT s.rowid, s.name, l.name FROM   sqlite_schema AS s,   pragma_index_list(s.name) AS l WHERE s.type = 'table'"

L_.str.196:                             ## @.str.196
	.asciz	"SELECT name, coll FROM pragma_index_xinfo(?) WHERE key"

L_.str.197:                             ## @.str.197
	.asciz	"INSERT INTO sqlite_stat1 VALUES(?, ?, ?)"

L_.str.198:                             ## @.str.198
	.asciz	"ANALYZE; PRAGMA writable_schema=1"

L_.str.199:                             ## @.str.199
	.asciz	"rem"

L_.str.200:                             ## @.str.200
	.asciz	"sample"

L_.str.201:                             ## @.str.201
	.asciz	"DROP TABLE IF EXISTS temp.t592690916721053953805701627921227776"

L_.str.202:                             ## @.str.202
	.asciz	"ANALYZE sqlite_schema"

L_.str.203:                             ## @.str.203
	.asciz	"SELECT max(i.seqno) FROM   sqlite_schema AS s,   pragma_index_list(s.name) AS l,   pragma_index_info(l.name) AS i WHERE s.type = 'table'"

L___func__.idxRemFunc:                  ## @__func__.idxRemFunc
	.asciz	"idxRemFunc"

L_.str.204:                             ## @.str.204
	.asciz	"argc==2"

L_.str.205:                             ## @.str.205
	.asciz	"iSlot<=p->nSlot"

L___func__.idxSampleFunc:               ## @__func__.idxSampleFunc
	.asciz	"idxSampleFunc"

L_.str.206:                             ## @.str.206
	.asciz	"argc==0"

L_.str.207:                             ## @.str.207
	.asciz	"CREATE TABLE temp.t592690916721053953805701627921227776 AS SELECT * FROM %Q"

L___func__.idxPopulateOneStat1:         ## @__func__.idxPopulateOneStat1
	.asciz	"idxPopulateOneStat1"

L_.str.208:                             ## @.str.208
	.asciz	"p->iSample>0"

L_.str.209:                             ## @.str.209
	.asciz	"%sx.%Q IS rem(%d, x.%Q) COLLATE %s"

L_.str.210:                             ## @.str.210
	.asciz	"%s%d"

L_.str.211:                             ## @.str.211
	.asciz	"SELECT %s FROM %Q x ORDER BY %s"

L_.str.212:                             ## @.str.212
	.asciz	"SELECT %s FROM temp.t592690916721053953805701627921227776 x ORDER BY %s"

L_.str.213:                             ## @.str.213
	.asciz	"%d"

L_.str.214:                             ## @.str.214
	.asciz	" %d"

L_.str.215:                             ## @.str.215
	.asciz	"pEntry->zVal2==0"

L___func__.idxHashFind:                 ## @__func__.idxHashFind
	.asciz	"idxHashFind"

L_.str.216:                             ## @.str.216
	.asciz	"EXPLAIN QUERY PLAN %s"

L_.str.217:                             ## @.str.217
	.asciz	" USING INDEX "

L_.str.218:                             ## @.str.218
	.asciz	" USING COVERING INDEX "

L_.str.219:                             ## @.str.219
	.asciz	"%s\n"

L_.str.220:                             ## @.str.220
	.asciz	"%s;\n"

L_.str.221:                             ## @.str.221
	.asciz	"sql error: %s (%d)\n"

L_.str.222:                             ## @.str.222
	.asciz	"|"

.zerofill __DATA,__bss,_mainPrompt,20,4 ## @mainPrompt
L_.str.223:                             ## @.str.223
	.asciz	"sqlite> "

.zerofill __DATA,__bss,_continuePrompt,20,4 ## @continuePrompt
L_.str.224:                             ## @.str.224
	.asciz	"   ...> "

L_.str.225:                             ## @.str.225
	.asciz	"(%d) %s\n"

.zerofill __DATA,__bss,_seenInterrupt,4,2 ## @seenInterrupt
.zerofill __DATA,__bss,_globalDb,8,3    ## @globalDb
L_.str.226:                             ## @.str.226
	.asciz	"WARNING: attempt to configure SQLite after initialization.\n"

L_.str.227:                             ## @.str.227
	.asciz	"Error: out of memory\n"

L_.str.228:                             ## @.str.228
	.asciz	"%s: Error: missing argument to %s\n"

	.section	__DATA,__const
	.p2align	4               ## @integerValue.aMult
_integerValue.aMult:
	.quad	L_.str.229
	.long	1024                    ## 0x400
	.space	4
	.quad	L_.str.230
	.long	1048576                 ## 0x100000
	.space	4
	.quad	L_.str.231
	.long	1073741824              ## 0x40000000
	.space	4
	.quad	L_.str.232
	.long	1000                    ## 0x3e8
	.space	4
	.quad	L_.str.233
	.long	1000000                 ## 0xf4240
	.space	4
	.quad	L_.str.234
	.long	1000000000              ## 0x3b9aca00
	.space	4
	.quad	L_.str.235
	.long	1000                    ## 0x3e8
	.space	4
	.quad	L_.str.236
	.long	1000000                 ## 0xf4240
	.space	4
	.quad	L_.str.237
	.long	1000000000              ## 0x3b9aca00
	.space	4

	.section	__TEXT,__cstring,cstring_literals
L_.str.229:                             ## @.str.229
	.asciz	"KiB"

L_.str.230:                             ## @.str.230
	.asciz	"MiB"

L_.str.231:                             ## @.str.231
	.asciz	"GiB"

L_.str.232:                             ## @.str.232
	.asciz	"KB"

L_.str.233:                             ## @.str.233
	.asciz	"MB"

L_.str.234:                             ## @.str.234
	.asciz	"GB"

L_.str.235:                             ## @.str.235
	.asciz	"K"

L_.str.236:                             ## @.str.236
	.asciz	"M"

L_.str.237:                             ## @.str.237
	.asciz	"G"

L_.str.238:                             ## @.str.238
	.asciz	"Error: unable to open database \"%s\": %s\n"

L_.str.239:                             ## @.str.239
	.asciz	"shell_add_schema"

L_.str.240:                             ## @.str.240
	.asciz	"shell_module_schema"

L_.str.241:                             ## @.str.241
	.asciz	"shell_putsnl"

L_.str.242:                             ## @.str.242
	.asciz	"shell_escape_crnl"

L_.str.243:                             ## @.str.243
	.asciz	"shell_int32"

L_.str.244:                             ## @.str.244
	.asciz	"shell_idquote"

L_.str.245:                             ## @.str.245
	.asciz	"usleep"

L_.str.246:                             ## @.str.246
	.asciz	"edit"

L_.str.247:                             ## @.str.247
	.asciz	"CREATE VIRTUAL TABLE zip USING zipfile(%Q);"

L_.str.248:                             ## @.str.248
	.asciz	"Error: sqlite3_deserialize() returns %d\n"

	.section	__DATA,__data
	.p2align	4               ## @shellAddSchemaName.aPrefix
_shellAddSchemaName.aPrefix:
	.quad	L_.str.249
	.quad	L_.str.250
	.quad	L_.str.251
	.quad	L_.str.252
	.quad	L_.str.253
	.quad	L_.str.254

	.section	__TEXT,__cstring,cstring_literals
L_.str.249:                             ## @.str.249
	.asciz	"TABLE"

L_.str.250:                             ## @.str.250
	.asciz	"INDEX"

L_.str.251:                             ## @.str.251
	.asciz	"UNIQUE INDEX"

L_.str.252:                             ## @.str.252
	.asciz	"VIEW"

L_.str.253:                             ## @.str.253
	.asciz	"TRIGGER"

L_.str.254:                             ## @.str.254
	.asciz	"VIRTUAL TABLE"

L_.str.255:                             ## @.str.255
	.asciz	"CREATE "

L_.str.256:                             ## @.str.256
	.asciz	"temp"

L_.str.257:                             ## @.str.257
	.asciz	"%.*s \"%w\".%s"

L_.str.258:                             ## @.str.258
	.asciz	"%.*s %s.%s"

L_.str.259:                             ## @.str.259
	.asciz	"%s\n/* %s */"

L_.str.260:                             ## @.str.260
	.asciz	"%z\n/* %s */"

L_.str.261:                             ## @.str.261
	.asciz	"("

L_.str.262:                             ## @.str.262
	.asciz	"PRAGMA \"%w\".table_info=%Q;"

L_.str.263:                             ## @.str.263
	.asciz	"."

L_.str.264:                             ## @.str.264
	.asciz	"/* %s */"

L_.str.265:                             ## @.str.265
	.asciz	"\\n"

L_.str.266:                             ## @.str.266
	.asciz	"\\012"

L_.str.267:                             ## @.str.267
	.asciz	"\\r"

L_.str.268:                             ## @.str.268
	.asciz	"\\015"

L_.str.269:                             ## @.str.269
	.asciz	"replace(replace("

L_.str.270:                             ## @.str.270
	.asciz	"replace("

L_.str.271:                             ## @.str.271
	.asciz	",'"

L_.str.272:                             ## @.str.272
	.asciz	"', char(10))"

L_.str.273:                             ## @.str.273
	.asciz	"', char(13))"

L_.str.274:                             ## @.str.274
	.asciz	"(%s%u)"

L_.str.275:                             ## @.str.275
	.asciz	"\"%w\""

L_.str.276:                             ## @.str.276
	.asciz	"VISUAL"

L_.str.277:                             ## @.str.277
	.asciz	"no editor for edit()"

L_.str.278:                             ## @.str.278
	.asciz	"NULL input to edit()"

L_.str.279:                             ## @.str.279
	.asciz	"temp%llx"

L_.str.280:                             ## @.str.280
	.asciz	"w"

L_.str.281:                             ## @.str.281
	.asciz	"edit() cannot open temp file"

L_.str.282:                             ## @.str.282
	.asciz	"\r\n"

L_.str.283:                             ## @.str.283
	.asciz	"edit() could not write the whole file"

L_.str.284:                             ## @.str.284
	.asciz	"%s \"%s\""

L_.str.285:                             ## @.str.285
	.asciz	"EDITOR returned non-zero"

L_.str.286:                             ## @.str.286
	.asciz	"edit() cannot reopen temp file after edit"

L_.str.287:                             ## @.str.287
	.asciz	"could not read back the whole file"

L_.str.288:                             ## @.str.288
	.asciz	"r"

L_.str.289:                             ## @.str.289
	.asciz	"cannot open \"%s\" for reading\n"

L_.str.290:                             ## @.str.290
	.asciz	"| size %d pagesize %d"

L_.str.291:                             ## @.str.291
	.asciz	"invalid pagesize\n"

L_.str.292:                             ## @.str.292
	.asciz	"| page %d offset %d"

L_.str.293:                             ## @.str.293
	.asciz	"| end "

L_.str.294:                             ## @.str.294
	.asciz	"| %d: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x"

L_.str.295:                             ## @.str.295
	.asciz	"Error on line %d of --hexdb input\n"

	.section	__DATA,__data
	.p2align	4               ## @safeModeAuth.azProhibitedFunctions
_safeModeAuth.azProhibitedFunctions:
	.quad	L_.str.246
	.quad	L_.str.296
	.quad	L_.str.297
	.quad	L_.str.2
	.quad	L_.str.3
	.quad	L_.str.298
	.quad	L_.str.299

	.section	__TEXT,__cstring,cstring_literals
L_.str.296:                             ## @.str.296
	.asciz	"fts3_tokenizer"

L_.str.297:                             ## @.str.297
	.asciz	"load_extension"

L_.str.298:                             ## @.str.298
	.asciz	"zipfile"

L_.str.299:                             ## @.str.299
	.asciz	"zipfile_cds"

L_.str.300:                             ## @.str.300
	.asciz	"cannot run ATTACH in safe mode"

L_.str.301:                             ## @.str.301
	.asciz	"cannot use the %s() function in safe mode"

L_.str.302:                             ## @.str.302
	.asciz	"line %d: "

L_.str.303:                             ## @.str.303
	.asciz	"-- warning: cannot find home directory; cannot read ~/.sqliterc\n"

L_.str.304:                             ## @.str.304
	.asciz	"%s/.sqliterc"

L_.str.305:                             ## @.str.305
	.asciz	"-- Loading resources from %s\n"

L_.str.306:                             ## @.str.306
	.asciz	"cannot open: \"%s\"\n"

L_.str.307:                             ## @.str.307
	.asciz	"Usage: %s [OPTIONS] FILENAME [SQL]\nFILENAME is the name of an SQLite database. A new database is created\nif the file does not previously exist.\n"

L_.str.308:                             ## @.str.308
	.asciz	"OPTIONS include:\n%s"

	.section	__TEXT,__const
	.p2align	4               ## @zOptions
_zOptions:
	.asciz	"   -append              append the database to the end of the file\n   -ascii               set output mode to 'ascii'\n   -bail                stop after hitting an error\n   -batch               force batch I/O\n   -box                 set output mode to 'box'\n   -column              set output mode to 'column'\n   -cmd COMMAND         run \"COMMAND\" before reading stdin\n   -csv                 set output mode to 'csv'\n   -deserialize         open the database using sqlite3_deserialize()\n   -echo                print commands before execution\n   -init FILENAME       read/process named file\n   -[no]header          turn headers on or off\n   -help                show this message\n   -html                set output mode to HTML\n   -interactive         force interactive I/O\n   -json                set output mode to 'json'\n   -line                set output mode to 'line'\n   -list                set output mode to 'list'\n   -lookaside SIZE N    use N entries of SZ bytes for lookaside memory\n   -markdown            set output mode to 'markdown'\n   -maxsize N           maximum size for a --deserialize database\n   -memtrace            trace all memory allocations and deallocations\n   -mmap N              default mmap size set to N\n   -newline SEP         set output row separator. Default: '\\n'\n   -nofollow            refuse to open symbolic links to database files\n   -nonce STRING        set the safe-mode escape nonce\n   -nullvalue TEXT      set text string for NULL values. Default ''\n   -pagecache SIZE N    use N slots of SZ bytes each for page cache memory\n   -quote               set output mode to 'quote'\n   -readonly            open the database read-only\n   -safe                enable safe-mode\n   -separator SEP       set output column separator. Default: '|'\n   -stats               print memory stats before each finalize\n   -table               set output mode to 'table'\n   -tabs                set output mode to 'tabs'\n   -version             show SQLite version\n   -vfs NAME            use NAME as the default VFS\n"

	.section	__TEXT,__cstring,cstring_literals
L_.str.309:                             ## @.str.309
	.asciz	"Use the -help option for additional information\n"

L_.str.310:                             ## @.str.310
	.asciz	"auth"

L_.str.311:                             ## @.str.311
	.asciz	"Usage: .auth ON|OFF\n"

L_.str.312:                             ## @.str.312
	.asciz	"backup"

L_.str.313:                             ## @.str.313
	.asciz	"save"

L_.str.314:                             ## @.str.314
	.asciz	"cannot run .%s in safe mode"

L_.str.315:                             ## @.str.315
	.asciz	"-async"

L_.str.316:                             ## @.str.316
	.asciz	"unknown option: %s\n"

L_.str.317:                             ## @.str.317
	.asciz	"Usage: .backup ?DB? ?OPTIONS? FILENAME\n"

L_.str.318:                             ## @.str.318
	.asciz	"missing FILENAME argument on .backup\n"

L_.str.319:                             ## @.str.319
	.asciz	"Error: cannot open \"%s\"\n"

L_.str.320:                             ## @.str.320
	.asciz	"PRAGMA synchronous=OFF; PRAGMA journal_mode=OFF;"

L_.str.321:                             ## @.str.321
	.asciz	"bail"

L_.str.322:                             ## @.str.322
	.asciz	"Usage: .bail on|off\n"

L_.str.323:                             ## @.str.323
	.asciz	"Usage: .binary on|off\n"

L_.str.324:                             ## @.str.324
	.asciz	"breakpoint"

L_.str.325:                             ## @.str.325
	.asciz	"cd"

L_.str.326:                             ## @.str.326
	.asciz	"cannot run .cd in safe mode"

L_.str.327:                             ## @.str.327
	.asciz	"Cannot change to directory \"%s\"\n"

L_.str.328:                             ## @.str.328
	.asciz	"Usage: .cd DIRECTORY\n"

L_.str.329:                             ## @.str.329
	.asciz	"changes"

L_.str.330:                             ## @.str.330
	.asciz	"Usage: .changes on|off\n"

L_.str.331:                             ## @.str.331
	.asciz	"check"

L_.str.332:                             ## @.str.332
	.asciz	"Usage: .check GLOB-PATTERN\n"

L_.str.333:                             ## @.str.333
	.asciz	"testcase-out.txt"

L_.str.334:                             ## @.str.334
	.asciz	"Error: cannot read 'testcase-out.txt'\n"

L_.str.335:                             ## @.str.335
	.asciz	"testcase-%s FAILED\n Expected: [%s]\n      Got: [%s]\n"

L_.str.336:                             ## @.str.336
	.asciz	"testcase-%s ok\n"

L_.str.337:                             ## @.str.337
	.asciz	"clone"

L_.str.338:                             ## @.str.338
	.asciz	"cannot run .clone in safe mode"

L_.str.339:                             ## @.str.339
	.asciz	"Usage: .clone FILENAME\n"

L_.str.340:                             ## @.str.340
	.asciz	"connection"

L_.str.341:                             ## @.str.341
	.asciz	"(not open)"

L_.str.342:                             ## @.str.342
	.asciz	"(memory)"

L_.str.343:                             ## @.str.343
	.asciz	"(temporary-file)"

L_.str.344:                             ## @.str.344
	.asciz	"ACTIVE %d: %s\n"

L_.str.345:                             ## @.str.345
	.asciz	"       %d: %s\n"

L_.str.346:                             ## @.str.346
	.asciz	"close"

L_.str.347:                             ## @.str.347
	.asciz	"cannot close the active database connection\n"

L_.str.348:                             ## @.str.348
	.asciz	"Usage: .connection [close] [CONNECTION-NUMBER]\n"

L_.str.349:                             ## @.str.349
	.asciz	"databases"

L_.str.350:                             ## @.str.350
	.asciz	"%s: %s %s%s\n"

L_.str.351:                             ## @.str.351
	.asciz	"\"\""

L_.str.352:                             ## @.str.352
	.asciz	"r/o"

L_.str.353:                             ## @.str.353
	.asciz	"r/w"

L_.str.354:                             ## @.str.354
	.asciz	" read-txn"

L_.str.355:                             ## @.str.355
	.asciz	" write-txn"

L_.str.356:                             ## @.str.356
	.asciz	"dbconfig"

	.section	__DATA,__const
	.p2align	4               ## @do_meta_command.aDbConfig
_do_meta_command.aDbConfig:
	.quad	L_.str.357
	.long	1010                    ## 0x3f2
	.space	4
	.quad	L_.str.358
	.long	1014                    ## 0x3f6
	.space	4
	.quad	L_.str.359
	.long	1013                    ## 0x3f5
	.space	4
	.quad	L_.str.360
	.long	1002                    ## 0x3ea
	.space	4
	.quad	L_.str.361
	.long	1007                    ## 0x3ef
	.space	4
	.quad	L_.str.362
	.long	1003                    ## 0x3eb
	.space	4
	.quad	L_.str.363
	.long	1015                    ## 0x3f7
	.space	4
	.quad	L_.str.296
	.long	1004                    ## 0x3ec
	.space	4
	.quad	L_.str.364
	.long	1012                    ## 0x3f4
	.space	4
	.quad	L_.str.365
	.long	1016                    ## 0x3f8
	.space	4
	.quad	L_.str.297
	.long	1005                    ## 0x3ed
	.space	4
	.quad	L_.str.366
	.long	1006                    ## 0x3ee
	.space	4
	.quad	L_.str.367
	.long	1009                    ## 0x3f1
	.space	4
	.quad	L_.str.368
	.long	1008                    ## 0x3f0
	.space	4
	.quad	L_.str.369
	.long	1017                    ## 0x3f9
	.space	4
	.quad	L_.str.370
	.long	1011                    ## 0x3f3
	.space	4

	.section	__TEXT,__cstring,cstring_literals
L_.str.357:                             ## @.str.357
	.asciz	"defensive"

L_.str.358:                             ## @.str.358
	.asciz	"dqs_ddl"

L_.str.359:                             ## @.str.359
	.asciz	"dqs_dml"

L_.str.360:                             ## @.str.360
	.asciz	"enable_fkey"

L_.str.361:                             ## @.str.361
	.asciz	"enable_qpsg"

L_.str.362:                             ## @.str.362
	.asciz	"enable_trigger"

L_.str.363:                             ## @.str.363
	.asciz	"enable_view"

L_.str.364:                             ## @.str.364
	.asciz	"legacy_alter_table"

L_.str.365:                             ## @.str.365
	.asciz	"legacy_file_format"

L_.str.366:                             ## @.str.366
	.asciz	"no_ckpt_on_close"

L_.str.367:                             ## @.str.367
	.asciz	"reset_database"

L_.str.368:                             ## @.str.368
	.asciz	"trigger_eqp"

L_.str.369:                             ## @.str.369
	.asciz	"trusted_schema"

L_.str.370:                             ## @.str.370
	.asciz	"writable_schema"

L_.str.371:                             ## @.str.371
	.asciz	"%19s %s\n"

L_.str.372:                             ## @.str.372
	.asciz	"on"

L_.str.373:                             ## @.str.373
	.asciz	"off"

L_.str.374:                             ## @.str.374
	.asciz	"Error: unknown dbconfig \"%s\"\n"

L_.str.375:                             ## @.str.375
	.asciz	"Enter \".dbconfig\" with no arguments for a list\n"

L_.str.376:                             ## @.str.376
	.asciz	"dbinfo"

L_.str.377:                             ## @.str.377
	.asciz	"dump"

L_.str.378:                             ## @.str.378
	.asciz	"preserve-rowids"

L_.str.379:                             ## @.str.379
	.asciz	"newlines"

L_.str.380:                             ## @.str.380
	.asciz	"data-only"

L_.str.381:                             ## @.str.381
	.asciz	"nosys"

L_.str.382:                             ## @.str.382
	.asciz	"Unknown option \"%s\" on \".dump\"\n"

L_.str.383:                             ## @.str.383
	.asciz	"name LIKE %Q ESCAPE '\\' OR EXISTS (  SELECT 1 FROM sqlite_schema WHERE     name LIKE %Q ESCAPE '\\' AND    sql LIKE 'CREATE VIRTUAL TABLE%%' AND    substr(o.name, 1, length(name)+1) == (name||'_'))"

L_.str.384:                             ## @.str.384
	.asciz	"%z OR %z"

L_.str.385:                             ## @.str.385
	.asciz	"PRAGMA foreign_keys=OFF;\n"

L_.str.386:                             ## @.str.386
	.asciz	"BEGIN TRANSACTION;\n"

L_.str.387:                             ## @.str.387
	.asciz	"SAVEPOINT dump; PRAGMA writable_schema=ON"

L_.str.388:                             ## @.str.388
	.asciz	"true"

L_.str.389:                             ## @.str.389
	.asciz	"SELECT name, type, sql FROM sqlite_schema AS o WHERE (%s) AND type=='table'  AND sql NOT NULL ORDER BY tbl_name='sqlite_sequence', rowid"

L_.str.390:                             ## @.str.390
	.asciz	"SELECT sql FROM sqlite_schema AS o WHERE (%s) AND sql NOT NULL  AND type IN ('index','trigger','view')"

L_.str.391:                             ## @.str.391
	.asciz	"PRAGMA writable_schema=OFF;\n"

L_.str.392:                             ## @.str.392
	.asciz	"PRAGMA writable_schema=OFF;"

L_.str.393:                             ## @.str.393
	.asciz	"RELEASE dump;"

L_.str.394:                             ## @.str.394
	.asciz	"ROLLBACK; -- due to errors\n"

L_.str.395:                             ## @.str.395
	.asciz	"COMMIT;\n"

L_.str.396:                             ## @.str.396
	.asciz	"echo"

L_.str.397:                             ## @.str.397
	.asciz	"Usage: .echo on|off\n"

L_.str.398:                             ## @.str.398
	.asciz	"eqp"

L_.str.399:                             ## @.str.399
	.asciz	"PRAGMA vdbe_trace=OFF;"

L_.str.400:                             ## @.str.400
	.asciz	"full"

L_.str.401:                             ## @.str.401
	.asciz	"trigger"

L_.str.402:                             ## @.str.402
	.asciz	"Usage: .eqp off|on|trace|trigger|full\n"

L_.str.403:                             ## @.str.403
	.asciz	"exit"

L_.str.404:                             ## @.str.404
	.asciz	"explain"

L_.str.405:                             ## @.str.405
	.asciz	"auto"

L_.str.406:                             ## @.str.406
	.asciz	"Cannot run experimental commands such as \"%s\" in safe mode\n"

L_.str.407:                             ## @.str.407
	.asciz	"filectrl"

	.section	__DATA,__const
	.p2align	4               ## @do_meta_command.aCtrl
_do_meta_command.aCtrl:
	.quad	L_.str.408
	.long	6                       ## 0x6
	.space	4
	.quad	L_.str.409
	.quad	L_.str.410
	.long	35                      ## 0x23
	.space	4
	.quad	L_.str.27
	.quad	L_.str.411
	.long	20                      ## 0x14
	.space	4
	.quad	L_.str.27
	.quad	L_.str.412
	.long	34                      ## 0x22
	.space	4
	.quad	L_.str.413
	.quad	L_.str.414
	.long	10                      ## 0xa
	.space	4
	.quad	L_.str.415
	.quad	L_.str.416
	.long	13                      ## 0xd
	.space	4
	.quad	L_.str.415
	.quad	L_.str.417
	.long	38                      ## 0x26
	.space	4
	.quad	L_.str.418
	.quad	L_.str.419
	.long	36                      ## 0x24
	.space	4
	.quad	L_.str.420
	.quad	L_.str.421
	.long	16                      ## 0x10
	.space	4
	.quad	L_.str.27

	.section	__TEXT,__cstring,cstring_literals
L_.str.408:                             ## @.str.408
	.asciz	"chunk_size"

L_.str.409:                             ## @.str.409
	.asciz	"SIZE"

L_.str.410:                             ## @.str.410
	.asciz	"data_version"

L_.str.411:                             ## @.str.411
	.asciz	"has_moved"

L_.str.412:                             ## @.str.412
	.asciz	"lock_timeout"

L_.str.413:                             ## @.str.413
	.asciz	"MILLISEC"

L_.str.414:                             ## @.str.414
	.asciz	"persist_wal"

L_.str.415:                             ## @.str.415
	.asciz	"[BOOLEAN]"

L_.str.416:                             ## @.str.416
	.asciz	"psow"

L_.str.417:                             ## @.str.417
	.asciz	"reserve_bytes"

L_.str.418:                             ## @.str.418
	.asciz	"[N]"

L_.str.419:                             ## @.str.419
	.asciz	"size_limit"

L_.str.420:                             ## @.str.420
	.asciz	"[LIMIT]"

L_.str.421:                             ## @.str.421
	.asciz	"tempfilename"

L_.str.422:                             ## @.str.422
	.asciz	"help"

L_.str.423:                             ## @.str.423
	.asciz	"--schema"

L_.str.424:                             ## @.str.424
	.asciz	"-schema"

L_.str.425:                             ## @.str.425
	.asciz	"Available file-controls:\n"

L_.str.426:                             ## @.str.426
	.asciz	"  .filectrl %s %s\n"

L_.str.427:                             ## @.str.427
	.asciz	"Error: ambiguous file-control: \"%s\"\nUse \".filectrl --help\" for help\n"

L_.str.428:                             ## @.str.428
	.asciz	"Error: unknown file-control: %s\nUse \".filectrl --help\" for help\n"

L_.str.429:                             ## @.str.429
	.asciz	"%d\n"

L_.str.430:                             ## @.str.430
	.asciz	"Usage: .filectrl %s %s\n"

L_.str.431:                             ## @.str.431
	.asciz	"%lld"

L_.str.432:                             ## @.str.432
	.asciz	"fullschema"

L_.str.433:                             ## @.str.433
	.asciz	"indent"

L_.str.434:                             ## @.str.434
	.asciz	"Usage: .fullschema ?--indent?\n"

L_.str.435:                             ## @.str.435
	.asciz	"SELECT sql FROM  (SELECT sql sql, type type, tbl_name tbl_name, name name, rowid x     FROM sqlite_schema UNION ALL   SELECT sql, type, tbl_name, name, rowid FROM sqlite_temp_schema) WHERE type!='meta' AND sql NOTNULL AND name NOT LIKE 'sqlite_%' ORDER BY x"

L_.str.436:                             ## @.str.436
	.asciz	"SELECT rowid FROM sqlite_schema WHERE name GLOB 'sqlite_stat[134]'"

L_.str.437:                             ## @.str.437
	.asciz	"/* No STAT tables available */\n"

L_.str.438:                             ## @.str.438
	.asciz	"ANALYZE sqlite_schema;\n"

L_.str.439:                             ## @.str.439
	.asciz	"sqlite_stat1"

L_.str.440:                             ## @.str.440
	.asciz	"SELECT * FROM sqlite_stat1"

L_.str.441:                             ## @.str.441
	.asciz	"sqlite_stat4"

L_.str.442:                             ## @.str.442
	.asciz	"SELECT * FROM sqlite_stat4"

L_.str.443:                             ## @.str.443
	.asciz	"headers"

L_.str.444:                             ## @.str.444
	.asciz	"Usage: .headers on|off\n"

L_.str.445:                             ## @.str.445
	.asciz	"Nothing matches '%s'\n"

L_.str.446:                             ## @.str.446
	.asciz	"import"

L_.str.447:                             ## @.str.447
	.asciz	"cannot run .import in safe mode"

L_.str.448:                             ## @.str.448
	.asciz	"ERROR: extra argument: \"%s\".  Usage:\n"

L_.str.449:                             ## @.str.449
	.asciz	"-v"

L_.str.450:                             ## @.str.450
	.asciz	"-skip"

L_.str.451:                             ## @.str.451
	.asciz	"ERROR: unknown option: \"%s\".  Usage:\n"

L_.str.452:                             ## @.str.452
	.asciz	"ERROR: missing %s argument. Usage:\n"

L_.str.453:                             ## @.str.453
	.asciz	"FILE"

L_.str.454:                             ## @.str.454
	.asciz	"Error: non-null column separator required for import\n"

L_.str.455:                             ## @.str.455
	.asciz	"Error: multi-character column separators not allowed for import\n"

L_.str.456:                             ## @.str.456
	.asciz	"Error: non-null row separator required for import\n"

L_.str.457:                             ## @.str.457
	.asciz	"Error: multi-character row separators not allowed for import\n"

L_.str.458:                             ## @.str.458
	.asciz	"<pipe>"

L_.str.459:                             ## @.str.459
	.asciz	"Column separator "

L_.str.460:                             ## @.str.460
	.asciz	", row separator "

L_.str.461:                             ## @.str.461
	.asciz	"SELECT * FROM \"%w\".\"%w\""

L_.str.462:                             ## @.str.462
	.asciz	"no such table: *"

L_.str.463:                             ## @.str.463
	.asciz	"CREATE TABLE \"%w\".\"%w\""

L_.str.464:                             ## @.str.464
	.asciz	"Columns renamed during .import %s due to duplicates:\n%s\n"

L___func__.do_meta_command:             ## @__func__.do_meta_command
	.asciz	"do_meta_command"

L_.str.465:                             ## @.str.465
	.asciz	"dbCols==0"

L_.str.466:                             ## @.str.466
	.asciz	"%s: empty file\n"

L_.str.467:                             ## @.str.467
	.asciz	"%z%z\n"

L_.str.468:                             ## @.str.468
	.asciz	"%s failed:\n%s\n"

L_.str.469:                             ## @.str.469
	.asciz	"INSERT INTO \"%w\".\"%w\" VALUES(?"

L_.str.470:                             ## @.str.470
	.asciz	"Insert using: %s\n"

L_.str.471:                             ## @.str.471
	.asciz	"BEGIN"

L_.str.472:                             ## @.str.472
	.asciz	"%s:%d: expected %d columns but found %d - filling the rest with NULL\n"

L_.str.473:                             ## @.str.473
	.asciz	"%s:%d: expected %d columns but found %d - extras ignored\n"

L_.str.474:                             ## @.str.474
	.asciz	"%s:%d: INSERT failed: %s\n"

L_.str.475:                             ## @.str.475
	.asciz	"COMMIT"

L_.str.476:                             ## @.str.476
	.asciz	"Added %d rows with %d errors using %d lines of input\n"

L_.str.477:                             ## @.str.477
	.asciz	"imposter"

L_.str.478:                             ## @.str.478
	.asciz	"Usage: .imposter INDEX IMPOSTER\n       .imposter off\n"

L_.str.479:                             ## @.str.479
	.asciz	"SELECT rootpage, 0 FROM sqlite_schema WHERE name='%q' AND type='index'UNION ALL SELECT rootpage, 1 FROM sqlite_schema WHERE name='%q' AND type='table'   AND sql LIKE '%%without%%rowid%%'"

L_.str.480:                             ## @.str.480
	.asciz	"PRAGMA index_xinfo='%q'"

L_.str.481:                             ## @.str.481
	.asciz	"_ROWID_"

L_.str.482:                             ## @.str.482
	.asciz	"expr%d"

L_.str.483:                             ## @.str.483
	.asciz	"%z,\"%w\""

L_.str.484:                             ## @.str.484
	.asciz	"no such index: \"%s\"\n"

L_.str.485:                             ## @.str.485
	.asciz	"CREATE TABLE \"%w\"(%s,PRIMARY KEY(%.*s))WITHOUT ROWID"

L_.str.486:                             ## @.str.486
	.asciz	"Error in [%s]: %s\n"

L_.str.487:                             ## @.str.487
	.asciz	"WARNING: writing to an imposter table will corrupt the \"%s\" %s!\n"

L_.str.488:                             ## @.str.488
	.asciz	"table"

L_.str.489:                             ## @.str.489
	.asciz	"index"

L_.str.490:                             ## @.str.490
	.asciz	"SQLITE_TESTCTRL_IMPOSTER returns %d\n"

L_.str.491:                             ## @.str.491
	.asciz	"limits"

	.section	__DATA,__const
	.p2align	4               ## @do_meta_command.aLimit
_do_meta_command.aLimit:
	.quad	L_.str.492
	.long	0                       ## 0x0
	.space	4
	.quad	L_.str.493
	.long	1                       ## 0x1
	.space	4
	.quad	L_.str.494
	.long	2                       ## 0x2
	.space	4
	.quad	L_.str.495
	.long	3                       ## 0x3
	.space	4
	.quad	L_.str.496
	.long	4                       ## 0x4
	.space	4
	.quad	L_.str.497
	.long	5                       ## 0x5
	.space	4
	.quad	L_.str.498
	.long	6                       ## 0x6
	.space	4
	.quad	L_.str.499
	.long	7                       ## 0x7
	.space	4
	.quad	L_.str.500
	.long	8                       ## 0x8
	.space	4
	.quad	L_.str.501
	.long	9                       ## 0x9
	.space	4
	.quad	L_.str.502
	.long	10                      ## 0xa
	.space	4
	.quad	L_.str.503
	.long	11                      ## 0xb
	.space	4

	.section	__TEXT,__cstring,cstring_literals
L_.str.492:                             ## @.str.492
	.asciz	"length"

L_.str.493:                             ## @.str.493
	.asciz	"sql_length"

L_.str.494:                             ## @.str.494
	.asciz	"column"

L_.str.495:                             ## @.str.495
	.asciz	"expr_depth"

L_.str.496:                             ## @.str.496
	.asciz	"compound_select"

L_.str.497:                             ## @.str.497
	.asciz	"vdbe_op"

L_.str.498:                             ## @.str.498
	.asciz	"function_arg"

L_.str.499:                             ## @.str.499
	.asciz	"attached"

L_.str.500:                             ## @.str.500
	.asciz	"like_pattern_length"

L_.str.501:                             ## @.str.501
	.asciz	"variable_number"

L_.str.502:                             ## @.str.502
	.asciz	"trigger_depth"

L_.str.503:                             ## @.str.503
	.asciz	"worker_threads"

L_.str.504:                             ## @.str.504
	.asciz	"%20s %d\n"

L_.str.505:                             ## @.str.505
	.asciz	"Usage: .limit NAME ?NEW-VALUE?\n"

L_.str.506:                             ## @.str.506
	.asciz	"ambiguous limit: \"%s\"\n"

L_.str.507:                             ## @.str.507
	.asciz	"unknown limit: \"%s\"\nenter \".limits\" with no arguments for a list.\n"

L_.str.508:                             ## @.str.508
	.asciz	"lint"

L_.str.509:                             ## @.str.509
	.asciz	"load"

L_.str.510:                             ## @.str.510
	.asciz	"cannot run .load in safe mode"

L_.str.511:                             ## @.str.511
	.asciz	"Usage: .load FILE ?ENTRYPOINT?\n"

L_.str.512:                             ## @.str.512
	.asciz	"log"

L_.str.513:                             ## @.str.513
	.asciz	"cannot run .log in safe mode"

L_.str.514:                             ## @.str.514
	.asciz	"Usage: .log FILENAME\n"

L_.str.515:                             ## @.str.515
	.asciz	"mode"

	.section	__TEXT,__literal8,8byte_literals
	.p2align	2               ## @__const.do_meta_command.cmOpts
L___const.do_meta_command.cmOpts:
	.long	60                      ## 0x3c
	.byte	0                       ## 0x0
	.byte	0                       ## 0x0
	.space	2

	.section	__TEXT,__cstring,cstring_literals
L_.str.516:                             ## @.str.516
	.asciz	"wrap"

L_.str.517:                             ## @.str.517
	.asciz	"ww"

L_.str.518:                             ## @.str.518
	.asciz	"wordwrap"

L_.str.519:                             ## @.str.519
	.asciz	"quote"

L_.str.520:                             ## @.str.520
	.asciz	"noquote"

L_.str.521:                             ## @.str.521
	.asciz	"qbox"

	.section	__TEXT,__literal8,8byte_literals
	.p2align	2               ## @__const.do_meta_command.cmo
L___const.do_meta_command.cmo:
	.long	60                      ## 0x3c
	.byte	1                       ## 0x1
	.byte	0                       ## 0x0
	.space	2

	.section	__TEXT,__cstring,cstring_literals
L_.str.522:                             ## @.str.522
	.asciz	"box"

L_.str.523:                             ## @.str.523
	.asciz	"options:\n  --noquote\n  --quote\n  --wordwrap on/off\n  --wrap N\n  --ww\n"

L_.str.524:                             ## @.str.524
	.asciz	"extra argument: \"%s\"\n"

L_.str.525:                             ## @.str.525
	.asciz	"current output mode: %s --wrap %d --wordwrap %s --%squote\n"

	.section	__DATA,__data
	.p2align	4               ## @modeDescr
_modeDescr:
	.quad	L_.str.1151
	.quad	L_.str.494
	.quad	L_.str.530
	.quad	L_.str.1152
	.quad	L_.str.531
	.quad	L_.str.536
	.quad	L_.str.519
	.quad	L_.str.532
	.quad	L_.str.534
	.quad	L_.str.404
	.quad	L_.str.537
	.quad	L_.str.1153
	.quad	L_.str.398
	.quad	L_.str.540
	.quad	L_.str.538
	.quad	L_.str.488
	.quad	L_.str.522
	.quad	L_.str.539
	.quad	L_.str.373

	.section	__TEXT,__cstring,cstring_literals
L_.str.526:                             ## @.str.526
	.asciz	"no"

L_.str.527:                             ## @.str.527
	.asciz	"current output mode: %s\n"

L_.str.528:                             ## @.str.528
	.asciz	"lines"

L_.str.529:                             ## @.str.529
	.asciz	"columns"

L_.str.530:                             ## @.str.530
	.asciz	"list"

L_.str.531:                             ## @.str.531
	.asciz	"html"

L_.str.532:                             ## @.str.532
	.asciz	"tcl"

L_.str.533:                             ## @.str.533
	.asciz	" "

L_.str.534:                             ## @.str.534
	.asciz	"csv"

L_.str.535:                             ## @.str.535
	.asciz	"tabs"

L_.str.536:                             ## @.str.536
	.asciz	"insert"

L_.str.537:                             ## @.str.537
	.asciz	"ascii"

L_.str.538:                             ## @.str.538
	.asciz	"markdown"

L_.str.539:                             ## @.str.539
	.asciz	"count"

L_.str.540:                             ## @.str.540
	.asciz	"json"

L_.str.541:                             ## @.str.541
	.asciz	"Error: mode should be one of: ascii box column csv html insert json line list markdown qbox quote table tabs tcl\n"

L_.str.542:                             ## @.str.542
	.asciz	"nonce"

L_.str.543:                             ## @.str.543
	.asciz	"Usage: .nonce NONCE\n"

L_.str.544:                             ## @.str.544
	.asciz	"line %d: incorrect nonce: \"%s\"\n"

L_.str.545:                             ## @.str.545
	.asciz	"nullvalue"

L_.str.546:                             ## @.str.546
	.asciz	"Usage: .nullvalue STRING\n"

L_.str.547:                             ## @.str.547
	.asciz	"open"

L_.str.548:                             ## @.str.548
	.asciz	"new"

L_.str.549:                             ## @.str.549
	.asciz	"append"

L_.str.550:                             ## @.str.550
	.asciz	"readonly"

L_.str.551:                             ## @.str.551
	.asciz	"nofollow"

L_.str.552:                             ## @.str.552
	.asciz	"deserialize"

L_.str.553:                             ## @.str.553
	.asciz	"hexdb"

L_.str.554:                             ## @.str.554
	.asciz	"maxsize"

L_.str.555:                             ## @.str.555
	.asciz	"cannot open disk-based database files in safe mode"

L_.str.556:                             ## @.str.556
	.asciz	"Error: cannot open '%s'\n"

L_.str.557:                             ## @.str.557
	.asciz	"output"

L_.str.558:                             ## @.str.558
	.asciz	"once"

L_.str.559:                             ## @.str.559
	.asciz	"excel"

L_.str.560:                             ## @.str.560
	.asciz	"-bom"

L_.str.561:                             ## @.str.561
	.asciz	"-x"

L_.str.562:                             ## @.str.562
	.asciz	"-e"

L_.str.563:                             ## @.str.563
	.asciz	"%z %s"

L_.str.564:                             ## @.str.564
	.asciz	"ERROR: extra parameter: \"%s\".  Usage:\n"

L_.str.565:                             ## @.str.565
	.asciz	"stdout"

L_.str.566:                             ## @.str.566
	.asciz	"txt"

L_.str.567:                             ## @.str.567
	.asciz	"Error: cannot open pipe \"%s\"\n"

L_.str.568:                             ## @.str.568
	.asciz	"\357\273\277"

L_.str.569:                             ## @.str.569
	.asciz	"Error: cannot write to \"%s\"\n"

L_.str.570:                             ## @.str.570
	.asciz	"parameter"

L_.str.571:                             ## @.str.571
	.asciz	"clear"

L_.str.572:                             ## @.str.572
	.asciz	"DROP TABLE IF EXISTS temp.sqlite_parameters;"

L_.str.573:                             ## @.str.573
	.asciz	"SELECT max(length(key)) FROM temp.sqlite_parameters;"

L_.str.574:                             ## @.str.574
	.asciz	"SELECT key, quote(value) FROM temp.sqlite_parameters;"

L_.str.575:                             ## @.str.575
	.asciz	"%-*s %s\n"

L_.str.576:                             ## @.str.576
	.asciz	"init"

L_.str.577:                             ## @.str.577
	.asciz	"set"

L_.str.578:                             ## @.str.578
	.asciz	"REPLACE INTO temp.sqlite_parameters(key,value)VALUES(%Q,%s);"

L_.str.579:                             ## @.str.579
	.asciz	"REPLACE INTO temp.sqlite_parameters(key,value)VALUES(%Q,%Q);"

L_.str.580:                             ## @.str.580
	.asciz	"unset"

L_.str.581:                             ## @.str.581
	.asciz	"DELETE FROM temp.sqlite_parameters WHERE key=%Q"

L_.str.582:                             ## @.str.582
	.asciz	"print"

L_.str.583:                             ## @.str.583
	.asciz	"progress"

L_.str.584:                             ## @.str.584
	.asciz	"quiet"

L_.str.585:                             ## @.str.585
	.asciz	"q"

L_.str.586:                             ## @.str.586
	.asciz	"reset"

L_.str.587:                             ## @.str.587
	.asciz	"limit"

L_.str.588:                             ## @.str.588
	.asciz	"Error: missing argument on --limit\n"

L_.str.589:                             ## @.str.589
	.asciz	"Error: unknown option: \"%s\"\n"

L_.str.590:                             ## @.str.590
	.asciz	"prompt"

L_.str.591:                             ## @.str.591
	.asciz	"quit"

L_.str.592:                             ## @.str.592
	.asciz	"read"

L_.str.593:                             ## @.str.593
	.asciz	"cannot run .read in safe mode"

L_.str.594:                             ## @.str.594
	.asciz	"Usage: .read FILE\n"

L_.str.595:                             ## @.str.595
	.asciz	"restore"

L_.str.596:                             ## @.str.596
	.asciz	"cannot run .restore in safe mode"

L_.str.597:                             ## @.str.597
	.asciz	"Usage: .restore ?DB? FILE\n"

L_.str.598:                             ## @.str.598
	.asciz	"Error: source database is busy\n"

L_.str.599:                             ## @.str.599
	.asciz	"scanstats"

L_.str.600:                             ## @.str.600
	.asciz	"Warning: .scanstats not available in this build.\n"

L_.str.601:                             ## @.str.601
	.asciz	"Usage: .scanstats on|off\n"

L_.str.602:                             ## @.str.602
	.asciz	"schema"

L_.str.603:                             ## @.str.603
	.asciz	"debug"

L_.str.604:                             ## @.str.604
	.asciz	"Unknown option: \"%s\"\n"

L_.str.605:                             ## @.str.605
	.asciz	"Usage: .schema ?--indent? ?--nosys? ?LIKE-PATTERN?\n"

L_.str.606:                             ## @.str.606
	.asciz	"sqlite_master"

L_.str.607:                             ## @.str.607
	.asciz	"sqlite_schema"

L_.str.608:                             ## @.str.608
	.asciz	"sqlite_temp_master"

L_.str.609:                             ## @.str.609
	.asciz	"sqlite_temp_schema"

L_.str.610:                             ## @.str.610
	.asciz	"CREATE TABLE %s (\n  type text,\n  name text,\n  tbl_name text,\n  rootpage integer,\n  sql text\n)"

L_.str.611:                             ## @.str.611
	.asciz	"sql"

L_.str.612:                             ## @.str.612
	.asciz	"SELECT name FROM pragma_database_list"

L_.str.613:                             ## @.str.613
	.asciz	"SELECT sql FROM"

L_.str.614:                             ## @.str.614
	.asciz	" UNION ALL "

L_.str.615:                             ## @.str.615
	.asciz	"SELECT shell_add_schema(sql,"

L_.str.616:                             ## @.str.616
	.asciz	"NULL"

L_.str.617:                             ## @.str.617
	.asciz	",name) AS sql, type, tbl_name, name, rowid,"

L_.str.618:                             ## @.str.618
	.asciz	" AS snum, "

L_.str.619:                             ## @.str.619
	.asciz	" AS sname FROM "

L_.str.620:                             ## @.str.620
	.asciz	".sqlite_schema"

L_.str.621:                             ## @.str.621
	.asciz	" UNION ALL SELECT shell_module_schema(name), 'table', name, name, name, 9e+99, 'main' FROM pragma_module_list"

L_.str.622:                             ## @.str.622
	.asciz	") WHERE "

L_.str.623:                             ## @.str.623
	.asciz	"lower(printf('%s.%s',sname,tbl_name))"

L_.str.624:                             ## @.str.624
	.asciz	"lower(tbl_name)"

L_.str.625:                             ## @.str.625
	.asciz	" GLOB "

L_.str.626:                             ## @.str.626
	.asciz	" LIKE "

L_.str.627:                             ## @.str.627
	.asciz	" ESCAPE '\\' "

L_.str.628:                             ## @.str.628
	.asciz	" AND "

L_.str.629:                             ## @.str.629
	.asciz	"name NOT LIKE 'sqlite_%%' AND "

L_.str.630:                             ## @.str.630
	.asciz	"sql IS NOT NULL ORDER BY snum, rowid"

L_.str.631:                             ## @.str.631
	.asciz	"SQL: %s;\n"

L_.str.632:                             ## @.str.632
	.asciz	"Error: querying schema information\n"

L_.str.633:                             ## @.str.633
	.asciz	"selecttrace"

L_.str.634:                             ## @.str.634
	.asciz	"selftest"

L_.str.635:                             ## @.str.635
	.asciz	"Unknown option \"%s\" on \"%s\"\n"

L_.str.636:                             ## @.str.636
	.asciz	"Should be one of: --init -v\n"

L_.str.637:                             ## @.str.637
	.asciz	"x"

L_.str.638:                             ## @.str.638
	.asciz	"SELECT tno,op,cmd,ans FROM selftest ORDER BY tno"

L_.str.639:                             ## @.str.639
	.asciz	"VALUES(0,'memo','Missing SELFTEST table - default checks only',''),      (1,'run','PRAGMA integrity_check','ok')"

L_.str.640:                             ## @.str.640
	.asciz	"Error querying the selftest table\n"

L_.str.641:                             ## @.str.641
	.asciz	"%d: %s %s\n"

L_.str.642:                             ## @.str.642
	.asciz	"memo"

L_.str.643:                             ## @.str.643
	.asciz	"run"

L_.str.644:                             ## @.str.644
	.asciz	"Result: %s\n"

L_.str.645:                             ## @.str.645
	.asciz	"%d: error-code-%d: %s\n"

L_.str.646:                             ## @.str.646
	.asciz	"%d: Expected: [%s]\n"

L_.str.647:                             ## @.str.647
	.asciz	"%d:      Got: [%s]\n"

L_.str.648:                             ## @.str.648
	.asciz	"Unknown operation \"%s\" on selftest line %d\n"

L_.str.649:                             ## @.str.649
	.asciz	"%d errors out of %d tests\n"

L_.str.650:                             ## @.str.650
	.asciz	"separator"

L_.str.651:                             ## @.str.651
	.asciz	"Usage: .separator COL ?ROW?\n"

L_.str.652:                             ## @.str.652
	.asciz	"sha3sum"

L_.str.653:                             ## @.str.653
	.asciz	"sha3-224"

L_.str.654:                             ## @.str.654
	.asciz	"sha3-256"

L_.str.655:                             ## @.str.655
	.asciz	"sha3-384"

L_.str.656:                             ## @.str.656
	.asciz	"sha3-512"

L_.str.657:                             ## @.str.657
	.asciz	"Usage: .sha3sum ?OPTIONS? ?LIKE-PATTERN?\n"

L_.str.658:                             ## @.str.658
	.asciz	"sqlite\\_%"

L_.str.659:                             ## @.str.659
	.asciz	"SELECT lower(name) FROM sqlite_schema WHERE type='table' AND coalesce(rootpage,0)>1 UNION ALL SELECT 'sqlite_schema' ORDER BY 1 collate nocase"

L_.str.660:                             ## @.str.660
	.asciz	"SELECT lower(name) FROM sqlite_schema WHERE type='table' AND coalesce(rootpage,0)>1 AND name NOT LIKE 'sqlite_%' ORDER BY 1 collate nocase"

L_.str.661:                             ## @.str.661
	.asciz	"WITH [sha3sum$query](a,b) AS("

L_.str.662:                             ## @.str.662
	.asciz	"VALUES("

L_.str.663:                             ## @.str.663
	.asciz	"sqlite_"

L_.str.664:                             ## @.str.664
	.asciz	"SELECT * FROM "

L_.str.665:                             ## @.str.665
	.asciz	" NOT INDEXED;"

L_.str.666:                             ## @.str.666
	.asciz	"SELECT type,name,tbl_name,sql FROM sqlite_schema ORDER BY name;"

L_.str.667:                             ## @.str.667
	.asciz	"sqlite_sequence"

L_.str.668:                             ## @.str.668
	.asciz	"SELECT name,seq FROM sqlite_sequence ORDER BY name;"

L_.str.669:                             ## @.str.669
	.asciz	"SELECT tbl,idx,stat FROM sqlite_stat1 ORDER BY tbl,idx;"

L_.str.670:                             ## @.str.670
	.asciz	" ORDER BY tbl, idx, rowid;\n"

L_.str.671:                             ## @.str.671
	.asciz	"),("

L_.str.672:                             ## @.str.672
	.asciz	"%s)) SELECT lower(hex(sha3_query(a,%d))) AS hash, b AS label   FROM [sha3sum$query]"

L_.str.673:                             ## @.str.673
	.asciz	"%s)) SELECT lower(hex(sha3_query(group_concat(a,''),%d))) AS hash   FROM [sha3sum$query]"

L_.str.674:                             ## @.str.674
	.asciz	"shell"

L_.str.675:                             ## @.str.675
	.asciz	"system"

L_.str.676:                             ## @.str.676
	.asciz	"Usage: .system COMMAND\n"

L_.str.677:                             ## @.str.677
	.asciz	"\"%s\""

L_.str.678:                             ## @.str.678
	.asciz	"%z \"%s\""

L_.str.679:                             ## @.str.679
	.asciz	"System command returns %d\n"

L_.str.680:                             ## @.str.680
	.asciz	"show"

	.section	__DATA,__data
	.p2align	4               ## @do_meta_command.azBool
_do_meta_command.azBool:
	.quad	L_.str.373
	.quad	L_.str.372
	.quad	L_.str.401
	.quad	L_.str.400

	.section	__TEXT,__cstring,cstring_literals
L_.str.681:                             ## @.str.681
	.asciz	"Usage: .show\n"

L_.str.682:                             ## @.str.682
	.asciz	"%12.12s: %s\n"

L_.str.683:                             ## @.str.683
	.asciz	"%12.12s: %s --wrap %d --wordwrap %s --%squote\n"

L_.str.684:                             ## @.str.684
	.asciz	"%12.12s: "

L_.str.685:                             ## @.str.685
	.asciz	"colseparator"

L_.str.686:                             ## @.str.686
	.asciz	"rowseparator"

L_.str.687:                             ## @.str.687
	.asciz	"stmt"

L_.str.688:                             ## @.str.688
	.asciz	"vmstep"

L_.str.689:                             ## @.str.689
	.asciz	"stats"

L_.str.690:                             ## @.str.690
	.asciz	"width"

L_.str.691:                             ## @.str.691
	.asciz	"%d "

L_.str.692:                             ## @.str.692
	.asciz	"filename"

L_.str.693:                             ## @.str.693
	.asciz	"Usage: .stats ?on|off|stmt|vmstep?\n"

L_.str.694:                             ## @.str.694
	.asciz	"tables"

L_.str.695:                             ## @.str.695
	.asciz	"indices"

L_.str.696:                             ## @.str.696
	.asciz	"indexes"

L_.str.697:                             ## @.str.697
	.asciz	"Usage: .indexes ?LIKE-PATTERN?\n"

L_.str.698:                             ## @.str.698
	.asciz	"SELECT name FROM "

L_.str.699:                             ## @.str.699
	.asciz	"SELECT "

L_.str.700:                             ## @.str.700
	.asciz	"||'.'||name FROM "

L_.str.701:                             ## @.str.701
	.asciz	".sqlite_schema "

L_.str.702:                             ## @.str.702
	.asciz	" WHERE type IN ('table','view')   AND name NOT LIKE 'sqlite_%'   AND name LIKE ?1"

L_.str.703:                             ## @.str.703
	.asciz	" WHERE type='index'   AND tbl_name LIKE ?1"

L_.str.704:                             ## @.str.704
	.asciz	" ORDER BY 1"

L_.str.705:                             ## @.str.705
	.asciz	"%"

L_.str.706:                             ## @.str.706
	.asciz	"  "

L_.str.707:                             ## @.str.707
	.asciz	"%s%-*s"

L_.str.708:                             ## @.str.708
	.asciz	"testcase"

L_.str.709:                             ## @.str.709
	.asciz	"Error: cannot open 'testcase-out.txt'\n"

L_.str.710:                             ## @.str.710
	.asciz	"?"

L_.str.711:                             ## @.str.711
	.asciz	"testctrl"

	.section	__DATA,__const
	.p2align	4               ## @do_meta_command.aCtrl.712
_do_meta_command.aCtrl.712:
	.quad	L_.str.713
	.long	13                      ## 0xd
	.long	1                       ## 0x1
	.quad	L_.str.714
	.quad	L_.str.715
	.long	12                      ## 0xc
	.long	1                       ## 0x1
	.quad	L_.str.714
	.quad	L_.str.716
	.long	22                      ## 0x16
	.long	0                       ## 0x0
	.quad	L_.str.27
	.quad	L_.str.717
	.long	29                      ## 0x1d
	.long	0                       ## 0x0
	.quad	L_.str.714
	.quad	L_.str.477
	.long	25                      ## 0x19
	.long	1                       ## 0x1
	.quad	L_.str.718
	.quad	L_.str.719
	.long	17                      ## 0x11
	.long	0                       ## 0x0
	.quad	L_.str.27
	.quad	L_.str.720
	.long	18                      ## 0x12
	.long	0                       ## 0x0
	.quad	L_.str.714
	.quad	L_.str.721
	.long	20                      ## 0x14
	.long	1                       ## 0x1
	.quad	L_.str.714
	.quad	L_.str.722
	.long	15                      ## 0xf
	.long	0                       ## 0x0
	.quad	L_.str.723
	.quad	L_.str.724
	.long	11                      ## 0xb
	.long	0                       ## 0x0
	.quad	L_.str.725
	.quad	L_.str.726
	.long	6                       ## 0x6
	.long	0                       ## 0x0
	.quad	L_.str.27
	.quad	L_.str.727
	.long	5                       ## 0x5
	.long	0                       ## 0x0
	.quad	L_.str.27
	.quad	L_.str.728
	.long	28                      ## 0x1c
	.long	0                       ## 0x0
	.quad	L_.str.729
	.quad	L_.str.730
	.long	30                      ## 0x1e
	.long	0                       ## 0x0
	.quad	L_.str.27
	.quad	L_.str.731
	.long	24                      ## 0x18
	.long	0                       ## 0x0
	.quad	L_.str.732
	.quad	L_.str.733
	.long	32                      ## 0x20
	.long	1                       ## 0x1
	.quad	L_.str.734

	.section	__TEXT,__cstring,cstring_literals
L_.str.713:                             ## @.str.713
	.asciz	"always"

L_.str.714:                             ## @.str.714
	.asciz	"BOOLEAN"

L_.str.715:                             ## @.str.715
	.asciz	"assert"

L_.str.716:                             ## @.str.716
	.asciz	"byteorder"

L_.str.717:                             ## @.str.717
	.asciz	"extra_schema_checks"

L_.str.718:                             ## @.str.718
	.asciz	"SCHEMA ON/OFF ROOTPAGE"

L_.str.719:                             ## @.str.719
	.asciz	"internal_functions"

L_.str.720:                             ## @.str.720
	.asciz	"localtime_fault"

L_.str.721:                             ## @.str.721
	.asciz	"never_corrupt"

L_.str.722:                             ## @.str.722
	.asciz	"optimizations"

L_.str.723:                             ## @.str.723
	.asciz	"DISABLE-MASK"

L_.str.724:                             ## @.str.724
	.asciz	"pending_byte"

L_.str.725:                             ## @.str.725
	.asciz	"OFFSET  "

L_.str.726:                             ## @.str.726
	.asciz	"prng_restore"

L_.str.727:                             ## @.str.727
	.asciz	"prng_save"

L_.str.728:                             ## @.str.728
	.asciz	"prng_seed"

L_.str.729:                             ## @.str.729
	.asciz	"SEED ?db?"

L_.str.730:                             ## @.str.730
	.asciz	"seek_count"

L_.str.731:                             ## @.str.731
	.asciz	"sorter_mmap"

L_.str.732:                             ## @.str.732
	.asciz	"NMAX"

L_.str.733:                             ## @.str.733
	.asciz	"tune"

L_.str.734:                             ## @.str.734
	.asciz	"ID VALUE"

L_.str.735:                             ## @.str.735
	.asciz	"Available test-controls:\n"

L_.str.736:                             ## @.str.736
	.asciz	"  .testctrl %s %s\n"

L_.str.737:                             ## @.str.737
	.asciz	"Error: ambiguous test-control: \"%s\"\nUse \".testctrl --help\" for help\n"

L_.str.738:                             ## @.str.738
	.asciz	"Error: unknown test-control: %s\nUse \".testctrl --help\" for help\n"

L_.str.739:                             ## @.str.739
	.asciz	"line %d: \".testctrl %s\" may not be used in safe mode\n"

L_.str.740:                             ## @.str.740
	.asciz	"random"

L_.str.741:                             ## @.str.741
	.asciz	"-- random seed: %d\n"

L_.str.742:                             ## @.str.742
	.asciz	"%llu\n"

L_.str.743:                             ## @.str.743
	.asciz	"Usage: .testctrl %s %s\n"

L_.str.744:                             ## @.str.744
	.asciz	"0x%08x\n"

L_.str.745:                             ## @.str.745
	.asciz	"timeout"

L_.str.746:                             ## @.str.746
	.asciz	"timer"

.zerofill __DATA,__bss,_enableTimer,4,2 ## @enableTimer
L_.str.747:                             ## @.str.747
	.asciz	"Error: timer not available on this system.\n"

L_.str.748:                             ## @.str.748
	.asciz	"Usage: .timer on|off\n"

L_.str.749:                             ## @.str.749
	.asciz	"trace"

L_.str.750:                             ## @.str.750
	.asciz	"expanded"

L_.str.751:                             ## @.str.751
	.asciz	"plain"

L_.str.752:                             ## @.str.752
	.asciz	"profile"

L_.str.753:                             ## @.str.753
	.asciz	"row"

L_.str.754:                             ## @.str.754
	.asciz	"Unknown option \"%s\" on \".trace\"\n"

L_.str.755:                             ## @.str.755
	.asciz	"version"

L_.str.756:                             ## @.str.756
	.asciz	"SQLite %s %s\n"

L_.str.757:                             ## @.str.757
	.asciz	"clang-11.0.3\n"

L_.str.758:                             ## @.str.758
	.asciz	"vfsinfo"

L_.str.759:                             ## @.str.759
	.asciz	"vfs.zName      = \"%s\"\n"

L_.str.760:                             ## @.str.760
	.asciz	"vfs.iVersion   = %d\n"

L_.str.761:                             ## @.str.761
	.asciz	"vfs.szOsFile   = %d\n"

L_.str.762:                             ## @.str.762
	.asciz	"vfs.mxPathname = %d\n"

L_.str.763:                             ## @.str.763
	.asciz	"vfslist"

L_.str.764:                             ## @.str.764
	.asciz	"vfs.zName      = \"%s\"%s\n"

L_.str.765:                             ## @.str.765
	.asciz	"  <--- CURRENT"

L_.str.766:                             ## @.str.766
	.asciz	"-----------------------------------\n"

L_.str.767:                             ## @.str.767
	.asciz	"vfsname"

L_.str.768:                             ## @.str.768
	.asciz	"wheretrace"

L_.str.769:                             ## @.str.769
	.asciz	"nArg<=ArraySize(azArg)"

L_.str.770:                             ## @.str.770
	.asciz	"Error: unknown command or invalid arguments:  \"%s\". Enter \".help\" for help\n"

L___func__.expertFinish:                ## @__func__.expertFinish
	.asciz	"expertFinish"

L_.str.771:                             ## @.str.771
	.asciz	"p"

L_.str.772:                             ## @.str.772
	.asciz	"bCancel || pzErr==0 || *pzErr==0"

L_.str.773:                             ## @.str.773
	.asciz	"-- Candidates -----------------------------\n"

L_.str.774:                             ## @.str.774
	.asciz	"(no new indexes)\n"

L_.str.775:                             ## @.str.775
	.asciz	"-- Query %d --------------------------------\n"

L_.str.776:                             ## @.str.776
	.asciz	"%s\n\n"

L_.str.777:                             ## @.str.777
	.asciz	"yes"

L_.str.778:                             ## @.str.778
	.asciz	"ERROR: Not a boolean value: \"%s\". Assuming \"no\".\n"

	.section	__DATA,__data
	.p2align	4               ## @shellAuth.azAction
_shellAuth.azAction:
	.quad	0
	.quad	L_.str.779
	.quad	L_.str.780
	.quad	L_.str.781
	.quad	L_.str.782
	.quad	L_.str.783
	.quad	L_.str.784
	.quad	L_.str.785
	.quad	L_.str.786
	.quad	L_.str.787
	.quad	L_.str.788
	.quad	L_.str.789
	.quad	L_.str.790
	.quad	L_.str.791
	.quad	L_.str.792
	.quad	L_.str.793
	.quad	L_.str.794
	.quad	L_.str.795
	.quad	L_.str.796
	.quad	L_.str.797
	.quad	L_.str.798
	.quad	L_.str.799
	.quad	L_.str.800
	.quad	L_.str.801
	.quad	L_.str.802
	.quad	L_.str.803
	.quad	L_.str.804
	.quad	L_.str.805
	.quad	L_.str.806
	.quad	L_.str.807
	.quad	L_.str.808
	.quad	L_.str.809
	.quad	L_.str.810
	.quad	L_.str.811

	.section	__TEXT,__cstring,cstring_literals
L_.str.779:                             ## @.str.779
	.asciz	"CREATE_INDEX"

L_.str.780:                             ## @.str.780
	.asciz	"CREATE_TABLE"

L_.str.781:                             ## @.str.781
	.asciz	"CREATE_TEMP_INDEX"

L_.str.782:                             ## @.str.782
	.asciz	"CREATE_TEMP_TABLE"

L_.str.783:                             ## @.str.783
	.asciz	"CREATE_TEMP_TRIGGER"

L_.str.784:                             ## @.str.784
	.asciz	"CREATE_TEMP_VIEW"

L_.str.785:                             ## @.str.785
	.asciz	"CREATE_TRIGGER"

L_.str.786:                             ## @.str.786
	.asciz	"CREATE_VIEW"

L_.str.787:                             ## @.str.787
	.asciz	"DELETE"

L_.str.788:                             ## @.str.788
	.asciz	"DROP_INDEX"

L_.str.789:                             ## @.str.789
	.asciz	"DROP_TABLE"

L_.str.790:                             ## @.str.790
	.asciz	"DROP_TEMP_INDEX"

L_.str.791:                             ## @.str.791
	.asciz	"DROP_TEMP_TABLE"

L_.str.792:                             ## @.str.792
	.asciz	"DROP_TEMP_TRIGGER"

L_.str.793:                             ## @.str.793
	.asciz	"DROP_TEMP_VIEW"

L_.str.794:                             ## @.str.794
	.asciz	"DROP_TRIGGER"

L_.str.795:                             ## @.str.795
	.asciz	"DROP_VIEW"

L_.str.796:                             ## @.str.796
	.asciz	"INSERT"

L_.str.797:                             ## @.str.797
	.asciz	"PRAGMA"

L_.str.798:                             ## @.str.798
	.asciz	"READ"

L_.str.799:                             ## @.str.799
	.asciz	"SELECT"

L_.str.800:                             ## @.str.800
	.asciz	"TRANSACTION"

L_.str.801:                             ## @.str.801
	.asciz	"UPDATE"

L_.str.802:                             ## @.str.802
	.asciz	"ATTACH"

L_.str.803:                             ## @.str.803
	.asciz	"DETACH"

L_.str.804:                             ## @.str.804
	.asciz	"ALTER_TABLE"

L_.str.805:                             ## @.str.805
	.asciz	"REINDEX"

L_.str.806:                             ## @.str.806
	.asciz	"ANALYZE"

L_.str.807:                             ## @.str.807
	.asciz	"CREATE_VTABLE"

L_.str.808:                             ## @.str.808
	.asciz	"DROP_VTABLE"

L_.str.809:                             ## @.str.809
	.asciz	"FUNCTION"

L_.str.810:                             ## @.str.810
	.asciz	"SAVEPOINT"

L_.str.811:                             ## @.str.811
	.asciz	"RECURSIVE"

L_.str.812:                             ## @.str.812
	.asciz	"authorizer: %s"

.zerofill __DATA,__bss,_test_breakpoint.nCall,4,2 ## @test_breakpoint.nCall
L_.str.813:                             ## @.str.813
	.asciz	"File \"%s\" already exists.\n"

L_.str.814:                             ## @.str.814
	.asciz	"Cannot create output database: %s\n"

L_.str.815:                             ## @.str.815
	.asciz	"PRAGMA writable_schema=ON;"

L_.str.816:                             ## @.str.816
	.asciz	"BEGIN EXCLUSIVE;"

L_.str.817:                             ## @.str.817
	.asciz	"type='table'"

L_.str.818:                             ## @.str.818
	.asciz	"type!='table'"

L_.str.819:                             ## @.str.819
	.asciz	"COMMIT;"

L_.str.820:                             ## @.str.820
	.asciz	"SELECT name, sql FROM sqlite_schema WHERE %s"

L_.str.821:                             ## @.str.821
	.asciz	"Error: (%d) %s on [%s]\n"

L_.str.822:                             ## @.str.822
	.asciz	"%s... "

L_.str.823:                             ## @.str.823
	.asciz	"Error: %s\nSQL: [%s]\n"

L_.str.824:                             ## @.str.824
	.asciz	"done\n"

L_.str.825:                             ## @.str.825
	.asciz	"SELECT name, sql FROM sqlite_schema WHERE %s ORDER BY rowid DESC"

L_.str.826:                             ## @.str.826
	.asciz	"SELECT * FROM \"%w\""

L_.str.827:                             ## @.str.827
	.asciz	"Error %d: %s on [%s]\n"

L_.str.828:                             ## @.str.828
	.asciz	"INSERT OR IGNORE INTO \"%s\" VALUES(?"

L_.str.829:                             ## @.str.829
	.asciz	",?"

L_.str.830:                             ## @.str.830
	.asciz	");"

L_.str.831:                             ## @.str.831
	.asciz	"Error %d: %s\n"

L_.str.832:                             ## @.str.832
	.asciz	"%c\b"

L_.str.833:                             ## @.str.833
	.asciz	"|/-\\"

L_.str.834:                             ## @.str.834
	.asciz	"SELECT * FROM \"%w\" ORDER BY rowid DESC;"

L_.str.835:                             ## @.str.835
	.asciz	"Warning: cannot step \"%s\" backwards"

	.section	__DATA,__const
	.p2align	4               ## @shell_dbinfo_command.aField
_shell_dbinfo_command.aField:
	.quad	L_.str.836
	.long	24                      ## 0x18
	.space	4
	.quad	L_.str.837
	.long	28                      ## 0x1c
	.space	4
	.quad	L_.str.838
	.long	36                      ## 0x24
	.space	4
	.quad	L_.str.839
	.long	40                      ## 0x28
	.space	4
	.quad	L_.str.840
	.long	44                      ## 0x2c
	.space	4
	.quad	L_.str.841
	.long	48                      ## 0x30
	.space	4
	.quad	L_.str.842
	.long	52                      ## 0x34
	.space	4
	.quad	L_.str.843
	.long	64                      ## 0x40
	.space	4
	.quad	L_.str.844
	.long	56                      ## 0x38
	.space	4
	.quad	L_.str.845
	.long	60                      ## 0x3c
	.space	4
	.quad	L_.str.846
	.long	68                      ## 0x44
	.space	4
	.quad	L_.str.847
	.long	96                      ## 0x60
	.space	4

	.section	__TEXT,__cstring,cstring_literals
L_.str.836:                             ## @.str.836
	.asciz	"file change counter:"

L_.str.837:                             ## @.str.837
	.asciz	"database page count:"

L_.str.838:                             ## @.str.838
	.asciz	"freelist page count:"

L_.str.839:                             ## @.str.839
	.asciz	"schema cookie:"

L_.str.840:                             ## @.str.840
	.asciz	"schema format:"

L_.str.841:                             ## @.str.841
	.asciz	"default cache size:"

L_.str.842:                             ## @.str.842
	.asciz	"autovacuum top root:"

L_.str.843:                             ## @.str.843
	.asciz	"incremental vacuum:"

L_.str.844:                             ## @.str.844
	.asciz	"text encoding:"

L_.str.845:                             ## @.str.845
	.asciz	"user version:"

L_.str.846:                             ## @.str.846
	.asciz	"application id:"

L_.str.847:                             ## @.str.847
	.asciz	"software version:"

	.section	__DATA,__const
	.p2align	4               ## @shell_dbinfo_command.aQuery
_shell_dbinfo_command.aQuery:
	.quad	L_.str.848
	.quad	L_.str.849
	.quad	L_.str.850
	.quad	L_.str.851
	.quad	L_.str.852
	.quad	L_.str.853
	.quad	L_.str.854
	.quad	L_.str.855
	.quad	L_.str.856
	.quad	L_.str.857

	.section	__TEXT,__cstring,cstring_literals
L_.str.848:                             ## @.str.848
	.asciz	"number of tables:"

L_.str.849:                             ## @.str.849
	.asciz	"SELECT count(*) FROM %s WHERE type='table'"

L_.str.850:                             ## @.str.850
	.asciz	"number of indexes:"

L_.str.851:                             ## @.str.851
	.asciz	"SELECT count(*) FROM %s WHERE type='index'"

L_.str.852:                             ## @.str.852
	.asciz	"number of triggers:"

L_.str.853:                             ## @.str.853
	.asciz	"SELECT count(*) FROM %s WHERE type='trigger'"

L_.str.854:                             ## @.str.854
	.asciz	"number of views:"

L_.str.855:                             ## @.str.855
	.asciz	"SELECT count(*) FROM %s WHERE type='view'"

L_.str.856:                             ## @.str.856
	.asciz	"schema size:"

L_.str.857:                             ## @.str.857
	.asciz	"SELECT total(length(sql)) FROM %s"

L_.str.858:                             ## @.str.858
	.asciz	"SELECT data FROM sqlite_dbpage(?1) WHERE pgno=1"

L_.str.859:                             ## @.str.859
	.asciz	"error: %s\n"

L_.str.860:                             ## @.str.860
	.asciz	"unable to read database header\n"

L_.str.861:                             ## @.str.861
	.asciz	"%-20s %d\n"

L_.str.862:                             ## @.str.862
	.asciz	"database page size:"

L_.str.863:                             ## @.str.863
	.asciz	"write format:"

L_.str.864:                             ## @.str.864
	.asciz	"read format:"

L_.str.865:                             ## @.str.865
	.asciz	"reserved bytes:"

L_.str.866:                             ## @.str.866
	.asciz	"%-20s %u"

L_.str.867:                             ## @.str.867
	.asciz	" (utf8)"

L_.str.868:                             ## @.str.868
	.asciz	" (utf16le)"

L_.str.869:                             ## @.str.869
	.asciz	" (utf16be)"

L_.str.870:                             ## @.str.870
	.asciz	"main.sqlite_schema"

L_.str.871:                             ## @.str.871
	.asciz	"\"%w\".sqlite_schema"

L_.str.872:                             ## @.str.872
	.asciz	"%-20s %u\n"

L_.str.873:                             ## @.str.873
	.asciz	"data version"

L_.str.874:                             ## @.str.874
	.asciz	"/****** CORRUPTION ERROR *******/\n"

L_.str.875:                             ## @.str.875
	.asciz	"/****** %s ******/\n"

L_.str.876:                             ## @.str.876
	.asciz	"%s ORDER BY rowid DESC"

L_.str.877:                             ## @.str.877
	.asciz	"/****** ERROR: %s ******/\n"

L_.str.878:                             ## @.str.878
	.asciz	"DELETE FROM sqlite_sequence;\n"

L_.str.879:                             ## @.str.879
	.asciz	"sqlite_stat?"

L_.str.880:                             ## @.str.880
	.asciz	"CREATE VIRTUAL TABLE"

L_.str.881:                             ## @.str.881
	.asciz	"PRAGMA writable_schema=ON;\n"

L_.str.882:                             ## @.str.882
	.asciz	"INSERT INTO sqlite_schema(type,name,tbl_name,rootpage,sql)VALUES('table','%q','%q',0,'%q');"

L_.str.883:                             ## @.str.883
	.asciz	";\n"

L_.str.884:                             ## @.str.884
	.asciz	" FROM "

L_.str.885:                             ## @.str.885
	.asciz	"CREATE TABLE ['\"]*"

L_.str.886:                             ## @.str.886
	.asciz	"CREATE TABLE IF NOT EXISTS %s%s"

L_.str.887:                             ## @.str.887
	.asciz	"%s%s"

L_.str.888:                             ## @.str.888
	.asciz	"PRAGMA table_info=%Q"

L_.str.889:                             ## @.str.889
	.asciz	"INTEGER"

L_.str.890:                             ## @.str.890
	.asciz	"SELECT 1 FROM pragma_index_list(%Q) WHERE origin='pk'"

	.section	__DATA,__data
	.p2align	4               ## @tableColumnList.azRowid
_tableColumnList.azRowid:
	.quad	L_.str.891
	.quad	L_.str.892
	.quad	L_.str.893

	.section	__TEXT,__cstring,cstring_literals
L_.str.891:                             ## @.str.891
	.asciz	"rowid"

L_.str.892:                             ## @.str.892
	.asciz	"_rowid_"

L_.str.893:                             ## @.str.893
	.asciz	"oid"

L_.str.894:                             ## @.str.894
	.asciz	"PRAGMA reverse_unordered_selects"

L_.str.895:                             ## @.str.895
	.asciz	"PRAGMA reverse_unordered_selects(%d)"

L_.str.896:                             ## @.str.896
	.asciz	"/**** ERROR: (%d) %s *****/\n%s"

L_.str.897:                             ## @.str.897
	.asciz	",%s"

L_.str.898:                             ## @.str.898
	.asciz	"\n;\n"

L_.str.899:                             ## @.str.899
	.asciz	"/**** ERROR: (%d) %s *****/\n"

L_.str.900:                             ## @.str.900
	.asciz	"\n  %z\n  %*s^--- error here"

L_.str.901:                             ## @.str.901
	.asciz	"\n  %z\n  %*serror here ---^"

L___func__.expertDotCommand:            ## @__func__.expertDotCommand
	.asciz	"expertDotCommand"

L_.str.902:                             ## @.str.902
	.asciz	"pState->expert.pExpert==0"

L_.str.903:                             ## @.str.903
	.asciz	"-verbose"

L_.str.904:                             ## @.str.904
	.asciz	"-sample"

L_.str.905:                             ## @.str.905
	.asciz	"option requires an argument: %s\n"

L_.str.906:                             ## @.str.906
	.asciz	"value out of range: %s\n"

L_.str.907:                             ## @.str.907
	.asciz	"sqlite3_expert_new: %s\n"

L_.str.908:                             ## @.str.908
	.asciz	"%*s = %s%s"

	.section	__TEXT,__const
	.p2align	4               ## @shell_callback.aExplainWidth
_shell_callback.aExplainWidth:
	.long	4                       ## 0x4
	.long	13                      ## 0xd
	.long	4                       ## 0x4
	.long	4                       ## 0x4
	.long	4                       ## 0x4
	.long	13                      ## 0xd
	.long	2                       ## 0x2
	.long	13                      ## 0xd

	.section	__TEXT,__cstring,cstring_literals
L_.str.909:                             ## @.str.909
	.asciz	"%*.s"

L___func__.shell_callback:              ## @__func__.shell_callback
	.asciz	"shell_callback"

L_.str.910:                             ## @.str.910
	.asciz	"nArg==1"

L_.str.911:                             ## @.str.911
	.asciz	"CREATE VIEW%"

L_.str.912:                             ## @.str.912
	.asciz	"CREATE TRIG%"

L_.str.913:                             ## @.str.913
	.asciz	"\n  "

L_.str.914:                             ## @.str.914
	.asciz	"<TR>"

L_.str.915:                             ## @.str.915
	.asciz	"<TH>"

L_.str.916:                             ## @.str.916
	.asciz	"</TH>\n"

L_.str.917:                             ## @.str.917
	.asciz	"</TR>\n"

L_.str.918:                             ## @.str.918
	.asciz	"<TD>"

L_.str.919:                             ## @.str.919
	.asciz	"</TD>\n"

L_.str.920:                             ## @.str.920
	.asciz	"INSERT INTO %s"

L_.str.921:                             ## @.str.921
	.asciz	" VALUES("

L_.str.922:                             ## @.str.922
	.asciz	"1e999"

L_.str.923:                             ## @.str.923
	.asciz	"-1e999"

L_.str.924:                             ## @.str.924
	.asciz	"%lld.0"

L_.str.925:                             ## @.str.925
	.asciz	"%!.20g"

L_.str.926:                             ## @.str.926
	.asciz	");\n"

L_.str.927:                             ## @.str.927
	.asciz	"[{"

L_.str.928:                             ## @.str.928
	.asciz	",\n{"

L_.str.929:                             ## @.str.929
	.asciz	"null"

L_.str.930:                             ## @.str.930
	.asciz	"%*s%s"

L_.str.931:                             ## @.str.931
	.asciz	"%s%*s"

	.p2align	4               ## @__const.print_dashes.zDash
L___const.print_dashes.zDash:
	.asciz	"--------------------------------------------------"

L_.str.932:                             ## @.str.932
	.asciz	"&lt;"

L_.str.933:                             ## @.str.933
	.asciz	"&amp;"

L_.str.934:                             ## @.str.934
	.asciz	"&gt;"

L_.str.935:                             ## @.str.935
	.asciz	"&quot;"

L_.str.936:                             ## @.str.936
	.asciz	"&#39;"

	.section	__TEXT,__const
	.p2align	4               ## @needCsvQuote
_needCsvQuote:
	.ascii	

	.section	__TEXT,__cstring,cstring_literals
L_.str.937:                             ## @.str.937
	.asciz	"'%s'"

L_.str.938:                             ## @.str.938
	.asciz	"'"

L_.str.939:                             ## @.str.939
	.asciz	",'%s',char(13))"

L_.str.940:                             ## @.str.940
	.asciz	",'%s',char(10))"

L_.str.941:                             ## @.str.941
	.asciz	"X'"

L_.str.942:                             ## @.str.942
	.asciz	"%02x"

L_.str.943:                             ## @.str.943
	.asciz	"u%04x"

L_.str.944:                             ## @.str.944
	.asciz	"%d,%d,%s\n"

L_.str.945:                             ## @.str.945
	.asciz	"-a"

L_.str.946:                             ## @.str.946
	.asciz	"-all"

L_.str.947:                             ## @.str.947
	.asciz	"--all"

	.section	__DATA,__data
	.p2align	4               ## @azHelp
_azHelp:
	.quad	L_.str.950
	.quad	L_.str.951
	.quad	L_.str.952
	.quad	L_.str.953
	.quad	L_.str.954
	.quad	L_.str.955
	.quad	L_.str.956
	.quad	L_.str.957
	.quad	L_.str.958
	.quad	L_.str.959
	.quad	L_.str.960
	.quad	L_.str.961
	.quad	L_.str.962
	.quad	L_.str.963
	.quad	L_.str.964
	.quad	L_.str.965
	.quad	L_.str.952
	.quad	L_.str.966
	.quad	L_.str.967
	.quad	L_.str.968
	.quad	L_.str.969
	.quad	L_.str.970
	.quad	L_.str.971
	.quad	L_.str.972
	.quad	L_.str.973
	.quad	L_.str.974
	.quad	L_.str.975
	.quad	L_.str.976
	.quad	L_.str.977
	.quad	L_.str.978
	.quad	L_.str.979
	.quad	L_.str.980
	.quad	L_.str.981
	.quad	L_.str.982
	.quad	L_.str.983
	.quad	L_.str.984
	.quad	L_.str.985
	.quad	L_.str.986
	.quad	L_.str.987
	.quad	L_.str.952
	.quad	L_.str.988
	.quad	L_.str.989
	.quad	L_.str.990
	.quad	L_.str.991
	.quad	L_.str.992
	.quad	L_.str.993
	.quad	L_.str.994
	.quad	L_.str.995
	.quad	L_.str.996
	.quad	L_.str.997
	.quad	L_.str.998
	.quad	L_.str.999
	.quad	L_.str.1000
	.quad	L_.str.1001
	.quad	L_.str.1002
	.quad	L_.str.1003
	.quad	L_.str.1004
	.quad	L_.str.1005
	.quad	L_.str.1006
	.quad	L_.str.1007
	.quad	L_.str.1008
	.quad	L_.str.1009
	.quad	L_.str.1010
	.quad	L_.str.1011
	.quad	L_.str.1012
	.quad	L_.str.1013
	.quad	L_.str.1014
	.quad	L_.str.1015
	.quad	L_.str.1016
	.quad	L_.str.1017
	.quad	L_.str.1018
	.quad	L_.str.1019
	.quad	L_.str.1020
	.quad	L_.str.1021
	.quad	L_.str.1022
	.quad	L_.str.1023
	.quad	L_.str.1024
	.quad	L_.str.1025
	.quad	L_.str.1026
	.quad	L_.str.1027
	.quad	L_.str.1028
	.quad	L_.str.1029
	.quad	L_.str.1030
	.quad	L_.str.1031
	.quad	L_.str.1032
	.quad	L_.str.1033
	.quad	L_.str.1034
	.quad	L_.str.1035
	.quad	L_.str.1036
	.quad	L_.str.1037
	.quad	L_.str.1038
	.quad	L_.str.1039
	.quad	L_.str.1040
	.quad	L_.str.1041
	.quad	L_.str.1006
	.quad	L_.str.1042
	.quad	L_.str.1043
	.quad	L_.str.1044
	.quad	L_.str.1045
	.quad	L_.str.1046
	.quad	L_.str.1047
	.quad	L_.str.1048
	.quad	L_.str.1049
	.quad	L_.str.1050
	.quad	L_.str.1051
	.quad	L_.str.952
	.quad	L_.str.1052
	.quad	L_.str.1053
	.quad	L_.str.1054
	.quad	L_.str.1055
	.quad	L_.str.1056
	.quad	L_.str.1057
	.quad	L_.str.1058
	.quad	L_.str.1059
	.quad	L_.str.1060
	.quad	L_.str.1061
	.quad	L_.str.1062
	.quad	L_.str.1063
	.quad	L_.str.1064
	.quad	L_.str.1065
	.quad	L_.str.1066
	.quad	L_.str.1067
	.quad	L_.str.1068
	.quad	L_.str.1069
	.quad	L_.str.1070
	.quad	L_.str.1071
	.quad	L_.str.1072
	.quad	L_.str.1073
	.quad	L_.str.1074
	.quad	L_.str.1075
	.quad	L_.str.952
	.quad	L_.str.1076
	.quad	L_.str.1077
	.quad	L_.str.1078
	.quad	L_.str.1079
	.quad	L_.str.1080
	.quad	L_.str.1081
	.quad	L_.str.1082
	.quad	L_.str.1083
	.quad	L_.str.1079
	.quad	L_.str.1084
	.quad	L_.str.1085
	.quad	L_.str.1086
	.quad	L_.str.1087
	.quad	L_.str.1088
	.quad	L_.str.1089
	.quad	L_.str.1090
	.quad	L_.str.1091
	.quad	L_.str.1092
	.quad	L_.str.1093
	.quad	L_.str.1094
	.quad	L_.str.1095
	.quad	L_.str.1096
	.quad	L_.str.1097
	.quad	L_.str.1098
	.quad	L_.str.1099
	.quad	L_.str.1100
	.quad	L_.str.1101
	.quad	L_.str.1102
	.quad	L_.str.1103
	.quad	L_.str.1104
	.quad	L_.str.1105
	.quad	L_.str.1106
	.quad	L_.str.1107
	.quad	L_.str.1108
	.quad	L_.str.1109
	.quad	L_.str.1110
	.quad	L_.str.1111
	.quad	L_.str.1112
	.quad	L_.str.1113
	.quad	L_.str.1114
	.quad	L_.str.1115
	.quad	L_.str.1116
	.quad	L_.str.1117
	.quad	L_.str.1118
	.quad	L_.str.1119

	.section	__TEXT,__cstring,cstring_literals
L_.str.948:                             ## @.str.948
	.asciz	".%s*"

L_.str.949:                             ## @.str.949
	.asciz	"%%%s%%"

L_.str.950:                             ## @.str.950
	.asciz	".auth ON|OFF             Show authorizer callbacks"

L_.str.951:                             ## @.str.951
	.asciz	".backup ?DB? FILE        Backup DB (default \"main\") to FILE"

L_.str.952:                             ## @.str.952
	.asciz	"   Options:"

L_.str.953:                             ## @.str.953
	.asciz	"       --append            Use the appendvfs"

L_.str.954:                             ## @.str.954
	.asciz	"       --async             Write to FILE without journal and fsync()"

L_.str.955:                             ## @.str.955
	.asciz	".bail on|off             Stop after hitting an error.  Default OFF"

L_.str.956:                             ## @.str.956
	.asciz	".binary on|off           Turn binary output on or off.  Default OFF"

L_.str.957:                             ## @.str.957
	.asciz	".cd DIRECTORY            Change the working directory to DIRECTORY"

L_.str.958:                             ## @.str.958
	.asciz	".changes on|off          Show number of rows changed by SQL"

L_.str.959:                             ## @.str.959
	.asciz	".check GLOB              Fail if output since .testcase does not match"

L_.str.960:                             ## @.str.960
	.asciz	".clone NEWDB             Clone data into NEWDB from the existing database"

L_.str.961:                             ## @.str.961
	.asciz	".connection [close] [#]  Open or close an auxiliary database connection"

L_.str.962:                             ## @.str.962
	.asciz	".databases               List names and files of attached databases"

L_.str.963:                             ## @.str.963
	.asciz	".dbconfig ?op? ?val?     List or change sqlite3_db_config() options"

L_.str.964:                             ## @.str.964
	.asciz	".dbinfo ?DB?             Show status information about the database"

L_.str.965:                             ## @.str.965
	.asciz	".dump ?OBJECTS?          Render database content as SQL"

L_.str.966:                             ## @.str.966
	.asciz	"     --data-only            Output only INSERT statements"

L_.str.967:                             ## @.str.967
	.asciz	"     --newlines             Allow unescaped newline characters in output"

L_.str.968:                             ## @.str.968
	.asciz	"     --nosys                Omit system tables (ex: \"sqlite_stat1\")"

L_.str.969:                             ## @.str.969
	.asciz	"     --preserve-rowids      Include ROWID values in the output"

L_.str.970:                             ## @.str.970
	.asciz	"   OBJECTS is a LIKE pattern for tables, indexes, triggers or views to dump"

L_.str.971:                             ## @.str.971
	.asciz	"   Additional LIKE patterns can be given in subsequent arguments"

L_.str.972:                             ## @.str.972
	.asciz	".echo on|off             Turn command echo on or off"

L_.str.973:                             ## @.str.973
	.asciz	".eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN"

L_.str.974:                             ## @.str.974
	.asciz	"   Other Modes:"

L_.str.975:                             ## @.str.975
	.asciz	"      trigger               Like \"full\" but also show trigger bytecode"

L_.str.976:                             ## @.str.976
	.asciz	".excel                   Display the output of next command in spreadsheet"

L_.str.977:                             ## @.str.977
	.asciz	"   --bom                   Put a UTF8 byte-order mark on intermediate file"

L_.str.978:                             ## @.str.978
	.asciz	".exit ?CODE?             Exit this program with return-code CODE"

L_.str.979:                             ## @.str.979
	.asciz	".expert                  EXPERIMENTAL. Suggest indexes for queries"

L_.str.980:                             ## @.str.980
	.asciz	".explain ?on|off|auto?   Change the EXPLAIN formatting mode.  Default: auto"

L_.str.981:                             ## @.str.981
	.asciz	".filectrl CMD ...        Run various sqlite3_file_control() operations"

L_.str.982:                             ## @.str.982
	.asciz	"   --schema SCHEMA         Use SCHEMA instead of \"main\""

L_.str.983:                             ## @.str.983
	.asciz	"   --help                  Show CMD details"

L_.str.984:                             ## @.str.984
	.asciz	".fullschema ?--indent?   Show schema and the content of sqlite_stat tables"

L_.str.985:                             ## @.str.985
	.asciz	".headers on|off          Turn display of headers on or off"

L_.str.986:                             ## @.str.986
	.asciz	".help ?-all? ?PATTERN?   Show help text for PATTERN"

L_.str.987:                             ## @.str.987
	.asciz	".import FILE TABLE       Import data from FILE into TABLE"

L_.str.988:                             ## @.str.988
	.asciz	"     --ascii               Use \\037 and \\036 as column and row separators"

L_.str.989:                             ## @.str.989
	.asciz	"     --csv                 Use , and \\n as column and row separators"

L_.str.990:                             ## @.str.990
	.asciz	"     --skip N              Skip the first N rows of input"

L_.str.991:                             ## @.str.991
	.asciz	"     --schema S            Target table to be S.TABLE"

L_.str.992:                             ## @.str.992
	.asciz	"     -v                    \"Verbose\" - increase auxiliary output"

L_.str.993:                             ## @.str.993
	.asciz	"   Notes:"

L_.str.994:                             ## @.str.994
	.asciz	"     *  If TABLE does not exist, it is created.  The first row of input"

L_.str.995:                             ## @.str.995
	.asciz	"        determines the column names."

L_.str.996:                             ## @.str.996
	.asciz	"     *  If neither --csv or --ascii are used, the input mode is derived"

L_.str.997:                             ## @.str.997
	.asciz	"        from the \".mode\" output mode"

L_.str.998:                             ## @.str.998
	.asciz	"     *  If FILE begins with \"|\" then it is a command that generates the"

L_.str.999:                             ## @.str.999
	.asciz	"        input text."

L_.str.1000:                            ## @.str.1000
	.asciz	".imposter INDEX TABLE    Create imposter table TABLE on index INDEX"

L_.str.1001:                            ## @.str.1001
	.asciz	".indexes ?TABLE?         Show names of indexes"

L_.str.1002:                            ## @.str.1002
	.asciz	"                           If TABLE is specified, only show indexes for"

L_.str.1003:                            ## @.str.1003
	.asciz	"                           tables matching TABLE using the LIKE operator."

L_.str.1004:                            ## @.str.1004
	.asciz	".limit ?LIMIT? ?VAL?     Display or change the value of an SQLITE_LIMIT"

L_.str.1005:                            ## @.str.1005
	.asciz	".lint OPTIONS            Report potential schema issues."

L_.str.1006:                            ## @.str.1006
	.asciz	"     Options:"

L_.str.1007:                            ## @.str.1007
	.asciz	"        fkey-indexes     Find missing foreign key indexes"

L_.str.1008:                            ## @.str.1008
	.asciz	".load FILE ?ENTRY?       Load an extension library"

L_.str.1009:                            ## @.str.1009
	.asciz	".log FILE|off            Turn logging on or off.  FILE can be stderr/stdout"

L_.str.1010:                            ## @.str.1010
	.asciz	".mode MODE ?OPTIONS?     Set output mode"

L_.str.1011:                            ## @.str.1011
	.asciz	"   MODE is one of:"

L_.str.1012:                            ## @.str.1012
	.asciz	"     ascii       Columns/rows delimited by 0x1F and 0x1E"

L_.str.1013:                            ## @.str.1013
	.asciz	"     box         Tables using unicode box-drawing characters"

L_.str.1014:                            ## @.str.1014
	.asciz	"     csv         Comma-separated values"

L_.str.1015:                            ## @.str.1015
	.asciz	"     column      Output in columns.  (See .width)"

L_.str.1016:                            ## @.str.1016
	.asciz	"     html        HTML <table> code"

L_.str.1017:                            ## @.str.1017
	.asciz	"     insert      SQL insert statements for TABLE"

L_.str.1018:                            ## @.str.1018
	.asciz	"     json        Results in a JSON array"

L_.str.1019:                            ## @.str.1019
	.asciz	"     line        One value per line"

L_.str.1020:                            ## @.str.1020
	.asciz	"     list        Values delimited by \"|\""

L_.str.1021:                            ## @.str.1021
	.asciz	"     markdown    Markdown table format"

L_.str.1022:                            ## @.str.1022
	.asciz	"     qbox        Shorthand for \"box --width 60 --quote\""

L_.str.1023:                            ## @.str.1023
	.asciz	"     quote       Escape answers as for SQL"

L_.str.1024:                            ## @.str.1024
	.asciz	"     table       ASCII-art table"

L_.str.1025:                            ## @.str.1025
	.asciz	"     tabs        Tab-separated values"

L_.str.1026:                            ## @.str.1026
	.asciz	"     tcl         TCL list elements"

L_.str.1027:                            ## @.str.1027
	.asciz	"   OPTIONS: (for columnar modes or insert mode):"

L_.str.1028:                            ## @.str.1028
	.asciz	"     --wrap N       Wrap output lines to no longer than N characters"

L_.str.1029:                            ## @.str.1029
	.asciz	"     --wordwrap B   Wrap or not at word boundaries per B (on/off)"

L_.str.1030:                            ## @.str.1030
	.asciz	"     --ww           Shorthand for \"--wordwrap 1\""

L_.str.1031:                            ## @.str.1031
	.asciz	"     --quote        Quote output text as SQL literals"

L_.str.1032:                            ## @.str.1032
	.asciz	"     --noquote      Do not quote output text"

L_.str.1033:                            ## @.str.1033
	.asciz	"     TABLE          The name of SQL table used for \"insert\" mode"

L_.str.1034:                            ## @.str.1034
	.asciz	".nonce STRING            Suspend safe mode for one command if nonce matches"

L_.str.1035:                            ## @.str.1035
	.asciz	".nullvalue STRING        Use STRING in place of NULL values"

L_.str.1036:                            ## @.str.1036
	.asciz	".once ?OPTIONS? ?FILE?   Output for the next SQL command only to FILE"

L_.str.1037:                            ## @.str.1037
	.asciz	"     If FILE begins with '|' then open as a pipe"

L_.str.1038:                            ## @.str.1038
	.asciz	"       --bom  Put a UTF8 byte-order mark at the beginning"

L_.str.1039:                            ## @.str.1039
	.asciz	"       -e     Send output to the system text editor"

L_.str.1040:                            ## @.str.1040
	.asciz	"       -x     Send output as CSV to a spreadsheet (same as \".excel\")"

L_.str.1041:                            ## @.str.1041
	.asciz	".open ?OPTIONS? ?FILE?   Close existing database and reopen FILE"

L_.str.1042:                            ## @.str.1042
	.asciz	"        --append        Use appendvfs to append database to the end of FILE"

L_.str.1043:                            ## @.str.1043
	.asciz	"        --deserialize   Load into memory using sqlite3_deserialize()"

L_.str.1044:                            ## @.str.1044
	.asciz	"        --hexdb         Load the output of \"dbtotxt\" as an in-memory db"

L_.str.1045:                            ## @.str.1045
	.asciz	"        --maxsize N     Maximum size for --hexdb or --deserialized database"

L_.str.1046:                            ## @.str.1046
	.asciz	"        --new           Initialize FILE to an empty database"

L_.str.1047:                            ## @.str.1047
	.asciz	"        --nofollow      Do not follow symbolic links"

L_.str.1048:                            ## @.str.1048
	.asciz	"        --readonly      Open FILE readonly"

L_.str.1049:                            ## @.str.1049
	.asciz	"        --zip           FILE is a ZIP archive"

L_.str.1050:                            ## @.str.1050
	.asciz	".output ?FILE?           Send output to FILE or stdout if FILE is omitted"

L_.str.1051:                            ## @.str.1051
	.asciz	"   If FILE begins with '|' then open it as a pipe."

L_.str.1052:                            ## @.str.1052
	.asciz	"     --bom                 Prefix output with a UTF8 byte-order mark"

L_.str.1053:                            ## @.str.1053
	.asciz	"     -e                    Send output to the system text editor"

L_.str.1054:                            ## @.str.1054
	.asciz	"     -x                    Send output as CSV to a spreadsheet"

L_.str.1055:                            ## @.str.1055
	.asciz	".parameter CMD ...       Manage SQL parameter bindings"

L_.str.1056:                            ## @.str.1056
	.asciz	"   clear                   Erase all bindings"

L_.str.1057:                            ## @.str.1057
	.asciz	"   init                    Initialize the TEMP table that holds bindings"

L_.str.1058:                            ## @.str.1058
	.asciz	"   list                    List the current parameter bindings"

L_.str.1059:                            ## @.str.1059
	.asciz	"   set PARAMETER VALUE     Given SQL parameter PARAMETER a value of VALUE"

L_.str.1060:                            ## @.str.1060
	.asciz	"                           PARAMETER should start with one of: $ : @ ?"

L_.str.1061:                            ## @.str.1061
	.asciz	"   unset PARAMETER         Remove PARAMETER from the binding table"

L_.str.1062:                            ## @.str.1062
	.asciz	".print STRING...         Print literal STRING"

L_.str.1063:                            ## @.str.1063
	.asciz	".progress N              Invoke progress handler after every N opcodes"

L_.str.1064:                            ## @.str.1064
	.asciz	"   --limit N                 Interrupt after N progress callbacks"

L_.str.1065:                            ## @.str.1065
	.asciz	"   --once                    Do no more than one progress interrupt"

L_.str.1066:                            ## @.str.1066
	.asciz	"   --quiet|-q                No output except at interrupts"

L_.str.1067:                            ## @.str.1067
	.asciz	"   --reset                   Reset the count for each input and interrupt"

L_.str.1068:                            ## @.str.1068
	.asciz	".prompt MAIN CONTINUE    Replace the standard prompts"

L_.str.1069:                            ## @.str.1069
	.asciz	".quit                    Exit this program"

L_.str.1070:                            ## @.str.1070
	.asciz	".read FILE               Read input from FILE or command output"

L_.str.1071:                            ## @.str.1071
	.asciz	"    If FILE begins with \"|\", it is a command that generates the input."

L_.str.1072:                            ## @.str.1072
	.asciz	".restore ?DB? FILE       Restore content of DB (default \"main\") from FILE"

L_.str.1073:                            ## @.str.1073
	.asciz	".save ?OPTIONS? FILE     Write database to FILE (an alias for .backup ...)"

L_.str.1074:                            ## @.str.1074
	.asciz	".scanstats on|off        Turn sqlite3_stmt_scanstatus() metrics on or off"

L_.str.1075:                            ## @.str.1075
	.asciz	".schema ?PATTERN?        Show the CREATE statements matching PATTERN"

L_.str.1076:                            ## @.str.1076
	.asciz	"      --indent             Try to pretty-print the schema"

L_.str.1077:                            ## @.str.1077
	.asciz	"      --nosys              Omit objects whose names start with \"sqlite_\""

L_.str.1078:                            ## @.str.1078
	.asciz	".selftest ?OPTIONS?      Run tests defined in the SELFTEST table"

L_.str.1079:                            ## @.str.1079
	.asciz	"    Options:"

L_.str.1080:                            ## @.str.1080
	.asciz	"       --init               Create a new SELFTEST table"

L_.str.1081:                            ## @.str.1081
	.asciz	"       -v                   Verbose output"

L_.str.1082:                            ## @.str.1082
	.asciz	".separator COL ?ROW?     Change the column and row separators"

L_.str.1083:                            ## @.str.1083
	.asciz	".sha3sum ...             Compute a SHA3 hash of database content"

L_.str.1084:                            ## @.str.1084
	.asciz	"      --schema              Also hash the sqlite_schema table"

L_.str.1085:                            ## @.str.1085
	.asciz	"      --sha3-224            Use the sha3-224 algorithm"

L_.str.1086:                            ## @.str.1086
	.asciz	"      --sha3-256            Use the sha3-256 algorithm (default)"

L_.str.1087:                            ## @.str.1087
	.asciz	"      --sha3-384            Use the sha3-384 algorithm"

L_.str.1088:                            ## @.str.1088
	.asciz	"      --sha3-512            Use the sha3-512 algorithm"

L_.str.1089:                            ## @.str.1089
	.asciz	"    Any other argument is a LIKE pattern for tables to hash"

L_.str.1090:                            ## @.str.1090
	.asciz	".shell CMD ARGS...       Run CMD ARGS... in a system shell"

L_.str.1091:                            ## @.str.1091
	.asciz	".show                    Show the current values for various settings"

L_.str.1092:                            ## @.str.1092
	.asciz	".stats ?ARG?             Show stats or turn stats on or off"

L_.str.1093:                            ## @.str.1093
	.asciz	"   off                      Turn off automatic stat display"

L_.str.1094:                            ## @.str.1094
	.asciz	"   on                       Turn on automatic stat display"

L_.str.1095:                            ## @.str.1095
	.asciz	"   stmt                     Show statement stats"

L_.str.1096:                            ## @.str.1096
	.asciz	"   vmstep                   Show the virtual machine step count only"

L_.str.1097:                            ## @.str.1097
	.asciz	".system CMD ARGS...      Run CMD ARGS... in a system shell"

L_.str.1098:                            ## @.str.1098
	.asciz	".tables ?TABLE?          List names of tables matching LIKE pattern TABLE"

L_.str.1099:                            ## @.str.1099
	.asciz	".testcase NAME           Begin redirecting output to 'testcase-out.txt'"

L_.str.1100:                            ## @.str.1100
	.asciz	".testctrl CMD ...        Run various sqlite3_test_control() operations"

L_.str.1101:                            ## @.str.1101
	.asciz	"                           Run \".testctrl\" with no arguments for details"

L_.str.1102:                            ## @.str.1102
	.asciz	".timeout MS              Try opening locked tables for MS milliseconds"

L_.str.1103:                            ## @.str.1103
	.asciz	".timer on|off            Turn SQL timer on or off"

L_.str.1104:                            ## @.str.1104
	.asciz	".trace ?OPTIONS?         Output each SQL statement as it is run"

L_.str.1105:                            ## @.str.1105
	.asciz	"    FILE                    Send output to FILE"

L_.str.1106:                            ## @.str.1106
	.asciz	"    stdout                  Send output to stdout"

L_.str.1107:                            ## @.str.1107
	.asciz	"    stderr                  Send output to stderr"

L_.str.1108:                            ## @.str.1108
	.asciz	"    off                     Disable tracing"

L_.str.1109:                            ## @.str.1109
	.asciz	"    --expanded              Expand query parameters"

L_.str.1110:                            ## @.str.1110
	.asciz	"    --plain                 Show SQL as it is input"

L_.str.1111:                            ## @.str.1111
	.asciz	"    --stmt                  Trace statement execution (SQLITE_TRACE_STMT)"

L_.str.1112:                            ## @.str.1112
	.asciz	"    --profile               Profile statements (SQLITE_TRACE_PROFILE)"

L_.str.1113:                            ## @.str.1113
	.asciz	"    --row                   Trace each row (SQLITE_TRACE_ROW)"

L_.str.1114:                            ## @.str.1114
	.asciz	"    --close                 Trace connection close (SQLITE_TRACE_CLOSE)"

L_.str.1115:                            ## @.str.1115
	.asciz	".vfsinfo ?AUX?           Information about the top-level VFS"

L_.str.1116:                            ## @.str.1116
	.asciz	".vfslist                 List all available VFSes"

L_.str.1117:                            ## @.str.1117
	.asciz	".vfsname ?AUX?           Print the name of the VFS stack"

L_.str.1118:                            ## @.str.1118
	.asciz	".width NUM1 NUM2 ...     Set minimum column widths for columnar output"

L_.str.1119:                            ## @.str.1119
	.asciz	"     Negative values right-justify"

L_.str.1120:                            ## @.str.1120
	.asciz	"%s:%d: unescaped %c character\n"

L_.str.1121:                            ## @.str.1121
	.asciz	"%s:%d: unterminated %c-quoted field\n"

L_.str.1122:                            ## @.str.1122
	.asciz	"\\%03o"

	.section	__DATA,__const
	.p2align	3               ## @zAutoColumn.zTabMake
_zAutoColumn.zTabMake:
	.quad	L_.str.1123

	.section	__TEXT,__cstring,cstring_literals
L_.str.1123:                            ## @.str.1123
	.asciz	"CREATE TABLE ColNames( cpos INTEGER PRIMARY KEY, name TEXT, nlen INT, chop INT, reps INT, suff TEXT);CREATE VIEW RepeatedNames AS SELECT DISTINCT t.name FROM ColNames t WHERE t.name COLLATE NOCASE IN ( SELECT o.name FROM ColNames o WHERE o.cpos<>t.cpos);"

	.section	__DATA,__const
	.p2align	3               ## @zAutoColumn.zTabFill
_zAutoColumn.zTabFill:
	.quad	L_.str.1124

	.section	__TEXT,__cstring,cstring_literals
L_.str.1124:                            ## @.str.1124
	.asciz	"INSERT INTO ColNames(name,nlen,chop,reps,suff) VALUES(iif(length(?1)>0,?1,'?'),max(length(?1),1),0,0,'')"

	.section	__DATA,__const
	.p2align	3               ## @zAutoColumn.zHasDupes
_zAutoColumn.zHasDupes:
	.quad	L_.str.1125

	.section	__TEXT,__cstring,cstring_literals
L_.str.1125:                            ## @.str.1125
	.asciz	"SELECT count(DISTINCT (substring(name,1,nlen-chop)||suff) COLLATE NOCASE) <count(name) FROM ColNames"

	.section	__DATA,__const
	.p2align	3               ## @zAutoColumn.zSetReps
_zAutoColumn.zSetReps:
	.quad	L_.str.1126

	.section	__TEXT,__cstring,cstring_literals
L_.str.1126:                            ## @.str.1126
	.asciz	"UPDATE ColNames AS t SET reps=(SELECT count(*) FROM ColNames d  WHERE substring(t.name,1,t.nlen-t.chop)=substring(d.name,1,d.nlen-d.chop) COLLATE NOCASE)"

	.section	__DATA,__const
	.p2align	3               ## @zAutoColumn.zRenameRank
_zAutoColumn.zRenameRank:
	.quad	L_.str.1127

	.section	__TEXT,__cstring,cstring_literals
L_.str.1127:                            ## @.str.1127
	.asciz	"WITH Lzn(nlz) AS (  SELECT 0 AS nlz  UNION  SELECT nlz+1 AS nlz FROM Lzn  WHERE EXISTS(   SELECT 1   FROM ColNames t, ColNames o   WHERE    iif(t.name IN (SELECT * FROM RepeatedNames),     printf('%s_%s',      t.name, substring(printf('%.*c%0.*d',nlz+1,'0',$1,t.cpos),2)),     t.name    )    =    iif(o.name IN (SELECT * FROM RepeatedNames),     printf('%s_%s',      o.name, substring(printf('%.*c%0.*d',nlz+1,'0',$1,o.cpos),2)),     o.name    )    COLLATE NOCASE    AND o.cpos<>t.cpos   GROUP BY t.cpos  )) UPDATE Colnames AS t SET chop = 0, suff = iif(name IN (SELECT * FROM RepeatedNames),  printf('_%s', substring(   printf('%.*c%0.*d',(SELECT max(nlz) FROM Lzn)+1,'0',1,t.cpos),2)),  '' )"

	.section	__DATA,__const
	.p2align	3               ## @zAutoColumn.zCollectVar
_zAutoColumn.zCollectVar:
	.quad	L_.str.1128

	.section	__TEXT,__cstring,cstring_literals
L_.str.1128:                            ## @.str.1128
	.asciz	"SELECT '('||x'0a' || group_concat(  cname||' TEXT',  ','||iif((cpos-1)%4>0, ' ', x'0a'||' ')) ||')' AS ColsSpec FROM ( SELECT cpos, printf('\"%w\"',printf('%.*s%s', nlen-chop,name,suff)) AS cname  FROM ColNames ORDER BY cpos)"

	.section	__DATA,__const
	.p2align	3               ## @zAutoColumn.zRenamesDone
_zAutoColumn.zRenamesDone:
	.quad	L_.str.1129

	.section	__TEXT,__cstring,cstring_literals
L_.str.1129:                            ## @.str.1129
	.asciz	"SELECT group_concat( printf('\"%w\" to \"%w\"',name,printf('%.*s%s', nlen-chop, name, suff)), ','||x'0a')FROM ColNames WHERE suff<>'' OR chop!=0"

L___func__.zAutoColumn:                 ## @__func__.zAutoColumn
	.asciz	"zAutoColumn"

L_.str.1130:                            ## @.str.1130
	.asciz	"pDb!=0"

	.section	__DATA,__data
	.p2align	3               ## @zCOL_DB
_zCOL_DB:
	.quad	L_.str.22

	.section	__TEXT,__cstring,cstring_literals
L_.str.1131:                            ## @.str.1131
	.asciz	"*pDb!=0"

L_.str.1132:                            ## @.str.1132
	.asciz	"rc==SQLITE_DONE"

L_.str.1133:                            ## @.str.1133
	.asciz	"db_int(*pDb, zHasDupes)==0"

L___func__.rc_err_oom_die:              ## @__func__.rc_err_oom_die
	.asciz	"rc_err_oom_die"

L_.str.1134:                            ## @.str.1134
	.asciz	"rc==SQLITE_OK||rc==SQLITE_DONE"

L_.str.1135:                            ## @.str.1135
	.asciz	"fkey-indexes"

L_.str.1136:                            ## @.str.1136
	.asciz	"Usage %s sub-command ?switches...?\n"

L_.str.1137:                            ## @.str.1137
	.asciz	"Where sub-commands are:\n"

L_.str.1138:                            ## @.str.1138
	.asciz	"    fkey-indexes\n"

L_.str.1139:                            ## @.str.1139
	.asciz	"SELECT      'EXPLAIN QUERY PLAN SELECT 1 FROM ' || quote(s.name) || ' WHERE '  || group_concat(quote(s.name) || '.' || quote(f.[from]) || '=?'   || fkey_collate_clause(       f.[table], COALESCE(f.[to], p.[name]), s.name, f.[from]),' AND '),      'SEARCH ' || s.name || ' USING COVERING INDEX*('  || group_concat('*=?', ' AND ') || ')',      s.name  || '(' || group_concat(f.[from],  ', ') || ')',      f.[table] || '(' || group_concat(COALESCE(f.[to], p.[name])) || ')',      'CREATE INDEX ' || quote(s.name ||'_'|| group_concat(f.[from], '_'))  || ' ON ' || quote(s.name) || '('  || group_concat(quote(f.[from]) ||        fkey_collate_clause(          f.[table], COALESCE(f.[to], p.[name]), s.name, f.[from]), ', ')  || ');',      f.[table] FROM sqlite_schema AS s, pragma_foreign_key_list(s.name) AS f LEFT JOIN pragma_table_info AS p ON (pk-1=seq AND p.arg=f.[table]) GROUP BY s.name, f.id ORDER BY (CASE WHEN ? THEN f.[table] ELSE s.name END)"

L_.str.1140:                            ## @.str.1140
	.asciz	"SEARCH * USING INTEGER PRIMARY KEY (rowid=?)"

L_.str.1141:                            ## @.str.1141
	.asciz	"-groupbyparent"

L_.str.1142:                            ## @.str.1142
	.asciz	"    "

L_.str.1143:                            ## @.str.1143
	.asciz	"Usage: %s %s ?-verbose? ?-groupbyparent?\n"

L_.str.1144:                            ## @.str.1144
	.asciz	"fkey_collate_clause"

L_.str.1145:                            ## @.str.1145
	.asciz	"Error: internal error"

L_.str.1146:                            ## @.str.1146
	.asciz	"-- Parent table %s\n"

L_.str.1147:                            ## @.str.1147
	.asciz	"%s%s --> %s\n"

L_.str.1148:                            ## @.str.1148
	.asciz	"%s/* no extra indexes required for %s -> %s */\n"

L___func__.shellFkeyCollateClause:      ## @__func__.shellFkeyCollateClause
	.asciz	"shellFkeyCollateClause"

L_.str.1149:                            ## @.str.1149
	.asciz	"nVal==4"

L_.str.1150:                            ## @.str.1150
	.asciz	"stderr"

L_.str.1151:                            ## @.str.1151
	.asciz	"line"

L_.str.1152:                            ## @.str.1152
	.asciz	"semi"

L_.str.1153:                            ## @.str.1153
	.asciz	"prettyprint"

L_.str.1154:                            ## @.str.1154
	.asciz	"TEMP"

L_.str.1155:                            ## @.str.1155
	.asciz	"TMP"

L_.str.1156:                            ## @.str.1156
	.asciz	"/tmp"

L_.str.1157:                            ## @.str.1157
	.asciz	"%s/temp%llx.%s"

L_.str.1158:                            ## @.str.1158
	.asciz	"%z.%s"

L_.str.1159:                            ## @.str.1159
	.asciz	"CREATE TABLE IF NOT EXISTS temp.sqlite_parameters(\n  key TEXT PRIMARY KEY,\n  value\n) WITHOUT ROWID;"

L_.str.1160:                            ## @.str.1160
	.asciz	"Progress limit reached (%u)\n"

L_.str.1161:                            ## @.str.1161
	.asciz	"Progress %u\n"

L_.str.1162:                            ## @.str.1162
	.asciz	"SAVEPOINT selftest_init;\nCREATE TABLE IF NOT EXISTS selftest(\n  tno INTEGER PRIMARY KEY,\n  op TEXT,\n  cmd TEXT,\n  ans TEXT\n);CREATE TEMP TABLE [_shell$self](op,cmd,ans);\nINSERT INTO [_shell$self](rowid,op,cmd)\n  VALUES(coalesce((SELECT (max(tno)+100)/10 FROM selftest),10),\n         'memo','Tests generated by --init');\nINSERT INTO [_shell$self]\n  SELECT 'run',\n    'SELECT hex(sha3_query(''SELECT type,name,tbl_name,sql FROM sqlite_schema ORDER BY 2'',224))',\n    hex(sha3_query('SELECT type,name,tbl_name,sql FROM sqlite_schema ORDER BY 2',224));\nINSERT INTO [_shell$self]\n  SELECT 'run',    'SELECT hex(sha3_query(''SELECT * FROM \"' ||        printf('%w',name) || '\" NOT INDEXED'',224))',\n    hex(sha3_query(printf('SELECT * FROM \"%w\" NOT INDEXED',name),224))\n  FROM (\n    SELECT name FROM sqlite_schema\n     WHERE type='table'\n       AND name<>'selftest'\n       AND coalesce(rootpage,0)>0\n  )\n ORDER BY name;\nINSERT INTO [_shell$self]\n  VALUES('run','PRAGMA integrity_check','ok');\nINSERT INTO selftest(tno,op,cmd,ans)  SELECT rowid*10,op,cmd,ans FROM [_shell$self];\nDROP TABLE [_shell$self];"

L_.str.1163:                            ## @.str.1163
	.asciz	"SELFTEST initialization failure: %s\n"

L_.str.1164:                            ## @.str.1164
	.asciz	"RELEASE selftest_init"

L_.str.1165:                            ## @.str.1165
	.asciz	"%-36s %d\n"

L_.str.1166:                            ## @.str.1166
	.asciz	"Number of output columns:"

L_.str.1167:                            ## @.str.1167
	.asciz	"Column %d %nname:"

L_.str.1168:                            ## @.str.1168
	.asciz	"%-36s %s\n"

L_.str.1169:                            ## @.str.1169
	.asciz	"declared type:"

L_.str.1170:                            ## @.str.1170
	.asciz	"VM-steps: %d\n"

L_.str.1171:                            ## @.str.1171
	.asciz	"Memory Used:"

L_.str.1172:                            ## @.str.1172
	.asciz	"%lld (max %lld) bytes"

L_.str.1173:                            ## @.str.1173
	.asciz	"Number of Outstanding Allocations:"

L_.str.1174:                            ## @.str.1174
	.asciz	"%lld (max %lld)"

L_.str.1175:                            ## @.str.1175
	.asciz	"Number of Pcache Pages Used:"

L_.str.1176:                            ## @.str.1176
	.asciz	"%lld (max %lld) pages"

L_.str.1177:                            ## @.str.1177
	.asciz	"Number of Pcache Overflow Bytes:"

L_.str.1178:                            ## @.str.1178
	.asciz	"Largest Allocation:"

L_.str.1179:                            ## @.str.1179
	.asciz	"%lld bytes"

L_.str.1180:                            ## @.str.1180
	.asciz	"Largest Pcache Allocation:"

L_.str.1181:                            ## @.str.1181
	.asciz	"Lookaside Slots Used:                %d (max %d)\n"

L_.str.1182:                            ## @.str.1182
	.asciz	"Successful lookaside attempts:       %d\n"

L_.str.1183:                            ## @.str.1183
	.asciz	"Lookaside failures due to size:      %d\n"

L_.str.1184:                            ## @.str.1184
	.asciz	"Lookaside failures due to OOM:       %d\n"

L_.str.1185:                            ## @.str.1185
	.asciz	"Pager Heap Usage:                    %d bytes\n"

L_.str.1186:                            ## @.str.1186
	.asciz	"Page cache hits:                     %d\n"

L_.str.1187:                            ## @.str.1187
	.asciz	"Page cache misses:                   %d\n"

L_.str.1188:                            ## @.str.1188
	.asciz	"Page cache writes:                   %d\n"

L_.str.1189:                            ## @.str.1189
	.asciz	"Page cache spills:                   %d\n"

L_.str.1190:                            ## @.str.1190
	.asciz	"Schema Heap Usage:                   %d bytes\n"

L_.str.1191:                            ## @.str.1191
	.asciz	"Statement Heap/Lookaside Usage:      %d bytes\n"

L_.str.1192:                            ## @.str.1192
	.asciz	"Fullscan Steps:                      %d\n"

L_.str.1193:                            ## @.str.1193
	.asciz	"Sort Operations:                     %d\n"

L_.str.1194:                            ## @.str.1194
	.asciz	"Autoindex Inserts:                   %d\n"

L_.str.1195:                            ## @.str.1195
	.asciz	"Bloom filter bypass taken:           %d/%d\n"

L_.str.1196:                            ## @.str.1196
	.asciz	"Virtual Machine Steps:               %d\n"

L_.str.1197:                            ## @.str.1197
	.asciz	"Reprepare operations:                %d\n"

L_.str.1198:                            ## @.str.1198
	.asciz	"Number of times run:                 %d\n"

L_.str.1199:                            ## @.str.1199
	.asciz	"Memory used by prepared stmt:        %d\n"

L_.str.1200:                            ## @.str.1200
	.asciz	"-- closing database connection\n"

L_.str.1201:                            ## @.str.1201
	.asciz	"%.*s;\n"

L_.str.1202:                            ## @.str.1202
	.asciz	"%.*s; -- %lld ns\n"

.zerofill __DATA,__bss,_shell_exec.zStmtSql,8,3 ## @shell_exec.zStmtSql
L_.str.1203:                            ## @.str.1203
	.asciz	"in prepare"

L_.str.1204:                            ## @.str.1204
	.asciz	"EXPLAIN %s"

L_.str.1205:                            ## @.str.1205
	.asciz	"stepping"

L___func__.expertHandleSQL:             ## @__func__.expertHandleSQL
	.asciz	"expertHandleSQL"

L_.str.1206:                            ## @.str.1206
	.asciz	"pState->expert.pExpert"

L_.str.1207:                            ## @.str.1207
	.asciz	"pzErr==0 || *pzErr==0"

L_.str.1208:                            ## @.str.1208
	.asciz	"%s, %s"

L_.str.1209:                            ## @.str.1209
	.asciz	" (%d)"

.zerofill __DATA,__bss,_savedSelectTrace,4,2 ## @savedSelectTrace
.zerofill __DATA,__bss,_savedWhereTrace,4,2 ## @savedWhereTrace
L_.str.1210:                            ## @.str.1210
	.asciz	"QUERY PLAN\n"

L_.str.1211:                            ## @.str.1211
	.asciz	"%s%s%s\n"

L_.str.1212:                            ## @.str.1212
	.asciz	"|--"

L_.str.1213:                            ## @.str.1213
	.asciz	"`--"

L_.str.1214:                            ## @.str.1214
	.asciz	"|  "

L_.str.1215:                            ## @.str.1215
	.asciz	"   "

L_.str.1216:                            ## @.str.1216
	.asciz	"Next"

L_.str.1217:                            ## @.str.1217
	.asciz	"Prev"

L_.str.1218:                            ## @.str.1218
	.asciz	"VPrev"

L_.str.1219:                            ## @.str.1219
	.asciz	"VNext"

L_.str.1220:                            ## @.str.1220
	.asciz	"SorterNext"

L_.str.1221:                            ## @.str.1221
	.asciz	"Yield"

L_.str.1222:                            ## @.str.1222
	.asciz	"SeekLT"

L_.str.1223:                            ## @.str.1223
	.asciz	"SeekGT"

L_.str.1224:                            ## @.str.1224
	.asciz	"RowSetRead"

L_.str.1225:                            ## @.str.1225
	.asciz	"Rewind"

L_.str.1226:                            ## @.str.1226
	.asciz	"Goto"

	.section	__DATA,__const
	.p2align	4               ## @__const.explain_data_prepare.azGoto
l___const.explain_data_prepare.azGoto:
	.quad	L_.str.1226
	.quad	0

	.section	__DATA,__data
	.p2align	4               ## @explain_data_prepare.explainCols
_explain_data_prepare.explainCols:
	.quad	L_.str.1227
	.quad	L_.str.1228
	.quad	L_.str.1229
	.quad	L_.str.1230
	.quad	L_.str.1231
	.quad	L_.str.1232
	.quad	L_.str.1233
	.quad	L_.str.1234

	.section	__TEXT,__cstring,cstring_literals
L_.str.1227:                            ## @.str.1227
	.asciz	"addr"

L_.str.1228:                            ## @.str.1228
	.asciz	"opcode"

L_.str.1229:                            ## @.str.1229
	.asciz	"p1"

L_.str.1230:                            ## @.str.1230
	.asciz	"p2"

L_.str.1231:                            ## @.str.1231
	.asciz	"p3"

L_.str.1232:                            ## @.str.1232
	.asciz	"p4"

L_.str.1233:                            ## @.str.1233
	.asciz	"p5"

L_.str.1234:                            ## @.str.1234
	.asciz	"comment"

L_.str.1235:                            ## @.str.1235
	.asciz	"]\n"

L_.str.1236:                            ## @.str.1236
	.asciz	"%llu row%s\n"

L_.str.1237:                            ## @.str.1237
	.asciz	"s"

L_.str.1238:                            ## @.str.1238
	.asciz	" | "

L_.str.1239:                            ## @.str.1239
	.asciz	" |\n"

L_.str.1240:                            ## @.str.1240
	.asciz	"+"

L_.str.1241:                            ## @.str.1241
	.asciz	"| "

L_.str.1242:                            ## @.str.1242
	.asciz	"%*s%s%*s"

L_.str.1243:                            ## @.str.1243
	.asciz	" \342\224\202 "

L_.str.1244:                            ## @.str.1244
	.asciz	" \342\224\202\n"

L_.str.1245:                            ## @.str.1245
	.asciz	"\342\224\214"

L_.str.1246:                            ## @.str.1246
	.asciz	"\342\224\254"

L_.str.1247:                            ## @.str.1247
	.asciz	"\342\224\220"

L_.str.1248:                            ## @.str.1248
	.asciz	"\342\224\202 "

L_.str.1249:                            ## @.str.1249
	.asciz	"%*s%s%*s%s"

L_.str.1250:                            ## @.str.1250
	.asciz	"\342\224\234"

L_.str.1251:                            ## @.str.1251
	.asciz	"\342\224\274"

L_.str.1252:                            ## @.str.1252
	.asciz	"\342\224\244"

L_.str.1253:                            ## @.str.1253
	.asciz	"\342\224\224"

L_.str.1254:                            ## @.str.1254
	.asciz	"\342\224\264"

L_.str.1255:                            ## @.str.1255
	.asciz	"\342\224\230"

L_.str.1256:                            ## @.str.1256
	.asciz	"Interrupt\n"

L_.str.1257:                            ## @.str.1257
	.asciz	"x'"

	.p2align	4               ## @__const.print_box_line.zDash
L___const.print_box_line.zDash:
	.asciz	"\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200"

L_.str.1258:                            ## @.str.1258
	.asciz	"sqlite_parameters"

L_.str.1259:                            ## @.str.1259
	.asciz	"key"

L_.str.1260:                            ## @.str.1260
	.asciz	"SELECT value FROM temp.sqlite_parameters WHERE key=?1"

L_.str.1261:                            ## @.str.1261
	.asciz	"?%d"

L_.str.1262:                            ## @.str.1262
	.asciz	"\033[1m%s\033[0m"

.zerofill __DATA,__bss,_find_home_dir.home_dir,8,3 ## @find_home_dir.home_dir
L_.str.1263:                            ## @.str.1263
	.asciz	"HOME"

L_.str.1264:                            ## @.str.1264
	.asciz	"Input nesting limit (%d) reached at line %d. Check recursion.\n"

L_.str.1265:                            ## @.str.1265
	.asciz	";"

L___func__.process_input:               ## @__func__.process_input
	.asciz	"process_input"

L_.str.1266:                            ## @.str.1266
	.asciz	"nAlloc>0 && zSql!=0"

L___func__.quickscan:                   ## @__func__.quickscan
	.asciz	"quickscan"

L_.str.1267:                            ## @.str.1267
	.asciz	"cWait==0"

L_.str.1268:                            ## @.str.1268
	.asciz	"Error"

L_.str.1269:                            ## @.str.1269
	.asciz	"in prepare, "

L_.str.1270:                            ## @.str.1270
	.asciz	"Parse error"

L_.str.1271:                            ## @.str.1271
	.asciz	"stepping, "

L_.str.1272:                            ## @.str.1272
	.asciz	"Runtime error"

L_.str.1273:                            ## @.str.1273
	.asciz	"%s near line %d:"

L_.str.1274:                            ## @.str.1274
	.asciz	"%s:"

L_.str.1275:                            ## @.str.1275
	.asciz	"changes: %lld   total_changes: %lld"

.zerofill __DATA,__bss,_sBegin,144,3    ## @sBegin
.zerofill __DATA,__bss,_iBegin,8,3      ## @iBegin
.zerofill __DATA,__bss,_timeOfDay.clockVfs,8,3 ## @timeOfDay.clockVfs
L_.str.1276:                            ## @.str.1276
	.asciz	"Run Time: real %.3f user %f sys %f\n"

L_.str.1277:                            ## @.str.1277
	.asciz	"%s %s"

L_.str.1278:                            ## @.str.1278
	.asciz	"Failed: [%s]\n"


.subsections_via_symbols
